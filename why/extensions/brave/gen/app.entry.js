/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./gen/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(654);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(13);


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactDefaultInjection = __webpack_require__(19);
	var ReactMount = __webpack_require__(175);
	var ReactReconciler = __webpack_require__(43);
	var ReactUpdates = __webpack_require__(40);
	var ReactVersion = __webpack_require__(180);
	
	var findDOMNode = __webpack_require__(181);
	var getHostComponentFromComposite = __webpack_require__(182);
	var renderSubtreeIntoContainer = __webpack_require__(183);
	var warning = __webpack_require__(27);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (true) {
	  var ExecutionEnvironment = __webpack_require__(31);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	     true ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	     true ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	         true ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (true) {
	  var ReactInstrumentation = __webpack_require__(46);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(184);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(185);
	  var ReactDOMInvalidARIAHook = __webpack_require__(186);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var DOMProperty = __webpack_require__(16);
	var ReactDOMComponentFlags = __webpack_require__(18);
	
	var invariant = __webpack_require__(17);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ?  true ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ?  true ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ?  true ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ?  true ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (true) {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (true) {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName:  true ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (true) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(20);
	var BeforeInputEventPlugin = __webpack_require__(21);
	var ChangeEventPlugin = __webpack_require__(39);
	var DefaultEventPluginOrder = __webpack_require__(59);
	var EnterLeaveEventPlugin = __webpack_require__(60);
	var HTMLDOMPropertyConfig = __webpack_require__(65);
	var ReactComponentBrowserEnvironment = __webpack_require__(66);
	var ReactDOMComponent = __webpack_require__(79);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactDOMEmptyComponent = __webpack_require__(146);
	var ReactDOMTreeTraversal = __webpack_require__(147);
	var ReactDOMTextComponent = __webpack_require__(148);
	var ReactDefaultBatchingStrategy = __webpack_require__(149);
	var ReactEventListener = __webpack_require__(150);
	var ReactInjection = __webpack_require__(153);
	var ReactReconcileTransaction = __webpack_require__(154);
	var SVGDOMPropertyConfig = __webpack_require__(162);
	var SelectEventPlugin = __webpack_require__(163);
	var SimpleEventPlugin = __webpack_require__(164);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(22);
	var ExecutionEnvironment = __webpack_require__(31);
	var FallbackCompositionState = __webpack_require__(32);
	var SyntheticCompositionEvent = __webpack_require__(36);
	var SyntheticInputEvent = __webpack_require__(38);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(23);
	var EventPluginUtils = __webpack_require__(25);
	
	var accumulateInto = __webpack_require__(29);
	var forEachAccumulated = __webpack_require__(30);
	var warning = __webpack_require__(27);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (true) {
	     true ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var EventPluginRegistry = __webpack_require__(24);
	var EventPluginUtils = __webpack_require__(25);
	var ReactErrorUtils = __webpack_require__(26);
	
	var accumulateInto = __webpack_require__(29);
	var forEachAccumulated = __webpack_require__(30);
	var invariant = __webpack_require__(17);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ?  true ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ?  true ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ?  true ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ?  true ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ?  true ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (true) {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames:  true ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ?  true ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (true) {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var ReactErrorUtils = __webpack_require__(26);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (true) {
	       true ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (true) {
	       true ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (true) {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	     true ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (true) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (true) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (true) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ?  true ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (true) {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(28);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (true) {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;

/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ?  true ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var PooledClass = __webpack_require__(34);
	
	var getTextContentAccessor = __webpack_require__(35);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 33 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(37);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var PooledClass = __webpack_require__(34);
	
	var emptyFunction = __webpack_require__(28);
	var warning = __webpack_require__(27);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (true) {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (true) {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (true) {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (true) {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (true) {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	               true ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	     true ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(37);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(23);
	var EventPropagators = __webpack_require__(22);
	var ExecutionEnvironment = __webpack_require__(31);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactUpdates = __webpack_require__(40);
	var SyntheticEvent = __webpack_require__(37);
	
	var getEventTarget = __webpack_require__(56);
	var isEventSupported = __webpack_require__(57);
	var isTextInputElement = __webpack_require__(58);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var CallbackQueue = __webpack_require__(41);
	var PooledClass = __webpack_require__(34);
	var ReactFeatureFlags = __webpack_require__(42);
	var ReactReconciler = __webpack_require__(43);
	var Transaction = __webpack_require__(55);
	
	var invariant = __webpack_require__(17);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ?  true ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ?  true ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ?  true ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ?  true ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ?  true ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ?  true ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ?  true ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(34);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ?  true ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);

/***/ },
/* 42 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(44);
	var ReactInstrumentation = __webpack_require__(46);
	
	var warning = __webpack_require__(27);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	       true ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (true) {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(45);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ?  true ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ?  true ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (true) {
	  var ReactDebugTool = __webpack_require__(47);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(48);
	var ReactHostOperationHistoryHook = __webpack_require__(49);
	var ReactComponentTreeHook = __webpack_require__(50);
	var ExecutionEnvironment = __webpack_require__(31);
	
	var performanceNow = __webpack_require__(53);
	var warning = __webpack_require__(27);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	     true ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	     true ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	     true ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(27);
	
	if (true) {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	     true ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(51);
	
	var ReactCurrentOwner = __webpack_require__(52);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	   true ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ?  true ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  true ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ?  true ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(54);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ?  true ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ?  true ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;

/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(22);
	var ReactDOMComponentTree = __webpack_require__(14);
	var SyntheticMouseEvent = __webpack_require__(61);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(62);
	var ViewportMetrics = __webpack_require__(63);
	
	var getEventModifierState = __webpack_require__(64);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(37);
	
	var getEventTarget = __webpack_require__(56);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 63 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(67);
	var ReactDOMIDOperations = __webpack_require__(78);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(68);
	var Danger = __webpack_require__(74);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactInstrumentation = __webpack_require__(46);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(71);
	var setInnerHTML = __webpack_require__(70);
	var setTextContent = __webpack_require__(72);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (true) {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (true) {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (true) {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (true) {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(69);
	var setInnerHTML = __webpack_require__(70);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(71);
	var setTextContent = __webpack_require__(72);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	var DOMNamespaces = __webpack_require__(69);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(71);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	var escapeTextContentForBrowser = __webpack_require__(73);
	var setInnerHTML = __webpack_require__(70);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var DOMLazyTree = __webpack_require__(68);
	var ExecutionEnvironment = __webpack_require__(31);
	
	var createNodesFromMarkup = __webpack_require__(75);
	var emptyFunction = __webpack_require__(28);
	var invariant = __webpack_require__(17);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ?  true ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	var createArrayFromMixed = __webpack_require__(76);
	var getMarkupWrap = __webpack_require__(77);
	var invariant = __webpack_require__(17);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(67);
	var ReactDOMComponentTree = __webpack_require__(14);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var AutoFocusUtils = __webpack_require__(80);
	var CSSPropertyOperations = __webpack_require__(82);
	var DOMLazyTree = __webpack_require__(68);
	var DOMNamespaces = __webpack_require__(69);
	var DOMProperty = __webpack_require__(16);
	var DOMPropertyOperations = __webpack_require__(90);
	var EventPluginHub = __webpack_require__(23);
	var EventPluginRegistry = __webpack_require__(24);
	var ReactBrowserEventEmitter = __webpack_require__(92);
	var ReactDOMComponentFlags = __webpack_require__(18);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactDOMInput = __webpack_require__(95);
	var ReactDOMOption = __webpack_require__(120);
	var ReactDOMSelect = __webpack_require__(121);
	var ReactDOMTextarea = __webpack_require__(122);
	var ReactInstrumentation = __webpack_require__(46);
	var ReactMultiChild = __webpack_require__(123);
	var ReactServerRenderingTransaction = __webpack_require__(142);
	
	var emptyFunction = __webpack_require__(28);
	var escapeTextContentForBrowser = __webpack_require__(73);
	var invariant = __webpack_require__(17);
	var isEventSupported = __webpack_require__(57);
	var shallowEqual = __webpack_require__(132);
	var validateDOMNesting = __webpack_require__(145);
	var warning = __webpack_require__(27);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	   true ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ?  true ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ?  true ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (true) {
	     true ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	     true ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	     true ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ?  true ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (true) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	     true ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (true) {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ?  true ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ?  true ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ?  true ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (true) {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (true) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (true) {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (true) {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (true) {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (true) {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (true) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (true) {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (true) {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (true) {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ?  true ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (true) {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(14);
	
	var focusNode = __webpack_require__(81);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(83);
	var ExecutionEnvironment = __webpack_require__(31);
	var ReactInstrumentation = __webpack_require__(46);
	
	var camelizeStyleName = __webpack_require__(84);
	var dangerousStyleValue = __webpack_require__(86);
	var hyphenateStyleName = __webpack_require__(87);
	var memoizeStringOnly = __webpack_require__(89);
	var warning = __webpack_require__(27);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (true) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	     true ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	     true ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	     true ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	     true ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (true) {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (true) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (true) {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(85);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 85 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(83);
	var warning = __webpack_require__(27);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (true) {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	           true ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(88);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 88 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactInstrumentation = __webpack_require__(46);
	
	var quoteAttributeValueForBrowser = __webpack_require__(91);
	var warning = __webpack_require__(27);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	   true ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (true) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (true) {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (true) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (true) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(73);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var EventPluginRegistry = __webpack_require__(24);
	var ReactEventEmitterMixin = __webpack_require__(93);
	var ViewportMetrics = __webpack_require__(63);
	
	var getVendorPrefixedEventName = __webpack_require__(94);
	var isEventSupported = __webpack_require__(57);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(23);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var DOMPropertyOperations = __webpack_require__(90);
	var LinkedValueUtils = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactUpdates = __webpack_require__(40);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (true) {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	         true ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	         true ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	         true ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	         true ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	
	    if (true) {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (true) {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	         true ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	         true ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ?  true ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var React = __webpack_require__(97);
	var ReactPropTypesSecret = __webpack_require__(119);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ?  true ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	         true ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var ReactChildren = __webpack_require__(98);
	var ReactComponent = __webpack_require__(106);
	var ReactPureComponent = __webpack_require__(109);
	var ReactClass = __webpack_require__(110);
	var ReactDOMFactories = __webpack_require__(112);
	var ReactElement = __webpack_require__(100);
	var ReactPropTypes = __webpack_require__(116);
	var ReactVersion = __webpack_require__(117);
	
	var onlyChild = __webpack_require__(118);
	var warning = __webpack_require__(27);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (true) {
	  var ReactElementValidator = __webpack_require__(113);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (true) {
	  var warned = false;
	  __spread = function () {
	     true ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	module.exports = React;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(99);
	var ReactElement = __webpack_require__(100);
	
	var emptyFunction = __webpack_require__(28);
	var traverseAllChildren = __webpack_require__(103);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(51);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var ReactCurrentOwner = __webpack_require__(52);
	
	var warning = __webpack_require__(27);
	var canDefineProperty = __webpack_require__(101);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(102);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (true) {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (true) {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	       true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	       true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (true) {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (true) {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (true) {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (true) {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(51);
	
	var ReactCurrentOwner = __webpack_require__(52);
	var REACT_ELEMENT_TYPE = __webpack_require__(102);
	
	var getIteratorFn = __webpack_require__(104);
	var invariant = __webpack_require__(17);
	var KeyEscapeUtils = __webpack_require__(105);
	var warning = __webpack_require__(27);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (true) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (true) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(51);
	
	var ReactNoopUpdateQueue = __webpack_require__(107);
	
	var canDefineProperty = __webpack_require__(101);
	var emptyObject = __webpack_require__(108);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (true) {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	           true ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(27);
	
	function warnNoop(publicInstance, callerName) {
	  if (true) {
	    var constructor = publicInstance.constructor;
	     true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (true) {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var ReactComponent = __webpack_require__(106);
	var ReactNoopUpdateQueue = __webpack_require__(107);
	
	var emptyObject = __webpack_require__(108);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(51),
	    _assign = __webpack_require__(33);
	
	var ReactComponent = __webpack_require__(106);
	var ReactElement = __webpack_require__(100);
	var ReactPropTypeLocationNames = __webpack_require__(111);
	var ReactNoopUpdateQueue = __webpack_require__(107);
	
	var emptyObject = __webpack_require__(108);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (true) {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (true) {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (true) {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	       true ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ?  true ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ?  true ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (true) {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	       true ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ?  true ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ?  true ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ?  true ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (true) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ?  true ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ?  true ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ?  true ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (true) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	         true ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	         true ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (true) {
	         true ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (true) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (true) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ?  true ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (true) {
	       true ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	       true ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (true) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(100);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (true) {
	  var ReactElementValidator = __webpack_require__(113);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(52);
	var ReactComponentTreeHook = __webpack_require__(50);
	var ReactElement = __webpack_require__(100);
	
	var checkReactTypeSpec = __webpack_require__(114);
	
	var canDefineProperty = __webpack_require__(101);
	var getIteratorFn = __webpack_require__(104);
	var warning = __webpack_require__(27);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	   true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	     true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	        info += getDeclarationErrorAddendum();
	         true ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (true) {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	             true ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(51);
	
	var ReactPropTypeLocationNames = __webpack_require__(111);
	var ReactPropTypesSecret = __webpack_require__(115);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && ({"NODE_ENV":"development","BRAVE_PORT":8080}) && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(50);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (true) {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(50);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;

/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(100);
	var ReactPropTypeLocationNames = __webpack_require__(111);
	var ReactPropTypesSecret = __webpack_require__(115);
	
	var emptyFunction = __webpack_require__(28);
	var getIteratorFn = __webpack_require__(104);
	var warning = __webpack_require__(27);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/
	
	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;
	
	function createChainableTypeChecker(validate) {
	  if (true) {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (true) {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	           true ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	     true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	     true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }
	
	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }
	
	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }
	
	  return false;
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.2';

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(51);
	
	var ReactElement = __webpack_require__(100);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ?  true ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;

/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var React = __webpack_require__(97);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactDOMSelect = __webpack_require__(121);
	
	var warning = __webpack_require__(27);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	       true ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (true) {
	       true ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var LinkedValueUtils = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactUpdates = __webpack_require__(40);
	
	var warning = __webpack_require__(27);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	     true ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	       true ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	       true ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (true) {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	       true ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var LinkedValueUtils = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactUpdates = __webpack_require__(40);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ?  true ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (true) {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	         true ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	         true ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (true) {
	           true ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ?  true ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ?  true ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;
	
	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var ReactComponentEnvironment = __webpack_require__(124);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(46);
	
	var ReactCurrentOwner = __webpack_require__(52);
	var ReactReconciler = __webpack_require__(43);
	var ReactChildReconciler = __webpack_require__(126);
	
	var emptyFunction = __webpack_require__(28);
	var flattenChildren = __webpack_require__(141);
	var invariant = __webpack_require__(17);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (true) {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (true) {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (true) {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (true) {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (true) {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ?  true ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (true) {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ?  true ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(43);
	
	var instantiateReactComponent = __webpack_require__(127);
	var KeyEscapeUtils = __webpack_require__(137);
	var shouldUpdateReactComponent = __webpack_require__(133);
	var traverseAllChildren = __webpack_require__(138);
	var warning = __webpack_require__(27);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && ({"NODE_ENV":"development","BRAVE_PORT":8080}) && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(50);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (true) {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(50);
	    }
	    if (!keyUnique) {
	       true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (true) {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var ReactCompositeComponent = __webpack_require__(128);
	var ReactEmptyComponent = __webpack_require__(134);
	var ReactHostComponent = __webpack_require__(135);
	
	var getNextDebugID = __webpack_require__(136);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (true) {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ?  true ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ?  true ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (true) {
	     true ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (true) {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (true) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var React = __webpack_require__(97);
	var ReactComponentEnvironment = __webpack_require__(124);
	var ReactCurrentOwner = __webpack_require__(52);
	var ReactErrorUtils = __webpack_require__(26);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(46);
	var ReactNodeTypes = __webpack_require__(129);
	var ReactReconciler = __webpack_require__(43);
	
	if (true) {
	  var checkReactTypeSpec = __webpack_require__(130);
	}
	
	var emptyObject = __webpack_require__(108);
	var invariant = __webpack_require__(17);
	var shallowEqual = __webpack_require__(132);
	var shouldUpdateReactComponent = __webpack_require__(133);
	var warning = __webpack_require__(27);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (true) {
	     true ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	     true ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (true) {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ?  true ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (true) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	         true ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	       true ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (true) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	       true ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	       true ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	       true ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	       true ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	       true ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	       true ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	       true ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ?  true ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (true) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (true) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (true) {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (true) {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (true) {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (true) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (true) {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (true) {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (true) {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (true) {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ?  true ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (true) {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ?  true ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (true) {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ?  true ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (true) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (true) {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (true) {
	       true ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (true) {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (true) {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (true) {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (true) {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (true) {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (true) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (true) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ?  true ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ?  true ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (true) {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	       true ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var React = __webpack_require__(97);
	
	var invariant = __webpack_require__(17);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ?  true ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var ReactPropTypeLocationNames = __webpack_require__(131);
	var ReactPropTypesSecret = __webpack_require__(119);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && ({"NODE_ENV":"development","BRAVE_PORT":8080}) && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(50);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (true) {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(50);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (true) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;

/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 134 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	var genericComponentClass = null;
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ?  true ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var ReactCurrentOwner = __webpack_require__(52);
	var REACT_ELEMENT_TYPE = __webpack_require__(139);
	
	var getIteratorFn = __webpack_require__(140);
	var invariant = __webpack_require__(17);
	var KeyEscapeUtils = __webpack_require__(137);
	var warning = __webpack_require__(27);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (true) {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (true) {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;

/***/ },
/* 139 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 140 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(137);
	var traverseAllChildren = __webpack_require__(138);
	var warning = __webpack_require__(27);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && ({"NODE_ENV":"development","BRAVE_PORT":8080}) && ("development") === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(50);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (true) {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(50);
	      }
	      if (!keyUnique) {
	         true ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (true) {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var PooledClass = __webpack_require__(34);
	var Transaction = __webpack_require__(55);
	var ReactInstrumentation = __webpack_require__(46);
	var ReactServerUpdateQueue = __webpack_require__(143);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (true) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(144);
	
	var warning = __webpack_require__(27);
	
	function warnNoop(publicInstance, callerName) {
	  if (true) {
	    var constructor = publicInstance.constructor;
	     true ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var ReactCurrentOwner = __webpack_require__(52);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(40);
	
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (true) {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	       true ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (true) {
	     true ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (true) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	         true ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (true) {
	      ReactInstrumentation.debugTool.onSetState();
	       true ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ?  true ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var emptyFunction = __webpack_require__(28);
	var warning = __webpack_require__(27);
	
	var validateDOMNesting = emptyFunction;
	
	if (true) {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	       true ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	         true ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var DOMLazyTree = __webpack_require__(68);
	var ReactDOMComponentTree = __webpack_require__(14);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var invariant = __webpack_require__(17);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ?  true ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ?  true ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ?  true ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15),
	    _assign = __webpack_require__(33);
	
	var DOMChildrenOperations = __webpack_require__(67);
	var DOMLazyTree = __webpack_require__(68);
	var ReactDOMComponentTree = __webpack_require__(14);
	
	var escapeTextContentForBrowser = __webpack_require__(73);
	var invariant = __webpack_require__(17);
	var validateDOMNesting = __webpack_require__(145);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (true) {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ?  true ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var ReactUpdates = __webpack_require__(40);
	var Transaction = __webpack_require__(55);
	
	var emptyFunction = __webpack_require__(28);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var EventListener = __webpack_require__(151);
	var ExecutionEnvironment = __webpack_require__(31);
	var PooledClass = __webpack_require__(34);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactUpdates = __webpack_require__(40);
	
	var getEventTarget = __webpack_require__(56);
	var getUnboundedScrollPosition = __webpack_require__(152);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(28);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (true) {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;

/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	var EventPluginHub = __webpack_require__(23);
	var EventPluginUtils = __webpack_require__(25);
	var ReactComponentEnvironment = __webpack_require__(124);
	var ReactEmptyComponent = __webpack_require__(134);
	var ReactBrowserEventEmitter = __webpack_require__(92);
	var ReactHostComponent = __webpack_require__(135);
	var ReactUpdates = __webpack_require__(40);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var CallbackQueue = __webpack_require__(41);
	var PooledClass = __webpack_require__(34);
	var ReactBrowserEventEmitter = __webpack_require__(92);
	var ReactInputSelection = __webpack_require__(155);
	var ReactInstrumentation = __webpack_require__(46);
	var Transaction = __webpack_require__(55);
	var ReactUpdateQueue = __webpack_require__(144);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (true) {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(156);
	
	var containsNode = __webpack_require__(158);
	var focusNode = __webpack_require__(81);
	var getActiveElement = __webpack_require__(161);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(31);
	
	var getNodeForCharacterOffset = __webpack_require__(157);
	var getTextContentAccessor = __webpack_require__(35);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 157 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(159);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(160);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 160 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 161 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 162 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(22);
	var ExecutionEnvironment = __webpack_require__(31);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactInputSelection = __webpack_require__(155);
	var SyntheticEvent = __webpack_require__(37);
	
	var getActiveElement = __webpack_require__(161);
	var isTextInputElement = __webpack_require__(58);
	var shallowEqual = __webpack_require__(132);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var EventListener = __webpack_require__(151);
	var EventPropagators = __webpack_require__(22);
	var ReactDOMComponentTree = __webpack_require__(14);
	var SyntheticAnimationEvent = __webpack_require__(165);
	var SyntheticClipboardEvent = __webpack_require__(166);
	var SyntheticEvent = __webpack_require__(37);
	var SyntheticFocusEvent = __webpack_require__(167);
	var SyntheticKeyboardEvent = __webpack_require__(168);
	var SyntheticMouseEvent = __webpack_require__(61);
	var SyntheticDragEvent = __webpack_require__(171);
	var SyntheticTouchEvent = __webpack_require__(172);
	var SyntheticTransitionEvent = __webpack_require__(173);
	var SyntheticUIEvent = __webpack_require__(62);
	var SyntheticWheelEvent = __webpack_require__(174);
	
	var emptyFunction = __webpack_require__(28);
	var getEventCharCode = __webpack_require__(169);
	var invariant = __webpack_require__(17);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ?  true ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(37);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(37);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(62);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(62);
	
	var getEventCharCode = __webpack_require__(169);
	var getEventKey = __webpack_require__(170);
	var getEventModifierState = __webpack_require__(64);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 169 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(169);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(61);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(62);
	
	var getEventModifierState = __webpack_require__(64);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(37);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(61);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var DOMLazyTree = __webpack_require__(68);
	var DOMProperty = __webpack_require__(16);
	var React = __webpack_require__(97);
	var ReactBrowserEventEmitter = __webpack_require__(92);
	var ReactCurrentOwner = __webpack_require__(52);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactDOMContainerInfo = __webpack_require__(176);
	var ReactDOMFeatureFlags = __webpack_require__(177);
	var ReactFeatureFlags = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(125);
	var ReactInstrumentation = __webpack_require__(46);
	var ReactMarkupChecksum = __webpack_require__(178);
	var ReactReconciler = __webpack_require__(43);
	var ReactUpdateQueue = __webpack_require__(144);
	var ReactUpdates = __webpack_require__(40);
	
	var emptyObject = __webpack_require__(108);
	var instantiateReactComponent = __webpack_require__(127);
	var invariant = __webpack_require__(17);
	var setInnerHTML = __webpack_require__(70);
	var shouldUpdateReactComponent = __webpack_require__(133);
	var warning = __webpack_require__(27);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (true) {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (true) {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (true) {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	     true ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ?  true ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ?  true ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ?  true ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	     true ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (true) {
	       true ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	             true ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	     true ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ?  true ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (true) {
	       true ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (true) {
	         true ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ?  true ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (true) {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (true) {
	           true ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ?  true ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (true) {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(145);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (true) {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;

/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(179);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 179 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.2';

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(15);
	
	var ReactCurrentOwner = __webpack_require__(52);
	var ReactDOMComponentTree = __webpack_require__(14);
	var ReactInstanceMap = __webpack_require__(125);
	
	var getHostComponentFromComposite = __webpack_require__(182);
	var invariant = __webpack_require__(17);
	var warning = __webpack_require__(27);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (true) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	       true ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ?  true ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ?  true ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(129);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(175);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	var EventPluginRegistry = __webpack_require__(24);
	var ReactComponentTreeHook = __webpack_require__(50);
	
	var warning = __webpack_require__(27);
	
	if (true) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	       true ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	       true ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	     true ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	     true ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(50);
	
	var warning = __webpack_require__(27);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	     true ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(16);
	var ReactComponentTreeHook = __webpack_require__(50);
	
	var warning = __webpack_require__(27);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	       true ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	     true ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	     true ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (true) {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (true) {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	const path = __webpack_require__(189);
	const UrlUtil = __webpack_require__(190);
	const config = __webpack_require__(201);
	
	module.exports.fileUrl = str => {
	  var pathName = path.resolve(str).replace(/\\/g, '/');
	
	  // Windows drive letter must be prefixed with a slash
	  if (pathName[0] !== '/') {
	    pathName = '/' + pathName;
	  }
	
	  return encodeURI('file://' + pathName);
	};
	
	/**
	 * Gets the URL of a page hosted by the braveExtension or torrentExtension
	 * Returns 'chrome-extension://<...>'
	 */
	module.exports.getBraveExtUrl = function (relativeUrl) {
	  if (relativeUrl === undefined) {
	    relativeUrl = '';
	  }
	
	  return 'chrome-extension://' + config.braveExtensionId + '/' + relativeUrl;
	};
	
	/**
	 * Gets the URL of a page hosted by the torrentExtension
	 * Returns 'chrome-extension://<...>'
	 */
	module.exports.getTorrentExtUrl = function (relativeUrl) {
	  if (relativeUrl === undefined) {
	    relativeUrl = '';
	  }
	
	  return 'chrome-extension://' + config.torrentExtensionId + '/' + relativeUrl;
	};
	
	module.exports.getExtensionsPath = function (extensionDir) {
	  return  false ?
	  // the path is different for release builds because extensions are not in the asar file
	  path.join(__dirname, '..', '..', '..', 'extensions', extensionDir) : path.join(__dirname, '..', '..', 'app', 'extensions', extensionDir);
	};
	
	module.exports.getGenDir = function (url) {
	  const genDirRoots = [module.exports.getBraveIndexPath, module.exports.getBraveExtUrl, module.exports.getTorrentExtUrl];
	  for (let i = 0; i < genDirRoots.length; i++) {
	    let genDir = url.replace(genDirRoots[i]('gen'), '');
	    if (genDir !== url) {
	      return 'gen' + genDir;
	    }
	  }
	  return null;
	};
	
	module.exports.getBraveIndexPath = function (relateivePath = '') {
	  return module.exports.fileUrl(path.resolve(__dirname, '..', '..') + '/app/extensions/brave/' + relateivePath).replace('file://', 'chrome://brave');
	};
	
	module.exports.getBraveExtIndexHTML = function () {
	  return  true ? module.exports.getBraveIndexPath('index-dev.html') : module.exports.getBraveIndexPath('index.html');
	};
	
	/**
	 * Returns the URL to the application's manifest
	 */
	module.exports.getManifestUrl = function () {
	  return module.exports.getBraveExtUrl('manifest.webapp');
	};
	
	// Map of source about: URLs mapped to target URLs
	module.exports.aboutUrls = new Immutable.Map({
	  'about:about': module.exports.getBraveExtUrl('about-about.html'),
	  'about:adblock': module.exports.getBraveExtUrl('about-adblock.html'),
	  'about:autofill': module.exports.getBraveExtUrl('about-autofill.html'),
	  'about:blank': module.exports.getBraveExtUrl('about-blank.html'),
	  'about:bookmarks': module.exports.getBraveExtUrl('about-bookmarks.html'),
	  'about:brave': module.exports.getBraveExtUrl('about-brave.html'),
	  'about:certerror': module.exports.getBraveExtUrl('about-certerror.html'),
	  'about:config': module.exports.getBraveExtUrl('about-config.html'),
	  'about:downloads': module.exports.getBraveExtUrl('about-downloads.html'),
	  'about:error': module.exports.getBraveExtUrl('about-error.html'),
	  'about:extensions': module.exports.getBraveExtUrl('about-extensions.html'),
	  'about:history': module.exports.getBraveExtUrl('about-history.html'),
	  'about:newtab': module.exports.getBraveExtUrl('about-newtab.html'),
	  'about:passwords': module.exports.getBraveExtUrl('about-passwords.html'),
	  'about:preferences': module.exports.getBraveExtUrl('about-preferences.html'),
	  'about:safebrowsing': module.exports.getBraveExtUrl('about-safebrowsing.html'),
	  'about:styles': module.exports.getBraveExtUrl('about-styles.html'),
	  'about:contributions': module.exports.getBraveExtUrl('about-contributions.html')
	});
	
	module.exports.isIntermediateAboutPage = location => ['about:safebrowsing', 'about:error', 'about:certerror'].includes(getBaseUrl(location));
	
	module.exports.isNotImplementedAboutPage = location => ['about:config'].includes(getBaseUrl(location));
	
	module.exports.isNavigatableAboutPage = location => !module.exports.isIntermediateAboutPage(location) && !module.exports.isNotImplementedAboutPage(location) && !['about:newtab', 'about:blank', 'about:contributions'].includes(getBaseUrl(location));
	
	// Map of target URLs mapped to source about: URLs
	const aboutUrlsReverse = new Immutable.Map(module.exports.aboutUrls.reduce((obj, v, k) => {
	  obj[v] = k;
	  return obj;
	}, {}));
	
	/**
	 * Obtains the target URL associated with an about: source URL
	 * Example:
	 * about:blank -> http://localhost:8000/about-blank/index.html
	 */
	module.exports.getTargetAboutUrl = function (input) {
	  const hash = getHash(input);
	  const url = module.exports.aboutUrls.get(getBaseUrl(input));
	  return hash && url ? [url, hash].join('#') : url;
	};
	
	/**
	 * Obtains the source about: URL associated with a target URL
	 * Example:
	 * http://localhost:8000/about-blank.html -> about:blank
	 */
	module.exports.getSourceAboutUrl = function (input) {
	  const hash = getHash(input);
	  const url = aboutUrlsReverse.get(getBaseUrl(input));
	  return hash && url ? [url, hash].join('#') : url;
	};
	
	/**
	 * Determines if the passed in string is a source about: URL
	 * Example: isSourceAboutUrl('about:blank') -> true
	 */
	module.exports.isSourceAboutUrl = function (input) {
	  return !!module.exports.getTargetAboutUrl(getBaseUrl(input));
	};
	
	/**
	 * Determines if the passed in string is the target of a source about: URL
	 * Example: isTargetAboutUrl('http://localhost:8000/about-blank/index.html') -> true
	 */
	module.exports.isTargetAboutUrl = function (input) {
	  return !!module.exports.getSourceAboutUrl(getBaseUrl(input));
	};
	
	/**
	 * Obtains the target URL associated with a magnet: source URL
	 * Returns null if the input is not a magnet URL
	 * Example: getTargetMagnetUrl('magnet:...') -> 'chrome-extension://<...>.html#magnet:...'
	 */
	module.exports.getTargetMagnetUrl = function (input) {
	  if (!input.startsWith('magnet:')) {
	    return null;
	  }
	  const url = module.exports.getTorrentExtUrl('webtorrent.html');
	  return [url, input].join('#');
	};
	
	/**
	 * Obtains the source magnet: URL associated with a target URL
	 * Returns null if the input is not the local URL for a magnet link.
	 * Example: getSourceMagnetUrl('chrome-extension://<...>.html#magnet:...') -> 'magnet:...'
	 */
	module.exports.getSourceMagnetUrl = function (input) {
	  if (getBaseUrl(input) !== module.exports.getTorrentExtUrl('webtorrent.html')) return null;
	  const url = decodeURIComponent(getHash(input));
	  return url;
	};
	
	/**
	 * Checks if the input looks like a magnet: URL
	 * Example: getSourceMagnetUrl('magnet:?x=y') -> true
	 */
	module.exports.isSourceMagnetUrl = function (input) {
	  return !!module.exports.getTargetMagnetUrl(input);
	};
	
	/*
	 * Checks if the input looks like the local URL for a magnet link.
	 * Example: getSourceMagnetUrl('chrome-extension://<...>.html#magnet:?x=y') -> true
	 */
	module.exports.isTargetMagnetUrl = function (input) {
	  return !!module.exports.getSourceMagnetUrl(input);
	};
	
	/**
	 * Determines whether a string is a valid URL. Based on node-urlutil.js.
	 * @param {string} input
	 */
	module.exports.isUrl = function (input) {
	  input = input.trim();
	  return UrlUtil.isURL(input);
	};
	
	/**
	 * Gets base url from an about: url or its target mapping.
	 */
	function getBaseUrl(input) {
	  return typeof input === 'string' ? input.split(/#|\?/)[0] : '';
	}
	module.exports.getBaseUrl = getBaseUrl;
	
	/**
	 * Gets hash part of a url
	 */
	function getHash(input) {
	  return typeof input === 'string' ? input.split('#')[1] : '';
	}
	
	module.exports.navigatableTypes = ['http:', 'https:', 'about:', 'chrome:', 'chrome-extension:', 'file:', 'view-source:', 'ftp:', 'magnet:'];
	
	/**
	 * Determine the URL to use when creating a new tab
	 */
	module.exports.newFrameUrl = function () {
	  const { getSetting } = __webpack_require__(202);
	  const settings = __webpack_require__(204);
	  const settingValue = getSetting(settings.NEWTAB_MODE);
	  const { newTabMode } = __webpack_require__(206);
	
	  switch (settingValue) {
	    case newTabMode.HOMEPAGE:
	      const homePage = (getSetting(settings.HOMEPAGE) || 'about:blank').split('|');
	      return homePage[0];
	
	    case newTabMode.DEFAULT_SEARCH_ENGINE:
	      const searchProviders = __webpack_require__(210).providers;
	      const defaultSearchEngine = getSetting(settings.DEFAULT_SEARCH_ENGINE);
	      const defaultSearchEngineSettings = searchProviders.filter(engine => {
	        return engine.name === defaultSearchEngine;
	      });
	      return defaultSearchEngineSettings[0].base;
	
	    case newTabMode.EMPTY_NEW_TAB:
	    case newTabMode.NEW_TAB_PAGE:
	    default:
	      return 'about:newtab';
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, "js/lib"))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  (global.Immutable = factory());
	}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;
	
	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }
	
	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }
	
	
	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }
	
	
	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }
	
	
	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }
	
	
	
	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }
	
	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }
	
	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }
	
	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }
	
	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }
	
	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;
	
	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;
	
	
	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
	
	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';
	
	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;
	
	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};
	
	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };
	
	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }
	
	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }
	
	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}
	
	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }
	
	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }
	
	  function wrapIndex(iter, index) {
	    // This implements "is array index" which the ECMAString spec defines as:
	    //
	    //     A String property name P is an array index if and only if
	    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	    //     to 2^32−1.
	    //
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	    if (typeof index !== 'number') {
	      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	      if ('' + uint32Index !== index || uint32Index === 4294967295) {
	        return NaN;
	      }
	      index = uint32Index;
	    }
	    return index < 0 ? ensureSize(iter) + index : index;
	  }
	
	  function returnTrue() {
	    return true;
	  }
	
	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }
	
	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }
	
	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }
	
	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }
	
	  /* global Symbol */
	
	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;
	
	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';
	
	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
	
	
	  function Iterator(next) {
	      this.next = next;
	    }
	
	    Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };
	
	
	  Iterator.KEYS = ITERATE_KEYS;
	  Iterator.VALUES = ITERATE_VALUES;
	  Iterator.ENTRIES = ITERATE_ENTRIES;
	
	  Iterator.prototype.inspect =
	  Iterator.prototype.toSource = function () { return this.toString(); }
	  Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };
	
	
	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }
	
	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }
	
	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }
	
	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }
	
	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }
	
	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }
	
	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }
	
	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };
	
	    Seq.prototype.toSeq = function() {
	      return this;
	    };
	
	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };
	
	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };
	
	    // abstract __iterateUncached(fn, reverse)
	
	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };
	
	    // abstract __iteratorUncached(type, reverse)
	
	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };
	
	
	
	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }
	
	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };
	
	
	
	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }
	
	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };
	
	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };
	
	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };
	
	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };
	
	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };
	
	
	
	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }
	
	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };
	
	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };
	
	
	
	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;
	
	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';
	
	  Seq.prototype[IS_SEQ_SENTINEL] = true;
	
	
	
	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }
	
	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };
	
	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };
	
	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };
	
	
	
	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }
	
	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };
	
	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };
	
	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };
	
	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };
	
	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;
	
	
	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }
	
	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };
	
	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };
	
	
	
	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }
	
	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	
	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };
	
	
	
	
	  // # pragma Helper functions
	
	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }
	
	  var EMPTY_SEQ;
	
	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }
	
	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }
	
	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }
	
	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }
	
	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }
	
	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }
	
	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }
	
	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }
	
	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }
	
	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }
	
	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }
	
	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	        return true;
	      }
	      if (!valueA || !valueB) {
	        return false;
	      }
	    }
	    if (typeof valueA.equals === 'function' &&
	        typeof valueB.equals === 'function' &&
	        valueA.equals(valueB)) {
	      return true;
	    }
	    return false;
	  }
	
	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }
	
	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }
	
	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }
	
	    var notAssociative = !isAssociative(a);
	
	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }
	
	    var flipped = false;
	
	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        if (typeof a.cacheResult === 'function') {
	          a.cacheResult();
	        }
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }
	
	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });
	
	    return allEqual && a.size === bSize;
	  }
	
	  createClass(Repeat, IndexedSeq);
	
	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }
	
	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };
	
	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };
	
	    Repeat.prototype.includes = function(searchValue) {
	      return is(this._value, searchValue);
	    };
	
	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };
	
	    Repeat.prototype.reverse = function() {
	      return this;
	    };
	
	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };
	
	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };
	
	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };
	
	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };
	
	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };
	
	
	  var EMPTY_REPEAT;
	
	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }
	
	  createClass(Range, IndexedSeq);
	
	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }
	
	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step !== 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };
	
	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };
	
	    Range.prototype.includes = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };
	
	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };
	
	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };
	
	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };
	
	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };
	
	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };
	
	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };
	
	
	  var EMPTY_RANGE;
	
	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }
	
	
	  createClass(KeyedCollection, Collection);function KeyedCollection() {}
	
	  createClass(IndexedCollection, Collection);function IndexedCollection() {}
	
	  createClass(SetCollection, Collection);function SetCollection() {}
	
	
	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;
	
	  var imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };
	
	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }
	
	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      if (o !== o || o === Infinity) {
	        return 0;
	      }
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    if (type === 'object') {
	      return hashJSObj(o);
	    }
	    if (typeof o.toString === 'function') {
	      return hashString(o.toString());
	    }
	    throw new Error('Value type ' + type + ' cannot be hashed.');
	  }
	
	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }
	
	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }
	
	  function hashJSObj(obj) {
	    var hash;
	    if (usingWeakMap) {
	      hash = weakMap.get(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }
	
	    hash = obj[UID_HASH_KEY];
	    if (hash !== undefined) {
	      return hash;
	    }
	
	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash !== undefined) {
	        return hash;
	      }
	
	      hash = getIENodeHash(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }
	
	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }
	
	    if (usingWeakMap) {
	      weakMap.set(obj, hash);
	    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable !== undefined &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType !== undefined) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }
	
	    return hash;
	  }
	
	  // Get references to ES5 object methods.
	  var isExtensible = Object.isExtensible;
	
	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());
	
	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }
	
	  // If possible, use a WeakMap.
	  var usingWeakMap = typeof WeakMap === 'function';
	  var weakMap;
	  if (usingWeakMap) {
	    weakMap = new WeakMap();
	  }
	
	  var objHashUID = 0;
	
	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }
	
	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};
	
	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }
	
	  createClass(Map, KeyedCollection);
	
	    // @pragma Construction
	
	    function Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) && !isOrdered(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }
	
	    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
	      return emptyMap().withMutations(function(map ) {
	        for (var i = 0; i < keyValues.length; i += 2) {
	          if (i + 1 >= keyValues.length) {
	            throw new Error('Missing value for key: ' + keyValues[i]);
	          }
	          map.set(keyValues[i], keyValues[i + 1]);
	        }
	      });
	    };
	
	    Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };
	
	    // @pragma Access
	
	    Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };
	
	    // @pragma Modification
	
	    Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };
	
	    Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };
	
	    Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };
	
	    Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };
	
	    Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };
	
	    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };
	
	    Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };
	
	    // @pragma Composition
	
	    Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };
	
	    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };
	
	    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.merge === 'function' ?
	          m.merge.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };
	
	    Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger, arguments);
	    };
	
	    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
	    };
	
	    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.mergeDeep === 'function' ?
	          m.mergeDeep.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };
	
	    Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };
	
	    Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };
	
	    // @pragma Mutability
	
	    Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };
	
	    Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };
	
	    Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };
	
	    Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };
	
	    Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };
	
	    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };
	
	    Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };
	
	
	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }
	
	  Map.isMap = isMap;
	
	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';
	
	  var MapPrototype = Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;
	
	
	  // #pragma Trie Nodes
	
	
	
	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }
	
	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };
	
	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	
	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;
	
	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }
	
	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);
	
	      if (removed && entries.length === 1) {
	        return; // undefined
	      }
	
	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }
	
	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);
	
	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }
	
	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }
	
	      return new ArrayMapNode(ownerID, newEntries);
	    };
	
	
	
	
	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }
	
	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };
	
	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;
	
	      if (!exists && value === NOT_SET) {
	        return this;
	      }
	
	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	
	      if (newNode === node) {
	        return this;
	      }
	
	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }
	
	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }
	
	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }
	
	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);
	
	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }
	
	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };
	
	
	
	
	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }
	
	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };
	
	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];
	
	      if (removed && !node) {
	        return this;
	      }
	
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }
	
	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }
	
	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);
	
	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }
	
	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };
	
	
	
	
	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }
	
	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };
	
	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	
	      var removed = value === NOT_SET;
	
	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }
	
	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;
	
	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }
	
	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);
	
	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }
	
	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);
	
	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }
	
	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }
	
	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };
	
	
	
	
	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }
	
	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };
	
	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }
	
	      SetRef(didAlter);
	
	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }
	
	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }
	
	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };
	
	
	
	  // #pragma Iterators
	
	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  }
	
	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  }
	
	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  }
	
	  createClass(MapIterator, Iterator);
	
	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }
	
	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };
	
	
	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }
	
	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }
	
	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }
	
	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }
	
	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }
	
	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }
	
	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }
	
	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }
	
	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	
	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);
	
	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }
	
	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }
	
	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }
	
	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }
	
	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }
	
	  function deepMerger(existing, value, key) {
	    return existing && existing.mergeDeep && isIterable(value) ?
	      existing.mergeDeep(value) :
	      is(existing, value) ? existing : value;
	  }
	
	  function deepMergerWith(merger) {
	    return function(existing, value, key)  {
	      if (existing && existing.mergeDeepWith && isIterable(value)) {
	        return existing.mergeDeepWith(merger, value);
	      }
	      var nextValue = merger(existing, value, key);
	      return is(existing, nextValue) ? existing : nextValue;
	    };
	  }
	
	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value, key)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        }
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }
	
	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }
	
	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }
	
	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }
	
	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }
	
	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }
	
	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
	
	  createClass(List, IndexedCollection);
	
	    // @pragma Construction
	
	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }
	
	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };
	
	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };
	
	    // @pragma Access
	
	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index >= 0 && index < this.size) {
	        index += this._origin;
	        var node = listNodeFor(this, index);
	        return node && node.array[index & MASK];
	      }
	      return notSetValue;
	    };
	
	    // @pragma Modification
	
	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };
	
	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };
	
	    List.prototype.insert = function(index, value) {
	      return this.splice(index, 0, value);
	    };
	
	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };
	
	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };
	
	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };
	
	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };
	
	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };
	
	    // @pragma Composition
	
	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };
	
	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };
	
	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger, arguments);
	    };
	
	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMergerWith(merger), iters);
	    };
	
	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };
	
	    // @pragma Iteration
	
	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };
	
	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };
	
	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };
	
	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };
	
	
	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }
	
	  List.isList = isList;
	
	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';
	
	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;
	
	
	
	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }
	
	    // TODO: seems like these methods are very similar
	
	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };
	
	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }
	
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	          return this;
	        }
	      }
	
	      var editable = editableVNode(this, ownerID);
	      editable.array.splice(sizeIndex + 1);
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };
	
	
	
	  var DONE = {};
	
	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;
	
	    return iterateNodeOrLeaf(list._root, list._level, 0);
	
	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }
	
	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }
	
	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }
	
	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }
	
	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }
	
	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);
	
	    if (index !== index) {
	      return list;
	    }
	
	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value)
	      });
	    }
	
	    index += list._origin;
	
	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }
	
	    if (!didAlter.value) {
	      return list;
	    }
	
	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }
	
	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }
	
	    var newNode;
	
	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }
	
	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }
	
	    SetRef(didAlter);
	
	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }
	
	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }
	
	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }
	
	  function setListBounds(list, begin, end) {
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }
	
	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }
	
	    var newLevel = list._level;
	    var newRoot = list._root;
	
	    // New origin might need creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }
	
	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);
	
	    // New size might need creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }
	
	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
	
	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }
	
	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }
	
	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
	
	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;
	
	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }
	
	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }
	
	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }
	
	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }
	
	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }
	
	  createClass(OrderedMap, Map);
	
	    // @pragma Construction
	
	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }
	
	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };
	
	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };
	
	    // @pragma Access
	
	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };
	
	    // @pragma Modification
	
	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };
	
	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };
	
	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };
	
	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };
	
	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };
	
	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };
	
	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };
	
	
	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }
	
	  OrderedMap.isOrderedMap = isOrderedMap;
	
	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
	
	
	
	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }
	
	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }
	
	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }
	
	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }
	
	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };
	
	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };
	
	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };
	
	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };
	
	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };
	
	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          ((ii = reverse ? resolveSize(this) : 0),
	            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };
	
	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };
	
	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;
	
	
	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }
	
	    ToIndexedSequence.prototype.includes = function(value) {
	      return this._iter.includes(value);
	    };
	
	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };
	
	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };
	
	
	
	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }
	
	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.includes(key);
	    };
	
	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };
	
	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };
	
	
	
	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }
	
	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };
	
	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedIterable = isIterable(entry);
	          return fn(
	            indexedIterable ? entry.get(1) : entry[1],
	            indexedIterable ? entry.get(0) : entry[0],
	            this$0
	          );
	        }
	      }, reverse);
	    };
	
	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            var indexedIterable = isIterable(entry);
	            return iteratorValue(
	              type,
	              indexedIterable ? entry.get(0) : entry[0],
	              indexedIterable ? entry.get(1) : entry[1],
	              step
	            );
	          }
	        }
	      });
	    };
	
	
	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;
	
	
	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.includes(key)};
	    flipSequence.includes = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    }
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    }
	    return flipSequence;
	  }
	
	
	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    }
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    }
	    return mappedSequence;
	  }
	
	
	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.includes = function(value ) {return iterable.includes(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }
	
	
	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    }
	    return filterSequence;
	  }
	
	
	  function countByFactory(iterable, grouper, context) {
	    var groups = Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }
	
	
	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }
	
	
	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;
	
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      if (end === Infinity) {
	        end = originalSize;
	      } else {
	        end = end | 0;
	      }
	    }
	
	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }
	
	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);
	
	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size and these do not resolve to NaN.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }
	
	    // Note: resolvedEnd is undefined when the original sequence's length is
	    // unknown and this slice did not supply an end and should contain all
	    // elements after resolvedBegin.
	    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	    var resolvedSize = resolvedEnd - resolvedBegin;
	    var sliceSize;
	    if (resolvedSize === resolvedSize) {
	      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	    }
	
	    var sliceSeq = makeSequence(iterable);
	
	    // If iterable.size is undefined, the size of the realized sliceSeq is
	    // unknown at this point unless the number of items to slice is 0
	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;
	
	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      }
	    }
	
	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };
	
	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize !== 0 && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (skipped++ < resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    }
	
	    return sliceSeq;
	  }
	
	
	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }
	
	
	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }
	
	
	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});
	
	    if (iters.length === 0) {
	      return iterable;
	    }
	
	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }
	
	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }
	
	
	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    }
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    }
	    return flatSequence;
	  }
	
	
	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }
	
	
	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }
	
	
	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }
	
	
	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }
	
	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }
	
	
	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }
	
	
	  // #pragma Helper Functions
	
	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }
	
	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }
	
	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }
	
	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }
	
	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }
	
	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }
	
	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }
	
	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }
	
	  createClass(Record, KeyedCollection);
	
	    function Record(defaultValues, name) {
	      var hasInitialized;
	
	      var RecordType = function Record(values) {
	        if (values instanceof RecordType) {
	          return values;
	        }
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        if (!hasInitialized) {
	          hasInitialized = true;
	          var keys = Object.keys(defaultValues);
	          setProps(RecordTypePrototype, keys);
	          RecordTypePrototype.size = keys.length;
	          RecordTypePrototype._name = name;
	          RecordTypePrototype._keys = keys;
	          RecordTypePrototype._defaultValues = defaultValues;
	        }
	        this._map = Map(values);
	      };
	
	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;
	
	      return RecordType;
	    }
	
	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };
	
	    // @pragma Access
	
	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };
	
	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };
	
	    // @pragma Modification
	
	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var RecordType = this.constructor;
	      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
	    };
	
	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      if (this._map && !this._map.has(k)) {
	        var defaultVal = this._defaultValues[k];
	        if (v === defaultVal) {
	          return this;
	        }
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };
	
	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };
	
	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };
	
	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };
	
	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };
	
	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };
	
	
	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;
	
	
	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }
	
	  function recordName(record) {
	    return record._name || record.constructor.name || 'Record';
	  }
	
	  function setProps(prototype, names) {
	    try {
	      names.forEach(setProp.bind(undefined, prototype));
	    } catch (error) {
	      // Object.defineProperty failed. Probably IE8.
	    }
	  }
	
	  function setProp(prototype, name) {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      }
	    });
	  }
	
	  createClass(Set, SetCollection);
	
	    // @pragma Construction
	
	    function Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) && !isOrdered(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }
	
	    Set.of = function(/*...values*/) {
	      return this(arguments);
	    };
	
	    Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };
	
	    Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };
	
	    // @pragma Access
	
	    Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };
	
	    // @pragma Modification
	
	    Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };
	
	    Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };
	
	    Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };
	
	    // @pragma Composition
	
	    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };
	
	    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };
	
	    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };
	
	    Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };
	
	    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };
	
	    Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };
	
	    Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };
	
	    Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };
	
	    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };
	
	    Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };
	
	    Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };
	
	
	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }
	
	  Set.isSet = isSet;
	
	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';
	
	  var SetPrototype = Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;
	
	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;
	
	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }
	
	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }
	
	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }
	
	  createClass(OrderedSet, Set);
	
	    // @pragma Construction
	
	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }
	
	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };
	
	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };
	
	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };
	
	
	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }
	
	  OrderedSet.isOrderedSet = isOrderedSet;
	
	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;
	
	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;
	
	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }
	
	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }
	
	  createClass(Stack, IndexedCollection);
	
	    // @pragma Construction
	
	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }
	
	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };
	
	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };
	
	    // @pragma Access
	
	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };
	
	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };
	
	    // @pragma Modification
	
	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };
	
	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };
	
	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };
	
	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };
	
	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };
	
	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };
	
	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };
	
	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };
	
	    // @pragma Mutability
	
	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };
	
	    // @pragma Iteration
	
	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };
	
	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };
	
	
	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }
	
	  Stack.isStack = isStack;
	
	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';
	
	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;
	
	
	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }
	
	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }
	
	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }
	
	  Iterable.Iterator = Iterator;
	
	  mixin(Iterable, {
	
	    // ### Conversion to other types
	
	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },
	
	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },
	
	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },
	
	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },
	
	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },
	
	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Map(this.toKeyedSeq());
	    },
	
	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },
	
	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },
	
	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },
	
	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Set(isKeyed(this) ? this.valueSeq() : this);
	    },
	
	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },
	
	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },
	
	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },
	
	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },
	
	
	    // ### Common JavaScript methods and properties
	
	    toString: function() {
	      return '[Iterable]';
	    },
	
	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },
	
	
	    // ### ES6 Collection methods (ES6 Array and Map)
	
	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },
	
	    includes: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },
	
	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },
	
	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },
	
	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },
	
	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },
	
	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },
	
	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },
	
	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },
	
	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },
	
	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },
	
	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },
	
	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },
	
	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },
	
	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },
	
	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },
	
	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },
	
	
	    // ### More sequential methods
	
	    butLast: function() {
	      return this.slice(0, -1);
	    },
	
	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },
	
	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },
	
	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },
	
	    equals: function(other) {
	      return deepEqual(this, other);
	    },
	
	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },
	
	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },
	
	    findEntry: function(predicate, context, notSetValue) {
	      var found = notSetValue;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },
	
	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },
	
	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },
	
	    findLastEntry: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
	    },
	
	    findLastKey: function(predicate, context) {
	      return this.toKeyedSeq().reverse().findKey(predicate, context);
	    },
	
	    first: function() {
	      return this.find(returnTrue);
	    },
	
	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },
	
	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },
	
	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },
	
	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },
	
	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },
	
	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },
	
	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },
	
	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },
	
	    isSubset: function(iter) {
	      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.includes(value)});
	    },
	
	    isSuperset: function(iter) {
	      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
	      return iter.isSubset(this);
	    },
	
	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },
	
	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },
	
	    last: function() {
	      return this.toSeq().reverse().first();
	    },
	
	    lastKeyOf: function(searchValue) {
	      return this.toKeyedSeq().reverse().keyOf(searchValue);
	    },
	
	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },
	
	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },
	
	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },
	
	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },
	
	    rest: function() {
	      return this.slice(1);
	    },
	
	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },
	
	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },
	
	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },
	
	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },
	
	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },
	
	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },
	
	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },
	
	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },
	
	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },
	
	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },
	
	
	    // ### Hashable Object
	
	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    }
	
	
	    // ### Internal
	
	    // abstract __iterate(fn, reverse)
	
	    // abstract __iterator(type, reverse)
	  });
	
	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';
	
	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;
	  IterablePrototype.contains = IterablePrototype.includes;
	
	  mixin(KeyedIterable, {
	
	    // ### More sequential methods
	
	    flip: function() {
	      return reify(this, flipFactory(this));
	    },
	
	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },
	
	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    }
	
	  });
	
	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};
	
	
	
	  mixin(IndexedIterable, {
	
	    // ### Conversion to other types
	
	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },
	
	
	    // ### ES6 Collection methods (ES6 Array and Map)
	
	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },
	
	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },
	
	    indexOf: function(searchValue) {
	      var key = this.keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },
	
	    lastIndexOf: function(searchValue) {
	      var key = this.lastKeyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },
	
	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },
	
	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },
	
	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      // If index is negative, it should resolve relative to the size of the
	      // collection. However size may be expensive to compute if not cached, so
	      // only call count() if the number is in fact negative.
	      index = resolveBegin(index, index < 0 ? this.count() : this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },
	
	
	    // ### More collection methods
	
	    findLastIndex: function(predicate, context) {
	      var entry = this.findLastEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },
	
	    first: function() {
	      return this.get(0);
	    },
	
	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },
	
	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },
	
	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },
	
	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },
	
	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },
	
	    keySeq: function() {
	      return Range(0, this.size);
	    },
	
	    last: function() {
	      return this.get(-1);
	    },
	
	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },
	
	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },
	
	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    }
	
	  });
	
	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;
	
	
	
	  mixin(SetIterable, {
	
	    // ### ES6 Collection methods (ES6 Array and Map)
	
	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },
	
	    includes: function(value) {
	      return this.has(value);
	    },
	
	
	    // ### More sequential methods
	
	    keySeq: function() {
	      return this.valueSeq();
	    }
	
	  });
	
	  SetIterable.prototype.has = IterablePrototype.includes;
	  SetIterable.prototype.contains = SetIterable.prototype.includes;
	
	
	  // Mixin subclasses
	
	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);
	
	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);
	
	
	  // #pragma Helper functions
	
	  function keyMapper(v, k) {
	    return k;
	  }
	
	  function entryMapper(v, k) {
	    return [k, v];
	  }
	
	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }
	
	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }
	
	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : String(value);
	  }
	
	  function defaultZipper() {
	    return arrCopy(arguments);
	  }
	
	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }
	
	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }
	
	  function murmurHashOfSize(size, h) {
	    h = imul(h, 0xCC9E2D51);
	    h = imul(h << 15 | h >>> -15, 0x1B873593);
	    h = imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }
	
	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }
	
	  var Immutable = {
	
	    Iterable: Iterable,
	
	    Seq: Seq,
	    Collection: Collection,
	    Map: Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: Set,
	    OrderedSet: OrderedSet,
	
	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,
	
	    is: is,
	    fromJS: fromJS
	
	  };
	
	  return Immutable;
	
	}));

/***/ },
/* 189 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	// characters, then : with optional //
	
	const rscheme = /^(?:[a-z\u00a1-\uffff0-9-+]+)(?::(\/\/)?)(?!\d)/i;
	const defaultScheme = 'http://';
	const fileScheme = 'file://';
	const os = __webpack_require__(191);
	const urlParse = __webpack_require__(192);
	const urlFormat = __webpack_require__(194).format;
	const pdfjsExtensionId = __webpack_require__(201).PDFJSExtensionId;
	
	/**
	 * A simple class for parsing and dealing with URLs.
	 * @class UrlUtil
	 */
	const UrlUtil = {
	
	  /**
	   * Extracts the scheme from a value.
	   * @param {String} input The input value.
	   * @returns {String} The found scheme.
	   */
	  getScheme: function (input) {
	    // This function returns one of following:
	    // - scheme + ':' (ex. http:)
	    // - scheme + '://' (ex. http://)
	    // - null
	    let scheme = (rscheme.exec(input) || [])[0];
	    return scheme === 'localhost://' ? null : scheme;
	  },
	
	  /**
	   * Checks if an input has a scheme (e.g., http:// or ftp://).
	   * @param {String} input The input value.
	   * @returns {Boolean} Whether or not the input has a scheme.
	   */
	  hasScheme: function (input) {
	    return !!UrlUtil.getScheme(input);
	  },
	
	  /**
	   * Prepends file scheme for file paths, otherwise the default scheme
	   * @param {String} input path, with opetional schema
	   * @returns {String} path with a scheme
	   */
	  prependScheme: function (input) {
	    if (input === undefined || input === null) {
	      return input;
	    }
	
	    // expand relative path
	    if (input.startsWith('~/')) {
	      input = input.replace(/^~/, os.homedir());
	    }
	
	    // detect absolute file paths
	    if (input.startsWith('/')) {
	      input = fileScheme + input;
	    }
	
	    // If there's no scheme, prepend the default scheme
	    if (!UrlUtil.hasScheme(input)) {
	      input = defaultScheme + input;
	    }
	
	    return input;
	  },
	
	  canParseURL: function (input) {
	    if (typeof window === 'undefined') {
	      return true;
	    }
	    try {
	      let url = new window.URL(input);
	      return !!url;
	    } catch (e) {
	      return false;
	    }
	  },
	
	  isImageAddress(url) {
	    return url.match(/\.(jpeg|jpg|gif|png|bmp)$/);
	  },
	
	  isHttpAddress(url) {
	    return url.match(/^https?:\/\/(.*)/);
	  },
	
	  /**
	   * Checks if a string is not a URL.
	   * @param {String} input The input value.
	   * @returns {Boolean} Returns true if this is not a valid URL.
	   */
	  isNotURL: function (input) {
	    if (input === undefined || input === null) {
	      return true;
	    }
	    if (typeof input !== 'string') {
	      return true;
	    }
	    // for cases where we have scheme and we dont want spaces in domain names
	    const caseDomain = /^[\w]{2,5}:\/\/[^\s\/]+\//;
	    // for cases, quoted strings
	    const case1Reg = /^".*"$/;
	    // for cases:
	    // - starts with "?" or "."
	    // - contains "? "
	    // - ends with "." (and was not preceded by a domain or /)
	    const case2Reg = /(^\?)|(\?.+\s)|(^\.)|(^[^.+\..+]*[^\/]*\.$)/;
	    // for cases, pure string
	    const case3Reg = /[\?\.\/\s:]/;
	    // for cases, data:uri, view-source:uri and about
	    const case4Reg = /^(data|view-source|mailto|about|chrome-extension|magnet):.*/;
	
	    let str = input.trim();
	    const scheme = UrlUtil.getScheme(str);
	
	    if (str.toLowerCase() === 'localhost') {
	      return false;
	    }
	    if (case1Reg.test(str)) {
	      return true;
	    }
	    if (case2Reg.test(str) || !case3Reg.test(str) || scheme === undefined && /\s/g.test(str)) {
	      return true;
	    }
	    if (case4Reg.test(str)) {
	      return !UrlUtil.canParseURL(str);
	    }
	    if (scheme && scheme !== 'file://') {
	      return !caseDomain.test(str + '/');
	    }
	    str = UrlUtil.prependScheme(str);
	    return !UrlUtil.canParseURL(str);
	  },
	
	  /**
	   * Converts an input string into a URL.
	   * @param {String} input The input value.
	   * @returns {String} The formatted URL.
	   */
	  getUrlFromInput: function (input) {
	    if (input === undefined || input === null) {
	      return '';
	    }
	
	    input = input.trim();
	
	    input = UrlUtil.prependScheme(input);
	
	    if (UrlUtil.isNotURL(input)) {
	      return input;
	    }
	
	    try {
	      return new window.URL(input).href;
	    } catch (e) {
	      return input;
	    }
	  },
	
	  /**
	   * Checks if a given input is a valid URL.
	   * @param {String} input The input URL.
	   * @returns {Boolean} Whether or not this is a valid URL.
	   */
	  isURL: function (input) {
	    return !UrlUtil.isNotURL(input);
	  },
	
	  /**
	   * Checks if a URL has a given file type.
	   * @param {string} url - URL to check
	   * @param {string} ext - File extension
	   * @return {boolean}
	   */
	  isFileType: function (url, ext) {
	    const pathname = urlParse(url).pathname;
	    if (!pathname) {
	      return false;
	    }
	    return pathname.toLowerCase().endsWith('.' + ext);
	  },
	
	  /**
	   * Checks if a URL is a view-source URL.
	   * @param {String} input The input URL.
	   * @returns {Boolean} Whether or not this is a view-source URL.
	   */
	  isViewSourceUrl: function (url) {
	    return url.toLowerCase().startsWith('view-source:');
	  },
	
	  /**
	   * Checks if a url is a data url.
	   * @param {String} input The input url.
	   * @returns {Boolean} Whether or not this is a data url.
	   */
	  isDataUrl: function (url) {
	    return url.toLowerCase().startsWith('data:');
	  },
	
	  /**
	   * Checks if a url is an image data url.
	   * @param {String} input The input url.
	   * @returns {Boolean} Whether or not this is an image data url.
	   */
	  isImageDataUrl: function (url) {
	    return url.toLowerCase().startsWith('data:image/');
	  },
	
	  /**
	   * Converts a view-source url into a standard url.
	   * @param {String} input The view-source url.
	   * @returns {String} A normal url.
	   */
	  getUrlFromViewSourceUrl: function (input) {
	    if (!UrlUtil.isViewSourceUrl(input)) {
	      return input;
	    }
	    return UrlUtil.getUrlFromInput(input.substring('view-source:'.length));
	  },
	
	  /**
	   * Converts a URL into a view-source URL.
	   * @param {String} input The input URL.
	   * @returns {String} The view-source URL.
	   */
	  getViewSourceUrlFromUrl: function (input) {
	    if (UrlUtil.isImageAddress(input) || !UrlUtil.isHttpAddress(input)) {
	      return null;
	    }
	    if (UrlUtil.isViewSourceUrl(input)) {
	      return input;
	    }
	
	    // Normalizes the actual URL before the view-source: scheme like prefix.
	    return 'view-source:' + UrlUtil.getUrlFromViewSourceUrl(input);
	  },
	
	  /**
	   * Extracts the hostname or returns undefined.
	   * @param {String} input The input URL.
	   * @returns {String} The host name.
	   */
	  getHostname: function (input, excludePort) {
	    try {
	      if (excludePort) {
	        return new window.URL(input).hostname;
	      }
	      return new window.URL(input).host;
	    } catch (e) {
	      return undefined;
	    }
	  },
	
	  /**
	   * Gets applicable hostname patterns for a given URL. Ex: for x.y.google.com,
	   * rulesets matching x.y.google.com, *.y.google.com, and *.google.com are
	   * applicable.
	   * @param {string} url The url to get hostname patterns for
	   * @return {Array.<string>}
	   */
	  getHostnamePatterns: function (url) {
	    var host = urlParse(url).hostname;
	    if (!host) {
	      return [];
	    }
	    var hostPatterns = [host];
	    var segmented = host.split('.');
	
	    // Since targets can contain a single wildcard, replace each label of the
	    // hostname with "*" in turn.
	    segmented.forEach((label, index) => {
	      // copy the original array
	      var tmp = segmented.slice();
	      tmp[index] = '*';
	      hostPatterns.push(tmp.join('.'));
	    });
	    // Now eat away from the left with * so that for x.y.z.google.com we also
	    // check *.z.google.com and *.google.com.
	    for (var i = 2; i <= segmented.length - 2; ++i) {
	      hostPatterns.push('*.' + segmented.slice(i, segmented.length).join('.'));
	    }
	    return hostPatterns;
	  },
	
	  /**
	   * Gets PDF location from a potential PDFJS URL
	   * @param {string} url
	   * @return {string}
	   */
	  getLocationIfPDF: function (url) {
	    if (url && url.startsWith(`chrome-extension://${pdfjsExtensionId}/`)) {
	      return url.replace(/^chrome-extension:\/\/.+\/(\w+:\/\/.+)/, '$1');
	    }
	    return url;
	  },
	
	  /**
	   * Gets location to display in the urlbar
	   * @param {string} url
	   * @param {boolean} pdfjsEnabled
	   * @return {string}
	   */
	  getDisplayLocation: function (url, pdfjsEnabled) {
	    if (!url || url === 'about:newtab') {
	      return '';
	    }
	    url = pdfjsEnabled ? UrlUtil.getLocationIfPDF(url) : url;
	    const parsed = urlParse(url);
	    if (parsed && parsed.auth) {
	      parsed.auth = null;
	      return urlFormat(parsed);
	    } else {
	      return url;
	    }
	  },
	
	  /**
	   * Gets the default favicon URL for a URL.
	   * @param {string} url The URL to find a favicon for
	   * @return {string} url The base favicon URL
	   */
	  getDefaultFaviconUrl: function (url) {
	    if (UrlUtil.isURL(url)) {
	      const loc = new window.URL(url);
	      return loc.protocol + '//' + loc.host + '/favicon.ico';
	    }
	    return '';
	  }
	};
	
	module.exports = UrlUtil;

/***/ },
/* 191 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };
	
	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};
	
	exports.loadavg = function () { return [] };
	
	exports.uptime = function () { return 0 };
	
	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};
	
	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};
	
	exports.cpus = function () { return [] };
	
	exports.type = function () { return 'Browser' };
	
	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};
	
	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };
	
	exports.arch = function () { return 'javascript' };
	
	exports.platform = function () { return 'browser' };
	
	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};
	
	exports.EOL = '\n';


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const LRUCache = __webpack_require__(193).LRUCache;
	const urlParse = __webpack_require__(194).parse;
	const config = __webpack_require__(201);
	let cachedUrlParse = new LRUCache(config.cache.urlParse);
	
	module.exports = (url, ...args) => {
	  let parsedUrl = cachedUrlParse.get(url);
	  if (parsedUrl) {
	    return parsedUrl;
	  }
	
	  parsedUrl = urlParse(url, ...args);
	  cachedUrlParse.put(url, parsedUrl);
	  return parsedUrl;
	};

/***/ },
/* 193 */
/***/ function(module, exports) {

	/**
	 * A doubly linked list-based Least Recently Used (LRU) cache. Will keep most
	 * recently used items while discarding least recently used items when its limit
	 * is reached.
	 *
	 * Licensed under MIT. Copyright (c) 2016 Rasmus Andersson <http://hunch.se/>,
	 * Ben Woosley. See README.md for details.
	 *
	 * Illustration of the design:
	 *
	 *       entry             entry             entry             entry
	 *       ______            ______            ______            ______
	 *      | head |.newer => |      |.newer => |      |.newer => | tail |
	 *      |  A   |          |  B   |          |  C   |          |  D   |
	 *      |______| <= older.|______| <= older.|______| <= older.|______|
	 *
	 *  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added
	 */
	function LRUCache (limit) {
	  // Current size of the cache. (Read-only).
	  this.size = 0
	  // Maximum number of items this cache can hold.
	  this.limit = limit
	  this._keymap = {}
	}
	
	/**
	 * Put <value> into the cache associated with <key>. Returns the entry which was
	 * removed to make room for the new entry. Otherwise undefined is returned
	 * (i.e. if there was enough room already).
	 */
	LRUCache.prototype.put = function (key, value) {
	  var entry = {key: key, value: value}
	  // Note: No protection agains replacing, and thus orphan entries. By design.
	  this._keymap[key] = entry
	  if (this.tail) {
	    // link previous tail to the new tail (entry)
	    this.tail.newer = entry
	    entry.older = this.tail
	  } else {
	    // we're first in -- yay
	    this.head = entry
	  }
	  // add new entry to the end of the linked list -- it's now the freshest entry.
	  this.tail = entry
	  if (this.size === this.limit) {
	    // we hit the limit -- remove the head
	    return this.shift()
	  } else {
	    // increase the size counter
	    this.size++
	  }
	}
	
	/**
	 * Purge the least recently used (oldest) entry from the cache. Returns the
	 * removed entry or undefined if the cache was empty.
	 *
	 * If you need to perform any form of finalization of purged items, this is a
	 * good place to do it. Simply override/replace this function:
	 *
	 *   var c = new LRUCache(123);
	 *   c.shift = function() {
	 *     var entry = LRUCache.prototype.shift.call(this);
	 *     doSomethingWith(entry);
	 *     return entry;
	 *   }
	 */
	LRUCache.prototype.shift = function () {
	  // todo: handle special case when limit == 1
	  var entry = this.head
	  if (entry) {
	    if (this.head.newer) {
	      // advance the list
	      this.head = this.head.newer
	      this.head.older = undefined
	    } else {
	      // the cache is exhausted
	      this.head = undefined
	      this.tail = undefined
	    }
	    // Remove last strong reference to <entry> and remove links from the purged
	    // entry being returned:
	    entry.newer = entry.older = undefined
	    // delete is slow, but we need to do this to avoid uncontrollable growth:
	    delete this._keymap[entry.key]
	    this.size--
	  }
	  return entry
	}
	
	/**
	 * Get and register recent use of <key>. Returns the value associated with <key>
	 * or undefined if not in cache.
	 */
	LRUCache.prototype.get = function (key, returnEntry) {
	  // First, find our cache entry
	  var entry = this._keymap[key]
	  if (entry === undefined) {
	    return // Not cached. Sorry.
	  }
	  // As <key> was found in the cache, register it as being requested recently
	  if (entry === this.tail) {
	    // Already the most recenlty used entry, so no need to update the list
	    return returnEntry ? entry : entry.value
	  }
	  // HEAD--------------TAIL
	  //   <.older   .newer>
	  //  <--- add direction --
	  //   A  B  C  <D>  E
	  if (entry.newer) {
	    if (entry === this.head) {
	      this.head = entry.newer
	    }
	    entry.newer.older = entry.older // C <-- E.
	  }
	  if (entry.older) {
	    entry.older.newer = entry.newer // C. --> E
	  }
	  entry.newer = undefined // D --x
	  entry.older = this.tail // D. --> E
	  if (this.tail) {
	    this.tail.newer = entry // E. <-- D
	  }
	  this.tail = entry
	  return returnEntry ? entry : entry.value
	}
	
	// Export ourselves
	if (typeof this === 'object') {
	  this.LRUCache = LRUCache
	}


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var punycode = __webpack_require__(195);
	var util = __webpack_require__(197);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(198);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(196)(module), (function() { return this; }())))

/***/ },
/* 196 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 197 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(199);
	exports.encode = exports.stringify = __webpack_require__(200);


/***/ },
/* 199 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 200 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	// VAULT_HOST can be set to:
	// https://vault.brave.com for production
	// https://vault-staging.brave.com for a dev build
	// http://localhost:3000 for production
	const vaultHost = ({"NODE_ENV":"development","BRAVE_PORT":8080}).VAULT_HOST || 'https://vault-staging.brave.com';
	const adHost = ({"NODE_ENV":"development","BRAVE_PORT":8080}).AD_HOST || 'https://oip.brave.com';
	
	module.exports = {
	  cache: {
	    urlParse: 30
	  },
	  zoom: {
	    defaultValue: 0,
	    // Each zoomLevel is multiplied by 20 to get the percentage offset from 100. That's 0.05 per percentage offset.
	    zoomLevels: [-3.75, -3.35, -2.5, -1.65, -1.25, -0.5, -0.25, 0, 0.25, 0.5, 1.25, 2.5, 3.75, 5, 7.5, 10, 15, 20]
	  },
	  fingerprintingInfoUrl: 'https://github.com/brave/browser-laptop/wiki/Fingerprinting-Protection-Mode',
	  maxClosedFrames: 100,
	  thumbnail: {
	    width: 160,
	    height: 100
	  },
	  defaultLocale: 'en-US',
	  defaultUrl: 'about:newtab',
	  urlBarSuggestions: {
	    maxOpenedFrames: 2,
	    maxBookmarkSites: 2,
	    maxHistorySites: 3,
	    maxAboutPages: 2,
	    maxSearch: 3,
	    maxTopSites: 3
	  },
	  navigationBar: {
	    defaultSearchSuggestions: false,
	    maxHistorySites: 10
	  },
	  defaultOpenSearchPath: 'content/search/google.xml',
	  vault: {
	    syncUrl: userId => `${vaultHost}/v1/users/${userId}/appState`,
	    authUrl: userId => `${vaultHost}/v1/users/${userId}`,
	    replacementUrl: adHost
	  },
	  braveExtensionId: 'mnojpmjdmbbfmejpflffifhffcmidifd',
	  torrentExtensionId: 'fmdpfempfmekjkcfdehndghogpnpjeno',
	  PDFJSExtensionId: 'jdbefljfgobbmcidnmpjamcbhnbphjnb',
	  PocketExtensionId: 'niloccemoadcdkdjlinkgdfekeahmflj',
	  widevineComponentId: 'oimompecagnajdejgnnjijobebaeigek',
	  coinbaseOrigin: 'https://buy.coinbase.com',
	  newtab: {
	    fallbackImage: {
	      name: 'Bay Bridge',
	      source: 'img/newtab_stock_image.jpg',
	      author: 'Darrell Sano',
	      link: 'http://dksfoto.smugmug.com'
	    }
	  }
	};

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const appConfig = __webpack_require__(203);
	const Immutable = __webpack_require__(188);
	const settings = __webpack_require__(204);
	const { passwordManagers, defaultPasswordManager, extensionIds, displayNames } = __webpack_require__(205);
	const { bookmarksToolbarMode } = __webpack_require__(206);
	
	const passwordManagerDefault = (settingKey, settingsCollection) => {
	  const onePasswordEnabled = resolveValue(settings.ONE_PASSWORD_ENABLED, settingsCollection) === true;
	  if (onePasswordEnabled) return passwordManagers.ONE_PASSWORD;
	
	  const dashlaneEnabled = resolveValue(settings.DASHLANE_ENABLED, settingsCollection) === true;
	  if (dashlaneEnabled) return passwordManagers.DASHLANE;
	
	  const lastPassEnabled = resolveValue(settings.LAST_PASS_ENABLED, settingsCollection) === true;
	  if (lastPassEnabled) return passwordManagers.LAST_PASS;
	
	  const enpassEnabled = resolveValue(settings.ENPASS_ENABLED, settingsCollection) === true;
	  if (enpassEnabled) return passwordManagers.ENPASS;
	
	  const disabled = resolveValue(settings.PASSWORD_MANAGER_ENABLED, settingsCollection) === false;
	  if (disabled) return passwordManagers.UNMANAGED;
	
	  return defaultPasswordManager;
	};
	
	const bookmarksBarDefault = (settingKey, settingsCollection) => {
	  const faviconsOnly = resolveValue(settings.SHOW_BOOKMARKS_TOOLBAR_ONLY_FAVICON, settingsCollection) === true;
	  if (faviconsOnly) return bookmarksToolbarMode.FAVICONS_ONLY;
	
	  const favicons = resolveValue(settings.SHOW_BOOKMARKS_TOOLBAR_FAVICON, settingsCollection) === true;
	  if (favicons) return bookmarksToolbarMode.TEXT_AND_FAVICONS;
	
	  return bookmarksToolbarMode.TEXT_ONLY;
	};
	
	// Retrofit a new setting based on old values; we don't want to lose existing user settings.
	const getDefaultSetting = (settingKey, settingsCollection) => {
	  switch (settingKey) {
	    case settings.ACTIVE_PASSWORD_MANAGER:
	      return passwordManagerDefault(settingKey, settingsCollection);
	    case settings.BOOKMARKS_TOOLBAR_MODE:
	      return bookmarksBarDefault(settingKey, settingsCollection);
	  }
	  return undefined;
	};
	
	const resolveValue = (settingKey, settingsCollection) => {
	  const appSettings = (process.type === 'browser' ? __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./stores/appStore\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).getState().get('settings') : __webpack_require__(207).state.get('settings')) || Immutable.Map();
	  if (settingsCollection && settingsCollection.constructor === Immutable.Map && settingsCollection.get(settingKey) !== undefined) {
	    return settingsCollection.get(settingKey);
	  }
	  if (settingsCollection && settingsCollection[settingKey] !== undefined) {
	    return settingsCollection[settingKey];
	  }
	  return appSettings.get(settingKey) !== undefined ? appSettings.get(settingKey) : appConfig.defaultSettings[settingKey];
	};
	
	module.exports.getSetting = (settingKey, settingsCollection) => {
	  const setting = resolveValue(settingKey, settingsCollection);
	  if (typeof setting !== 'undefined' && setting !== null) return setting;
	  return getDefaultSetting(settingKey, settingsCollection);
	};
	
	module.exports.getActivePasswordManager = settingsCollection => {
	  const passwordManager = module.exports.getSetting(settings.ACTIVE_PASSWORD_MANAGER, settingsCollection);
	
	  let details = {
	    name: passwordManager,
	    extensionId: extensionIds[passwordManager],
	    displayName: displayNames[passwordManager]
	  };
	
	  return Immutable.fromJS(details);
	};

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	const { getTargetAboutUrl } = __webpack_require__(187);
	
	// BRAVE_UPDATE_HOST should be set to the host name for the auto-updater server
	const updateHost = ({"NODE_ENV":"development","BRAVE_PORT":8080}).BRAVE_UPDATE_HOST || 'https://brave-laptop-updates.global.ssl.fastly.net';
	const winUpdateHost = ({"NODE_ENV":"development","BRAVE_PORT":8080}).BRAVE_WIN_UPDATE_HOST || 'https://brave-download.global.ssl.fastly.net';
	const crashURL = ({"NODE_ENV":"development","BRAVE_PORT":8080}).BRAVE_CRASH_URL || 'https://brave-laptop-updates.herokuapp.com/1/crashes';
	const adHost = ({"NODE_ENV":"development","BRAVE_PORT":8080}).AD_HOST || 'https://oip.brave.com';
	
	module.exports = {
	  name: 'Brave',
	  contactUrl: 'mailto:support+laptop@brave.com',
	  quitTimeout: 10 * 1000,
	  resourceNames: {
	    ADBLOCK: 'adblock',
	    SAFE_BROWSING: 'safeBrowsing',
	    HTTPS_EVERYWHERE: 'httpsEverywhere',
	    TRACKING_PROTECTION: 'trackingProtection',
	    AD_INSERTION: 'adInsertion',
	    NOSCRIPT: 'noScript',
	    FLASH: 'flash',
	    WIDEVINE: 'widevine',
	    COOKIEBLOCK: 'cookieblock', // block 3p cookies and referer
	    SITEHACK: 'siteHacks',
	    WEBTORRENT: 'webtorrent'
	    // ... other optional resource files are identified by uuid such as for regional adblock
	  },
	  cookieblock: {
	    enabled: true
	  },
	  noScript: {
	    enabled: false
	  },
	  flash: {
	    enabled: false,
	    installUrl: 'https://get.adobe.com/flashplayer/',
	    url: getTargetAboutUrl('about:flash'),
	    shields: false
	  },
	  widevine: {
	    enabled: false,
	    moreInfoUrl: 'https://www.eff.org/issues/drm',
	    licenseUrl: 'https://www.google.com/policies/terms/',
	    shields: false
	  },
	  adblock: {
	    alternateDataFiles: 'https://s3.amazonaws.com/adblock-data/{version}/{uuid}.dat',
	    url: 'https://s3.amazonaws.com/adblock-data/{version}/ABPFilterParserData.dat',
	    version: '2',
	    msBetweenRechecks: 1000 * 60 * 60 * 2, // 2 hours
	    enabled: true
	  },
	  safeBrowsing: {
	    url: 'https://s3.amazonaws.com/adblock-data/{version}/SafeBrowsingData.dat',
	    version: '2',
	    msBetweenRechecks: 1000 * 60 * 60 * 2, // 2 hours
	    enabled: true
	  },
	  trackingProtection: {
	    url: 'https://s3.amazonaws.com/tracking-protection-data/{version}/TrackingProtection.dat',
	    version: '1',
	    msBetweenRechecks: 1000 * 60 * 60 * 2, // 2 hours
	    enabled: true
	  },
	  httpsEverywhere: {
	    url: 'https://s3.amazonaws.com/https-everywhere-data/{version}/httpse.json',
	    version: '5.2', // latest major point release from https://eff.org/https-everywhere
	    msBetweenRechecks: 1000 * 60 * 60 * 12, // 1/2 day
	    enabled: true
	  },
	  siteHacks: {
	    enabled: true
	  },
	  webtorrent: {
	    enabled: true
	  },
	  adInsertion: {
	    enabled: false,
	    url: adHost
	  },
	  crashes: {
	    crashSubmitUrl: crashURL
	  },
	  payments: {
	    delayNotificationTryPayments: 1000 * 60 * 60 * 24 * 10 // 10 days (from firstRunTimestamp)
	  },
	  updates: {
	    // Check for front end updates every hour
	    appUpdateCheckFrequency: 1000 * 60 * 60,
	    // Check after 2 minutes, near startup
	    runtimeUpdateCheckDelay: 1000 * 60 * 2,
	    // If true user will not be notified before updates are reloaded
	    autoAppUpdate: false,
	    autoRuntimeUpdate: false,
	    // url to check for updates
	    baseUrl: `${updateHost}/1/releases`,
	    winBaseUrl: `${winUpdateHost}/multi-channel/releases/CHANNEL/`
	  },
	  urlSuggestions: {
	    ageDecayConstant: 50
	  },
	  defaultSettings: {
	    'adblock.customRules': '',
	    'general.language': null, // null means to use the OS lang
	    'general.startup-mode': 'lastTime',
	    'general.homepage': 'https://www.brave.com',
	    'general.newtab-mode': 'newTabPage',
	    'general.show-home-button': false,
	    'general.useragent.value': null, // Set at runtime
	    'general.autohide-menu': true,
	    'general.check-default-on-startup': true,
	    'search.default-search-engine': 'Google',
	    'search.offer-search-suggestions': false, // false by default for privacy reasons
	    'tabs.switch-to-new-tabs': false,
	    'tabs.paint-tabs': true,
	    'tabs.tabs-per-page': 10,
	    'tabs.close-action': 'parent',
	    'tabs.show-tab-previews': true,
	    'privacy.history-suggestions': true,
	    'privacy.bookmark-suggestions': true,
	    'privacy.opened-tab-suggestions': true,
	    'privacy.autocomplete.history-size': 500,
	    'privacy.block-canvas-fingerprinting': false,
	    'bookmarks.toolbar.show': false,
	    'bookmarks.toolbar.showFavicon': false,
	    'bookmarks.toolbar.showOnlyFavicon': false,
	    'payments.enabled': false,
	    'payments.notifications': false,
	    // "Add funds to your wallet" -- Limit to once every n days to reduce nagging.
	    'payments.notification-add-funds-timestamp': null,
	    // "Out of money, pls add" / "In 24h we'll pay publishers [Review]"
	    // After shown, set timestamp to next reconcile time - 1 day.
	    'payments.notification-reconcile-soon-timestamp': null,
	    'payments.notificationTryPaymentsDismissed': false, // True if you dismiss the message or enable Payments
	    'payments.contribution-amount': 5, // USD
	    'privacy.autofill-enabled': true,
	    'privacy.do-not-track': false,
	    'security.passwords.active-password-manager': null, // Set in settings.js by passwordManagerDefault (defaults to built in)
	    'security.passwords.manager-enabled': true,
	    'security.passwords.one-password-enabled': false,
	    'security.passwords.dashlane-enabled': false,
	    'security.passwords.last-pass-enabled': false,
	    'security.passwords.enpass-enabled': false,
	    'security.flash.installed': false,
	    'general.downloads.default-save-path': null,
	    'general.disable-title-mode': process.platform === 'linux',
	    'advanced.hardware-acceleration-enabled': true,
	    'advanced.default-zoom-level': null,
	    'advanced.pdfjs-enabled': true,
	    'advanced.torrent-viewer-enabled': true,
	    'advanced.smooth-scroll-enabled': false,
	    'advanced.send-crash-reports': true,
	    'advanced.send-usage-statistics': false,
	    'advanced.hide-excluded-sites': false,
	    'advanced.minimum-visit-time': 8,
	    'advanced.minimum-visits': 1,
	    'advanced.minimum-percentage': false,
	    'advanced.auto-suggest-sites': true,
	    'shutdown.clear-history': false,
	    'shutdown.clear-downloads': false,
	    'shutdown.clear-cache': false,
	    'shutdown.clear-all-site-cookies': false,
	    'shutdown.clear-autocomplete-data': false,
	    'shutdown.clear-autofill-data': false,
	    'shutdown.clear-site-settings': false,
	    'extensions.pocket.enabled': false,
	    'general.bookmarks-toolbar-mode': null,
	    'general.is-default-browser': null,
	    'notification-add-funds-timestamp': null,
	    'notification-reconcile-soon-timestamp': null
	  },
	  defaultFavicon: 'img/empty_favicon.png'
	};

/***/ },
/* 204 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const settings = {
	  // General tab
	  STARTUP_MODE: 'general.startup-mode',
	  HOMEPAGE: 'general.homepage',
	  NEWTAB_MODE: 'general.newtab-mode',
	  SHOW_HOME_BUTTON: 'general.show-home-button',
	  DEFAULT_DOWNLOAD_SAVE_PATH: 'general.downloads.default-save-path',
	  AUTO_HIDE_MENU: 'general.autohide-menu',
	  DISABLE_TITLE_MODE: 'general.disable-title-mode',
	  BOOKMARKS_TOOLBAR_MODE: 'general.bookmarks-toolbar-mode',
	  SHOW_BOOKMARKS_TOOLBAR: 'bookmarks.toolbar.show',
	  LANGUAGE: 'general.language',
	  CHECK_DEFAULT_ON_STARTUP: 'general.check-default-on-startup',
	  IS_DEFAULT_BROWSER: 'general.is-default-browser',
	  // Search tab
	  DEFAULT_SEARCH_ENGINE: 'search.default-search-engine',
	  OFFER_SEARCH_SUGGESTIONS: 'search.offer-search-suggestions',
	  // Tabs tab
	  SWITCH_TO_NEW_TABS: 'tabs.switch-to-new-tabs',
	  TAB_CLOSE_ACTION: 'tabs.close-action',
	  PAINT_TABS: 'tabs.paint-tabs',
	  TABS_PER_PAGE: 'tabs.tabs-per-page',
	  SHOW_TAB_PREVIEWS: 'tabs.show-tab-previews',
	  // Privacy Tab
	  HISTORY_SUGGESTIONS: 'privacy.history-suggestions',
	  BOOKMARK_SUGGESTIONS: 'privacy.bookmark-suggestions',
	  OPENED_TAB_SUGGESTIONS: 'privacy.opened-tab-suggestions',
	  AUTOCOMPLETE_HISTORY_SIZE: 'privacy.autocomplete.history-size',
	  DO_NOT_TRACK: 'privacy.do-not-track',
	  BLOCK_CANVAS_FINGERPRINTING: 'privacy.block-canvas-fingerprinting',
	  // Security Tab
	  ACTIVE_PASSWORD_MANAGER: 'security.passwords.active-password-manager',
	  SHUTDOWN_CLEAR_HISTORY: 'shutdown.clear-history',
	  SHUTDOWN_CLEAR_DOWNLOADS: 'shutdown.clear-downloads',
	  SHUTDOWN_CLEAR_CACHE: 'shutdown.clear-cache',
	  SHUTDOWN_CLEAR_ALL_SITE_COOKIES: 'shutdown.clear-all-site-cookies',
	  SHUTDOWN_CLEAR_AUTOCOMPLETE_DATA: 'shutdown.clear-autocomplete-data',
	  SHUTDOWN_CLEAR_AUTOFILL_DATA: 'shutdown.clear-autofill-data',
	  SHUTDOWN_CLEAR_SITE_SETTINGS: 'shutdown.clear-site-settings',
	  FLASH_INSTALLED: 'security.flash.installed',
	  // Autofill
	  AUTOFILL_ENABLED: 'privacy.autofill-enabled',
	  // Payments Tab
	  PAYMENTS_ENABLED: 'payments.enabled',
	  PAYMENTS_NOTIFICATIONS: 'payments.notifications',
	  PAYMENTS_NOTIFICATION_ADD_FUNDS_TIMESTAMP: 'notification-add-funds-timestamp',
	  PAYMENTS_NOTIFICATION_RECONCILE_SOON_TIMESTAMP: 'notification-reconcile-soon-timestamp',
	  PAYMENTS_NOTIFICATION_TRY_PAYMENTS_DISMISSED: 'payments.notificationTryPaymentsDismissed',
	  PAYMENTS_CONTRIBUTION_AMOUNT: 'payments.contribution-amount',
	  // Advanced settings
	  HARDWARE_ACCELERATION_ENABLED: 'advanced.hardware-acceleration-enabled',
	  PDFJS_ENABLED: 'advanced.pdfjs-enabled',
	  TORRENT_VIEWER_ENABLED: 'advanced.torrent-viewer-enabled',
	  DEFAULT_ZOOM_LEVEL: 'advanced.default-zoom-level',
	  SMOOTH_SCROLL_ENABLED: 'advanced.smooth-scroll-enabled',
	  SEND_CRASH_REPORTS: 'advanced.send-crash-reports',
	  SEND_USAGE_STATISTICS: 'advanced.send-usage-statistics',
	  ADBLOCK_CUSTOM_RULES: 'adblock.customRules',
	  HIDE_EXCLUDED_SITES: 'advanced.hide-excluded-sites',
	  MINIMUM_VISIT_TIME: 'advanced.minimum-visit-time',
	  MINIMUM_VISITS: 'advanced.minimum-visits',
	  MINIMUM_PERCENTAGE: 'advanced.minimum-percentage',
	  AUTO_SUGGEST_SITES: 'advanced.auto-suggest-sites',
	
	  // DEPRECATED settings
	  // ########################
	  // these constants should not appear outside of this file, ../settings.js, and our tests
	  // NOTE: these settings rely on default values being set in ./appConfig.js
	  // ########################
	  // > phased out with 0.11.4
	  PASSWORD_MANAGER_ENABLED: 'security.passwords.manager-enabled',
	  ONE_PASSWORD_ENABLED: 'security.passwords.one-password-enabled',
	  DASHLANE_ENABLED: 'security.passwords.dashlane-enabled',
	  LAST_PASS_ENABLED: 'security.passwords.last-pass-enabled',
	  ENPASS_ENABLED: 'security.passwords.enpass-enabled',
	  // > phased out with 0.12.6
	  SHOW_BOOKMARKS_TOOLBAR_FAVICON: 'bookmarks.toolbar.showFavicon',
	  SHOW_BOOKMARKS_TOOLBAR_ONLY_FAVICON: 'bookmarks.toolbar.showOnlyFavicon',
	  POCKET_ENABLED: 'extensions.pocket.enabled'
	};
	
	module.exports = settings;

/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const passwordManagers = {
	  BUILT_IN: 'BuiltIn',
	  ONE_PASSWORD: '1Password',
	  DASHLANE: 'Dashlane',
	  LAST_PASS: 'LastPass',
	  ENPASS: 'Enpass',
	  UNMANAGED: 'Unmanaged'
	};
	
	const defaultPasswordManager = passwordManagers.BUILT_IN;
	
	let extensionIds = {};
	extensionIds[passwordManagers.BUILT_IN] = null;
	extensionIds[passwordManagers.ONE_PASSWORD] = 'aomjjhallfgjeglblehebfpbcfeobpgk';
	extensionIds[passwordManagers.DASHLANE] = 'fdjamakpfbbddfjaooikfcpapjohcfmg';
	extensionIds[passwordManagers.LAST_PASS] = 'hdokiejnpimakedhajhdlcegeplioahd';
	extensionIds[passwordManagers.ENPASS] = 'kmcfomidfpdkfieipokbalgegidffkal';
	extensionIds[passwordManagers.UNMANAGED] = null;
	
	let displayNames = {};
	displayNames[passwordManagers.BUILT_IN] = null;
	displayNames[passwordManagers.ONE_PASSWORD] = '1Password';
	displayNames[passwordManagers.DASHLANE] = 'Dashlane';
	displayNames[passwordManagers.LAST_PASS] = 'LastPass';
	displayNames[passwordManagers.ENPASS] = 'Enpass';
	displayNames[passwordManagers.UNMANAGED] = null;
	
	module.exports = {
	  passwordManagers,
	  defaultPasswordManager,
	  extensionIds,
	  displayNames
	};

/***/ },
/* 206 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const startsWithOption = {
	  WINDOWS_TABS_FROM_LAST_TIME: 'lastTime',
	  HOMEPAGE: 'homePage',
	  NEW_TAB_PAGE: 'newTabPage'
	};
	
	const newTabMode = {
	  NEW_TAB_PAGE: 'newTabPage',
	  HOMEPAGE: 'homePage',
	  DEFAULT_SEARCH_ENGINE: 'defaultSearchEngine',
	  EMPTY_NEW_TAB: 'emptyNewTab'
	};
	
	const bookmarksToolbarMode = {
	  TEXT_ONLY: 'textOnly',
	  TEXT_AND_FAVICONS: 'textAndFavicons',
	  FAVICONS_ONLY: 'faviconsOnly'
	};
	
	const tabCloseAction = {
	  LAST_ACTIVE: 'lastActive',
	  NEXT: 'next',
	  FIRST: 'first',
	  PARENT: 'parent'
	};
	
	module.exports = {
	  startsWithOption,
	  newTabMode,
	  bookmarksToolbarMode,
	  tabCloseAction
	};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	const EventEmitter = __webpack_require__(208).EventEmitter;
	const debounce = __webpack_require__(209);
	
	let lastEmittedState;
	const CHANGE_EVENT = 'app-state-change';
	
	class AppStoreRenderer extends EventEmitter {
	  constructor() {
	    super();
	    this.appState = new Immutable.Map();
	  }
	  emitChanges() {
	    if (lastEmittedState !== this.appState) {
	      lastEmittedState = this.appState;
	      this.emit(CHANGE_EVENT);
	    }
	  }
	  set state(appState) {
	    this.appState = appState;
	    emitChanges();
	  }
	  get state() {
	    return this.appState;
	  }
	  addChangeListener(callback) {
	    this.on(CHANGE_EVENT, callback);
	  }
	  removeChangeListener(callback) {
	    this.removeListener(CHANGE_EVENT, callback);
	  }
	}
	
	const appStoreRenderer = new AppStoreRenderer();
	const emitChanges = debounce(appStoreRenderer.emitChanges.bind(appStoreRenderer), 5);
	module.exports = appStoreRenderer;

/***/ },
/* 208 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 209 */
/***/ function(module, exports) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	function debounce(fn, bufferInterval, ...args) {
	  let timeout;
	  return (...args2) => {
	    clearTimeout(timeout);
	    let a = args || [];
	    if (args2 && args2.constructor === Array) {
	      a = a.concat(args2);
	    }
	    timeout = setTimeout(fn.apply.bind(fn, this, a), bufferInterval);
	  };
	}
	
	module.exports = debounce;

/***/ },
/* 210 */
/***/ function(module, exports) {

	"use strict";
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	module.exports = { "providers": [{
	    "name": "Amazon",
	    "base": "https://www.amazon.com",
	    "image": "https://www.amazon.com/favicon.ico",
	    "search": "https://www.amazon.com/exec/obidos/external-search/?field-keywords={searchTerms}&mode=blended",
	    "autocomplete": "https://completion.amazon.com/search/complete?method=completion&q={searchTerms}&search-alias=aps&client=amazon-search-ui&mkt=1",
	    "shortcut": ":a"
	  }, {
	    "name": "Bing",
	    "base": "https://www.bing.com",
	    "image": "https://www.bing.com/favicon.ico",
	    "search": "https://www.bing.com/search?q={searchTerms}",
	    "autocomplete": "https://api.bing.com/osjson.aspx?query={searchTerms}&language={language}&form=OSDJAS",
	    "shortcut": ":b"
	  }, {
	    "name": "DuckDuckGo",
	    "base": "https://duckduckgo.com",
	    "image": "https://duckduckgo.com/favicon.ico",
	    "search": "https://duckduckgo.com/?q={searchTerms}&t=brave",
	    "autocomplete": "https://ac.duckduckgo.com/ac/?q={searchTerms}&type=list",
	    "shortcut": ":d"
	  }, {
	    "name": "GitHub",
	    "base": "https://github.com/search",
	    "image": "https://assets-cdn.github.com/favicon.ico",
	    "search": "https://github.com/search?q={searchTerms}",
	    "shortcut": ":gh"
	  }, {
	    "name": "Google",
	    "base": "https://www.google.com",
	    "image": "https://www.google.com/favicon.ico",
	    "search": "https://www.google.com/search?q={searchTerms}",
	    "autocomplete": "https://suggestqueries.google.com/complete/search?client=chrome&q={searchTerms}",
	    "shortcut": ":g"
	  }, {
	    "name": "Stack Overflow",
	    "base": "https://stackoverflow.com/search",
	    "image": "https://cdn.sstatic.net/sites/stackoverflow/img/favicon.ico",
	    "search": "https://stackoverflow.com/search?q={searchTerms}",
	    "shortcut": ":s"
	  }, {
	    "name": "Mozilla Developer Network (MDN)",
	    "base": "https://developer.mozilla.org/search",
	    "image": "https://developer.cdn.mozilla.net/static/img/favicon32.png",
	    "search": "https://developer.mozilla.org/search?q={searchTerms}",
	    "shortcut": ":m"
	  }, {
	    "name": "Twitter",
	    "base": "https://twitter.com",
	    "image": "https://twitter.com/favicon.ico",
	    "search": "https://twitter.com/search?q={searchTerms}&source=desktop-search",
	    "shortcut": ":t"
	  }, {
	    "name": "Wikipedia",
	    "base": "https://en.wikipedia.org",
	    "image": "https://en.wikipedia.org/favicon.ico",
	    "search": "https://en.wikipedia.org/wiki/Special:Search?search={searchTerms}",
	    "shortcut": ":w"
	  }, {
	    "name": "Yahoo",
	    "base": "https://search.yahoo.com",
	    "image": "https://search.yahoo.com/favicon.ico",
	    "search": "https://search.yahoo.com/search?p={searchTerms}&fr=opensearch",
	    "autocomplete": "https://search.yahoo.com/sugg/os?command={searchTerms}&output=fxjson&fr=opensearch",
	    "shortcut": ":y"
	  }, {
	    "name": "YouTube",
	    "base": "https://www.youtube.com",
	    "image": "https://www.youtube.com/favicon.ico",
	    "search": "https://www.youtube.com/results?search_type=search_videos&search_query={searchTerms}&search_sort=relevance&search_category=0&page=",
	    "autocomplete": "https://suggestqueries.google.com/complete/search?output=chrome&client=chrome&hl=it&q={searchTerms}&ds=yt",
	    "shortcut": ":yt"
	  }, {
	    "name": "StartPage",
	    "base": "https://www.startpage.com",
	    "image": "https://www.startpage.com/graphics/favicon/sp-favicon-16x16.png",
	    "search": "https://www.startpage.com/do/dsearch?query={searchTerms}&cat=web&pl=opensearch",
	    "autocomplete": "https://www.startpage.com/cgi-bin/csuggest?query={searchTerms}&limit=10&format=json",
	    "shortcut": ":sp"
	  }, {
	    "name": "Infogalactic",
	    "base": "https://infogalactic.com",
	    "image": "https://infogalactic.com/favicon.ico",
	    "search": "https://infogalactic.com/w/index.php?title=Special:Search&search={searchTerms}",
	    "autocomplete": "https://infogalactic.com/w/api.php?action=opensearch&search={searchTerms}&namespace=0",
	    "shortcut": ":i"
	  }, {
	    "name": "Wolfram Alpha",
	    "base": "https://www.wolframalpha.com",
	    "image": "https://www.wolframalpha.com/favicon.ico?v=2",
	    "search": "https://www.wolframalpha.com/input/?i={searchTerms}",
	    "shortcut": ":wa"
	  }, {
	    "name": "Semantic Scholar",
	    "base": "https://www.semanticscholar.org",
	    "image": "https://www.semanticscholar.org/img/favicon.png",
	    "search": "https://www.semanticscholar.org/search?q={searchTerms}",
	    "shortcut": ":ss"
	  }, {
	    "name": "Qwant",
	    "base": "https://www.qwant.com/",
	    "image": "https://www.qwant.com/favicon.ico",
	    "search": "https://www.qwant.com/?q={searchTerms}&client=brave",
	    "autocomplete": "https://api.qwant.com/api/suggest/?q={searchTerms}&client=brave",
	    "shortcut": ":q"
	  }, {
	    "name": "Yandex",
	    "base": "https://yandex.com",
	    "image": "https://www.yandex.com/favicon.ico",
	    "search": "https://yandex.com/search/?text={searchTerms}&clid={platformClientId}",
	    "shortcut": ":ya",
	    "platformClientId": {
	      "win32": 2274777,
	      "darwin": 2274776,
	      "linux": 2274778
	    }
	  }]
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const messages = {
	  // URL bar shortcuts
	  SHORTCUT_FOCUS_URL: _,
	  // Active frame shortcuts
	  SHORTCUT_ACTIVE_FRAME_STOP: _,
	  SHORTCUT_ACTIVE_FRAME_RELOAD: _,
	  SHORTCUT_ACTIVE_FRAME_CLEAN_RELOAD: _,
	  SHORTCUT_ACTIVE_FRAME_ZOOM_IN: _,
	  SHORTCUT_ACTIVE_FRAME_ZOOM_OUT: _,
	  SHORTCUT_ACTIVE_FRAME_ZOOM_RESET: _,
	  SHORTCUT_ACTIVE_FRAME_TOGGLE_DEV_TOOLS: _,
	  SHORTCUT_SET_ACTIVE_FRAME_BY_INDEX: _, /** @arg {number} index of frame */
	  SHORTCUT_ACTIVE_FRAME_VIEW_SOURCE: _,
	  SHORTCUT_SET_ACTIVE_FRAME_TO_LAST: _,
	  SHORTCUT_ACTIVE_FRAME_SAVE: _,
	  SHORTCUT_ACTIVE_FRAME_PRINT: _,
	  SHORTCUT_ACTIVE_FRAME_SHOW_FINDBAR: _,
	  SHORTCUT_ACTIVE_FRAME_BACK: _,
	  SHORTCUT_ACTIVE_FRAME_FORWARD: _,
	  SHORTCUT_ACTIVE_FRAME_BOOKMARK: _,
	  SHORTCUT_ACTIVE_FRAME_REMOVE_BOOKMARK: _,
	  SHORTCUT_ACTIVE_FRAME_LOAD_URL: _, /** @arg {string} url to load */
	  SHORTCUT_ACTIVE_FRAME_COPY: _,
	  SHORTCUT_ACTIVE_FRAME_FIND_NEXT: _,
	  SHORTCUT_ACTIVE_FRAME_FIND_PREV: _,
	  // Frame management shortcuts
	  SHORTCUT_NEW_FRAME: _, /** @arg {string} opt_url to load if any */
	  SHORTCUT_CLOSE_FRAME: _, /** @arg {number} opt_key of frame, defaults to active frame */
	  SHORTCUT_CLOSE_OTHER_FRAMES: _, /** @arg {boolean} close to the right, @arg {boolean} close to the left */
	  SHORTCUT_UNDO_CLOSED_FRAME: _,
	  SHORTCUT_FRAME_MUTE: _,
	  SHORTCUT_FRAME_RELOAD: _, /** @arg {number} key of frame */
	  SHORTCUT_NEXT_TAB: _,
	  SHORTCUT_PREV_TAB: _,
	  SHORTCUT_OPEN_CLEAR_BROWSING_DATA_PANEL: _,
	  // Misc application events
	  QUIT_APPLICATION: _,
	  OPEN_BRAVERY_PANEL: _,
	  PREFS_RESTART: _,
	  CERT_ERROR: _, /** @arg {Object} details of certificate error */
	  NOTIFICATION_RESPONSE: _, /** @arg {string} message, @arg {number} buttonId, @arg {boolean} persist */
	  // Downloads
	  SHOW_DOWNLOADS_TOOLBAR: _, /** Ensures the downloads toolbar is visible */
	  HIDE_DOWNLOADS_TOOLBAR: _, /** Hides the downloads toolbar */
	  DOWNLOAD_ACTION: _, /** @arg {string} downloadId, @arg {string} action such as 'resume', 'pause', or 'cancel' */
	  // Updates
	  UPDATE_REQUESTED: _,
	  UPDATE_AVAILABLE: _,
	  UPDATE_NOT_AVAILABLE: _,
	  CHECK_FOR_UPDATE: _,
	  UPDATE_META_DATA_RETRIEVED: _,
	  // App state
	  APP_INITIALIZED: _,
	  // Web contents state
	  // Webview page messages
	  CONTEXT_MENU_OPENED: _, /** @arg {Object} nodeProps properties of node being clicked */
	  APP_STATE_CHANGE: _,
	  STOP_LOAD: _,
	  THEME_COLOR_COMPUTED: _,
	  HIDE_CONTEXT_MENU: _,
	  LEAVE_FULL_SCREEN: _,
	  ENTER_FULL_SCREEN: _,
	  SET_CLIPBOARD: _,
	  GOT_CANVAS_FINGERPRINTING: _,
	  GO_BACK: _,
	  GO_FORWARD: _,
	  RELOAD: _,
	  ENABLE_SWIPE_GESTURE: _,
	  DISABLE_SWIPE_GESTURE: _,
	  // Password manager
	  GET_PASSWORDS: _, /** @arg {string} formOrigin, @arg {string} action */
	  GOT_PASSWORD: _, /** @arg {string} username, @arg {string} password, @arg {string} origin, @arg {string} action, @arg {boolean} isUnique */
	  SAVE_PASSWORD: _, /** @arg {string} username, @arg {string} password, @arg {string} formOrigin, @arg {string} action */
	  IS_MISSPELLED: _, /** @arg {string} word, the word to check */
	  GET_MISSPELLING_INFO: _, /** @arg {string} word, the word to lookup */
	  SHOW_USERNAME_LIST: _, /** @arg {string} formOrigin, @arg {string} action, @arg {Object} boundingRect, @arg {string} usernameValue */
	  FILL_PASSWORD: _, /** @arg {string} username, @arg {string} password, @arg {string} origin, @arg {string} action */
	  PASSWORD_DETAILS_UPDATED: _, /** @arg {Object} passwords app state */
	  PASSWORD_SITE_DETAILS_UPDATED: _, /** @arg {Object} passwords app state */
	  DECRYPT_PASSWORD: _, /** @arg {string} encrypted pw, @arg {string} iv, @arg {string} authTag, @arg {number} id */
	  DECRYPTED_PASSWORD: _, /** @arg {number} decrypted pw, @arg {number} id */
	  // Init
	  INITIALIZE_WINDOW: _,
	  INITIALIZE_PARTITION: _, /** @arg {string} name of partition */
	  // Session restore
	  REQUEST_WINDOW_STATE: _,
	  RESPONSE_WINDOW_STATE: _,
	  LAST_WINDOW_STATE: _,
	  UNDO_CLOSED_WINDOW: _,
	  CLEAR_CLOSED_FRAMES: _,
	  // Ad block, safebrowsing, and tracking protection
	  BLOCKED_RESOURCE: _,
	  BLOCKED_PAGE: _,
	  // About pages to contentScripts
	  SETTINGS_UPDATED: _,
	  SITE_SETTINGS_UPDATED: _,
	  BRAVERY_DEFAULTS_UPDATED: _,
	  BOOKMARKS_UPDATED: _,
	  HISTORY_UPDATED: _,
	  EXTENSIONS_UPDATED: _,
	  ADBLOCK_UPDATED: _,
	  DOWNLOADS_UPDATED: _,
	  NEWTAB_DATA_UPDATED: _,
	  VERSION_INFORMATION_UPDATED: _,
	  // About pages from contentScript
	  RELOAD_URL: _,
	  DISPATCH_ACTION: _,
	  ABOUT_COMPONENT_INITIALIZED: _,
	  CLEAR_BROWSING_DATA_NOW: _,
	  IMPORT_BROWSER_DATA_NOW: _,
	  IMPORTER_LIST: _,
	  // Autofill
	  AUTOFILL_SET_ADDRESS: _,
	  AUTOFILL_SET_CREDIT_CARD: _,
	  AUTOFILL_ADDRESSES_UPDATED: _,
	  AUTOFILL_CREDIT_CARDS_UPDATED: _,
	  // HTTPS
	  CERT_ERROR_ACCEPTED: _, /** @arg {string} url where a cert error was accepted */
	  CHECK_CERT_ERROR_ACCEPTED: _, /** @arg {string} url to check cert error, @arg {number} key of frame */
	  GET_CERT_ERROR_DETAIL: _,
	  SET_CERT_ERROR_DETAIL: _,
	  SET_SECURITY_STATE: _, /** @arg {number} key of frame, @arg {Object} security state */
	  HTTPSE_RULE_APPLIED: _, /** @arg {string} name of ruleset file, @arg {Object} details of rewritten request */
	  // Extensions
	  NEW_POPUP_WINDOW: _,
	  // Localization
	  LANGUAGE: _, /** @arg {string} langCode, @arg {Array} availableLanguages */
	  REQUEST_LANGUAGE: _,
	  STATE_UPDATED: _,
	  // Ads
	  GET_AD_DIV_CANDIDATES: _,
	  SET_AD_DIV_CANDIDATES: _,
	  // Debugging
	  DEBUG_REACT_PROFILE: _,
	  // Ledger
	  LEDGER_PAYMENTS_PRESENT: _,
	  LEDGER_PUBLISHER: _,
	  LEDGER_UPDATED: _,
	  LEDGER_CREATE_WALLET: _,
	  CHECK_BITCOIN_HANDLER: _,
	  ADD_FUNDS_CLOSED: _,
	  RENDER_URL_TO_PDF: _,
	  // Torrent
	  TORRENT_MESSAGE: _
	};
	
	module.exports = mapValuesByKeys(messages);

/***/ },
/* 212 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	/**
	 * Map an object's keys to equivalent names as the keys but with dashes
	 *
	 * @param o The object for the keys to be mapped
	 * @return A new object with the values mapped to similar key names
	 */
	module.exports.mapValuesByKeys = o => Object.keys(o).reduce((newObject, k) => {
	  newObject[k] = k.toLowerCase().replace(/_/g, '-');
	  return newObject;
	}, {});
	
	module.exports.firstDefinedValue = (...arr) => {
	  // use + value to convert booleans back to numbers
	  return arr.filter(value => !isNaN(+value))[0]; // eslint-disable-line
	};

/***/ },
/* 213 */,
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(97);


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	
	class ImmutableComponent extends React.Component {
	  shouldComponentUpdate(nextProps) {
	    return Object.keys(nextProps).some(prop => nextProps[prop] !== this.props[prop]);
	  }
	}
	
	module.exports = ImmutableComponent;

/***/ },
/* 216 */,
/* 217 */,
/* 218 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "8b116e3ce0b2711f8e2cc78c8b32a7c5.svg";

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "196262d2122e55e514d47f9e44b66520.svg";

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(223);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js?-minimize!./font-awesome.css", function() {
				var newContent = require("!!./../../css-loader/index.js?-minimize!./font-awesome.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\n *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  src: url(" + __webpack_require__(224) + ");\n  src: url(" + __webpack_require__(225) + "?#iefix&v=4.7.0) format('embedded-opentype'), url(" + __webpack_require__(226) + ") format('woff2'), url(" + __webpack_require__(227) + ") format('woff'), url(" + __webpack_require__(228) + ") format('truetype'), url(" + __webpack_require__(229) + "#fontawesomeregular) format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n.fa {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n/* makes the font 33% larger relative to the icon container */\n.fa-lg {\n  font-size: 1.33333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n.fa-2x {\n  font-size: 2em;\n}\n.fa-3x {\n  font-size: 3em;\n}\n.fa-4x {\n  font-size: 4em;\n}\n.fa-5x {\n  font-size: 5em;\n}\n.fa-fw {\n  width: 1.28571429em;\n  text-align: center;\n}\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.14285714em;\n  list-style-type: none;\n}\n.fa-ul > li {\n  position: relative;\n}\n.fa-li {\n  position: absolute;\n  left: -2.14285714em;\n  width: 2.14285714em;\n  top: 0.14285714em;\n  text-align: center;\n}\n.fa-li.fa-lg {\n  left: -1.85714286em;\n}\n.fa-border {\n  padding: .2em .25em .15em;\n  border: solid 0.08em #eeeeee;\n  border-radius: .1em;\n}\n.fa-pull-left {\n  float: left;\n}\n.fa-pull-right {\n  float: right;\n}\n.fa.fa-pull-left {\n  margin-right: .3em;\n}\n.fa.fa-pull-right {\n  margin-left: .3em;\n}\n/* Deprecated as of 4.4.0 */\n.pull-right {\n  float: right;\n}\n.pull-left {\n  float: left;\n}\n.fa.pull-left {\n  margin-right: .3em;\n}\n.fa.pull-right {\n  margin-left: .3em;\n}\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n  animation: fa-spin 2s infinite linear;\n}\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n  animation: fa-spin 1s infinite steps(8);\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n.fa-rotate-180 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n  -webkit-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  transform: rotate(180deg);\n}\n.fa-rotate-270 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";\n  -webkit-transform: rotate(270deg);\n  -ms-transform: rotate(270deg);\n  transform: rotate(270deg);\n}\n.fa-flip-horizontal {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";\n  -webkit-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1);\n}\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  filter: none;\n}\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n.fa-stack-1x,\n.fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.fa-stack-1x {\n  line-height: inherit;\n}\n.fa-stack-2x {\n  font-size: 2em;\n}\n.fa-inverse {\n  color: #ffffff;\n}\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.fa-glass:before {\n  content: \"\\F000\";\n}\n.fa-music:before {\n  content: \"\\F001\";\n}\n.fa-search:before {\n  content: \"\\F002\";\n}\n.fa-envelope-o:before {\n  content: \"\\F003\";\n}\n.fa-heart:before {\n  content: \"\\F004\";\n}\n.fa-star:before {\n  content: \"\\F005\";\n}\n.fa-star-o:before {\n  content: \"\\F006\";\n}\n.fa-user:before {\n  content: \"\\F007\";\n}\n.fa-film:before {\n  content: \"\\F008\";\n}\n.fa-th-large:before {\n  content: \"\\F009\";\n}\n.fa-th:before {\n  content: \"\\F00A\";\n}\n.fa-th-list:before {\n  content: \"\\F00B\";\n}\n.fa-check:before {\n  content: \"\\F00C\";\n}\n.fa-remove:before,\n.fa-close:before,\n.fa-times:before {\n  content: \"\\F00D\";\n}\n.fa-search-plus:before {\n  content: \"\\F00E\";\n}\n.fa-search-minus:before {\n  content: \"\\F010\";\n}\n.fa-power-off:before {\n  content: \"\\F011\";\n}\n.fa-signal:before {\n  content: \"\\F012\";\n}\n.fa-gear:before,\n.fa-cog:before {\n  content: \"\\F013\";\n}\n.fa-trash-o:before {\n  content: \"\\F014\";\n}\n.fa-home:before {\n  content: \"\\F015\";\n}\n.fa-file-o:before {\n  content: \"\\F016\";\n}\n.fa-clock-o:before {\n  content: \"\\F017\";\n}\n.fa-road:before {\n  content: \"\\F018\";\n}\n.fa-download:before {\n  content: \"\\F019\";\n}\n.fa-arrow-circle-o-down:before {\n  content: \"\\F01A\";\n}\n.fa-arrow-circle-o-up:before {\n  content: \"\\F01B\";\n}\n.fa-inbox:before {\n  content: \"\\F01C\";\n}\n.fa-play-circle-o:before {\n  content: \"\\F01D\";\n}\n.fa-rotate-right:before,\n.fa-repeat:before {\n  content: \"\\F01E\";\n}\n.fa-refresh:before {\n  content: \"\\F021\";\n}\n.fa-list-alt:before {\n  content: \"\\F022\";\n}\n.fa-lock:before {\n  content: \"\\F023\";\n}\n.fa-flag:before {\n  content: \"\\F024\";\n}\n.fa-headphones:before {\n  content: \"\\F025\";\n}\n.fa-volume-off:before {\n  content: \"\\F026\";\n}\n.fa-volume-down:before {\n  content: \"\\F027\";\n}\n.fa-volume-up:before {\n  content: \"\\F028\";\n}\n.fa-qrcode:before {\n  content: \"\\F029\";\n}\n.fa-barcode:before {\n  content: \"\\F02A\";\n}\n.fa-tag:before {\n  content: \"\\F02B\";\n}\n.fa-tags:before {\n  content: \"\\F02C\";\n}\n.fa-book:before {\n  content: \"\\F02D\";\n}\n.fa-bookmark:before {\n  content: \"\\F02E\";\n}\n.fa-print:before {\n  content: \"\\F02F\";\n}\n.fa-camera:before {\n  content: \"\\F030\";\n}\n.fa-font:before {\n  content: \"\\F031\";\n}\n.fa-bold:before {\n  content: \"\\F032\";\n}\n.fa-italic:before {\n  content: \"\\F033\";\n}\n.fa-text-height:before {\n  content: \"\\F034\";\n}\n.fa-text-width:before {\n  content: \"\\F035\";\n}\n.fa-align-left:before {\n  content: \"\\F036\";\n}\n.fa-align-center:before {\n  content: \"\\F037\";\n}\n.fa-align-right:before {\n  content: \"\\F038\";\n}\n.fa-align-justify:before {\n  content: \"\\F039\";\n}\n.fa-list:before {\n  content: \"\\F03A\";\n}\n.fa-dedent:before,\n.fa-outdent:before {\n  content: \"\\F03B\";\n}\n.fa-indent:before {\n  content: \"\\F03C\";\n}\n.fa-video-camera:before {\n  content: \"\\F03D\";\n}\n.fa-photo:before,\n.fa-image:before,\n.fa-picture-o:before {\n  content: \"\\F03E\";\n}\n.fa-pencil:before {\n  content: \"\\F040\";\n}\n.fa-map-marker:before {\n  content: \"\\F041\";\n}\n.fa-adjust:before {\n  content: \"\\F042\";\n}\n.fa-tint:before {\n  content: \"\\F043\";\n}\n.fa-edit:before,\n.fa-pencil-square-o:before {\n  content: \"\\F044\";\n}\n.fa-share-square-o:before {\n  content: \"\\F045\";\n}\n.fa-check-square-o:before {\n  content: \"\\F046\";\n}\n.fa-arrows:before {\n  content: \"\\F047\";\n}\n.fa-step-backward:before {\n  content: \"\\F048\";\n}\n.fa-fast-backward:before {\n  content: \"\\F049\";\n}\n.fa-backward:before {\n  content: \"\\F04A\";\n}\n.fa-play:before {\n  content: \"\\F04B\";\n}\n.fa-pause:before {\n  content: \"\\F04C\";\n}\n.fa-stop:before {\n  content: \"\\F04D\";\n}\n.fa-forward:before {\n  content: \"\\F04E\";\n}\n.fa-fast-forward:before {\n  content: \"\\F050\";\n}\n.fa-step-forward:before {\n  content: \"\\F051\";\n}\n.fa-eject:before {\n  content: \"\\F052\";\n}\n.fa-chevron-left:before {\n  content: \"\\F053\";\n}\n.fa-chevron-right:before {\n  content: \"\\F054\";\n}\n.fa-plus-circle:before {\n  content: \"\\F055\";\n}\n.fa-minus-circle:before {\n  content: \"\\F056\";\n}\n.fa-times-circle:before {\n  content: \"\\F057\";\n}\n.fa-check-circle:before {\n  content: \"\\F058\";\n}\n.fa-question-circle:before {\n  content: \"\\F059\";\n}\n.fa-info-circle:before {\n  content: \"\\F05A\";\n}\n.fa-crosshairs:before {\n  content: \"\\F05B\";\n}\n.fa-times-circle-o:before {\n  content: \"\\F05C\";\n}\n.fa-check-circle-o:before {\n  content: \"\\F05D\";\n}\n.fa-ban:before {\n  content: \"\\F05E\";\n}\n.fa-arrow-left:before {\n  content: \"\\F060\";\n}\n.fa-arrow-right:before {\n  content: \"\\F061\";\n}\n.fa-arrow-up:before {\n  content: \"\\F062\";\n}\n.fa-arrow-down:before {\n  content: \"\\F063\";\n}\n.fa-mail-forward:before,\n.fa-share:before {\n  content: \"\\F064\";\n}\n.fa-expand:before {\n  content: \"\\F065\";\n}\n.fa-compress:before {\n  content: \"\\F066\";\n}\n.fa-plus:before {\n  content: \"\\F067\";\n}\n.fa-minus:before {\n  content: \"\\F068\";\n}\n.fa-asterisk:before {\n  content: \"\\F069\";\n}\n.fa-exclamation-circle:before {\n  content: \"\\F06A\";\n}\n.fa-gift:before {\n  content: \"\\F06B\";\n}\n.fa-leaf:before {\n  content: \"\\F06C\";\n}\n.fa-fire:before {\n  content: \"\\F06D\";\n}\n.fa-eye:before {\n  content: \"\\F06E\";\n}\n.fa-eye-slash:before {\n  content: \"\\F070\";\n}\n.fa-warning:before,\n.fa-exclamation-triangle:before {\n  content: \"\\F071\";\n}\n.fa-plane:before {\n  content: \"\\F072\";\n}\n.fa-calendar:before {\n  content: \"\\F073\";\n}\n.fa-random:before {\n  content: \"\\F074\";\n}\n.fa-comment:before {\n  content: \"\\F075\";\n}\n.fa-magnet:before {\n  content: \"\\F076\";\n}\n.fa-chevron-up:before {\n  content: \"\\F077\";\n}\n.fa-chevron-down:before {\n  content: \"\\F078\";\n}\n.fa-retweet:before {\n  content: \"\\F079\";\n}\n.fa-shopping-cart:before {\n  content: \"\\F07A\";\n}\n.fa-folder:before {\n  content: \"\\F07B\";\n}\n.fa-folder-open:before {\n  content: \"\\F07C\";\n}\n.fa-arrows-v:before {\n  content: \"\\F07D\";\n}\n.fa-arrows-h:before {\n  content: \"\\F07E\";\n}\n.fa-bar-chart-o:before,\n.fa-bar-chart:before {\n  content: \"\\F080\";\n}\n.fa-twitter-square:before {\n  content: \"\\F081\";\n}\n.fa-facebook-square:before {\n  content: \"\\F082\";\n}\n.fa-camera-retro:before {\n  content: \"\\F083\";\n}\n.fa-key:before {\n  content: \"\\F084\";\n}\n.fa-gears:before,\n.fa-cogs:before {\n  content: \"\\F085\";\n}\n.fa-comments:before {\n  content: \"\\F086\";\n}\n.fa-thumbs-o-up:before {\n  content: \"\\F087\";\n}\n.fa-thumbs-o-down:before {\n  content: \"\\F088\";\n}\n.fa-star-half:before {\n  content: \"\\F089\";\n}\n.fa-heart-o:before {\n  content: \"\\F08A\";\n}\n.fa-sign-out:before {\n  content: \"\\F08B\";\n}\n.fa-linkedin-square:before {\n  content: \"\\F08C\";\n}\n.fa-thumb-tack:before {\n  content: \"\\F08D\";\n}\n.fa-external-link:before {\n  content: \"\\F08E\";\n}\n.fa-sign-in:before {\n  content: \"\\F090\";\n}\n.fa-trophy:before {\n  content: \"\\F091\";\n}\n.fa-github-square:before {\n  content: \"\\F092\";\n}\n.fa-upload:before {\n  content: \"\\F093\";\n}\n.fa-lemon-o:before {\n  content: \"\\F094\";\n}\n.fa-phone:before {\n  content: \"\\F095\";\n}\n.fa-square-o:before {\n  content: \"\\F096\";\n}\n.fa-bookmark-o:before {\n  content: \"\\F097\";\n}\n.fa-phone-square:before {\n  content: \"\\F098\";\n}\n.fa-twitter:before {\n  content: \"\\F099\";\n}\n.fa-facebook-f:before,\n.fa-facebook:before {\n  content: \"\\F09A\";\n}\n.fa-github:before {\n  content: \"\\F09B\";\n}\n.fa-unlock:before {\n  content: \"\\F09C\";\n}\n.fa-credit-card:before {\n  content: \"\\F09D\";\n}\n.fa-feed:before,\n.fa-rss:before {\n  content: \"\\F09E\";\n}\n.fa-hdd-o:before {\n  content: \"\\F0A0\";\n}\n.fa-bullhorn:before {\n  content: \"\\F0A1\";\n}\n.fa-bell:before {\n  content: \"\\F0F3\";\n}\n.fa-certificate:before {\n  content: \"\\F0A3\";\n}\n.fa-hand-o-right:before {\n  content: \"\\F0A4\";\n}\n.fa-hand-o-left:before {\n  content: \"\\F0A5\";\n}\n.fa-hand-o-up:before {\n  content: \"\\F0A6\";\n}\n.fa-hand-o-down:before {\n  content: \"\\F0A7\";\n}\n.fa-arrow-circle-left:before {\n  content: \"\\F0A8\";\n}\n.fa-arrow-circle-right:before {\n  content: \"\\F0A9\";\n}\n.fa-arrow-circle-up:before {\n  content: \"\\F0AA\";\n}\n.fa-arrow-circle-down:before {\n  content: \"\\F0AB\";\n}\n.fa-globe:before {\n  content: \"\\F0AC\";\n}\n.fa-wrench:before {\n  content: \"\\F0AD\";\n}\n.fa-tasks:before {\n  content: \"\\F0AE\";\n}\n.fa-filter:before {\n  content: \"\\F0B0\";\n}\n.fa-briefcase:before {\n  content: \"\\F0B1\";\n}\n.fa-arrows-alt:before {\n  content: \"\\F0B2\";\n}\n.fa-group:before,\n.fa-users:before {\n  content: \"\\F0C0\";\n}\n.fa-chain:before,\n.fa-link:before {\n  content: \"\\F0C1\";\n}\n.fa-cloud:before {\n  content: \"\\F0C2\";\n}\n.fa-flask:before {\n  content: \"\\F0C3\";\n}\n.fa-cut:before,\n.fa-scissors:before {\n  content: \"\\F0C4\";\n}\n.fa-copy:before,\n.fa-files-o:before {\n  content: \"\\F0C5\";\n}\n.fa-paperclip:before {\n  content: \"\\F0C6\";\n}\n.fa-save:before,\n.fa-floppy-o:before {\n  content: \"\\F0C7\";\n}\n.fa-square:before {\n  content: \"\\F0C8\";\n}\n.fa-navicon:before,\n.fa-reorder:before,\n.fa-bars:before {\n  content: \"\\F0C9\";\n}\n.fa-list-ul:before {\n  content: \"\\F0CA\";\n}\n.fa-list-ol:before {\n  content: \"\\F0CB\";\n}\n.fa-strikethrough:before {\n  content: \"\\F0CC\";\n}\n.fa-underline:before {\n  content: \"\\F0CD\";\n}\n.fa-table:before {\n  content: \"\\F0CE\";\n}\n.fa-magic:before {\n  content: \"\\F0D0\";\n}\n.fa-truck:before {\n  content: \"\\F0D1\";\n}\n.fa-pinterest:before {\n  content: \"\\F0D2\";\n}\n.fa-pinterest-square:before {\n  content: \"\\F0D3\";\n}\n.fa-google-plus-square:before {\n  content: \"\\F0D4\";\n}\n.fa-google-plus:before {\n  content: \"\\F0D5\";\n}\n.fa-money:before {\n  content: \"\\F0D6\";\n}\n.fa-caret-down:before {\n  content: \"\\F0D7\";\n}\n.fa-caret-up:before {\n  content: \"\\F0D8\";\n}\n.fa-caret-left:before {\n  content: \"\\F0D9\";\n}\n.fa-caret-right:before {\n  content: \"\\F0DA\";\n}\n.fa-columns:before {\n  content: \"\\F0DB\";\n}\n.fa-unsorted:before,\n.fa-sort:before {\n  content: \"\\F0DC\";\n}\n.fa-sort-down:before,\n.fa-sort-desc:before {\n  content: \"\\F0DD\";\n}\n.fa-sort-up:before,\n.fa-sort-asc:before {\n  content: \"\\F0DE\";\n}\n.fa-envelope:before {\n  content: \"\\F0E0\";\n}\n.fa-linkedin:before {\n  content: \"\\F0E1\";\n}\n.fa-rotate-left:before,\n.fa-undo:before {\n  content: \"\\F0E2\";\n}\n.fa-legal:before,\n.fa-gavel:before {\n  content: \"\\F0E3\";\n}\n.fa-dashboard:before,\n.fa-tachometer:before {\n  content: \"\\F0E4\";\n}\n.fa-comment-o:before {\n  content: \"\\F0E5\";\n}\n.fa-comments-o:before {\n  content: \"\\F0E6\";\n}\n.fa-flash:before,\n.fa-bolt:before {\n  content: \"\\F0E7\";\n}\n.fa-sitemap:before {\n  content: \"\\F0E8\";\n}\n.fa-umbrella:before {\n  content: \"\\F0E9\";\n}\n.fa-paste:before,\n.fa-clipboard:before {\n  content: \"\\F0EA\";\n}\n.fa-lightbulb-o:before {\n  content: \"\\F0EB\";\n}\n.fa-exchange:before {\n  content: \"\\F0EC\";\n}\n.fa-cloud-download:before {\n  content: \"\\F0ED\";\n}\n.fa-cloud-upload:before {\n  content: \"\\F0EE\";\n}\n.fa-user-md:before {\n  content: \"\\F0F0\";\n}\n.fa-stethoscope:before {\n  content: \"\\F0F1\";\n}\n.fa-suitcase:before {\n  content: \"\\F0F2\";\n}\n.fa-bell-o:before {\n  content: \"\\F0A2\";\n}\n.fa-coffee:before {\n  content: \"\\F0F4\";\n}\n.fa-cutlery:before {\n  content: \"\\F0F5\";\n}\n.fa-file-text-o:before {\n  content: \"\\F0F6\";\n}\n.fa-building-o:before {\n  content: \"\\F0F7\";\n}\n.fa-hospital-o:before {\n  content: \"\\F0F8\";\n}\n.fa-ambulance:before {\n  content: \"\\F0F9\";\n}\n.fa-medkit:before {\n  content: \"\\F0FA\";\n}\n.fa-fighter-jet:before {\n  content: \"\\F0FB\";\n}\n.fa-beer:before {\n  content: \"\\F0FC\";\n}\n.fa-h-square:before {\n  content: \"\\F0FD\";\n}\n.fa-plus-square:before {\n  content: \"\\F0FE\";\n}\n.fa-angle-double-left:before {\n  content: \"\\F100\";\n}\n.fa-angle-double-right:before {\n  content: \"\\F101\";\n}\n.fa-angle-double-up:before {\n  content: \"\\F102\";\n}\n.fa-angle-double-down:before {\n  content: \"\\F103\";\n}\n.fa-angle-left:before {\n  content: \"\\F104\";\n}\n.fa-angle-right:before {\n  content: \"\\F105\";\n}\n.fa-angle-up:before {\n  content: \"\\F106\";\n}\n.fa-angle-down:before {\n  content: \"\\F107\";\n}\n.fa-desktop:before {\n  content: \"\\F108\";\n}\n.fa-laptop:before {\n  content: \"\\F109\";\n}\n.fa-tablet:before {\n  content: \"\\F10A\";\n}\n.fa-mobile-phone:before,\n.fa-mobile:before {\n  content: \"\\F10B\";\n}\n.fa-circle-o:before {\n  content: \"\\F10C\";\n}\n.fa-quote-left:before {\n  content: \"\\F10D\";\n}\n.fa-quote-right:before {\n  content: \"\\F10E\";\n}\n.fa-spinner:before {\n  content: \"\\F110\";\n}\n.fa-circle:before {\n  content: \"\\F111\";\n}\n.fa-mail-reply:before,\n.fa-reply:before {\n  content: \"\\F112\";\n}\n.fa-github-alt:before {\n  content: \"\\F113\";\n}\n.fa-folder-o:before {\n  content: \"\\F114\";\n}\n.fa-folder-open-o:before {\n  content: \"\\F115\";\n}\n.fa-smile-o:before {\n  content: \"\\F118\";\n}\n.fa-frown-o:before {\n  content: \"\\F119\";\n}\n.fa-meh-o:before {\n  content: \"\\F11A\";\n}\n.fa-gamepad:before {\n  content: \"\\F11B\";\n}\n.fa-keyboard-o:before {\n  content: \"\\F11C\";\n}\n.fa-flag-o:before {\n  content: \"\\F11D\";\n}\n.fa-flag-checkered:before {\n  content: \"\\F11E\";\n}\n.fa-terminal:before {\n  content: \"\\F120\";\n}\n.fa-code:before {\n  content: \"\\F121\";\n}\n.fa-mail-reply-all:before,\n.fa-reply-all:before {\n  content: \"\\F122\";\n}\n.fa-star-half-empty:before,\n.fa-star-half-full:before,\n.fa-star-half-o:before {\n  content: \"\\F123\";\n}\n.fa-location-arrow:before {\n  content: \"\\F124\";\n}\n.fa-crop:before {\n  content: \"\\F125\";\n}\n.fa-code-fork:before {\n  content: \"\\F126\";\n}\n.fa-unlink:before,\n.fa-chain-broken:before {\n  content: \"\\F127\";\n}\n.fa-question:before {\n  content: \"\\F128\";\n}\n.fa-info:before {\n  content: \"\\F129\";\n}\n.fa-exclamation:before {\n  content: \"\\F12A\";\n}\n.fa-superscript:before {\n  content: \"\\F12B\";\n}\n.fa-subscript:before {\n  content: \"\\F12C\";\n}\n.fa-eraser:before {\n  content: \"\\F12D\";\n}\n.fa-puzzle-piece:before {\n  content: \"\\F12E\";\n}\n.fa-microphone:before {\n  content: \"\\F130\";\n}\n.fa-microphone-slash:before {\n  content: \"\\F131\";\n}\n.fa-shield:before {\n  content: \"\\F132\";\n}\n.fa-calendar-o:before {\n  content: \"\\F133\";\n}\n.fa-fire-extinguisher:before {\n  content: \"\\F134\";\n}\n.fa-rocket:before {\n  content: \"\\F135\";\n}\n.fa-maxcdn:before {\n  content: \"\\F136\";\n}\n.fa-chevron-circle-left:before {\n  content: \"\\F137\";\n}\n.fa-chevron-circle-right:before {\n  content: \"\\F138\";\n}\n.fa-chevron-circle-up:before {\n  content: \"\\F139\";\n}\n.fa-chevron-circle-down:before {\n  content: \"\\F13A\";\n}\n.fa-html5:before {\n  content: \"\\F13B\";\n}\n.fa-css3:before {\n  content: \"\\F13C\";\n}\n.fa-anchor:before {\n  content: \"\\F13D\";\n}\n.fa-unlock-alt:before {\n  content: \"\\F13E\";\n}\n.fa-bullseye:before {\n  content: \"\\F140\";\n}\n.fa-ellipsis-h:before {\n  content: \"\\F141\";\n}\n.fa-ellipsis-v:before {\n  content: \"\\F142\";\n}\n.fa-rss-square:before {\n  content: \"\\F143\";\n}\n.fa-play-circle:before {\n  content: \"\\F144\";\n}\n.fa-ticket:before {\n  content: \"\\F145\";\n}\n.fa-minus-square:before {\n  content: \"\\F146\";\n}\n.fa-minus-square-o:before {\n  content: \"\\F147\";\n}\n.fa-level-up:before {\n  content: \"\\F148\";\n}\n.fa-level-down:before {\n  content: \"\\F149\";\n}\n.fa-check-square:before {\n  content: \"\\F14A\";\n}\n.fa-pencil-square:before {\n  content: \"\\F14B\";\n}\n.fa-external-link-square:before {\n  content: \"\\F14C\";\n}\n.fa-share-square:before {\n  content: \"\\F14D\";\n}\n.fa-compass:before {\n  content: \"\\F14E\";\n}\n.fa-toggle-down:before,\n.fa-caret-square-o-down:before {\n  content: \"\\F150\";\n}\n.fa-toggle-up:before,\n.fa-caret-square-o-up:before {\n  content: \"\\F151\";\n}\n.fa-toggle-right:before,\n.fa-caret-square-o-right:before {\n  content: \"\\F152\";\n}\n.fa-euro:before,\n.fa-eur:before {\n  content: \"\\F153\";\n}\n.fa-gbp:before {\n  content: \"\\F154\";\n}\n.fa-dollar:before,\n.fa-usd:before {\n  content: \"\\F155\";\n}\n.fa-rupee:before,\n.fa-inr:before {\n  content: \"\\F156\";\n}\n.fa-cny:before,\n.fa-rmb:before,\n.fa-yen:before,\n.fa-jpy:before {\n  content: \"\\F157\";\n}\n.fa-ruble:before,\n.fa-rouble:before,\n.fa-rub:before {\n  content: \"\\F158\";\n}\n.fa-won:before,\n.fa-krw:before {\n  content: \"\\F159\";\n}\n.fa-bitcoin:before,\n.fa-btc:before {\n  content: \"\\F15A\";\n}\n.fa-file:before {\n  content: \"\\F15B\";\n}\n.fa-file-text:before {\n  content: \"\\F15C\";\n}\n.fa-sort-alpha-asc:before {\n  content: \"\\F15D\";\n}\n.fa-sort-alpha-desc:before {\n  content: \"\\F15E\";\n}\n.fa-sort-amount-asc:before {\n  content: \"\\F160\";\n}\n.fa-sort-amount-desc:before {\n  content: \"\\F161\";\n}\n.fa-sort-numeric-asc:before {\n  content: \"\\F162\";\n}\n.fa-sort-numeric-desc:before {\n  content: \"\\F163\";\n}\n.fa-thumbs-up:before {\n  content: \"\\F164\";\n}\n.fa-thumbs-down:before {\n  content: \"\\F165\";\n}\n.fa-youtube-square:before {\n  content: \"\\F166\";\n}\n.fa-youtube:before {\n  content: \"\\F167\";\n}\n.fa-xing:before {\n  content: \"\\F168\";\n}\n.fa-xing-square:before {\n  content: \"\\F169\";\n}\n.fa-youtube-play:before {\n  content: \"\\F16A\";\n}\n.fa-dropbox:before {\n  content: \"\\F16B\";\n}\n.fa-stack-overflow:before {\n  content: \"\\F16C\";\n}\n.fa-instagram:before {\n  content: \"\\F16D\";\n}\n.fa-flickr:before {\n  content: \"\\F16E\";\n}\n.fa-adn:before {\n  content: \"\\F170\";\n}\n.fa-bitbucket:before {\n  content: \"\\F171\";\n}\n.fa-bitbucket-square:before {\n  content: \"\\F172\";\n}\n.fa-tumblr:before {\n  content: \"\\F173\";\n}\n.fa-tumblr-square:before {\n  content: \"\\F174\";\n}\n.fa-long-arrow-down:before {\n  content: \"\\F175\";\n}\n.fa-long-arrow-up:before {\n  content: \"\\F176\";\n}\n.fa-long-arrow-left:before {\n  content: \"\\F177\";\n}\n.fa-long-arrow-right:before {\n  content: \"\\F178\";\n}\n.fa-apple:before {\n  content: \"\\F179\";\n}\n.fa-windows:before {\n  content: \"\\F17A\";\n}\n.fa-android:before {\n  content: \"\\F17B\";\n}\n.fa-linux:before {\n  content: \"\\F17C\";\n}\n.fa-dribbble:before {\n  content: \"\\F17D\";\n}\n.fa-skype:before {\n  content: \"\\F17E\";\n}\n.fa-foursquare:before {\n  content: \"\\F180\";\n}\n.fa-trello:before {\n  content: \"\\F181\";\n}\n.fa-female:before {\n  content: \"\\F182\";\n}\n.fa-male:before {\n  content: \"\\F183\";\n}\n.fa-gittip:before,\n.fa-gratipay:before {\n  content: \"\\F184\";\n}\n.fa-sun-o:before {\n  content: \"\\F185\";\n}\n.fa-moon-o:before {\n  content: \"\\F186\";\n}\n.fa-archive:before {\n  content: \"\\F187\";\n}\n.fa-bug:before {\n  content: \"\\F188\";\n}\n.fa-vk:before {\n  content: \"\\F189\";\n}\n.fa-weibo:before {\n  content: \"\\F18A\";\n}\n.fa-renren:before {\n  content: \"\\F18B\";\n}\n.fa-pagelines:before {\n  content: \"\\F18C\";\n}\n.fa-stack-exchange:before {\n  content: \"\\F18D\";\n}\n.fa-arrow-circle-o-right:before {\n  content: \"\\F18E\";\n}\n.fa-arrow-circle-o-left:before {\n  content: \"\\F190\";\n}\n.fa-toggle-left:before,\n.fa-caret-square-o-left:before {\n  content: \"\\F191\";\n}\n.fa-dot-circle-o:before {\n  content: \"\\F192\";\n}\n.fa-wheelchair:before {\n  content: \"\\F193\";\n}\n.fa-vimeo-square:before {\n  content: \"\\F194\";\n}\n.fa-turkish-lira:before,\n.fa-try:before {\n  content: \"\\F195\";\n}\n.fa-plus-square-o:before {\n  content: \"\\F196\";\n}\n.fa-space-shuttle:before {\n  content: \"\\F197\";\n}\n.fa-slack:before {\n  content: \"\\F198\";\n}\n.fa-envelope-square:before {\n  content: \"\\F199\";\n}\n.fa-wordpress:before {\n  content: \"\\F19A\";\n}\n.fa-openid:before {\n  content: \"\\F19B\";\n}\n.fa-institution:before,\n.fa-bank:before,\n.fa-university:before {\n  content: \"\\F19C\";\n}\n.fa-mortar-board:before,\n.fa-graduation-cap:before {\n  content: \"\\F19D\";\n}\n.fa-yahoo:before {\n  content: \"\\F19E\";\n}\n.fa-google:before {\n  content: \"\\F1A0\";\n}\n.fa-reddit:before {\n  content: \"\\F1A1\";\n}\n.fa-reddit-square:before {\n  content: \"\\F1A2\";\n}\n.fa-stumbleupon-circle:before {\n  content: \"\\F1A3\";\n}\n.fa-stumbleupon:before {\n  content: \"\\F1A4\";\n}\n.fa-delicious:before {\n  content: \"\\F1A5\";\n}\n.fa-digg:before {\n  content: \"\\F1A6\";\n}\n.fa-pied-piper-pp:before {\n  content: \"\\F1A7\";\n}\n.fa-pied-piper-alt:before {\n  content: \"\\F1A8\";\n}\n.fa-drupal:before {\n  content: \"\\F1A9\";\n}\n.fa-joomla:before {\n  content: \"\\F1AA\";\n}\n.fa-language:before {\n  content: \"\\F1AB\";\n}\n.fa-fax:before {\n  content: \"\\F1AC\";\n}\n.fa-building:before {\n  content: \"\\F1AD\";\n}\n.fa-child:before {\n  content: \"\\F1AE\";\n}\n.fa-paw:before {\n  content: \"\\F1B0\";\n}\n.fa-spoon:before {\n  content: \"\\F1B1\";\n}\n.fa-cube:before {\n  content: \"\\F1B2\";\n}\n.fa-cubes:before {\n  content: \"\\F1B3\";\n}\n.fa-behance:before {\n  content: \"\\F1B4\";\n}\n.fa-behance-square:before {\n  content: \"\\F1B5\";\n}\n.fa-steam:before {\n  content: \"\\F1B6\";\n}\n.fa-steam-square:before {\n  content: \"\\F1B7\";\n}\n.fa-recycle:before {\n  content: \"\\F1B8\";\n}\n.fa-automobile:before,\n.fa-car:before {\n  content: \"\\F1B9\";\n}\n.fa-cab:before,\n.fa-taxi:before {\n  content: \"\\F1BA\";\n}\n.fa-tree:before {\n  content: \"\\F1BB\";\n}\n.fa-spotify:before {\n  content: \"\\F1BC\";\n}\n.fa-deviantart:before {\n  content: \"\\F1BD\";\n}\n.fa-soundcloud:before {\n  content: \"\\F1BE\";\n}\n.fa-database:before {\n  content: \"\\F1C0\";\n}\n.fa-file-pdf-o:before {\n  content: \"\\F1C1\";\n}\n.fa-file-word-o:before {\n  content: \"\\F1C2\";\n}\n.fa-file-excel-o:before {\n  content: \"\\F1C3\";\n}\n.fa-file-powerpoint-o:before {\n  content: \"\\F1C4\";\n}\n.fa-file-photo-o:before,\n.fa-file-picture-o:before,\n.fa-file-image-o:before {\n  content: \"\\F1C5\";\n}\n.fa-file-zip-o:before,\n.fa-file-archive-o:before {\n  content: \"\\F1C6\";\n}\n.fa-file-sound-o:before,\n.fa-file-audio-o:before {\n  content: \"\\F1C7\";\n}\n.fa-file-movie-o:before,\n.fa-file-video-o:before {\n  content: \"\\F1C8\";\n}\n.fa-file-code-o:before {\n  content: \"\\F1C9\";\n}\n.fa-vine:before {\n  content: \"\\F1CA\";\n}\n.fa-codepen:before {\n  content: \"\\F1CB\";\n}\n.fa-jsfiddle:before {\n  content: \"\\F1CC\";\n}\n.fa-life-bouy:before,\n.fa-life-buoy:before,\n.fa-life-saver:before,\n.fa-support:before,\n.fa-life-ring:before {\n  content: \"\\F1CD\";\n}\n.fa-circle-o-notch:before {\n  content: \"\\F1CE\";\n}\n.fa-ra:before,\n.fa-resistance:before,\n.fa-rebel:before {\n  content: \"\\F1D0\";\n}\n.fa-ge:before,\n.fa-empire:before {\n  content: \"\\F1D1\";\n}\n.fa-git-square:before {\n  content: \"\\F1D2\";\n}\n.fa-git:before {\n  content: \"\\F1D3\";\n}\n.fa-y-combinator-square:before,\n.fa-yc-square:before,\n.fa-hacker-news:before {\n  content: \"\\F1D4\";\n}\n.fa-tencent-weibo:before {\n  content: \"\\F1D5\";\n}\n.fa-qq:before {\n  content: \"\\F1D6\";\n}\n.fa-wechat:before,\n.fa-weixin:before {\n  content: \"\\F1D7\";\n}\n.fa-send:before,\n.fa-paper-plane:before {\n  content: \"\\F1D8\";\n}\n.fa-send-o:before,\n.fa-paper-plane-o:before {\n  content: \"\\F1D9\";\n}\n.fa-history:before {\n  content: \"\\F1DA\";\n}\n.fa-circle-thin:before {\n  content: \"\\F1DB\";\n}\n.fa-header:before {\n  content: \"\\F1DC\";\n}\n.fa-paragraph:before {\n  content: \"\\F1DD\";\n}\n.fa-sliders:before {\n  content: \"\\F1DE\";\n}\n.fa-share-alt:before {\n  content: \"\\F1E0\";\n}\n.fa-share-alt-square:before {\n  content: \"\\F1E1\";\n}\n.fa-bomb:before {\n  content: \"\\F1E2\";\n}\n.fa-soccer-ball-o:before,\n.fa-futbol-o:before {\n  content: \"\\F1E3\";\n}\n.fa-tty:before {\n  content: \"\\F1E4\";\n}\n.fa-binoculars:before {\n  content: \"\\F1E5\";\n}\n.fa-plug:before {\n  content: \"\\F1E6\";\n}\n.fa-slideshare:before {\n  content: \"\\F1E7\";\n}\n.fa-twitch:before {\n  content: \"\\F1E8\";\n}\n.fa-yelp:before {\n  content: \"\\F1E9\";\n}\n.fa-newspaper-o:before {\n  content: \"\\F1EA\";\n}\n.fa-wifi:before {\n  content: \"\\F1EB\";\n}\n.fa-calculator:before {\n  content: \"\\F1EC\";\n}\n.fa-paypal:before {\n  content: \"\\F1ED\";\n}\n.fa-google-wallet:before {\n  content: \"\\F1EE\";\n}\n.fa-cc-visa:before {\n  content: \"\\F1F0\";\n}\n.fa-cc-mastercard:before {\n  content: \"\\F1F1\";\n}\n.fa-cc-discover:before {\n  content: \"\\F1F2\";\n}\n.fa-cc-amex:before {\n  content: \"\\F1F3\";\n}\n.fa-cc-paypal:before {\n  content: \"\\F1F4\";\n}\n.fa-cc-stripe:before {\n  content: \"\\F1F5\";\n}\n.fa-bell-slash:before {\n  content: \"\\F1F6\";\n}\n.fa-bell-slash-o:before {\n  content: \"\\F1F7\";\n}\n.fa-trash:before {\n  content: \"\\F1F8\";\n}\n.fa-copyright:before {\n  content: \"\\F1F9\";\n}\n.fa-at:before {\n  content: \"\\F1FA\";\n}\n.fa-eyedropper:before {\n  content: \"\\F1FB\";\n}\n.fa-paint-brush:before {\n  content: \"\\F1FC\";\n}\n.fa-birthday-cake:before {\n  content: \"\\F1FD\";\n}\n.fa-area-chart:before {\n  content: \"\\F1FE\";\n}\n.fa-pie-chart:before {\n  content: \"\\F200\";\n}\n.fa-line-chart:before {\n  content: \"\\F201\";\n}\n.fa-lastfm:before {\n  content: \"\\F202\";\n}\n.fa-lastfm-square:before {\n  content: \"\\F203\";\n}\n.fa-toggle-off:before {\n  content: \"\\F204\";\n}\n.fa-toggle-on:before {\n  content: \"\\F205\";\n}\n.fa-bicycle:before {\n  content: \"\\F206\";\n}\n.fa-bus:before {\n  content: \"\\F207\";\n}\n.fa-ioxhost:before {\n  content: \"\\F208\";\n}\n.fa-angellist:before {\n  content: \"\\F209\";\n}\n.fa-cc:before {\n  content: \"\\F20A\";\n}\n.fa-shekel:before,\n.fa-sheqel:before,\n.fa-ils:before {\n  content: \"\\F20B\";\n}\n.fa-meanpath:before {\n  content: \"\\F20C\";\n}\n.fa-buysellads:before {\n  content: \"\\F20D\";\n}\n.fa-connectdevelop:before {\n  content: \"\\F20E\";\n}\n.fa-dashcube:before {\n  content: \"\\F210\";\n}\n.fa-forumbee:before {\n  content: \"\\F211\";\n}\n.fa-leanpub:before {\n  content: \"\\F212\";\n}\n.fa-sellsy:before {\n  content: \"\\F213\";\n}\n.fa-shirtsinbulk:before {\n  content: \"\\F214\";\n}\n.fa-simplybuilt:before {\n  content: \"\\F215\";\n}\n.fa-skyatlas:before {\n  content: \"\\F216\";\n}\n.fa-cart-plus:before {\n  content: \"\\F217\";\n}\n.fa-cart-arrow-down:before {\n  content: \"\\F218\";\n}\n.fa-diamond:before {\n  content: \"\\F219\";\n}\n.fa-ship:before {\n  content: \"\\F21A\";\n}\n.fa-user-secret:before {\n  content: \"\\F21B\";\n}\n.fa-motorcycle:before {\n  content: \"\\F21C\";\n}\n.fa-street-view:before {\n  content: \"\\F21D\";\n}\n.fa-heartbeat:before {\n  content: \"\\F21E\";\n}\n.fa-venus:before {\n  content: \"\\F221\";\n}\n.fa-mars:before {\n  content: \"\\F222\";\n}\n.fa-mercury:before {\n  content: \"\\F223\";\n}\n.fa-intersex:before,\n.fa-transgender:before {\n  content: \"\\F224\";\n}\n.fa-transgender-alt:before {\n  content: \"\\F225\";\n}\n.fa-venus-double:before {\n  content: \"\\F226\";\n}\n.fa-mars-double:before {\n  content: \"\\F227\";\n}\n.fa-venus-mars:before {\n  content: \"\\F228\";\n}\n.fa-mars-stroke:before {\n  content: \"\\F229\";\n}\n.fa-mars-stroke-v:before {\n  content: \"\\F22A\";\n}\n.fa-mars-stroke-h:before {\n  content: \"\\F22B\";\n}\n.fa-neuter:before {\n  content: \"\\F22C\";\n}\n.fa-genderless:before {\n  content: \"\\F22D\";\n}\n.fa-facebook-official:before {\n  content: \"\\F230\";\n}\n.fa-pinterest-p:before {\n  content: \"\\F231\";\n}\n.fa-whatsapp:before {\n  content: \"\\F232\";\n}\n.fa-server:before {\n  content: \"\\F233\";\n}\n.fa-user-plus:before {\n  content: \"\\F234\";\n}\n.fa-user-times:before {\n  content: \"\\F235\";\n}\n.fa-hotel:before,\n.fa-bed:before {\n  content: \"\\F236\";\n}\n.fa-viacoin:before {\n  content: \"\\F237\";\n}\n.fa-train:before {\n  content: \"\\F238\";\n}\n.fa-subway:before {\n  content: \"\\F239\";\n}\n.fa-medium:before {\n  content: \"\\F23A\";\n}\n.fa-yc:before,\n.fa-y-combinator:before {\n  content: \"\\F23B\";\n}\n.fa-optin-monster:before {\n  content: \"\\F23C\";\n}\n.fa-opencart:before {\n  content: \"\\F23D\";\n}\n.fa-expeditedssl:before {\n  content: \"\\F23E\";\n}\n.fa-battery-4:before,\n.fa-battery:before,\n.fa-battery-full:before {\n  content: \"\\F240\";\n}\n.fa-battery-3:before,\n.fa-battery-three-quarters:before {\n  content: \"\\F241\";\n}\n.fa-battery-2:before,\n.fa-battery-half:before {\n  content: \"\\F242\";\n}\n.fa-battery-1:before,\n.fa-battery-quarter:before {\n  content: \"\\F243\";\n}\n.fa-battery-0:before,\n.fa-battery-empty:before {\n  content: \"\\F244\";\n}\n.fa-mouse-pointer:before {\n  content: \"\\F245\";\n}\n.fa-i-cursor:before {\n  content: \"\\F246\";\n}\n.fa-object-group:before {\n  content: \"\\F247\";\n}\n.fa-object-ungroup:before {\n  content: \"\\F248\";\n}\n.fa-sticky-note:before {\n  content: \"\\F249\";\n}\n.fa-sticky-note-o:before {\n  content: \"\\F24A\";\n}\n.fa-cc-jcb:before {\n  content: \"\\F24B\";\n}\n.fa-cc-diners-club:before {\n  content: \"\\F24C\";\n}\n.fa-clone:before {\n  content: \"\\F24D\";\n}\n.fa-balance-scale:before {\n  content: \"\\F24E\";\n}\n.fa-hourglass-o:before {\n  content: \"\\F250\";\n}\n.fa-hourglass-1:before,\n.fa-hourglass-start:before {\n  content: \"\\F251\";\n}\n.fa-hourglass-2:before,\n.fa-hourglass-half:before {\n  content: \"\\F252\";\n}\n.fa-hourglass-3:before,\n.fa-hourglass-end:before {\n  content: \"\\F253\";\n}\n.fa-hourglass:before {\n  content: \"\\F254\";\n}\n.fa-hand-grab-o:before,\n.fa-hand-rock-o:before {\n  content: \"\\F255\";\n}\n.fa-hand-stop-o:before,\n.fa-hand-paper-o:before {\n  content: \"\\F256\";\n}\n.fa-hand-scissors-o:before {\n  content: \"\\F257\";\n}\n.fa-hand-lizard-o:before {\n  content: \"\\F258\";\n}\n.fa-hand-spock-o:before {\n  content: \"\\F259\";\n}\n.fa-hand-pointer-o:before {\n  content: \"\\F25A\";\n}\n.fa-hand-peace-o:before {\n  content: \"\\F25B\";\n}\n.fa-trademark:before {\n  content: \"\\F25C\";\n}\n.fa-registered:before {\n  content: \"\\F25D\";\n}\n.fa-creative-commons:before {\n  content: \"\\F25E\";\n}\n.fa-gg:before {\n  content: \"\\F260\";\n}\n.fa-gg-circle:before {\n  content: \"\\F261\";\n}\n.fa-tripadvisor:before {\n  content: \"\\F262\";\n}\n.fa-odnoklassniki:before {\n  content: \"\\F263\";\n}\n.fa-odnoklassniki-square:before {\n  content: \"\\F264\";\n}\n.fa-get-pocket:before {\n  content: \"\\F265\";\n}\n.fa-wikipedia-w:before {\n  content: \"\\F266\";\n}\n.fa-safari:before {\n  content: \"\\F267\";\n}\n.fa-chrome:before {\n  content: \"\\F268\";\n}\n.fa-firefox:before {\n  content: \"\\F269\";\n}\n.fa-opera:before {\n  content: \"\\F26A\";\n}\n.fa-internet-explorer:before {\n  content: \"\\F26B\";\n}\n.fa-tv:before,\n.fa-television:before {\n  content: \"\\F26C\";\n}\n.fa-contao:before {\n  content: \"\\F26D\";\n}\n.fa-500px:before {\n  content: \"\\F26E\";\n}\n.fa-amazon:before {\n  content: \"\\F270\";\n}\n.fa-calendar-plus-o:before {\n  content: \"\\F271\";\n}\n.fa-calendar-minus-o:before {\n  content: \"\\F272\";\n}\n.fa-calendar-times-o:before {\n  content: \"\\F273\";\n}\n.fa-calendar-check-o:before {\n  content: \"\\F274\";\n}\n.fa-industry:before {\n  content: \"\\F275\";\n}\n.fa-map-pin:before {\n  content: \"\\F276\";\n}\n.fa-map-signs:before {\n  content: \"\\F277\";\n}\n.fa-map-o:before {\n  content: \"\\F278\";\n}\n.fa-map:before {\n  content: \"\\F279\";\n}\n.fa-commenting:before {\n  content: \"\\F27A\";\n}\n.fa-commenting-o:before {\n  content: \"\\F27B\";\n}\n.fa-houzz:before {\n  content: \"\\F27C\";\n}\n.fa-vimeo:before {\n  content: \"\\F27D\";\n}\n.fa-black-tie:before {\n  content: \"\\F27E\";\n}\n.fa-fonticons:before {\n  content: \"\\F280\";\n}\n.fa-reddit-alien:before {\n  content: \"\\F281\";\n}\n.fa-edge:before {\n  content: \"\\F282\";\n}\n.fa-credit-card-alt:before {\n  content: \"\\F283\";\n}\n.fa-codiepie:before {\n  content: \"\\F284\";\n}\n.fa-modx:before {\n  content: \"\\F285\";\n}\n.fa-fort-awesome:before {\n  content: \"\\F286\";\n}\n.fa-usb:before {\n  content: \"\\F287\";\n}\n.fa-product-hunt:before {\n  content: \"\\F288\";\n}\n.fa-mixcloud:before {\n  content: \"\\F289\";\n}\n.fa-scribd:before {\n  content: \"\\F28A\";\n}\n.fa-pause-circle:before {\n  content: \"\\F28B\";\n}\n.fa-pause-circle-o:before {\n  content: \"\\F28C\";\n}\n.fa-stop-circle:before {\n  content: \"\\F28D\";\n}\n.fa-stop-circle-o:before {\n  content: \"\\F28E\";\n}\n.fa-shopping-bag:before {\n  content: \"\\F290\";\n}\n.fa-shopping-basket:before {\n  content: \"\\F291\";\n}\n.fa-hashtag:before {\n  content: \"\\F292\";\n}\n.fa-bluetooth:before {\n  content: \"\\F293\";\n}\n.fa-bluetooth-b:before {\n  content: \"\\F294\";\n}\n.fa-percent:before {\n  content: \"\\F295\";\n}\n.fa-gitlab:before {\n  content: \"\\F296\";\n}\n.fa-wpbeginner:before {\n  content: \"\\F297\";\n}\n.fa-wpforms:before {\n  content: \"\\F298\";\n}\n.fa-envira:before {\n  content: \"\\F299\";\n}\n.fa-universal-access:before {\n  content: \"\\F29A\";\n}\n.fa-wheelchair-alt:before {\n  content: \"\\F29B\";\n}\n.fa-question-circle-o:before {\n  content: \"\\F29C\";\n}\n.fa-blind:before {\n  content: \"\\F29D\";\n}\n.fa-audio-description:before {\n  content: \"\\F29E\";\n}\n.fa-volume-control-phone:before {\n  content: \"\\F2A0\";\n}\n.fa-braille:before {\n  content: \"\\F2A1\";\n}\n.fa-assistive-listening-systems:before {\n  content: \"\\F2A2\";\n}\n.fa-asl-interpreting:before,\n.fa-american-sign-language-interpreting:before {\n  content: \"\\F2A3\";\n}\n.fa-deafness:before,\n.fa-hard-of-hearing:before,\n.fa-deaf:before {\n  content: \"\\F2A4\";\n}\n.fa-glide:before {\n  content: \"\\F2A5\";\n}\n.fa-glide-g:before {\n  content: \"\\F2A6\";\n}\n.fa-signing:before,\n.fa-sign-language:before {\n  content: \"\\F2A7\";\n}\n.fa-low-vision:before {\n  content: \"\\F2A8\";\n}\n.fa-viadeo:before {\n  content: \"\\F2A9\";\n}\n.fa-viadeo-square:before {\n  content: \"\\F2AA\";\n}\n.fa-snapchat:before {\n  content: \"\\F2AB\";\n}\n.fa-snapchat-ghost:before {\n  content: \"\\F2AC\";\n}\n.fa-snapchat-square:before {\n  content: \"\\F2AD\";\n}\n.fa-pied-piper:before {\n  content: \"\\F2AE\";\n}\n.fa-first-order:before {\n  content: \"\\F2B0\";\n}\n.fa-yoast:before {\n  content: \"\\F2B1\";\n}\n.fa-themeisle:before {\n  content: \"\\F2B2\";\n}\n.fa-google-plus-circle:before,\n.fa-google-plus-official:before {\n  content: \"\\F2B3\";\n}\n.fa-fa:before,\n.fa-font-awesome:before {\n  content: \"\\F2B4\";\n}\n.fa-handshake-o:before {\n  content: \"\\F2B5\";\n}\n.fa-envelope-open:before {\n  content: \"\\F2B6\";\n}\n.fa-envelope-open-o:before {\n  content: \"\\F2B7\";\n}\n.fa-linode:before {\n  content: \"\\F2B8\";\n}\n.fa-address-book:before {\n  content: \"\\F2B9\";\n}\n.fa-address-book-o:before {\n  content: \"\\F2BA\";\n}\n.fa-vcard:before,\n.fa-address-card:before {\n  content: \"\\F2BB\";\n}\n.fa-vcard-o:before,\n.fa-address-card-o:before {\n  content: \"\\F2BC\";\n}\n.fa-user-circle:before {\n  content: \"\\F2BD\";\n}\n.fa-user-circle-o:before {\n  content: \"\\F2BE\";\n}\n.fa-user-o:before {\n  content: \"\\F2C0\";\n}\n.fa-id-badge:before {\n  content: \"\\F2C1\";\n}\n.fa-drivers-license:before,\n.fa-id-card:before {\n  content: \"\\F2C2\";\n}\n.fa-drivers-license-o:before,\n.fa-id-card-o:before {\n  content: \"\\F2C3\";\n}\n.fa-quora:before {\n  content: \"\\F2C4\";\n}\n.fa-free-code-camp:before {\n  content: \"\\F2C5\";\n}\n.fa-telegram:before {\n  content: \"\\F2C6\";\n}\n.fa-thermometer-4:before,\n.fa-thermometer:before,\n.fa-thermometer-full:before {\n  content: \"\\F2C7\";\n}\n.fa-thermometer-3:before,\n.fa-thermometer-three-quarters:before {\n  content: \"\\F2C8\";\n}\n.fa-thermometer-2:before,\n.fa-thermometer-half:before {\n  content: \"\\F2C9\";\n}\n.fa-thermometer-1:before,\n.fa-thermometer-quarter:before {\n  content: \"\\F2CA\";\n}\n.fa-thermometer-0:before,\n.fa-thermometer-empty:before {\n  content: \"\\F2CB\";\n}\n.fa-shower:before {\n  content: \"\\F2CC\";\n}\n.fa-bathtub:before,\n.fa-s15:before,\n.fa-bath:before {\n  content: \"\\F2CD\";\n}\n.fa-podcast:before {\n  content: \"\\F2CE\";\n}\n.fa-window-maximize:before {\n  content: \"\\F2D0\";\n}\n.fa-window-minimize:before {\n  content: \"\\F2D1\";\n}\n.fa-window-restore:before {\n  content: \"\\F2D2\";\n}\n.fa-times-rectangle:before,\n.fa-window-close:before {\n  content: \"\\F2D3\";\n}\n.fa-times-rectangle-o:before,\n.fa-window-close-o:before {\n  content: \"\\F2D4\";\n}\n.fa-bandcamp:before {\n  content: \"\\F2D5\";\n}\n.fa-grav:before {\n  content: \"\\F2D6\";\n}\n.fa-etsy:before {\n  content: \"\\F2D7\";\n}\n.fa-imdb:before {\n  content: \"\\F2D8\";\n}\n.fa-ravelry:before {\n  content: \"\\F2D9\";\n}\n.fa-eercast:before {\n  content: \"\\F2DA\";\n}\n.fa-microchip:before {\n  content: \"\\F2DB\";\n}\n.fa-snowflake-o:before {\n  content: \"\\F2DC\";\n}\n.fa-superpowers:before {\n  content: \"\\F2DD\";\n}\n.fa-wpexplorer:before {\n  content: \"\\F2DE\";\n}\n.fa-meetup:before {\n  content: \"\\F2E0\";\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n", ""]);
	
	// exports


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "674f50d287a8c48dc19ba404d20fe713.eot";

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "674f50d287a8c48dc19ba404d20fe713.eot";

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "af7ae505a9eed503f8b8e6982036873e.woff2";

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fee66e712a8a08eef5805a46892932ad.woff";

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b06871f281fee6b241d60582ae9369b9.ttf";

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "912ec66d7572ff821749319396470bde.svg";

/***/ },
/* 230 */,
/* 231 */,
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const Immutable = __webpack_require__(188);
	
	/**
	 * Converts an action in place to a serializable equivalent which is safe
	 * to communicate across processes.  This basically just remoes all of the
	 * Immutable JS.
	 */
	module.exports.serialize = action => {
	  return JSON.stringify(action);
	};
	
	/**
	 * Converts a serialized action in place to one using ImmutableJS where possible.
	 */
	module.exports.deserialize = action => {
	  let newAction = JSON.parse(action);
	  for (let property in newAction) {
	    if (newAction.hasOwnProperty(property) && newAction[property] instanceof Object) {
	      newAction[property] = Immutable.fromJS(newAction[property]);
	    }
	  }
	  return newAction;
	};

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const windowConstants = {
	  WINDOW_SET_URL: _,
	  WINDOW_SET_NAVBAR_INPUT: _,
	  WINDOW_NEW_FRAME: _,
	  WINDOW_VIEW_KEY: _,
	  WINDOW_CLOSE_FRAME: _,
	  WINDOW_SET_ACTIVE_FRAME: _,
	  WINDOW_SET_FOCUSED_FRAME: _,
	  WINDOW_SET_PREVIEW_FRAME: _,
	  WINDOW_SET_PREVIEW_TAB_PAGE_INDEX: _,
	  WINDOW_SET_TAB_PAGE_INDEX: _,
	  WINDOW_SET_IS_BEING_DRAGGED_OVER_DETAIL: _,
	  WINDOW_TAB_MOVE: _,
	  WINDOW_SET_THEME_COLOR: _,
	  WINDOW_WEBVIEW_LOAD_END: _,
	  WINDOW_SET_FULL_SCREEN: _,
	  WINDOW_SET_LINK_HOVER_PREVIEW: _,
	  WINDOW_SET_URL_BAR_SUGGESTIONS: _,
	  WINDOW_SET_RENDER_URL_BAR_SUGGESTIONS: _,
	  WINDOW_URL_BAR_AUTOCOMPLETE_ENABLED: _,
	  WINDOW_SEARCH_SUGGESTION_RESULTS_AVAILABLE: _,
	  WINDOW_URL_BAR_SUGGESTIONS_CLEARED: _,
	  WINDOW_PREVIOUS_URL_BAR_SUGGESTION_SELECTED: _,
	  WINDOW_NEXT_URL_BAR_SUGGESTION_SELECTED: _,
	  WINDOW_ACTIVE_URL_BAR_SUGGESTION_CLICKED: _,
	  WINDOW_WEBVIEW_LOAD_START: _,
	  WINDOW_ADD_HISTORY: _,
	  WINDOW_SET_FRAME_ERROR: _,
	  WINDOW_SET_FRAME_TAB_ID: _,
	  WINDOW_SET_FRAME_TITLE: _,
	  WINDOW_SET_NAVIGATED: _,
	  WINDOW_SET_URL_BAR_ACTIVE: _, // whether the URL bar is being typed in
	  WINDOW_UNDO_CLOSED_FRAME: _,
	  WINDOW_CLEAR_CLOSED_FRAMES: _,
	  WINDOW_SET_ACTIVE_FRAME_SHORTCUT: _,
	  WINDOW_SET_URL_BAR_SELECTED: _,
	  WINDOW_SET_URL_BAR_FOCUSED: _,
	  WINDOW_SET_SEARCH_DETAIL: _,
	  WINDOW_SET_FIND_DETAIL: _,
	  WINDOW_SET_BOOKMARK_DETAIL: _, // If set, also indicates that add/edit is shown
	  WINDOW_SET_CONTEXT_MENU_DETAIL: _, // If set, also indicates that the context menu is shown
	  WINDOW_SET_CONTEXT_MENU_SELECTED_INDEX: _,
	  WINDOW_SET_POPUP_WINDOW_DETAIL: _, // If set, also indicates that the popup window is shown
	  WINDOW_HIDE_BOOKMARK_HANGER: _,
	  WINDOW_SET_AUDIO_MUTED: _,
	  WINDOW_SET_AUDIO_PLAYBACK_ACTIVE: _,
	  WINDOW_SET_FAVICON: _,
	  WINDOW_SET_MAXIMIZE_STATE: _,
	  WINDOW_SAVE_POSITION: _,
	  WINDOW_SAVE_SIZE: _,
	  WINDOW_SET_FULLSCREEN_STATE: _,
	  WINDOW_SET_MOUSE_IN_TITLEBAR: _,
	  WINDOW_SET_FINDBAR_SHOWN: _, // whether the findbar is shown
	  WINDOW_SET_FINDBAR_SELECTED: _, // whether the findbar is active
	  WINDOW_SET_PINNED: _, // Whehter the current tab is pinned or not
	  WINDOW_SET_SITE_INFO_VISIBLE: _, // Whether or not to show site info like # of blocked ads
	  WINDOW_SET_BRAVERY_PANEL_DETAIL: _, // Whether or not to show the Bravery panel and info about how to show it
	  WINDOW_SET_DOWNLOADS_TOOLBAR_VISIBLE: _, // Whether or not to show the downloads toolbar
	  WINDOW_SET_RELEASE_NOTES_VISIBLE: _, // Whether or not to show release notes
	  WINDOW_SET_NOSCRIPT_VISIBLE: _, // Whether or not to show noscript info
	  WINDOW_SET_BLOCKED_BY: _, // Whether or not to show site info like # of blocked ads
	  WINDOW_SET_REDIRECTED_BY: _, // Whether or not to show site info like redirected resources
	  WINDOW_SET_SECURITY_STATE: _,
	  WINDOW_SET_STATE: _,
	  WINDOW_SET_LAST_ZOOM_PERCENTAGE: _,
	  WINDOW_SET_CLEAR_BROWSING_DATA_VISIBLE: _,
	  WINDOW_SET_IMPORT_BROWSER_DATA_DETAIL: _,
	  WINDOW_SET_IMPORT_BROWSER_DATA_SELECTED: _,
	  WINDOW_SET_AUTOFILL_ADDRESS_DETAIL: _,
	  WINDOW_SET_AUTOFILL_CREDIT_CARD_DETAIL: _,
	  WINDOW_SET_BLOCKED_RUN_INSECURE_CONTENT: _,
	  WINDOW_TOGGLE_MENUBAR_VISIBLE: _,
	  WINDOW_CLICK_MENUBAR_SUBMENU: _,
	  WINDOW_RESET_MENU_STATE: _,
	  WINDOW_SET_MENUBAR_SELECTED_INDEX: _,
	  WINDOW_SET_LAST_FOCUSED_SELECTOR: _,
	  WINDOW_GOT_RESPONSE_DETAILS: _,
	  WINDOW_SET_BOOKMARKS_TOOLBAR_SELECTED_FOLDER_ID: _,
	  WINDOW_ON_FOCUS_CHANGED: _,
	  WINDOW_SET_MODAL_DIALOG_DETAIL: _,
	  WINDOW_WIDEVINE_SITE_ACCESSED_WITHOUT_INSTALL: _,
	  WINDOW_WIDEVINE_PANEL_DETAIL_CHANGED: _,
	  WINDOW_AUTOFILL_SELECTION_CLICKED: _,
	  WINDOW_AUTOFILL_POPUP_HIDDEN: _,
	  WINDOW_TAB_CLOSED_WITH_MOUSE: _,
	  WINDOW_TAB_MOUSE_LEAVE: _
	};
	
	module.exports = mapValuesByKeys(windowConstants);

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const appConstants = {
	  APP_NEW_WINDOW: _,
	  APP_CLOSE_WINDOW: _,
	  APP_WINDOW_CLOSED: _,
	  APP_WINDOW_CREATED: _,
	  APP_WINDOW_UPDATED: _,
	  APP_NEW_TAB: _,
	  APP_CLOSE_TAB: _,
	  APP_TAB_CLOSED: _,
	  APP_TAB_UPDATED: _,
	  APP_ADD_SITE: _,
	  APP_CLEAR_HISTORY: _,
	  APP_SET_STATE: _,
	  APP_REMOVE_SITE: _,
	  APP_MOVE_SITE: _,
	  APP_MERGE_DOWNLOAD_DETAIL: _, // Sets an individual download detail
	  APP_CLEAR_COMPLETED_DOWNLOADS: _, // Removes all completed downloads
	  APP_ADD_PASSWORD: _, /** @param {Object} passwordDetail */
	  APP_REMOVE_PASSWORD: _, /** @param {Object} passwordDetail */
	  APP_CLEAR_PASSWORDS: _,
	  APP_DEFAULT_WINDOW_PARAMS_CHANGED: _,
	  APP_SET_DATA_FILE_ETAG: _,
	  APP_SET_DATA_FILE_LAST_CHECK: _,
	  APP_SET_RESOURCE_ENABLED: _,
	  APP_RESOURCE_READY: _,
	  APP_ADD_RESOURCE_COUNT: _,
	  APP_UPDATE_LAST_CHECK: _,
	  APP_SET_UPDATE_STATUS: _,
	  APP_CHANGE_SETTING: _,
	  APP_CHANGE_SITE_SETTING: _,
	  APP_REMOVE_SITE_SETTING: _,
	  APP_CLEAR_SITE_SETTINGS: _,
	  APP_ON_CLEAR_BROWSING_DATA: _,
	  APP_IMPORT_BROWSER_DATA: _,
	  APP_UPDATE_LEDGER_INFO: _,
	  APP_LEDGER_RECOVERY_STATUS_CHANGED: _,
	  APP_UPDATE_PUBLISHER_INFO: _,
	  APP_SHOW_MESSAGE_BOX: _, /** @param {Object} detail */
	  APP_HIDE_MESSAGE_BOX: _, /** @param {string} message */
	  APP_CLEAR_MESSAGE_BOXES: _, /** @param {string} origin */
	  APP_ADD_WORD: _, /** @param {string} word, @param {boolean} learn */
	  APP_SET_DICTIONARY: _, /** @param {string} locale */
	  APP_BACKUP_KEYS: _,
	  APP_RECOVER_WALLET: _,
	  APP_ADD_AUTOFILL_ADDRESS: _,
	  APP_REMOVE_AUTOFILL_ADDRESS: _,
	  APP_ADD_AUTOFILL_CREDIT_CARD: _,
	  APP_REMOVE_AUTOFILL_CREDIT_CARD: _,
	  APP_AUTOFILL_DATA_CHANGED: _,
	  APP_SET_LOGIN_REQUIRED_DETAIL: _,
	  APP_SET_LOGIN_RESPONSE_DETAIL: _,
	  APP_WINDOW_BLURRED: _,
	  APP_IDLE_STATE_CHANGED: _,
	  APP_NETWORK_CONNECTED: _,
	  APP_NETWORK_DISCONNECTED: _,
	  APP_CHANGE_NEW_TAB_DETAIL: _,
	  APP_TAB_CREATED: _,
	  APP_TAB_DESTROYED: _,
	  APP_SET_MENUBAR_TEMPLATE: _,
	  APP_UPDATE_ADBLOCK_DATAFILES: _,
	  APP_UPDATE_ADBLOCK_CUSTOM_RULES: _,
	  APP_DEFAULT_BROWSER_UPDATED: _,
	  APP_DEFAULT_BROWSER_CHECK_COMPLETE: _,
	  APP_POPULATE_HISTORY: _,
	  APP_RENDER_URL_TO_PDF: _,
	  APP_DATA_URL_COPIED: _,
	  APP_DOWNLOAD_REVEALED: _,
	  APP_DOWNLOAD_OPENED: _,
	  APP_DOWNLOAD_ACTION_PERFORMED: _,
	  APP_DOWNLOAD_COPIED_TO_CLIPBOARD: _,
	  APP_DOWNLOAD_DELETED: _,
	  APP_DOWNLOAD_CLEARED: _,
	  APP_DOWNLOAD_REDOWNLOADED: _,
	  APP_ALLOW_FLASH_ONCE: _,
	  APP_ALLOW_FLASH_ALWAYS: _,
	  APP_FLASH_PERMISSION_REQUESTED: _,
	  APP_SHUTTING_DOWN: _,
	  APP_CLIPBOARD_TEXT_UPDATED: _,
	  APP_TAB_TOGGLE_DEV_TOOLS: _,
	  APP_TAB_CLONED: _
	};
	
	module.exports = mapValuesByKeys(appConstants);

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const cx = __webpack_require__(236);
	
	/**
	 * Represents an on/off switch control
	 */
	class SwitchControl extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onClick = this.onClick.bind(this);
	  }
	  onClick() {
	    this.props.onClick({
	      target: {
	        value: !this.props.checkedOn
	      }
	    });
	  }
	  render() {
	    return _jsx('div', {
	      className: cx({
	        switchControl: true,
	        [this.props.className]: !!this.props.className,
	        disabled: this.props.disabled,
	        large: this.props.large,
	        small: this.props.small,
	        hasTopText: this.props.topl10nId
	      })
	    }, void 0, this.props.leftl10nId && this.props.topl10nId ? _jsx('div', {
	      className: 'switchControlText'
	    }, void 0, _jsx('div', {
	      className: 'switchControlLeftText'
	    }, void 0, _jsx('div', {
	      className: 'switchSpacer'
	    }, void 0, '\xA0'), _jsx('span', {
	      className: 'switchControlLeftText',
	      'data-l10n-id': this.props.leftl10nId
	    }))) : this.props.leftl10nId ? _jsx('span', {
	      className: 'switchControlLeftText',
	      'data-l10n-id': this.props.leftl10nId
	    }) : null, _jsx('div', {
	      className: 'switchMiddle'
	    }, void 0, this.props.topl10nId ? _jsx('span', {
	      className: 'switchControlTopText',
	      'data-l10n-id': this.props.topl10nId
	    }) : null, _jsx('div', {
	      className: cx({
	        switchBackground: true,
	        switchedOn: this.props.checkedOn
	      }),
	      onClick: this.onClick
	    }, void 0, _jsx('div', {
	      className: 'switchIndicator'
	    }))), (this.props.rightl10nId || this.props.rightText) && this.props.topl10nId ? _jsx('div', {
	      className: 'switchControlText'
	    }, void 0, _jsx('div', {
	      className: 'switchControlRightText'
	    }, void 0, _jsx('div', {
	      className: 'switchSpacer'
	    }, void 0, '\xA0'), _jsx('span', {
	      className: 'switchControlRightText',
	      'data-l10n-id': this.props.rightl10nId,
	      'data-l10n-args': this.props.rightl10nArgs
	    }, void 0, this.props.rightText || ''))) : _jsx('div', {
	      className: 'switchControlRight'
	    }, void 0, (this.props.rightl10nId || this.props.rightText) && !this.props.onInfoClick ? _jsx('span', {
	      className: 'switchControlRightText',
	      'data-l10n-id': this.props.rightl10nId,
	      'data-l10n-args': this.props.rightl10nArgs
	    }, void 0, this.props.rightText || '') : null, (this.props.rightl10nId || this.props.rightText) && this.props.onInfoClick ? _jsx('div', {
	      className: 'switchControlRightText'
	    }, void 0, _jsx('span', {
	      'data-l10n-id': this.props.rightl10nId,
	      'data-l10n-args': this.props.rightl10nArgs
	    }, void 0, this.props.rightText), _jsx('span', {
	      className: 'fa fa-question-circle info clickable',
	      onClick: this.props.onInfoClick,
	      title: this.props.infoTitle
	    })) : null));
	  }
	}
	
	module.exports = SwitchControl;

/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	/**
	 * Converts an object with boolean properties to a CSS string.
	 * Only the property names with truthy values are included.
	 */
	module.exports = obj => Object.keys(obj).filter(prop => obj[prop]).join(' ');

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(238);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./switchControls.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./switchControls.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.switchControl {\n  display: flex;\n  align-items: center;\n  padding: 5px;\n}\n.switchControl.disabled .switchBackground {\n  opacity: 0.3;\n}\n.switchControl.disabled .switchControlRightText,\n.switchControl.disabled .switchControlLeftText {\n  opacity: 0.3;\n}\n.switchControl:not(.disabled) .switchBackground.switchedOn {\n  background-color: #ff6000;\n}\n.switchControl:not(.disabled) .switchBackground.switchedOn .switchIndicator {\n  right: 2px;\n}\n.switchControl.large .switchBackground {\n  height: 26px;\n  width: 60px;\n  background-color: #adadad;\n}\n.switchControl.large .switchBackground .switchIndicator {\n  height: 22px;\n  width: 22px;\n  right: calc(36px);\n}\n.switchControl .switchControlText {\n  margin: auto 0;\n}\n.switchControl .switchControlLeftText {\n  margin: auto 5px auto 0;\n}\n.switchControl .switchControlRightText {\n  margin: auto 0 auto 5px;\n}\n.switchControl .switchControlTopText {\n  margin: 0 auto 5px auto;\n  color: #bbb;\n}\n.switchControl .switchControlRight {\n  display: flex;\n}\n.switchControl .switchMiddle {\n  display: flex;\n  flex-direction: column;\n}\n.switchControl .switchBackground {\n  background-color: #ccc;\n  border-radius: 12px;\n  height: 16px;\n  position: relative;\n  width: 45px;\n  box-shadow: inset 0 1px 4px rgba(0, 0, 0, 0.35);\n  transition: background-color 100ms;\n}\n.switchControl .switchBackground .switchIndicator {\n  background-color: white;\n  border-radius: 100%;\n  height: 12px;\n  right: calc(31px);\n  position: absolute;\n  top: 2px;\n  width: 12px;\n  box-shadow: 1px 1px 5px -2px black;\n  transition: right 100ms;\n}\n", ""]);
	
	// exports


/***/ },
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const cx = __webpack_require__(236);
	
	class Button extends ImmutableComponent {
	  render() {
	    if (this.props.iconClass) {
	      return _jsx('button', {
	        disabled: this.props.disabled,
	        'data-l10n-id': this.props.l10nId,
	        style: this.props.inlineStyles,
	        'data-button-value': this.props.dataButtonValue,
	        className: cx({
	          browserButton: true,
	          fa: true,
	          [this.props.iconClass]: !!this.props.iconClass,
	          [this.props.className]: !!this.props.className
	        }),
	        onClick: this.props.onClick
	      });
	    }
	    return _jsx('button', {
	      disabled: this.props.disabled,
	      'data-l10n-id': this.props.l10nId,
	      'data-l10n-args': JSON.stringify(this.props.l10nArgs || {}),
	      style: this.props.inlineStyles,
	      className: cx({
	        browserButton: true,
	        [this.props.className]: !!this.props.className
	      }),
	      onClick: this.props.onClick
	    }, void 0, this.props.label);
	  }
	}
	
	module.exports = Button;

/***/ },
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const { isDarwin } = __webpack_require__(251);
	
	module.exports.isForSecondaryAction = e => e.ctrlKey && !isDarwin() || e.metaKey && isDarwin() || e.button === 1;
	
	module.exports.eventElHasAncestorWithClasses = (e, classesToCheck) => {
	  let node = e.target;
	
	  while (node) {
	    let classMatch = classesToCheck.map(function (className) {
	      return node.classList ? node.classList.contains(className) : false;
	    }).includes(true);
	
	    if (classMatch) {
	      return true;
	    }
	
	    node = node.parentNode;
	  }
	
	  return false;
	};

/***/ },
/* 251 */
/***/ function(module, exports) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	/**
	 * Get list of styles which should be applied to root window div
	 * return array of strings (each being a class name)
	 */
	
	module.exports.getPlatformStyles = () => {
	  const platform = process.platform;
	  const styleList = ['platform--' + platform];
	
	  switch (platform) {
	    case 'win32':
	      if (process.platformVersion === 'win7') {
	        styleList.push('win7');
	      } else {
	        styleList.push('win10');
	      }
	  }
	
	  return styleList;
	};
	
	module.exports.getPathFromFileURI = fileURI => {
	  const path = decodeURI(fileURI);
	  if (process.platform === 'win32') {
	    return path.replace('file:///', '');
	  } else {
	    return path.replace('file://', '');
	  }
	};
	
	module.exports.isDarwin = () => {
	  return process.platform === 'darwin' || navigator.platform === 'MacIntel';
	};
	
	module.exports.isWindows = () => {
	  return process.platform === 'win32' || navigator.platform === 'Win32';
	};

/***/ },
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const siteTags = {
	  BOOKMARK: _,
	  BOOKMARK_FOLDER: _,
	  PINNED: _,
	  READING_LIST: _
	};
	
	module.exports = mapValuesByKeys(siteTags);

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const dragTypes = {
	  TAB: _,
	  BOOKMARK: _
	};
	
	module.exports = mapValuesByKeys(dragTypes);

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	
	module.exports.hasDragData = (dataTransfer, dragType) => {
	  return dataTransfer.types.includes(`application/x-brave-${dragType}`);
	};
	
	module.exports.getDragData = (dataTransfer, dragType) => {
	  const data = dataTransfer.getData(`application/x-brave-${dragType}`);
	  if (!data) {
	    return undefined;
	  }
	  return Immutable.fromJS(JSON.parse(data));
	};
	
	module.exports.setupDataTransferURL = (dataTransfer, location, title) => {
	  dataTransfer.setData('text/plain', location);
	  dataTransfer.setData('text/uri-list', location);
	  dataTransfer.setData('text/html', `<html><head><meta http-equiv="content-type" content="text/html; charset=utf-8"></head><body><A HREF="${location}">${title || location}</A></body></html>`);
	};
	
	module.exports.setupDataTransferBraveData = (dataTransfer, dragType, data) => {
	  dataTransfer.setData(`application/x-brave-${dragType}`, JSON.stringify(data.toJS()));
	};
	
	module.exports.shouldPrependVerticalItem = (target, clientY) => {
	  const boundingRect = target.getBoundingClientRect();
	  return clientY < boundingRect.top + (boundingRect.bottom - boundingRect.top) / 2;
	};

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const Immutable = __webpack_require__(188);
	const normalizeUrl = __webpack_require__(260);
	const siteTags = __webpack_require__(256);
	const settings = __webpack_require__(204);
	const getSetting = __webpack_require__(202).getSetting;
	const UrlUtil = __webpack_require__(190);
	const urlParse = __webpack_require__(192);
	const { makeImmutable } = __webpack_require__(267);
	
	const isBookmark = tags => {
	  if (!tags) {
	    return false;
	  }
	  return tags.includes(siteTags.BOOKMARK);
	};
	
	const isBookmarkFolder = tags => {
	  if (!tags) {
	    return false;
	  }
	  return typeof tags === 'string' && tags === siteTags.BOOKMARK_FOLDER || tags && typeof tags !== 'string' && tags.includes(siteTags.BOOKMARK_FOLDER);
	};
	
	const reorderSite = (sites, order) => {
	  sites = sites.map(site => {
	    const siteOrder = site.get('order');
	    if (siteOrder > order) {
	      return site.set('order', siteOrder - 1);
	    }
	    return site;
	  });
	  return sites;
	};
	
	/**
	 * Sort comparator for sort function
	 */
	module.exports.siteSort = (x, y) => {
	  if (x.get('order') < y.get('order')) {
	    return -1;
	  } else if (x.get('order') > y.get('order')) {
	    return 1;
	  } else {
	    return 0;
	  }
	};
	
	/**
	 * Calculate siteKey for siteDetail
	 *
	 * @param siteDetail The site to to be calculated
	 * @return key if siteDetail is valid
	 */
	module.exports.getSiteKey = function (siteDetail) {
	  if (!siteDetail) {
	    return null;
	  }
	  const folderId = siteDetail.get('folderId');
	  const location = siteDetail.get('location');
	  if (folderId) {
	    return folderId.toString();
	  } else if (location) {
	    return location + '|' + (siteDetail.get('partitionNumber') || 0) + '|' + (siteDetail.get('parentFolderId') || 0);
	  }
	  return null;
	};
	
	/**
	 * Checks if a siteDetail has the specified tag
	 *
	 * @param sites The application state's Immutable sites list
	 * @param siteDetail The site to check if it's in the specified tag
	 * @return true if the location is already bookmarked
	 */
	module.exports.isSiteBookmarked = function (sites, siteDetail) {
	  if (!sites) {
	    return false;
	  }
	  const key = module.exports.getSiteKey(siteDetail);
	  if (key === null) {
	    return false;
	  }
	  return isBookmark(sites.getIn([key, 'tags']));
	};
	
	const getNextFolderIdItem = sites => sites.max((siteA, siteB) => {
	  const folderIdA = siteA.get('folderId');
	  const folderIdB = siteB.get('folderId');
	  if (folderIdA === folderIdB) {
	    return 0;
	  }
	  if (folderIdA === undefined) {
	    return false;
	  }
	  if (folderIdB === undefined) {
	    return true;
	  }
	  return folderIdA > folderIdB;
	});
	
	module.exports.getNextFolderId = sites => {
	  const defaultFolderId = 0;
	  if (!sites) {
	    return defaultFolderId;
	  }
	  const maxIdItem = getNextFolderIdItem(sites);
	  return (maxIdItem ? maxIdItem.get('folderId') || 0 : 0) + 1;
	};
	
	// Some details can be copied from the existing siteDetail if null
	// ex: parentFolderId, partitionNumber, and favicon
	
	const mergeSiteDetails = (oldSiteDetail, newSiteDetail, tag, folderId, order) => {
	  const siteDetailExist = newSiteDetail.get('lastAccessedTime') !== undefined || oldSiteDetail && oldSiteDetail.get('lastAccessedTime');
	  let tags = oldSiteDetail && oldSiteDetail.get('tags') || new Immutable.List();
	  if (tag) {
	    tags = tags.toSet().add(tag).toList();
	  }
	
	  const customTitle = typeof newSiteDetail.get('customTitle') === 'string' ? newSiteDetail.get('customTitle') : newSiteDetail.get('customTitle') || oldSiteDetail && oldSiteDetail.get('customTitle');
	
	  let lastAccessedTime;
	  if (isBookmark(tag) || isBookmarkFolder(tag)) {
	    siteDetailExist ? lastAccessedTime = newSiteDetail.get('lastAccessedTime') || oldSiteDetail && oldSiteDetail.get('lastAccessedTime') || 0 : lastAccessedTime = 0;
	  } else {
	    lastAccessedTime = newSiteDetail.get('lastAccessedTime') || new Date().getTime();
	  }
	
	  let site = makeImmutable({
	    lastAccessedTime,
	    tags,
	    title: newSiteDetail.get('title'),
	    order
	  });
	
	  if (oldSiteDetail && oldSiteDetail.get('order') !== undefined) {
	    site = site.set('order', oldSiteDetail.get('order'));
	  }
	
	  if (newSiteDetail.get('location')) {
	    site = site.set('location', newSiteDetail.get('location'));
	  }
	  if (folderId) {
	    site = site.set('folderId', Number(folderId));
	  }
	  if (typeof customTitle === 'string') {
	    site = site.set('customTitle', customTitle);
	  }
	  if (newSiteDetail.get('parentFolderId') !== undefined || oldSiteDetail && oldSiteDetail.get('parentFolderId')) {
	    let parentFolderId = newSiteDetail.get('parentFolderId') !== undefined ? newSiteDetail.get('parentFolderId') : oldSiteDetail.get('parentFolderId');
	    site = site.set('parentFolderId', Number(parentFolderId));
	  }
	  if (newSiteDetail.get('partitionNumber') !== undefined || oldSiteDetail && oldSiteDetail.get('partitionNumber')) {
	    let partitionNumber = newSiteDetail.get('partitionNumber') !== undefined ? newSiteDetail.get('partitionNumber') : oldSiteDetail.get('partitionNumber');
	    site = site.set('partitionNumber', Number(partitionNumber));
	  }
	  if (newSiteDetail.get('favicon') || oldSiteDetail && oldSiteDetail.get('favicon')) {
	    site = site.set('favicon', newSiteDetail.get('favicon') || oldSiteDetail.get('favicon'));
	  }
	  if (newSiteDetail.get('themeColor') || oldSiteDetail && oldSiteDetail.get('themeColor')) {
	    site = site.set('themeColor', newSiteDetail.get('themeColor') || oldSiteDetail.get('themeColor'));
	  }
	  if (site.get('tags').size === 0) {
	    // Increment the visit count for history items
	    site = site.set('count', ((oldSiteDetail || site).get('count') || 0) + 1);
	  }
	
	  return site;
	};
	
	/**
	 * Adds or updates the specified siteDetail in sites.
	 *
	 * Examples of updating:
	 * - editing bookmark in add/edit modal
	 * - when timestamp is added (history entry)
	 * - moving bookmark to/from a folder
	 *
	 * @param sites The application state's Immutable site list
	 * @param siteDetails The site details object to add or update
	 * @param tag The tag to add for this site
	 *   See siteTags.js for supported types. No tag means just a history item
	 * @param originalSiteDetail If specified, use when searching site list
	 * @return The new sites Immutable object
	 */
	module.exports.addSite = function (sites, siteDetail, tag, originalSiteDetail) {
	  // Get tag from siteDetail object if not passed via tag param
	  if (tag === undefined) {
	    tag = siteDetail.getIn(['tags', 0]);
	  }
	
	  let originalSiteKey;
	  if (originalSiteDetail) {
	    originalSiteKey = module.exports.getSiteKey(originalSiteDetail);
	  }
	
	  const oldKey = originalSiteKey || module.exports.getSiteKey(siteDetail);
	  const oldSite = oldKey !== null ? sites.get(oldKey) : null;
	  let folderId = siteDetail.get('folderId');
	
	  if (tag === siteTags.BOOKMARK_FOLDER) {
	    if (!oldSite && folderId) {
	      // Remove duplicate folder (needed for import)
	      const dupFolder = sites.find(site => isBookmarkFolder(site.get('tags')) && site.get('parentFolderId') === siteDetail.get('parentFolderId') && site.get('customTitle') === siteDetail.get('customTitle'));
	      if (dupFolder) {
	        sites = module.exports.removeSite(sites, dupFolder, siteTags.BOOKMARK_FOLDER, true);
	      }
	    } else if (!folderId) {
	      // Assign an id if this is a new folder
	      folderId = module.exports.getNextFolderId(sites);
	    }
	  }
	
	  let site = mergeSiteDetails(oldSite, siteDetail, tag, folderId, sites.size);
	
	  const key = originalSiteKey || module.exports.getSiteKey(site);
	  if (key === null) {
	    return sites;
	  }
	  return sites.set(key, site);
	};
	
	/**
	 * Removes the specified tag from a siteDetail
	 *
	 * @param sites The application state's Immutable sites list
	 * @param siteDetail The siteDetail to remove a tag from
	 * @param reorder whether to reorder sites (default with reorder)
	 * @return The new sites Immutable object
	 */
	module.exports.removeSite = function (sites, siteDetail, tag, reorder = true) {
	  const key = module.exports.getSiteKey(siteDetail);
	
	  const tags = sites.getIn([key, 'tags']);
	  if (isBookmarkFolder(tags)) {
	    const folderId = sites.getIn([key, 'folderId']);
	    const childSites = sites.filter(site => site.get('parentFolderId') === folderId);
	    childSites.forEach(site => {
	      const tags = site.get('tags');
	      tags.forEach(tag => {
	        sites = module.exports.removeSite(sites, site, tag, false);
	      });
	    });
	  }
	  if (sites.size && reorder) {
	    const order = sites.getIn([key, 'order']);
	    sites = reorderSite(sites, order);
	  }
	
	  return sites.delete(key);
	};
	
	/**
	 * Called by isMoveAllowed
	 * Trace a folder's ancestory, collecting all parent folderIds until reaching Bookmarks Toolbar (folderId=0)
	 */
	const getAncestorFolderIds = (parentFolderIds, bookmarkFolder, allBookmarks) => {
	  if (bookmarkFolder.get('parentFolderId')) {
	    parentFolderIds.push(bookmarkFolder.get('parentFolderId'));
	    const nextItem = allBookmarks.find(item => item.get('folderId') === bookmarkFolder.get('parentFolderId'));
	    if (nextItem) {
	      getAncestorFolderIds(parentFolderIds, nextItem, allBookmarks);
	    }
	  }
	};
	
	/**
	 * Determine if a proposed move is valid
	 *
	 * @param sites The application state's Immutable sites list
	 * @param siteDetail The site detail to move
	 * @param destinationDetail The site detail to move to
	 */
	module.exports.isMoveAllowed = (sites, sourceDetail, destinationDetail) => {
	  if (typeof destinationDetail.get('parentFolderId') === 'number' && typeof sourceDetail.get('folderId') === 'number') {
	    // Folder can't be its own parent
	    if (sourceDetail.get('folderId') === destinationDetail.get('folderId')) {
	      return false;
	    }
	    // Ancestor folder can't be moved into a descendant
	    let ancestorFolderIds = [];
	    getAncestorFolderIds(ancestorFolderIds, destinationDetail, sites);
	    if (ancestorFolderIds.includes(sourceDetail.get('folderId'))) {
	      return false;
	    }
	  }
	  return true;
	};
	
	/**
	 * Moves the specified site from one location to another
	 *
	 * @param sites The application state's Immutable sites list
	 * @param siteDetail The site detail to move
	 * @param destinationDetail The site detail to move to
	 * @param prepend Whether the destination detail should be prepended or not, not used if destinationIsParent is true
	 * @param destinationIsParent Whether the item should be moved inside of the destinationDetail.
	 * @param disallowReparent If set to true, parent folder will not be set
	 * @return The new sites Immutable object
	 */
	module.exports.moveSite = function (sites, sourceDetail, destinationDetail, prepend, destinationIsParent, disallowReparent) {
	  if (!module.exports.isMoveAllowed(sites, sourceDetail, destinationDetail)) {
	    return sites;
	  }
	
	  let sourceKey = module.exports.getSiteKey(sourceDetail);
	  let destinationKey = module.exports.getSiteKey(destinationDetail);
	
	  const sourceSiteIndex = sites.getIn([sourceKey, 'order']);
	  let destinationSiteIndex;
	  if (destinationIsParent) {
	    // When the destination is the parent we want to put it at the end
	    destinationSiteIndex = sites.size - 1;
	    prepend = false;
	  } else {
	    destinationSiteIndex = sites.getIn([destinationKey, 'order']);
	  }
	
	  let newIndex = destinationSiteIndex + (prepend ? 0 : 1);
	  let sourceSite = sites.get(sourceKey);
	  let destinationSite = sites.get(destinationKey);
	  sites = sites.delete(sourceKey);
	  sites = sites.map(site => {
	    const siteOrder = site.get('order');
	    if (siteOrder > sourceSiteIndex) {
	      return site.set('order', siteOrder - 1);
	    }
	    return site;
	  });
	  if (newIndex > sourceSiteIndex) {
	    newIndex--;
	  }
	  sourceSite = sourceSite.set('order', newIndex);
	
	  if (!disallowReparent) {
	    if (destinationIsParent && destinationDetail.get('folderId') !== sourceSite.get('folderId')) {
	      sourceSite = sourceSite.set('parentFolderId', destinationDetail.get('folderId'));
	    } else if (!destinationSite.get('parentFolderId')) {
	      sourceSite = sourceSite.delete('parentFolderId');
	    } else if (destinationSite.get('parentFolderId') !== sourceSite.get('parentFolderId')) {
	      sourceSite = sourceSite.set('parentFolderId', destinationSite.get('parentFolderId'));
	    }
	  }
	  sourceKey = module.exports.getSiteKey(sourceSite);
	  return sites.set(sourceKey, sourceSite);
	};
	
	module.exports.getDetailFromFrame = function (frame, tag) {
	  let location = frame.get('location');
	  if (frame.get('pinnedLocation') && tag === siteTags.PINNED) {
	    location = frame.get('pinnedLocation');
	  }
	
	  return makeImmutable({
	    location,
	    title: frame.get('title'),
	    partitionNumber: frame.get('partitionNumber'),
	    tags: tag ? [tag] : [],
	    favicon: frame.get('icon'),
	    themeColor: frame.get('themeColor') || frame.get('computedThemeColor')
	  });
	};
	
	/**
	 * Update the favicon URL for all entries in the sites list
	 * which match a given location. Currently, there should only be
	 * one match, but this will handle multiple.
	 *
	 * @param sites The application state's Immutable sites list
	 * @param location URL for the entry needing an update
	 * @param favicon favicon URL
	 */
	module.exports.updateSiteFavicon = function (sites, location, favicon) {
	  sites = makeImmutable(sites);
	
	  if (UrlUtil.isNotURL(location)) {
	    return sites;
	  }
	  if (!Immutable.Map.isMap(sites)) {
	    return sites;
	  }
	
	  const matchingIndices = [];
	
	  sites.filter((site, index) => {
	    if (!site || typeof site.get !== 'function') {
	      return false;
	    }
	    if (isBookmarkFolder(site.get('tags'))) {
	      return false;
	    }
	    if (UrlUtil.isNotURL(site.get('location'))) {
	      return false;
	    }
	    if (normURL(site.get('location')) === normURL(location)) {
	      matchingIndices.push(index);
	      return true;
	    }
	    return false;
	  });
	
	  if (!matchingIndices.length) return sites;
	
	  let updatedSites = sites;
	  matchingIndices.forEach(index => {
	    updatedSites = updatedSites.setIn([index, 'favicon'], favicon);
	  });
	
	  return updatedSites;
	};
	
	/**
	 * Normalizes a URL for comparison, with special handling for magnet links
	 */
	function normURL(url) {
	  const lowerURL = url.toLowerCase();
	  if (lowerURL.startsWith('magnet:?')) return lowerURL;
	  try {
	    return normalizeUrl(url);
	  } catch (e) {
	    return url;
	  }
	}
	
	/**
	 * Converts a siteDetail to frameOpts format
	 * @param {Object} siteDetail - A site detail as per app state
	 * @return {Object} A frameOpts plain JS object, not ImmutableJS
	 */
	module.exports.toFrameOpts = function (siteDetail) {
	  return {
	    location: siteDetail.get('location'),
	    partitionNumber: siteDetail.get('partitionNumber')
	  };
	};
	
	/**
	 * Compares 2 site details
	 * @param siteDetail1 The first site detail to compare.
	 * @param siteDetail2 The second site detail to compare.
	 * @return true if the site details should be considered the same.
	 */
	module.exports.isEquivalent = function (siteDetail1, siteDetail2) {
	  const isFolder1 = module.exports.isFolder(siteDetail1);
	  const isFolder2 = module.exports.isFolder(siteDetail2);
	  if (isFolder1 !== isFolder2) {
	    return false;
	  }
	
	  // If they are both folders
	  if (isFolder1) {
	    return siteDetail1.get('folderId') === siteDetail2.get('folderId');
	  }
	  return siteDetail1.get('location') === siteDetail2.get('location') && siteDetail1.get('partitionNumber') === siteDetail2.get('partitionNumber');
	};
	
	/**
	 * Determines if the site detail is a bookmark.
	 * @param siteDetail The site detail to check.
	 * @return true if the site detail has a bookmark tag.
	 */
	module.exports.isBookmark = function (siteDetail) {
	  if (siteDetail) {
	    return isBookmark(siteDetail.get('tags'));
	  }
	  return false;
	};
	
	/**
	 * Determines if the site detail is a folder.
	 * @param siteDetail The site detail to check.
	 * @return true if the site detail is a folder.
	 */
	module.exports.isFolder = function (siteDetail) {
	  if (siteDetail) {
	    return isBookmarkFolder(siteDetail.get('tags'));
	  }
	  return false;
	};
	
	/**
	 * Determines if the site detail is an imported bookmark.
	 * @param siteDetail The site detail to check.
	 * @return true if the site detail is a folder.
	 */
	module.exports.isImportedBookmark = function (siteDetail) {
	  return siteDetail.get('lastAccessedTime') === 0;
	};
	
	/**
	 * Determines if the site detail is a history entry.
	 * @param siteDetail The site detail to check.
	 * @return true if the site detail is a history entry.
	 */
	module.exports.isHistoryEntry = function (siteDetail) {
	  if (siteDetail && typeof siteDetail.get('location') === 'string') {
	    if (siteDetail.get('location').startsWith('about:')) {
	      return false;
	    }
	    return !!siteDetail.get('lastAccessedTime') && !module.exports.isFolder(siteDetail);
	  }
	  return false;
	};
	
	/**
	 * Obtains an array of folders
	 */
	module.exports.getFolders = function (sites, folderId, parentId, labelPrefix) {
	  parentId = parentId || 0;
	  let folders = [];
	  sites.forEach(site => {
	    if ((site.get('parentFolderId') || 0) === parentId && module.exports.isFolder(site)) {
	      if (site.get('folderId') === folderId) {
	        return;
	      }
	      const label = (labelPrefix || '') + (site.get('customTitle') || site.get('title'));
	      folders.push({
	        folderId: site.get('folderId'),
	        parentFolderId: site.get('parentFolderId'),
	        label
	      });
	      const subsites = module.exports.getFolders(sites, folderId, site.get('folderId'), (label || '') + ' / ');
	      folders = folders.concat(subsites);
	    }
	  });
	  return folders;
	};
	
	/**
	 * Filters out non recent sites based on the app setting for history size.
	 * @param sites The application state's Immutable sites list.
	 */
	module.exports.filterOutNonRecents = function (sites) {
	  const sitesWithTags = sites.filter(site => site.get('tags').size);
	  const topHistorySites = sites.filter(site => site.get('tags').size === 0).sort((site1, site2) => (site2.get('lastAccessedTime') || 0) - (site1.get('lastAccessedTime') || 0)).take(getSetting(settings.AUTOCOMPLETE_HISTORY_SIZE));
	  return sitesWithTags.concat(topHistorySites);
	};
	
	/**
	 * Filters sites relative to a parent site (folder).
	 * @param sites The application state's Immutable sites list.
	 * @param relSite The folder to filter to.
	 */
	module.exports.filterSitesRelativeTo = function (sites, relSite) {
	  if (!relSite.get('folderId')) {
	    return sites;
	  }
	  return sites.filter(site => site.get('parentFolderId') === relSite.get('folderId'));
	};
	
	/**
	 * Clears history by
	 * - filtering out entries which have no tags
	 * - setting lastAccessedTime to null for remaining entries (bookmarks)
	 * @param sites The application state's Immutable sites list.
	 */
	module.exports.clearHistory = function (sites) {
	  let bookmarks = sites.filter(site => site.get('tags') && site.get('tags').size > 0);
	  bookmarks.forEach((site, index) => {
	    if (site.get('lastAccessedTime')) {
	      bookmarks = bookmarks.setIn([index, 'lastAccessedTime'], null);
	    }
	  });
	  return bookmarks;
	};
	
	/**
	 * Returns all sites that have a bookmark tag.
	 * @param sites The application state's Immutable sites list.
	 */
	
	module.exports.getBookmarks = function (sites) {
	  if (sites) {
	    return sites.filter(site => isBookmarkFolder(site.get('tags')) || isBookmark(site.get('tags')));
	  }
	  return makeImmutable({});
	};
	
	/**
	 * Gets a site origin (scheme + hostname + port) from a URL or null if not
	 * available.
	 * @param {string} location
	 * @return {string?}
	 */
	module.exports.getOrigin = function (location) {
	  // Returns scheme + hostname + port
	  if (typeof location !== 'string') {
	    return null;
	  }
	  if (location.startsWith('file://')) {
	    return 'file:///';
	  }
	  let parsed = urlParse(location);
	  if (parsed.host && parsed.protocol) {
	    return parsed.slashes ? [parsed.protocol, parsed.host].join('//') : [parsed.protocol, parsed.host].join('');
	  } else {
	    return null;
	  }
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var url = __webpack_require__(194);
	var punycode = __webpack_require__(261);
	var queryString = __webpack_require__(262);
	var prependHttp = __webpack_require__(264);
	var sortKeys = __webpack_require__(265);
	var objectAssign = __webpack_require__(33);
	
	var DEFAULT_PORTS = {
		'http:': 80,
		'https:': 443,
		'ftp:': 21
	};
	
	// protocols that always contain a `//`` bit
	var slashedProtocol = {
		'http': true,
		'https': true,
		'ftp': true,
		'gopher': true,
		'file': true,
		'http:': true,
		'https:': true,
		'ftp:': true,
		'gopher:': true,
		'file:': true
	};
	
	function testParameter(name, filters) {
		return filters.some(function (filter) {
			return filter instanceof RegExp ? filter.test(name) : filter === name;
		});
	}
	
	module.exports = function (str, opts) {
		opts = objectAssign({
			normalizeProtocol: true,
			normalizeHttps: false,
			stripFragment: true,
			stripWWW: true,
			removeQueryParameters: [/^utm_\w+/i],
			removeTrailingSlash: true,
			removeDirectoryIndex: false
		}, opts);
	
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}
	
		var hasRelativeProtocol = str.indexOf('//') === 0;
	
		// prepend protocol
		str = prependHttp(str.trim()).replace(/^\/\//, 'http://');
	
		var urlObj = url.parse(str);
	
		if (opts.normalizeHttps && urlObj.protocol === 'https:') {
			urlObj.protocol = 'http:';
		}
	
		if (!urlObj.hostname && !urlObj.pathname) {
			throw new Error('Invalid URL');
		}
	
		// prevent these from being used by `url.format`
		delete urlObj.host;
		delete urlObj.query;
	
		// remove fragment
		if (opts.stripFragment) {
			delete urlObj.hash;
		}
	
		// remove default port
		var port = DEFAULT_PORTS[urlObj.protocol];
		if (Number(urlObj.port) === port) {
			delete urlObj.port;
		}
	
		// remove duplicate slashes
		if (urlObj.pathname) {
			urlObj.pathname = urlObj.pathname.replace(/\/{2,}/g, '/');
		}
	
		// decode URI octets
		if (urlObj.pathname) {
			urlObj.pathname = decodeURI(urlObj.pathname);
		}
	
		// remove directory index
		if (opts.removeDirectoryIndex === true) {
			opts.removeDirectoryIndex = [/^index\.[a-z]+$/];
		}
	
		if (Array.isArray(opts.removeDirectoryIndex) && opts.removeDirectoryIndex.length) {
			var pathComponents = urlObj.pathname.split('/');
			var lastComponent = pathComponents[pathComponents.length - 1];
	
			if (testParameter(lastComponent, opts.removeDirectoryIndex)) {
				pathComponents = pathComponents.slice(0, pathComponents.length - 1);
			}
	
			urlObj.pathname = pathComponents.slice(1).join('/') + '/';
		}
	
		// resolve relative paths, but only for slashed protocols
		if (slashedProtocol[urlObj.protocol]) {
			var domain = urlObj.protocol + '//' + urlObj.hostname;
			var relative = url.resolve(domain, urlObj.pathname);
			urlObj.pathname = relative.replace(domain, '');
		}
	
		if (urlObj.hostname) {
			// IDN to Unicode
			urlObj.hostname = punycode.toUnicode(urlObj.hostname).toLowerCase();
	
			// remove trailing dot
			urlObj.hostname = urlObj.hostname.replace(/\.$/, '');
	
			// remove `www.`
			if (opts.stripWWW) {
				urlObj.hostname = urlObj.hostname.replace(/^www\./, '');
			}
		}
	
		// remove URL with empty query string
		if (urlObj.search === '?') {
			delete urlObj.search;
		}
	
		var queryParameters = queryString.parse(urlObj.search);
	
		// remove query unwanted parameters
		if (Array.isArray(opts.removeQueryParameters)) {
			for (var key in queryParameters) {
				if (testParameter(key, opts.removeQueryParameters)) {
					delete queryParameters[key];
				}
			}
		}
	
		// sort query parameters
		urlObj.search = queryString.stringify(sortKeys(queryParameters));
	
		// decode query parameters
		urlObj.search = decodeURIComponent(urlObj.search);
	
		// take advantage of many of the Node `url` normalizations
		str = url.format(urlObj);
	
		// remove ending `/`
		if (opts.removeTrailingSlash || urlObj.pathname === '/') {
			str = str.replace(/\/$/, '');
		}
	
		// restore relative protocol, if applicable
		if (hasRelativeProtocol && !opts.normalizeProtocol) {
			str = str.replace(/^http:\/\//, '//');
		}
	
		return str;
	};


/***/ },
/* 261 */
/***/ function(module, exports) {

	'use strict';
	
	/** Highest positive signed 32-bit float value */
	const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	
	/** Bootstring parameters */
	const base = 36;
	const tMin = 1;
	const tMax = 26;
	const skew = 38;
	const damp = 700;
	const initialBias = 72;
	const initialN = 128; // 0x80
	const delimiter = '-'; // '\x2D'
	
	/** Regular expressions */
	const regexPunycode = /^xn--/;
	const regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
	const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	
	/** Error messages */
	const errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	};
	
	/** Convenience shortcuts */
	const baseMinusTMin = base - tMin;
	const floor = Math.floor;
	const stringFromCharCode = String.fromCharCode;
	
	/*--------------------------------------------------------------------------*/
	
	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}
	
	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		const result = [];
		let length = array.length;
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}
	
	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		const parts = string.split('@');
		let result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		const labels = string.split('.');
		const encoded = map(labels, fn).join('.');
		return result + encoded;
	}
	
	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		const output = [];
		let counter = 0;
		const length = string.length;
		while (counter < length) {
			const value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// It's a high surrogate, and there is a next character.
				const extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// It's an unmatched surrogate; only append this code unit, in case the
					// next code unit is the high surrogate of a surrogate pair.
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}
	
	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	const ucs2encode = array => String.fromCodePoint(...array);
	
	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	const basicToDigit = function(codePoint) {
		if (codePoint - 0x30 < 0x0A) {
			return codePoint - 0x16;
		}
		if (codePoint - 0x41 < 0x1A) {
			return codePoint - 0x41;
		}
		if (codePoint - 0x61 < 0x1A) {
			return codePoint - 0x61;
		}
		return base;
	};
	
	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	const digitToBasic = function(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	};
	
	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	const adapt = function(delta, numPoints, firstTime) {
		let k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};
	
	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	const decode = function(input) {
		// Don't use UCS-2.
		const output = [];
		const inputLength = input.length;
		let i = 0;
		let n = initialN;
		let bias = initialBias;
	
		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.
	
		let basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}
	
		for (let j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}
	
		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.
	
		for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			let oldi = i;
			for (let w = 1, k = base; /* no condition */; k += base) {
	
				if (index >= inputLength) {
					error('invalid-input');
				}
	
				const digit = basicToDigit(input.charCodeAt(index++));
	
				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}
	
				i += digit * w;
				const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
				if (digit < t) {
					break;
				}
	
				const baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}
	
				w *= baseMinusT;
	
			}
	
			const out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);
	
			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}
	
			n += floor(i / out);
			i %= out;
	
			// Insert `n` at position `i` of the output.
			output.splice(i++, 0, n);
	
		}
	
		return String.fromCodePoint(...output);
	};
	
	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	const encode = function(input) {
		const output = [];
	
		// Convert the input in UCS-2 to an array of Unicode code points.
		input = ucs2decode(input);
	
		// Cache the length.
		let inputLength = input.length;
	
		// Initialize the state.
		let n = initialN;
		let delta = 0;
		let bias = initialBias;
	
		// Handle the basic code points.
		for (const currentValue of input) {
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}
	
		let basicLength = output.length;
		let handledCPCount = basicLength;
	
		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.
	
		// Finish the basic string with a delimiter unless it's empty.
		if (basicLength) {
			output.push(delimiter);
		}
	
		// Main encoding loop:
		while (handledCPCount < inputLength) {
	
			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			let m = maxInt;
			for (const currentValue of input) {
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}
	
			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow.
			const handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}
	
			delta += (m - n) * handledCPCountPlusOne;
			n = m;
	
			for (const currentValue of input) {
				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}
				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer.
					let q = delta;
					for (let k = base; /* no condition */; k += base) {
						const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						const qMinusT = q - t;
						const baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}
	
					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}
	
			++delta;
			++n;
	
		}
		return output.join('');
	};
	
	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	const toUnicode = function(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	};
	
	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	const toASCII = function(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	};
	
	/*--------------------------------------------------------------------------*/
	
	/** Define the public API */
	const punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '2.1.0',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};
	
	module.exports = punycode;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(263);
	var objectAssign = __webpack_require__(33);
	
	function encoderForArrayFormat(opts) {
		switch (opts.arrayFormat) {
			case 'index':
				return function (key, value, index) {
					return value === null ? [
						encode(key, opts),
						'[',
						index,
						']'
					].join('') : [
						encode(key, opts),
						'[',
						encode(index, opts),
						']=',
						encode(value, opts)
					].join('');
				};
	
			case 'bracket':
				return function (key, value) {
					return value === null ? encode(key, opts) : [
						encode(key, opts),
						'[]=',
						encode(value, opts)
					].join('');
				};
	
			default:
				return function (key, value) {
					return value === null ? encode(key, opts) : [
						encode(key, opts),
						'=',
						encode(value, opts)
					].join('');
				};
		}
	}
	
	function parserForArrayFormat(opts) {
		var result;
	
		switch (opts.arrayFormat) {
			case 'index':
				return function (key, value, accumulator) {
					result = /\[(\d*)]$/.exec(key);
	
					key = key.replace(/\[\d*]$/, '');
	
					if (!result) {
						accumulator[key] = value;
						return;
					}
	
					if (accumulator[key] === undefined) {
						accumulator[key] = {};
					}
	
					accumulator[key][result[1]] = value;
				};
	
			case 'bracket':
				return function (key, value, accumulator) {
					result = /(\[])$/.exec(key);
	
					key = key.replace(/\[]$/, '');
	
					if (!result || accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}
	
					accumulator[key] = [].concat(accumulator[key], value);
				};
	
			default:
				return function (key, value, accumulator) {
					if (accumulator[key] === undefined) {
						accumulator[key] = value;
						return;
					}
	
					accumulator[key] = [].concat(accumulator[key], value);
				};
		}
	}
	
	function encode(value, opts) {
		if (opts.encode) {
			return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}
	
		return value;
	}
	
	function keysSorter(input) {
		if (Array.isArray(input)) {
			return input.sort();
		} else if (typeof input === 'object') {
			return keysSorter(Object.keys(input)).sort(function (a, b) {
				return Number(a) - Number(b);
			}).map(function (key) {
				return input[key];
			});
		}
	
		return input;
	}
	
	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};
	
	exports.parse = function (str, opts) {
		opts = objectAssign({arrayFormat: 'none'}, opts);
	
		var formatter = parserForArrayFormat(opts);
	
		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);
	
		if (typeof str !== 'string') {
			return ret;
		}
	
		str = str.trim().replace(/^(\?|#|&)/, '');
	
		if (!str) {
			return ret;
		}
	
		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;
	
			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);
	
			formatter(decodeURIComponent(key), val, ret);
		});
	
		return Object.keys(ret).sort().reduce(function (result, key) {
			var val = ret[key];
			if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
				// Sort object keys, not values
				result[key] = keysSorter(val);
			} else {
				result[key] = val;
			}
	
			return result;
		}, Object.create(null));
	};
	
	exports.stringify = function (obj, opts) {
		var defaults = {
			encode: true,
			strict: true,
			arrayFormat: 'none'
		};
	
		opts = objectAssign(defaults, opts);
	
		var formatter = encoderForArrayFormat(opts);
	
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];
	
			if (val === undefined) {
				return '';
			}
	
			if (val === null) {
				return encode(key, opts);
			}
	
			if (Array.isArray(val)) {
				var result = [];
	
				val.slice().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}
	
					result.push(formatter(key, val2, result.length));
				});
	
				return result.join('&');
			}
	
			return encode(key, opts) + '=' + encode(val, opts);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 263 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 264 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (url) {
		if (typeof url !== 'string') {
			throw new TypeError('Expected a string, got ' + typeof url);
		}
	
		url = url.trim();
	
		if (/^\.*\/|^(?!localhost)\w+:/.test(url)) {
			return url;
		}
	
		return url.replace(/^(?!(?:\w+:)?\/\/)/, 'http://');
	};


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var isPlainObj = __webpack_require__(266);
	
	module.exports = function (obj, opts) {
		if (!isPlainObj(obj)) {
			throw new TypeError('Expected a plain object');
		}
	
		opts = opts || {};
	
		// DEPRECATED
		if (typeof opts === 'function') {
			opts = {compare: opts};
		}
	
		var deep = opts.deep;
		var seenInput = [];
		var seenOutput = [];
	
		var sortKeys = function (x) {
			var seenIndex = seenInput.indexOf(x);
	
			if (seenIndex !== -1) {
				return seenOutput[seenIndex];
			}
	
			var ret = {};
			var keys = Object.keys(x).sort(opts.compare);
	
			seenInput.push(x);
			seenOutput.push(ret);
	
			for (var i = 0; i < keys.length; i++) {
				var key = keys[i];
				var val = x[key];
	
				ret[key] = deep && isPlainObj(val) ? sortKeys(val) : val;
			}
	
			return ret;
		};
	
		return sortKeys(obj);
	};


/***/ },
/* 266 */
/***/ function(module, exports) {

	'use strict';
	var toString = Object.prototype.toString;
	
	module.exports = function (x) {
		var prototype;
		return toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	
	const api = {
	  isImmutable: obj => {
	    return obj && obj.toJS;
	  },
	
	  isMap: obj => {
	    return Immutable.Map.isMap(obj);
	  },
	
	  isList: obj => {
	    return Immutable.List.isList(obj);
	  },
	
	  makeImmutable: obj => {
	    return api.isImmutable(obj) ? obj : Immutable.fromJS(obj);
	  }
	};
	
	module.exports = api;

/***/ },
/* 268 */
/***/ function(module, exports) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const macOrderLookup = value => {
	  switch (value) {
	    case 'Alt':
	    case 'Option':
	    case 'AltGr':
	      return 0;
	    case 'Shift':
	      return 1;
	    case 'Control':
	    case 'Ctrl':
	      return 2;
	    case 'Super':
	    case 'CmdOrCtrl':
	    case 'CommandOrControl':
	    case 'Command':
	    case 'Cmd':
	      return 3;
	    default:
	      return 4;
	  }
	};
	const defaultOrderLookup = value => {
	  switch (value) {
	    case 'CmdOrCtrl':
	    case 'CommandOrControl':
	    case 'Control':
	    case 'Ctrl':
	      return 0;
	    case 'Alt':
	    case 'AltGr':
	      return 1;
	    case 'Shift':
	      return 2;
	    default:
	      return 3;
	  }
	};
	
	/**
	 * Format an electron accelerator in the order you'd expect in a menu
	 * Accelerator reference: https://github.com/electron/electron/blob/master/docs/api/accelerator.md
	 */
	module.exports.formatAccelerator = accelerator => {
	  let result = accelerator;
	  let splitResult = accelerator.split('+');
	  // sort in proper order, based on OS
	  // also, replace w/ name or symbol
	  if (process.platform === 'darwin') {
	    splitResult.sort(function (left, right) {
	      if (macOrderLookup(left) === macOrderLookup(right)) return 0;
	      if (macOrderLookup(left) > macOrderLookup(right)) return 1;
	      return -1;
	    });
	    // NOTE: these characters might only show properly on Mac
	    result = splitResult.join('');
	    result = result.replace('CommandOrControl', '⌘');
	    result = result.replace('CmdOrCtrl', '⌘');
	    result = result.replace('Command', '⌘');
	    result = result.replace('Cmd', '⌘');
	    result = result.replace('Alt', '⌥');
	    result = result.replace('AltGr', '⌥');
	    result = result.replace('Super', '⌘');
	    result = result.replace('Option', '⌥');
	    result = result.replace('Shift', '⇧');
	    result = result.replace('Control', '^');
	    result = result.replace('Ctrl', '^');
	  } else {
	    splitResult.sort(function (left, right) {
	      if (defaultOrderLookup(left) === defaultOrderLookup(right)) return 0;
	      if (defaultOrderLookup(left) > defaultOrderLookup(right)) return 1;
	      return -1;
	    });
	    result = splitResult.join('+');
	    result = result.replace('CommandOrControl', 'Ctrl');
	    result = result.replace('CmdOrCtrl', 'Ctrl');
	    result = result.replace('Control', 'Ctrl');
	  }
	  return result;
	};
	
	module.exports.toLocaleString = (epoch, defaultValue) => {
	  if (epoch && typeof epoch === 'number') {
	    try {
	      const date = new Date(epoch).toLocaleString();
	      if (date !== 'Invalid Date') {
	        return date;
	      }
	    } catch (e) {
	      console.log('Error parsing date: ', e);
	    }
	  }
	  return defaultValue || '';
	};
	
	/**
	 * Clamp values down to a given range (min/max).
	 * Value is wrapped when out of bounds. ex:
	 *   min-1 = max
	 *   max+1 = min
	 */
	module.exports.wrappingClamp = (value, min, max) => {
	  const range = max - min + 1;
	  return value - Math.floor((value - min) / range) * range;
	};

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const { isSourceAboutUrl } = __webpack_require__(187);
	const UrlUtil = __webpack_require__(190);
	
	module.exports.iconSize = 16;
	
	module.exports.getFavicon = (frameProps, iconHref) => {
	  return new Promise((resolve, reject) => {
	    if (!frameProps.get('location')) {
	      resolve(null);
	    }
	
	    const size = window.devicePixelRatio * module.exports.iconSize;
	    const resolution = '#-moz-resolution=' + size + ',' + size;
	
	    // Default to favicon.ico if we can't find an icon.
	    if (!iconHref) {
	      let loc = frameProps.get('location');
	      if (UrlUtil.isViewSourceUrl(loc)) {
	        loc = loc.substring('view-source:'.length);
	      } else if (UrlUtil.isImageDataUrl(loc)) {
	        resolve(loc);
	      } else if (isSourceAboutUrl(loc) || UrlUtil.isDataUrl(loc)) {
	        resolve('');
	      }
	
	      try {
	        const defaultIcon = new window.URL('/favicon.ico' + resolution, loc);
	        iconHref = defaultIcon.toString();
	      } catch (e) {
	        resolve('');
	      }
	    }
	
	    if (UrlUtil.isImageDataUrl(iconHref)) {
	      resolve(iconHref);
	    } else {
	      resolve(iconHref + resolution);
	    }
	  });
	};

/***/ },
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(276);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./button.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./button.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\nbutton[class*=\"Button\"] {\n  background: none;\n  outline: none;\n  border: none;\n  margin: 0;\n  white-space: nowrap;\n}\nspan.buttonSeparator {\n  width: 1px;\n  border-left: 1px solid #e2e2e2;\n  margin: 4px 3px 4px 3px;\n}\n.menuButton {\n  background-color: #5a5a5a;\n  display: inline-block;\n  width: 20px;\n  height: 13px;\n  margin: 9px 4px 0 0;\n  cursor: default;\n  -webkit-mask-image: url(" + __webpack_require__(219) + ");\n  -webkit-mask-repeat: no-repeat;\n  -webkit-mask-position: center;\n}\n.menuButton:hover {\n  background-color: black;\n}\n.browserButton {\n  cursor: default;\n  display: inline-block;\n  line-height: 25px;\n  width: 25px;\n  height: 25px;\n  font-size: 13px;\n  color: #5a5a5a;\n  border-radius: 4px;\n  margin: 0 3px;\n  text-align: center;\n  transition: .1s opacity, .1s background;\n  user-select: none;\n  -webkit-user-select: none;\n}\n.browserButton + .browserButton {\n  margin-left: 5px;\n}\n.browserButton:not([disabled]):hover {\n  color: black;\n}\n.browserButton[disabled] {\n  pointer-events: none;\n  animation: none !important;\n  opacity: .25 !important;\n}\n.browserButton.smallButton {\n  line-height: 18px;\n  width: 18px;\n  height: 18px;\n  font-size: 24px;\n}\n.browserButton.primaryButton,\n.browserButton.actionButton,\n.browserButton.wideButton,\n.browserButton.subtleButton,\n.browserButton.whiteButton {\n  color: #fff;\n  line-height: 1.25;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  width: auto;\n  height: auto;\n  min-width: calc(78px);\n}\n.browserButton.primaryButton,\n.browserButton.actionButton,\n.browserButton.subtleButton,\n.browserButton.whiteButton {\n  padding-right: 16px;\n  padding-left: 16px;\n}\n.browserButton.primaryButton {\n  background: linear-gradient(#FF7A1D, #ff5000);\n  border: 2px solid transparent;\n  border-top: 2px solid #FF7A1D;\n  border-bottom: 2px solid #ff5000;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  font-weight: 500;\n}\n.browserButton.primaryButton:hover {\n  border: 2px solid white;\n  color: white;\n  cursor: pointer;\n}\n.browserButton.actionButton {\n  background-color: #4099FF;\n}\n.browserButton.wideButton {\n  width: auto;\n  padding-right: 35px;\n  padding-left: 35px;\n}\n.browserButton.whiteButton {\n  background: linear-gradient(white, #ececec);\n  border: 1px solid white;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  color: #444444;\n}\n.browserButton.whiteButton:hover {\n  border: 1px solid #999999;\n}\n.browserButton.inlineButton {\n  display: inline;\n}\n.browserButton.subtleButton {\n  background-color: #ccc;\n  font-size: 14px;\n}\n.prefBody .settingsList > .settingItem + button,\n.prefBody .settingItem > span + button,\n.prefBody .paymentsContainer button:not(.close) {\n  font-size: 0.9rem;\n  padding: 8px 20px;\n  margin: 0;\n}\n.prefBody .settingsList > .settingItem + button {\n  margin-top: 20px;\n}\n.prefBody .settingItem > span + button {\n  margin-top: 5px;\n}\n.prefBody .paymentsContainer .browserButton + .browserButton {\n  margin-left: 8px;\n}\n", ""]);
	
	// exports


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(278);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./window.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./window.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes tabFadeIn {\n  0% {\n    opacity: 0.5;\n  }\n  50% {\n    opacity: 0.6;\n  }\n  100% {\n    opacity: 0.5;\n  }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n:root {\n  --default-font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Helvetica Neue\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", sans-serif;\n}\n* {\n  margin: 0;\n  padding: 0;\n  font-family: var(--default-font-family);\n}\nhtml,\n#window {\n  background: #fff;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n  width: 100%;\n}\nhtml.isFullScreen .top,\n#window.isFullScreen .top,\nhtml.isFullScreen .downloadsBar,\n#window.isFullScreen .downloadsBar,\nhtml.isFullScreen .hrefPreview,\n#window.isFullScreen .hrefPreview {\n  display: none;\n}\n#appContainer,\n#windowContainer {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n}\n.top {\n  background: linear-gradient(to bottom, #fbfbfb, #ededed);\n}\n.mainContainer {\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n  width: 100%;\n}\n.mainContainer .tabContainer {\n  flex-grow: 1;\n  position: relative;\n}\n.mainContainer > div.tabs {\n  width: 180px;\n  overflow-y: scroll;\n}\n.frameWrapper {\n  height: 100%;\n  width: 100%;\n  z-index: 1000;\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-user-select: none;\n}\n.frameWrapper .fullScreenModeWarning {\n  background: #3a3a3a;\n  color: white;\n  font-size: larger;\n  left: 0;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 20px;\n  position: absolute;\n  right: 0;\n  text-align: center;\n}\n.frameWrapper webview {\n  background-color: #fff;\n  border: 0;\n  height: 100%;\n  outline: none;\n  width: 100%;\n}\n.frameWrapper .webviewContainer {\n  height: 100%;\n  width: 100%;\n}\n.frameWrapper .webviewContainer.isPreview {\n  opacity: 0.5;\n  animation: tabFadeIn 0.75s ease-in-out;\n  animation-fill-mode: forwards;\n}\n.frameWrapper:not(.isActive) {\n  z-index: 900;\n}\n.frameWrapper:not(.isActive).isPreview {\n  background: gray;\n  z-index: 1100;\n}\n.frameWrapper:not(.isActive):not(.isPreview) {\n  visibility: hidden;\n}\n.hrefPreview {\n  background: #F3F3F3;\n  border-color: #d3d3d3;\n  border-style: solid;\n  border-width: 1px 1px 0 0;\n  border-top-right-radius: 4px;\n  bottom: 0;\n  color: #555555;\n  font-size: 13px;\n  left: 0;\n  max-width: 40%;\n  overflow-x: hidden;\n  padding: 0.2em 0.5em;\n  position: absolute;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.hrefPreview.right {\n  left: auto;\n  right: 0;\n  border-width: 1px 0 0 1px;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 0;\n}\nbody.fullScreen .frameWrapper.isActive {\n  z-index: 4000;\n}\n/* The fullscreen notice is shown above the fullscreen element */\nbody.fullScreen .banner {\n  position: absolute;\n  z-index: 4100;\n  top: 0;\n  opacity: 1;\n  transition: opacity 2s ease-in-out;\n}\nbody.fullScreen .banner.fade {\n  opacity: 0;\n}\n[draggable] {\n  -webkit-user-select: none;\n}\n.link {\n  color: #0099CC;\n  cursor: pointer;\n  text-decoration: underline;\n}\na {\n  cursor: pointer;\n}\n", ""]);
	
	// exports


/***/ },
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const downloadStates = __webpack_require__(283);
	
	const pendingStates = [downloadStates.IN_PROGRESS, downloadStates.PAUSED];
	const stopStates = [downloadStates.CANCELLED, downloadStates.INTERRUPTED, downloadStates.COMPLETED];
	const notErrorStates = [downloadStates.IN_PROGRESS, downloadStates.PAUSED, downloadStates.COMPLETED];
	
	const downloadIsInState = (download, list) => list.includes(download.get('state'));
	
	module.exports.isPendingState = download => downloadIsInState(download, pendingStates);
	
	module.exports.shouldAllowPause = download => downloadIsInState(download, [downloadStates.IN_PROGRESS]);
	
	module.exports.shouldAllowResume = download => downloadIsInState(download, [downloadStates.PAUSED]);
	
	module.exports.shouldAllowCancel = download => downloadIsInState(download, pendingStates);
	
	module.exports.shouldAllowRedownload = download => downloadIsInState(download, stopStates);
	
	module.exports.shouldAllowOpenDownloadLocation = download => downloadIsInState(download, notErrorStates);
	
	module.exports.shouldAllowDelete = download => downloadIsInState(download, stopStates);
	
	module.exports.shouldAllowRemoveFromList = download => downloadIsInState(download, stopStates);
	
	module.exports.getL10nId = download => {
	  switch (download.get('state')) {
	    case downloadStates.INTERRUPTED:
	      return 'downloadInterrupted';
	    case downloadStates.CANCELLED:
	      return 'downloadCancelled';
	    case downloadStates.IN_PROGRESS:
	      if (!download.get('totalBytes')) {
	        return 'downloadInProgressUnknownTotal';
	      } else {
	        return 'downloadInProgress';
	      }
	    case downloadStates.COMPLETED:
	      return 'downloadCompleted';
	    case downloadStates.PAUSED:
	      return 'downloadPaused';
	  }
	  return '';
	};
	
	module.exports.getPercentageComplete = download => Math.ceil(download.get('receivedBytes') / download.get('totalBytes') * 100) + '%';
	
	module.exports.shouldAllowCopyLink = download => !!download.get('url');

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const downloadStates = {
	  PENDING: _,
	  IN_PROGRESS: _,
	  RESUMING: _,
	  PAUSED: _,
	  COMPLETED: _,
	  CANCELLED: _,
	  INTERRUPTED: _
	};
	
	module.exports = mapValuesByKeys(downloadStates);

/***/ },
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const Immutable = __webpack_require__(188);
	const { makeImmutable } = __webpack_require__(267);
	const siteUtil = __webpack_require__(259);
	const aboutHistoryMaxEntries = 500;
	
	module.exports.maxEntries = aboutHistoryMaxEntries;
	
	const sortTimeDescending = (left, right) => {
	  if (left.get('lastAccessedTime') < right.get('lastAccessedTime')) return 1;
	  if (left.get('lastAccessedTime') > right.get('lastAccessedTime')) return -1;
	  return 0;
	};
	
	module.exports.getHistory = sites => {
	  sites = makeImmutable(sites) ? makeImmutable(sites).toList() : new Immutable.List();
	  return sites.filter(site => siteUtil.isHistoryEntry(site)).sort(sortTimeDescending).slice(0, aboutHistoryMaxEntries);
	};
	
	const getDayString = (entry, locale) => {
	  const lastAccessedTime = entry.get('lastAccessedTime');
	  return lastAccessedTime ? new Date(lastAccessedTime).toLocaleDateString(locale, { weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' }) : '';
	};
	
	module.exports.groupEntriesByDay = (history, locale) => {
	  const reduced = history.reduce((previousValue, currentValue, currentIndex, array) => {
	    const result = currentIndex === 1 ? [] : previousValue;
	    if (currentIndex === 1) {
	      const firstDate = getDayString(previousValue, locale);
	      result.push({ date: firstDate, entries: [previousValue] });
	    }
	    const date = getDayString(currentValue, locale);
	    const dateIndex = result.findIndex(entryByDate => entryByDate.date === date);
	    if (dateIndex !== -1) {
	      result[dateIndex].entries.push(currentValue);
	    } else {
	      result.push({ date: date, entries: [currentValue] });
	    }
	    return result;
	  });
	  if (reduced) {
	    return Immutable.fromJS(Array.isArray(reduced) ? reduced : [{ date: getDayString(reduced, locale), entries: [reduced] }]);
	  }
	  return Immutable.fromJS([]);
	};
	
	/**
	 * Return an array with ALL entries.
	 * Format is expected to be array containing one array per day.
	 */
	module.exports.totalEntries = entriesByDay => {
	  entriesByDay = makeImmutable(entriesByDay) || new Immutable.List();
	
	  let result = new Immutable.List();
	  entriesByDay.forEach(entry => {
	    result = result.push(entry.get('entries'));
	  });
	  return result;
	};

/***/ },
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// rawAsap provides everything we need except exception management.
	var rawAsap = __webpack_require__(432);
	// RawTasks are recycled to reduce GC churn.
	var freeTasks = [];
	// We queue errors to ensure they are thrown in right order (FIFO).
	// Array-as-queue is good enough here, since we are just dealing with exceptions.
	var pendingErrors = [];
	var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
	
	function throwFirstError() {
	    if (pendingErrors.length) {
	        throw pendingErrors.shift();
	    }
	}
	
	/**
	 * Calls a task as soon as possible after returning, in its own event, with priority
	 * over other events like animation, reflow, and repaint. An error thrown from an
	 * event will not interrupt, nor even substantially slow down the processing of
	 * other events, but will be rather postponed to a lower priority event.
	 * @param {{call}} task A callable object, typically a function that takes no
	 * arguments.
	 */
	module.exports = asap;
	function asap(task) {
	    var rawTask;
	    if (freeTasks.length) {
	        rawTask = freeTasks.pop();
	    } else {
	        rawTask = new RawTask();
	    }
	    rawTask.task = task;
	    rawAsap(rawTask);
	}
	
	// We wrap tasks with recyclable task objects.  A task object implements
	// `call`, just like a function.
	function RawTask() {
	    this.task = null;
	}
	
	// The sole purpose of wrapping the task is to catch the exception and recycle
	// the task object after its single use.
	RawTask.prototype.call = function () {
	    try {
	        this.task.call();
	    } catch (error) {
	        if (asap.onerror) {
	            // This hook exists purely for testing purposes.
	            // Its name will be periodically randomized to break any code that
	            // depends on its existence.
	            asap.onerror(error);
	        } else {
	            // In a web browser, exceptions are not fatal. However, to avoid
	            // slowing down the queue of pending tasks, we rethrow the error in a
	            // lower priority turn.
	            pendingErrors.push(error);
	            requestErrorThrow();
	        }
	    } finally {
	        this.task = null;
	        freeTasks[freeTasks.length] = this;
	    }
	};


/***/ },
/* 432 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}
	
	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;
	
	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}
	
	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
	
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` or `self` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	
	/* globals self */
	var scope = typeof global !== "undefined" ? global : self;
	var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
	
	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);
	
	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.
	
	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396
	
	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}
	
	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;
	
	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}
	
	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html
	
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.
	
	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }
	
	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.
	
	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }
	
	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.
	
	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.
	
	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);
	
	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}
	
	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
	
	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _generate = __webpack_require__(476);
	
	var _exports2 = __webpack_require__(496);
	
	var _exports3 = _interopRequireDefault(_exports2);
	
	var useImportant = true; // Add !important to all style definitions
	exports['default'] = (0, _exports3['default'])(useImportant, _generate.defaultSelectorHandlers);
	module.exports = exports['default'];

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _inlineStylePrefixerStatic = __webpack_require__(477);
	
	var _inlineStylePrefixerStatic2 = _interopRequireDefault(_inlineStylePrefixerStatic);
	
	var _util = __webpack_require__(495);
	
	/**
	 * `selectorHandlers` are functions which handle special selectors which act
	 * differently than normal style definitions. These functions look at the
	 * current selector and can generate CSS for the styles in their subtree by
	 * calling the callback with a new selector.
	 *
	 * For example, when generating styles with a base selector of '.foo' and the
	 * following styles object:
	 *
	 *   {
	 *     ':nth-child(2n)': {
	 *       ':hover': {
	 *         color: 'red'
	 *       }
	 *     }
	 *   }
	 *
	 * when we reach the ':hover' style, we would call our selector handlers like
	 *
	 *   handler(':hover', '.foo:nth-child(2n)', callback)
	 *
	 * Since our `pseudoSelectors` handles ':hover' styles, that handler would call
	 * the callback like
	 *
	 *   callback('.foo:nth-child(2n):hover')
	 *
	 * to generate its subtree `{ color: 'red' }` styles with a
	 * '.foo:nth-child(2n):hover' selector. The callback would return CSS like
	 *
	 *   '.foo:nth-child(2n):hover{color:red !important;}'
	 *
	 * and the handler would then return that resulting CSS.
	 *
	 * `defaultSelectorHandlers` is the list of default handlers used in a call to
	 * `generateCSS`.
	 *
	 * @name SelectorHandler
	 * @function
	 * @param {string} selector: The currently inspected selector. ':hover' in the
	 *     example above.
	 * @param {string} baseSelector: The selector of the parent styles.
	 *     '.foo:nth-child(2n)' in the example above.
	 * @param {function} generateSubtreeStyles: A function which can be called to
	 *     generate CSS for the subtree of styles corresponding to the selector.
	 *     Accepts a new baseSelector to use for generating those styles.
	 * @returns {?string} The generated CSS for this selector, or null if we don't
	 *     handle this selector.
	 */
	var defaultSelectorHandlers = [
	// Handle pseudo-selectors, like :hover and :nth-child(3n)
	function pseudoSelectors(selector, baseSelector, generateSubtreeStyles) {
	    if (selector[0] !== ":") {
	        return null;
	    }
	    return generateSubtreeStyles(baseSelector + selector);
	},
	
	// Handle media queries (or font-faces)
	function mediaQueries(selector, baseSelector, generateSubtreeStyles) {
	    if (selector[0] !== "@") {
	        return null;
	    }
	    // Generate the styles normally, and then wrap them in the media query.
	    var generated = generateSubtreeStyles(baseSelector);
	    return selector + '{' + generated + '}';
	}];
	
	exports.defaultSelectorHandlers = defaultSelectorHandlers;
	/**
	 * Generate CSS for a selector and some styles.
	 *
	 * This function handles the media queries, pseudo selectors, and descendant
	 * styles that can be used in aphrodite styles.
	 *
	 * @param {string} selector: A base CSS selector for the styles to be generated
	 *     with.
	 * @param {Object} styleTypes: A list of properties of the return type of
	 *     StyleSheet.create, e.g. [styles.red, styles.blue].
	 * @param {Array.<SelectorHandler>} selectorHandlers: A list of selector
	 *     handlers to use for handling special selectors. See
	 *     `defaultSelectorHandlers`.
	 * @param stringHandlers: See `generateCSSRuleset`
	 * @param useImportant: See `generateCSSRuleset`
	 *
	 * To actually generate the CSS special-construct-less styles are passed to
	 * `generateCSSRuleset`.
	 *
	 * For instance, a call to
	 *
	 *     generateCSS(".foo", {
	 *       color: "red",
	 *       "@media screen": {
	 *         height: 20,
	 *         ":hover": {
	 *           backgroundColor: "black"
	 *         }
	 *       },
	 *       ":active": {
	 *         fontWeight: "bold",
	 *         ">>bar": {
	 *           _names: { "foo_bar": true },
	 *           height: 10,
	 *         }
	 *       }
	 *     });
	 *
	 * with the default `selectorHandlers` will make 5 calls to
	 * `generateCSSRuleset`:
	 *
	 *     generateCSSRuleset(".foo", { color: "red" }, ...)
	 *     generateCSSRuleset(".foo:active", { fontWeight: "bold" }, ...)
	 *     generateCSSRuleset(".foo:active .foo_bar", { height: 10 }, ...)
	 *     // These 2 will be wrapped in @media screen {}
	 *     generateCSSRuleset(".foo", { height: 20 }, ...)
	 *     generateCSSRuleset(".foo:hover", { backgroundColor: "black" }, ...)
	 */
	var generateCSS = function generateCSS(selector, styleTypes) {
	    var selectorHandlers = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
	    var stringHandlers = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
	    var useImportant = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
	
	    var merged = styleTypes.reduce(_util.recursiveMerge);
	
	    var plainDeclarations = {};
	    var generatedStyles = "";
	
	    Object.keys(merged).forEach(function (key) {
	        // For each key, see if one of the selector handlers will handle these
	        // styles.
	        var foundHandler = selectorHandlers.some(function (handler) {
	            var result = handler(key, selector, function (newSelector) {
	                return generateCSS(newSelector, [merged[key]], selectorHandlers, stringHandlers, useImportant);
	            });
	            if (result != null) {
	                // If the handler returned something, add it to the generated
	                // CSS and stop looking for another handler.
	                generatedStyles += result;
	                return true;
	            }
	        });
	        // If none of the handlers handled it, add it to the list of plain
	        // style declarations.
	        if (!foundHandler) {
	            plainDeclarations[key] = merged[key];
	        }
	    });
	
	    return generateCSSRuleset(selector, plainDeclarations, stringHandlers, useImportant, selectorHandlers) + generatedStyles;
	};
	
	exports.generateCSS = generateCSS;
	/**
	 * Helper method of generateCSSRuleset to facilitate custom handling of certain
	 * CSS properties. Used for e.g. font families.
	 *
	 * See generateCSSRuleset for usage and documentation of paramater types.
	 */
	var runStringHandlers = function runStringHandlers(declarations, stringHandlers, selectorHandlers) {
	    var result = {};
	
	    Object.keys(declarations).forEach(function (key) {
	        // If a handler exists for this particular key, let it interpret
	        // that value first before continuing
	        if (stringHandlers && stringHandlers.hasOwnProperty(key)) {
	            // TODO(emily): Pass in a callback which generates CSS, similar to
	            // how our selector handlers work, instead of passing in
	            // `selectorHandlers` and have them make calls to `generateCSS`
	            // themselves. Right now, this is impractical because our string
	            // handlers are very specialized and do complex things.
	            result[key] = stringHandlers[key](declarations[key], selectorHandlers);
	        } else {
	            result[key] = declarations[key];
	        }
	    });
	
	    return result;
	};
	
	/**
	 * Generate a CSS ruleset with the selector and containing the declarations.
	 *
	 * This function assumes that the given declarations don't contain any special
	 * children (such as media queries, pseudo-selectors, or descendant styles).
	 *
	 * Note that this method does not deal with nesting used for e.g.
	 * psuedo-selectors or media queries. That responsibility is left to  the
	 * `generateCSS` function.
	 *
	 * @param {string} selector: the selector associated with the ruleset
	 * @param {Object} declarations: a map from camelCased CSS property name to CSS
	 *     property value.
	 * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS
	 *     property name to a function which will map the given value to the value
	 *     that is output.
	 * @param {bool} useImportant: A boolean saying whether to append "!important"
	 *     to each of the CSS declarations.
	 * @returns {string} A string of raw CSS.
	 *
	 * Examples:
	 *
	 *    generateCSSRuleset(".blah", { color: "red" })
	 *    -> ".blah{color: red !important;}"
	 *    generateCSSRuleset(".blah", { color: "red" }, {}, false)
	 *    -> ".blah{color: red}"
	 *    generateCSSRuleset(".blah", { color: "red" }, {color: c => c.toUpperCase})
	 *    -> ".blah{color: RED}"
	 *    generateCSSRuleset(".blah:hover", { color: "red" })
	 *    -> ".blah:hover{color: red}"
	 */
	var generateCSSRuleset = function generateCSSRuleset(selector, declarations, stringHandlers, useImportant, selectorHandlers) {
	    var handledDeclarations = runStringHandlers(declarations, stringHandlers, selectorHandlers);
	
	    var prefixedDeclarations = (0, _inlineStylePrefixerStatic2['default'])(handledDeclarations);
	
	    var prefixedRules = (0, _util.flatten)((0, _util.objectToPairs)(prefixedDeclarations).map(function (_ref) {
	        var _ref2 = _slicedToArray(_ref, 2);
	
	        var key = _ref2[0];
	        var value = _ref2[1];
	
	        if (Array.isArray(value)) {
	            var _ret = (function () {
	                // inline-style-prefix-all returns an array when there should be
	                // multiple rules, we will flatten to single rules
	
	                var prefixedValues = [];
	                var unprefixedValues = [];
	
	                value.forEach(function (v) {
	                    if (v.indexOf('-') === 0) {
	                        prefixedValues.push(v);
	                    } else {
	                        unprefixedValues.push(v);
	                    }
	                });
	
	                prefixedValues.sort();
	                unprefixedValues.sort();
	
	                return {
	                    v: prefixedValues.concat(unprefixedValues).map(function (v) {
	                        return [key, v];
	                    })
	                };
	            })();
	
	            if (typeof _ret === 'object') return _ret.v;
	        }
	        return [[key, value]];
	    }));
	
	    var rules = prefixedRules.map(function (_ref3) {
	        var _ref32 = _slicedToArray(_ref3, 2);
	
	        var key = _ref32[0];
	        var value = _ref32[1];
	
	        var stringValue = (0, _util.stringifyValue)(key, value);
	        var ret = (0, _util.kebabifyStyleName)(key) + ':' + stringValue + ';';
	        return useImportant === false ? ret : (0, _util.importantify)(ret);
	    }).join("");
	
	    if (rules) {
	        return selector + '{' + rules + '}';
	    } else {
	        return "";
	    }
	};
	exports.generateCSSRuleset = generateCSSRuleset;

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(478)


/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixAll;
	
	var _prefixProps = __webpack_require__(479);
	
	var _prefixProps2 = _interopRequireDefault(_prefixProps);
	
	var _capitalizeString = __webpack_require__(480);
	
	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
	
	var _sortPrefixedStyle = __webpack_require__(481);
	
	var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);
	
	var _position = __webpack_require__(483);
	
	var _position2 = _interopRequireDefault(_position);
	
	var _calc = __webpack_require__(484);
	
	var _calc2 = _interopRequireDefault(_calc);
	
	var _cursor = __webpack_require__(487);
	
	var _cursor2 = _interopRequireDefault(_cursor);
	
	var _flex = __webpack_require__(488);
	
	var _flex2 = _interopRequireDefault(_flex);
	
	var _sizing = __webpack_require__(489);
	
	var _sizing2 = _interopRequireDefault(_sizing);
	
	var _gradient = __webpack_require__(490);
	
	var _gradient2 = _interopRequireDefault(_gradient);
	
	var _transition = __webpack_require__(491);
	
	var _transition2 = _interopRequireDefault(_transition);
	
	var _flexboxIE = __webpack_require__(493);
	
	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);
	
	var _flexboxOld = __webpack_require__(494);
	
	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// special flexbox specifications
	
	
	var plugins = [_position2.default, _calc2.default, _cursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default, _flex2.default];
	
	/**
	 * Returns a prefixed version of the style object using all vendor prefixes
	 * @param {Object} styles - Style object that gets prefixed properties added
	 * @returns {Object} - Style object with prefixed properties and values
	 */
	function prefixAll(styles) {
	  Object.keys(styles).forEach(function (property) {
	    var value = styles[property];
	    if (value instanceof Object && !Array.isArray(value)) {
	      // recurse through nested style objects
	      styles[property] = prefixAll(value);
	    } else {
	      Object.keys(_prefixProps2.default).forEach(function (prefix) {
	        var properties = _prefixProps2.default[prefix];
	        // add prefixes if needed
	        if (properties[property]) {
	          styles[prefix + (0, _capitalizeString2.default)(property)] = value;
	        }
	      });
	    }
	  });
	
	  Object.keys(styles).forEach(function (property) {
	    [].concat(styles[property]).forEach(function (value, index) {
	      // resolve every special plugins
	      plugins.forEach(function (plugin) {
	        return assignStyles(styles, plugin(property, value));
	      });
	    });
	  });
	
	  return (0, _sortPrefixedStyle2.default)(styles);
	}
	
	function assignStyles(base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  Object.keys(extend).forEach(function (property) {
	    var baseValue = base[property];
	    if (Array.isArray(baseValue)) {
	      [].concat(extend[property]).forEach(function (value) {
	        var valueIndex = baseValue.indexOf(value);
	        if (valueIndex > -1) {
	          base[property].splice(valueIndex, 1);
	        }
	        base[property].push(value);
	      });
	    } else {
	      base[property] = extend[property];
	    }
	  });
	}
	module.exports = exports['default'];

/***/ },
/* 479 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
	module.exports = exports["default"];

/***/ },
/* 480 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// helper to capitalize strings
	
	exports.default = function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};
	
	module.exports = exports["default"];

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sortPrefixedStyle;
	
	var _isPrefixedProperty = __webpack_require__(482);
	
	var _isPrefixedProperty2 = _interopRequireDefault(_isPrefixedProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function sortPrefixedStyle(style) {
	  return Object.keys(style).sort(function (left, right) {
	    if ((0, _isPrefixedProperty2.default)(left) && !(0, _isPrefixedProperty2.default)(right)) {
	      return -1;
	    } else if (!(0, _isPrefixedProperty2.default)(left) && (0, _isPrefixedProperty2.default)(right)) {
	      return 1;
	    }
	    return 0;
	  }).reduce(function (sortedStyle, prop) {
	    sortedStyle[prop] = style[prop];
	    return sortedStyle;
	  }, {});
	}
	module.exports = exports['default'];

/***/ },
/* 482 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (property) {
	  return property.match(/^(Webkit|Moz|O|ms)/) !== null;
	};
	
	module.exports = exports["default"];

/***/ },
/* 483 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = position;
	function position(property, value) {
	  if (property === 'position' && value === 'sticky') {
	    return { position: ['-webkit-sticky', 'sticky'] };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;
	
	var _joinPrefixedValue = __webpack_require__(485);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	var _isPrefixedValue = __webpack_require__(486);
	
	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function calc(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
	    return (0, _joinPrefixedValue2.default)(property, value, function (prefix, value) {
	      return value.replace(/calc\(/g, prefix + 'calc(');
	    });
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 485 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	// returns a style object with a single concated prefixed value string
	
	exports.default = function (property, value) {
	  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
	    return prefix + value;
	  } : arguments[2];
	  return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
	    return replacer(prefix, value);
	  }));
	};
	
	module.exports = exports['default'];

/***/ },
/* 486 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (value) {
	  if (Array.isArray(value)) value = value.join(',');
	
	  return value.match(/-webkit-|-moz-|-ms-/) !== null;
	};
	
	module.exports = exports['default'];

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cursor;
	
	var _joinPrefixedValue = __webpack_require__(485);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = {
	  'zoom-in': true,
	  'zoom-out': true,
	  grab: true,
	  grabbing: true
	};
	
	function cursor(property, value) {
	  if (property === 'cursor' && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 488 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;
	var values = { flex: true, 'inline-flex': true };
	
	function flex(property, value) {
	  if (property === 'display' && values[value]) {
	    return {
	      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;
	
	var _joinPrefixedValue = __webpack_require__(485);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};
	
	function sizing(property, value) {
	  if (properties[property] && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;
	
	var _joinPrefixedValue = __webpack_require__(485);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	var _isPrefixedValue = __webpack_require__(486);
	
	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;
	
	function gradient(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.match(values) !== null) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = transition;
	
	var _hyphenateStyleName = __webpack_require__(492);
	
	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
	
	var _capitalizeString = __webpack_require__(480);
	
	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
	
	var _isPrefixedValue = __webpack_require__(486);
	
	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
	
	var _prefixProps = __webpack_require__(479);
	
	var _prefixProps2 = _interopRequireDefault(_prefixProps);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true
	};
	
	function transition(property, value) {
	  // also check for already prefixed transitions
	  if (typeof value === 'string' && properties[property]) {
	    var _ref2;
	
	    var outputValue = prefixValue(value);
	    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
	      return value.match(/-moz-|-ms-/) === null;
	    }).join(',');
	
	    // if the property is already prefixed
	    if (property.indexOf('Webkit') > -1) {
	      return _defineProperty({}, property, webkitOutput);
	    }
	
	    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _capitalizeString2.default)(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
	  }
	}
	
	function prefixValue(value) {
	  if ((0, _isPrefixedValue2.default)(value)) {
	    return value;
	  }
	
	  // only split multi values, not cubic beziers
	  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
	
	  // iterate each single value and check for transitioned properties
	  // that need to be prefixed as well
	  multipleValues.forEach(function (val, index) {
	    multipleValues[index] = Object.keys(_prefixProps2.default).reduce(function (out, prefix) {
	      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';
	
	      Object.keys(_prefixProps2.default[prefix]).forEach(function (prop) {
	        var dashCaseProperty = (0, _hyphenateStyleName2.default)(prop);
	
	        if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
	          // join all prefixes and create a new value
	          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
	        }
	      });
	      return out;
	    }, val);
	  });
	
	  return multipleValues.join(',');
	}
	module.exports = exports['default'];

/***/ },
/* 492 */
/***/ function(module, exports) {

	'use strict';
	
	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};
	
	function hyphenateStyleName(string) {
	    return string in cache
	    ? cache[string]
	    : cache[string] = string
	      .replace(uppercasePattern, '-$&')
	      .toLowerCase()
	      .replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;


/***/ },
/* 493 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};
	
	function flexboxIE(property, value) {
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 494 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple'
	};
	
	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};
	
	function flexboxOld(property, value) {
	  if (property === 'flexDirection' && typeof value === 'string') {
	    return {
	      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	    };
	  }
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 495 */
/***/ function(module, exports) {

	// {K1: V1, K2: V2, ...} -> [[K1, V1], [K2, V2]]
	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var objectToPairs = function objectToPairs(obj) {
	    return Object.keys(obj).map(function (key) {
	        return [key, obj[key]];
	    });
	};
	
	exports.objectToPairs = objectToPairs;
	// [[K1, V1], [K2, V2]] -> {K1: V1, K2: V2, ...}
	var pairsToObject = function pairsToObject(pairs) {
	    var result = {};
	    pairs.forEach(function (_ref) {
	        var _ref2 = _slicedToArray(_ref, 2);
	
	        var key = _ref2[0];
	        var val = _ref2[1];
	
	        result[key] = val;
	    });
	    return result;
	};
	
	var mapObj = function mapObj(obj, fn) {
	    return pairsToObject(objectToPairs(obj).map(fn));
	};
	
	exports.mapObj = mapObj;
	// Flattens an array one level
	// [[A], [B, C, [D]]] -> [A, B, C, [D]]
	var flatten = function flatten(list) {
	    return list.reduce(function (memo, x) {
	        return memo.concat(x);
	    }, []);
	};
	
	exports.flatten = flatten;
	var flattenDeep = function flattenDeep(list) {
	    return list.reduce(function (memo, x) {
	        return memo.concat(Array.isArray(x) ? flattenDeep(x) : x);
	    }, []);
	};
	
	exports.flattenDeep = flattenDeep;
	var UPPERCASE_RE = /([A-Z])/g;
	var MS_RE = /^ms-/;
	
	var kebabify = function kebabify(string) {
	    return string.replace(UPPERCASE_RE, '-$1').toLowerCase();
	};
	var kebabifyStyleName = function kebabifyStyleName(string) {
	    return kebabify(string).replace(MS_RE, '-ms-');
	};
	
	exports.kebabifyStyleName = kebabifyStyleName;
	var recursiveMerge = function recursiveMerge(a, b) {
	    // TODO(jlfwong): Handle malformed input where a and b are not the same
	    // type.
	
	    if (typeof a !== 'object') {
	        return b;
	    }
	
	    var ret = _extends({}, a);
	
	    Object.keys(b).forEach(function (key) {
	        if (ret.hasOwnProperty(key)) {
	            ret[key] = recursiveMerge(a[key], b[key]);
	        } else {
	            ret[key] = b[key];
	        }
	    });
	
	    return ret;
	};
	
	exports.recursiveMerge = recursiveMerge;
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 * Taken from React's CSSProperty.js
	 */
	var isUnitlessNumber = {
	    animationIterationCount: true,
	    borderImageOutset: true,
	    borderImageSlice: true,
	    borderImageWidth: true,
	    boxFlex: true,
	    boxFlexGroup: true,
	    boxOrdinalGroup: true,
	    columnCount: true,
	    flex: true,
	    flexGrow: true,
	    flexPositive: true,
	    flexShrink: true,
	    flexNegative: true,
	    flexOrder: true,
	    gridRow: true,
	    gridColumn: true,
	    fontWeight: true,
	    lineClamp: true,
	    lineHeight: true,
	    opacity: true,
	    order: true,
	    orphans: true,
	    tabSize: true,
	    widows: true,
	    zIndex: true,
	    zoom: true,
	
	    // SVG-related properties
	    fillOpacity: true,
	    floodOpacity: true,
	    stopOpacity: true,
	    strokeDasharray: true,
	    strokeDashoffset: true,
	    strokeMiterlimit: true,
	    strokeOpacity: true,
	    strokeWidth: true
	};
	
	/**
	 * Taken from React's CSSProperty.js
	 *
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 * Taken from React's CSSProperty.js
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	// Taken from React's CSSProperty.js
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	    prefixes.forEach(function (prefix) {
	        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	    });
	});
	
	var stringifyValue = function stringifyValue(key, prop) {
	    if (typeof prop === "number") {
	        if (isUnitlessNumber[key]) {
	            return "" + prop;
	        } else {
	            return prop + "px";
	        }
	    } else {
	        return prop;
	    }
	};
	
	exports.stringifyValue = stringifyValue;
	/**
	 * JS Implementation of MurmurHash2
	 *
	 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
	 * @see http://github.com/garycourt/murmurhash-js
	 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
	 * @see http://sites.google.com/site/murmurhash/
	 *
	 * @param {string} str ASCII only
	 * @return {string} Base 36 encoded hash result
	 */
	function murmurhash2_32_gc(str) {
	    var l = str.length;
	    var h = l;
	    var i = 0;
	    var k = undefined;
	
	    while (l >= 4) {
	        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	
	        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	        k ^= k >>> 24;
	        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	
	        h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
	
	        l -= 4;
	        ++i;
	    }
	
	    /* eslint-disable no-fallthrough */ // forgive existing code
	    switch (l) {
	        case 3:
	            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
	        case 2:
	            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
	        case 1:
	            h ^= str.charCodeAt(i) & 0xff;
	            h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	    }
	    /* eslint-enable no-fallthrough */
	
	    h ^= h >>> 13;
	    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
	    h ^= h >>> 15;
	
	    return (h >>> 0).toString(36);
	}
	
	// Hash a javascript object using JSON.stringify. This is very fast, about 3
	// microseconds on my computer for a sample object:
	// http://jsperf.com/test-hashfnv32a-hash/5
	//
	// Note that this uses JSON.stringify to stringify the objects so in order for
	// this to produce consistent hashes browsers need to have a consistent
	// ordering of objects. Ben Alpert says that Facebook depends on this, so we
	// can probably depend on this too.
	var hashObject = function hashObject(object) {
	    return murmurhash2_32_gc(JSON.stringify(object));
	};
	
	exports.hashObject = hashObject;
	var IMPORTANT_RE = /^([^:]+:.*?)( !important)?;$/;
	
	// Given a single style rule string like "a: b;", adds !important to generate
	// "a: b !important;".
	var importantify = function importantify(string) {
	    return string.replace(IMPORTANT_RE, function (_, base) {
	        return base + " !important;";
	    });
	};
	exports.importantify = importantify;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _util = __webpack_require__(495);
	
	var _inject = __webpack_require__(497);
	
	var StyleSheet = {
	    create: function create(sheetDefinition) {
	        return (0, _util.mapObj)(sheetDefinition, function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 2);
	
	            var key = _ref2[0];
	            var val = _ref2[1];
	
	            return [key, {
	                // TODO(emily): Make a 'production' mode which doesn't prepend
	                // the class name here, to make the generated CSS smaller.
	                _name: key + '_' + (0, _util.hashObject)(val),
	                _definition: val
	            }];
	        });
	    },
	
	    rehydrate: function rehydrate() {
	        var renderedClassNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	        (0, _inject.addRenderedClassNames)(renderedClassNames);
	    }
	};
	
	/**
	 * Utilities for using Aphrodite server-side.
	 */
	var StyleSheetServer = {
	    renderStatic: function renderStatic(renderFunc) {
	        (0, _inject.reset)();
	        (0, _inject.startBuffering)();
	        var html = renderFunc();
	        var cssContent = (0, _inject.flushToString)();
	
	        return {
	            html: html,
	            css: {
	                content: cssContent,
	                renderedClassNames: (0, _inject.getRenderedClassNames)()
	            }
	        };
	    }
	};
	
	/**
	 * Utilities for using Aphrodite in tests.
	 *
	 * Not meant to be used in production.
	 */
	var StyleSheetTestUtils = {
	    /**
	     * Prevent styles from being injected into the DOM.
	     *
	     * This is useful in situations where you'd like to test rendering UI
	     * components which use Aphrodite without any of the side-effects of
	     * Aphrodite happening. Particularly useful for testing the output of
	     * components when you have no DOM, e.g. testing in Node without a fake DOM.
	     *
	     * Should be paired with a subsequent call to
	     * clearBufferAndResumeStyleInjection.
	     */
	    suppressStyleInjection: function suppressStyleInjection() {
	        (0, _inject.reset)();
	        (0, _inject.startBuffering)();
	    },
	
	    /**
	     * Opposite method of preventStyleInject.
	     */
	    clearBufferAndResumeStyleInjection: function clearBufferAndResumeStyleInjection() {
	        (0, _inject.reset)();
	    }
	};
	
	/**
	 * Generate the Aphrodite API exports, with given `selectorHandlers` and
	 * `useImportant` state.
	 */
	var makeExports = function makeExports(useImportant, selectorHandlers) {
	    return {
	        StyleSheet: _extends({}, StyleSheet, {
	
	            /**
	             * Returns a version of the exports of Aphrodite (i.e. an object
	             * with `css` and `StyleSheet` properties) which have some
	             * extensions included.
	             *
	             * @param {Array.<Object>} extensions: An array of extensions to
	             *     add to this instance of Aphrodite. Each object should have a
	             *     single property on it, defining which kind of extension to
	             *     add.
	             * @param {SelectorHandler} [extensions[].selectorHandler]: A
	             *     selector handler extension. See `defaultSelectorHandlers` in
	             *     generate.js.
	             *
	             * @returns {Object} An object containing the exports of the new
	             *     instance of Aphrodite.
	             */
	            extend: function extend(extensions) {
	                var extensionSelectorHandlers = extensions
	                // Pull out extensions with a selectorHandler property
	                .map(function (extension) {
	                    return extension.selectorHandler;
	                })
	                // Remove nulls (i.e. extensions without a selectorHandler
	                // property).
	                .filter(function (handler) {
	                    return handler;
	                });
	
	                return makeExports(useImportant, selectorHandlers.concat(extensionSelectorHandlers));
	            }
	        }),
	
	        StyleSheetServer: StyleSheetServer,
	        StyleSheetTestUtils: StyleSheetTestUtils,
	
	        css: function css() {
	            for (var _len = arguments.length, styleDefinitions = Array(_len), _key = 0; _key < _len; _key++) {
	                styleDefinitions[_key] = arguments[_key];
	            }
	
	            return (0, _inject.injectAndGetClassName)(useImportant, styleDefinitions, selectorHandlers);
	        }
	    };
	};
	
	module.exports = makeExports;

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _asap = __webpack_require__(431);
	
	var _asap2 = _interopRequireDefault(_asap);
	
	var _generate = __webpack_require__(476);
	
	var _util = __webpack_require__(495);
	
	// The current <style> tag we are inserting into, or null if we haven't
	// inserted anything yet. We could find this each time using
	// `document.querySelector("style[data-aphrodite"])`, but holding onto it is
	// faster.
	var styleTag = null;
	
	// Inject a string of styles into a <style> tag in the head of the document. This
	// will automatically create a style tag and then continue to use it for
	// multiple injections. It will also use a style tag with the `data-aphrodite`
	// tag on it if that exists in the DOM. This could be used for e.g. reusing the
	// same style tag that server-side rendering inserts.
	var injectStyleTag = function injectStyleTag(cssContents) {
	    if (styleTag == null) {
	        // Try to find a style tag with the `data-aphrodite` attribute first.
	        styleTag = document.querySelector("style[data-aphrodite]");
	
	        // If that doesn't work, generate a new style tag.
	        if (styleTag == null) {
	            // Taken from
	            // http://stackoverflow.com/questions/524696/how-to-create-a-style-tag-with-javascript
	            var head = document.head || document.getElementsByTagName('head')[0];
	            styleTag = document.createElement('style');
	
	            styleTag.type = 'text/css';
	            styleTag.setAttribute("data-aphrodite", "");
	            head.appendChild(styleTag);
	        }
	    }
	
	    if (styleTag.styleSheet) {
	        styleTag.styleSheet.cssText += cssContents;
	    } else {
	        styleTag.appendChild(document.createTextNode(cssContents));
	    }
	};
	
	// Custom handlers for stringifying CSS values that have side effects
	// (such as fontFamily, which can cause @font-face rules to be injected)
	var stringHandlers = {
	    // With fontFamily we look for objects that are passed in and interpret
	    // them as @font-face rules that we need to inject. The value of fontFamily
	    // can either be a string (as normal), an object (a single font face), or
	    // an array of objects and strings.
	    fontFamily: function fontFamily(val) {
	        if (Array.isArray(val)) {
	            return val.map(fontFamily).join(",");
	        } else if (typeof val === "object") {
	            injectStyleOnce(val.src, "@font-face", [val], false);
	            return '"' + val.fontFamily + '"';
	        } else {
	            return val;
	        }
	    },
	
	    // With animationName we look for an object that contains keyframes and
	    // inject them as an `@keyframes` block, returning a uniquely generated
	    // name. The keyframes object should look like
	    //  animationName: {
	    //    from: {
	    //      left: 0,
	    //      top: 0,
	    //    },
	    //    '50%': {
	    //      left: 15,
	    //      top: 5,
	    //    },
	    //    to: {
	    //      left: 20,
	    //      top: 20,
	    //    }
	    //  }
	    // TODO(emily): `stringHandlers` doesn't let us rename the key, so I have
	    // to use `animationName` here. Improve that so we can call this
	    // `animation` instead of `animationName`.
	    animationName: function animationName(val, selectorHandlers) {
	        if (Array.isArray(val)) {
	            return val.map(function (v) {
	                return animationName(v, selectorHandlers);
	            }).join(",");
	        } else if (typeof val === "object") {
	            // Generate a unique name based on the hash of the object. We can't
	            // just use the hash because the name can't start with a number.
	            // TODO(emily): this probably makes debugging hard, allow a custom
	            // name?
	            var _name = 'keyframe_' + (0, _util.hashObject)(val);
	
	            // Since keyframes need 3 layers of nesting, we use `generateCSS` to
	            // build the inner layers and wrap it in `@keyframes` ourselves.
	            var finalVal = '@keyframes ' + _name + '{';
	            Object.keys(val).forEach(function (key) {
	                finalVal += (0, _generate.generateCSS)(key, [val[key]], selectorHandlers, stringHandlers, false);
	            });
	            finalVal += '}';
	
	            injectGeneratedCSSOnce(_name, finalVal);
	
	            return _name;
	        } else {
	            return val;
	        }
	    }
	};
	
	// This is a map from Aphrodite's generated class names to `true` (acting as a
	// set of class names)
	var alreadyInjected = {};
	
	// This is the buffer of styles which have not yet been flushed.
	var injectionBuffer = "";
	
	// A flag to tell if we are already buffering styles. This could happen either
	// because we scheduled a flush call already, so newly added styles will
	// already be flushed, or because we are statically buffering on the server.
	var isBuffering = false;
	
	var injectGeneratedCSSOnce = function injectGeneratedCSSOnce(key, generatedCSS) {
	    if (!alreadyInjected[key]) {
	        if (!isBuffering) {
	            // We should never be automatically buffering on the server (or any
	            // place without a document), so guard against that.
	            if (typeof document === "undefined") {
	                throw new Error("Cannot automatically buffer without a document");
	            }
	
	            // If we're not already buffering, schedule a call to flush the
	            // current styles.
	            isBuffering = true;
	            (0, _asap2['default'])(flushToStyleTag);
	        }
	
	        injectionBuffer += generatedCSS;
	        alreadyInjected[key] = true;
	    }
	};
	
	var injectStyleOnce = function injectStyleOnce(key, selector, definitions, useImportant, selectorHandlers) {
	    if (!alreadyInjected[key]) {
	        var generated = (0, _generate.generateCSS)(selector, definitions, selectorHandlers, stringHandlers, useImportant);
	
	        injectGeneratedCSSOnce(key, generated);
	    }
	};
	
	exports.injectStyleOnce = injectStyleOnce;
	var reset = function reset() {
	    injectionBuffer = "";
	    alreadyInjected = {};
	    isBuffering = false;
	    styleTag = null;
	};
	
	exports.reset = reset;
	var startBuffering = function startBuffering() {
	    if (isBuffering) {
	        throw new Error("Cannot buffer while already buffering");
	    }
	    isBuffering = true;
	};
	
	exports.startBuffering = startBuffering;
	var flushToString = function flushToString() {
	    isBuffering = false;
	    var ret = injectionBuffer;
	    injectionBuffer = "";
	    return ret;
	};
	
	exports.flushToString = flushToString;
	var flushToStyleTag = function flushToStyleTag() {
	    var cssContent = flushToString();
	    if (cssContent.length > 0) {
	        injectStyleTag(cssContent);
	    }
	};
	
	exports.flushToStyleTag = flushToStyleTag;
	var getRenderedClassNames = function getRenderedClassNames() {
	    return Object.keys(alreadyInjected);
	};
	
	exports.getRenderedClassNames = getRenderedClassNames;
	var addRenderedClassNames = function addRenderedClassNames(classNames) {
	    classNames.forEach(function (className) {
	        alreadyInjected[className] = true;
	    });
	};
	
	exports.addRenderedClassNames = addRenderedClassNames;
	/**
	 * Inject styles associated with the passed style definition objects, and return
	 * an associated CSS class name.
	 *
	 * @param {boolean} useImportant If true, will append !important to generated
	 *     CSS output. e.g. {color: red} -> "color: red !important".
	 * @param {(Object|Object[])[]} styleDefinitions style definition objects, or
	 *     arbitrarily nested arrays of them, as returned as properties of the
	 *     return value of StyleSheet.create().
	 */
	var injectAndGetClassName = function injectAndGetClassName(useImportant, styleDefinitions, selectorHandlers) {
	    styleDefinitions = (0, _util.flattenDeep)(styleDefinitions);
	
	    // Filter out falsy values from the input, to allow for
	    // `css(a, test && c)`
	    var validDefinitions = styleDefinitions.filter(function (def) {
	        return def;
	    });
	
	    // Break if there aren't any valid styles.
	    if (validDefinitions.length === 0) {
	        return "";
	    }
	
	    var className = validDefinitions.map(function (s) {
	        return s._name;
	    }).join("-o_O-");
	    injectStyleOnce(className, '.' + className, validDefinitions.map(function (d) {
	        return d._definition;
	    }), useImportant, selectorHandlers);
	
	    return className;
	};
	exports.injectAndGetClassName = injectAndGetClassName;

/***/ },
/* 498 */
/***/ function(module, exports) {

	'use strict';
	
	const globalStyles = {
	  breakpoint: {
	    breakpointWideViewport: '1000px',
	    breakpointNarrowViewport: '600px',
	    breakpointExtensionButtonPadding: '720px',
	    breakpointSmallWin32: '650px',
	    breakpointTinyWin32: '500px'
	  },
	  color: {
	    linkColor: '#0099CC',
	    highlightBlue: '#37A9FD',
	    privateTabBackground: '#392e54',
	    bitcoinOrange: '#f7931a',
	    chromePrimary: '#F3F3F3',
	    chromeSecondary: '#d3d3d3',
	    chromeTertiary: '#c7c7c7',
	    chromeText: '#555555',
	    tabsBackground: '#dddddd',
	    navigationBarBackground: 'white',
	    chromeControlsBackground: '#bbb',
	    chromeControlsBackground2: 'white',
	    toolbarBackground: '#eee',
	    toolbarBorderColor: '#ccc',
	    menuSelectionColor: '#2F7AFB',
	    errorTextColor: '#999',
	    progressBarColor: '#3498DB',
	    siteInsecureColor: '#C63626',
	    siteEVColor: 'green',
	    buttonColor: '#5a5a5a',
	    braveOrange: 'rgb(255, 80, 0)',
	    braveLightOrange: '#FF7A1D',
	    braveMediumOrange: 'rgb(232, 72, 0)',
	    braveDarkOrange: '#D44600',
	    switchBG_off: '#d3d3d3',
	    switchBG_off_lrg: '#adadad',
	    switchBG_dis: '#e8e8e8',
	    switchNubColor: 'white',
	    findbarBackground: '#F7F7F7',
	    veryLightGray: 'rgb(250, 250, 250)',
	    lightGray: 'rgb(236, 236, 236)',
	    gray: 'rgb(153, 153, 153)',
	    mediumGray: 'rgb(101, 101, 101)',
	    darkGray: 'rgb(68, 68, 68)',
	    white25: 'rgba(255, 255, 255, 0.25)',
	    white50: 'rgba(255, 255, 255, 0.5)',
	    gray25: 'rgba(116, 116, 130, 0.25)',
	    gray50: 'rgba(116, 116, 130, 0.5)',
	    black10: 'rgba(0, 0, 0, 0.1)',
	    black20: 'rgba(0, 0, 0, 0.2)',
	    black25: 'rgba(0, 0, 0, 0.25)',
	    black50: 'rgba(0, 0, 0, 0.5)',
	    black75: 'rgba(0, 0, 0, 0.75)',
	    black100: 'rgba(0, 0, 0, 1)',
	    statsYellow: '#ffc000',
	    statsOrange: '#f39030',
	    statsRed: '#fe521d',
	    statsBlue: '#0796fa',
	    statsLightGray: '#999999',
	    defaultIconBackground: '#F7F7F7'
	  },
	  radius: {
	    borderRadius: '4px',
	    borderRadiusTabs: '4px',
	    borderRadiusURL: '4px',
	    borderRadiusUIbox: '8px',
	    bigBorderRadius: '14px',
	    switchRadius: '10px',
	    carotRadius: '8px'
	  },
	  spacing: {
	    navigatorHeight: '48px',
	    defaultSpacing: '12px',
	    defaultFontSize: '13px',
	    contextMenuFontSize: '14px',
	    dragSpacing: '50px',
	    switchHeight: '16px',
	    switchWidth: '45px',
	    switchNubDiameter: '12px',
	    switchNubTopMargin: '2px',
	    switchNubLeftMargin: '2px',
	    switchNubRightMargin: '2px',
	    navbarHeight: '36px',
	    downloadsBarHeight: '50px',
	    tabsToolbarHeight: '28px',
	    tabPagesHeight: '9px',
	    bookmarksToolbarHeight: '24px',
	    bookmarksToolbarWithFaviconsHeight: '28px',
	    bookmarksFileIconSize: '13px',
	    bookmarksFolderIconSize: '15px',
	    navbarButtonSpacing: '4px',
	    navbarButtonWidth: '20px',
	    navbarBraveButtonWidth: '23px',
	    navbarBraveButtonMarginLeft: '80px',
	    navbarLeftMarginDarwin: '76px',
	    sideBarWidth: '190px',
	    aboutPageSectionPadding: '24px'
	  },
	  shadow: {
	    switchShadow: 'inset 0 1px 4px rgba(0, 0, 0, 0.35)',
	    switchNubShadow: '1px 1px 5px -2px black',
	    buttonShadow: '0px 1px 5px -1px rgba(0, 0, 0, 1.0)',
	    dialogShadow: '0px 8px 22px 0px rgba(0, 0, 0, .5)',
	    softBoxShadow: '0 4px 8px lightGray',
	    lightBoxShadow: '0 2px 2px lightGray',
	    insetShadow: 'inset -5px 0 15px black25',
	    orangeButtonShadow: '0 2px 0 braveDarkOrange'
	  },
	  transition: {
	    transitionDuration: '100ms',
	    transition: 'all 600ms linear',
	    transitionFast: 'all 100ms linear',
	    transitionSlow: 'all 1s linear',
	    transitionEase: 'all 600ms ease',
	    transitionFastEase: 'all 100ms ease',
	    transitionSlowEase: 'all 1s ease',
	    switchBGTransition: 'background-color 100ms',
	    switchNubTransition: 'right 100ms'
	  },
	  zindex: {
	    zindexWindowNotActive: '900',
	    zindexWindow: '1000',
	    zindexWindowIsPreview: '1100',
	    zindexDownloadsBar: '1000',
	    zindexTabs: '1000',
	    zindexTabsThumbnail: '1100',
	    zindexTabsDragIndicator: '1100',
	    zindexNavigationBar: '2000',
	    zindexUrlbarNotLegend: '2100',
	    zindexPopUp: '3000',
	    zindexContextMenu: '3000',
	    zindexDialogs: '3000',
	    zindexPopupWindow: '3000',
	    zindexForms: '3000',
	    zindexSuggestionText: '3100',
	    zindexWindowFullScreen: '4000',
	    zindexWindowFullScreenBanner: '4100'
	  }
	};
	
	globalStyles.color.chromeBorderColor = globalStyles.color.chromePrimary;
	globalStyles.color.chromeControlsWarningBackground = globalStyles.color.chromePrimary;
	globalStyles.color.audioColor = globalStyles.color.highlightBlue;
	globalStyles.color.focusUrlbarOutline = globalStyles.color.highlightBlue;
	globalStyles.color.siteSecureColor = globalStyles.color.buttonColor;
	globalStyles.color.loadTimeColor = globalStyles.color.highlightBlue;
	globalStyles.color.activeTabDefaultColor = globalStyles.color.chromePrimary;
	globalStyles.color.switchBG_on = globalStyles.color.braveOrange;
	globalStyles.color.statsGray = globalStyles.color.chromeText;
	
	module.exports = globalStyles;

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const { StyleSheet } = __webpack_require__(475);
	const globalStyles = __webpack_require__(498);
	
	const styles = StyleSheet.create({
	  'formControl': {
	    background: 'white',
	    border: `solid 1px ${globalStyles.color.black20}`,
	    borderRadius: globalStyles.radius.borderRadius,
	    boxShadow: `inset 0 1px 1px ${globalStyles.color.black10}`,
	    boxSizing: 'border-box',
	    display: 'block',
	    color: globalStyles.color.darkGray,
	    fontSize: '14.5px',
	    height: '2.25em',
	    outline: 'none',
	    padding: '0.4em',
	    width: '100%'
	  }
	});
	
	module.exports = styles;

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const { StyleSheet, css } = __webpack_require__(475);
	const globalStyles = __webpack_require__(498);
	const commonStyles = __webpack_require__(499);
	
	const caretDownGrey = __webpack_require__(501);
	
	class Dropdown extends ImmutableComponent {
	  render() {
	    const className = css(this.props['data-isFormControl'] && commonStyles.formControl, styles.dropdown, this.props['data-isSettings'] && styles.settings);
	
	    return React.createElement(
	      'select',
	      _extends({ className: className }, this.props),
	      this.props.children
	    );
	  }
	}
	
	class FormDropdown extends ImmutableComponent {
	  render() {
	    return React.createElement(Dropdown, _extends({ 'data-isFormControl': 'true' }, this.props));
	  }
	}
	
	class SettingDropdown extends ImmutableComponent {
	  render() {
	    return React.createElement(FormDropdown, _extends({ 'data-isSettings': 'true' }, this.props));
	  }
	}
	
	const selectPadding = '0.4em';
	
	const styles = StyleSheet.create({
	  'dropdown': {
	    background: `url(${caretDownGrey}) calc(100% - ${selectPadding}) 50% / contain no-repeat`,
	    backgroundColor: '#fbfbfb',
	    backgroundSize: '12px 12px',
	    boxShadow: `0px 2px 8px -5px ${globalStyles.color.black100}`,
	    height: '2rem',
	    outline: 'none',
	    // right padding is larger, to account for the down arrow SVG
	    padding: `${selectPadding} 1.5em ${selectPadding} ${selectPadding}`,
	    '-webkit-appearance': 'none',
	    width: 'auto'
	  },
	  'outlineable': {
	    ':focus': {
	      outlineColor: globalStyles.color.statsBlue,
	      outlineOffset: '-4px',
	      outlineStyle: 'solid',
	      outlineWidth: '1px'
	    }
	  },
	  'settings': {
	    width: '280px'
	  }
	});
	
	module.exports = {
	  Dropdown,
	  FormDropdown,
	  SettingDropdown
	};

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "7e7925a41b22d080e00c8d7309745420.svg";

/***/ },
/* 502 */,
/* 503 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	/**
	 * Returns true if the error code is a frame error
	 * @param {number} errorCode the error code
	 */
	module.exports.isFrameError = function (errorCode) {
	  errorCode = Math.abs(errorCode);
	
	  // cert errors are currently handled separately
	  if (errorCode === 501 || errorCode >= 200 && errorCode <= 299) {
	    return false;
	  }
	  // ignore cache errors except cache miss (form repost)
	  if (errorCode > 400 && errorCode <= 499) {
	    return false;
	  }
	
	  return errorCode >= 100 && errorCode <= 899;
	};
	
	/**
	 * Gets the l10n id for the chrome error code
	 * @param {number} errorCode the error code
	 */
	module.exports.l10nErrorText = function (errorCode) {
	  errorCode = Math.abs(errorCode);
	  // TODO(bridiver) - error pages should not restore on browser reload
	  //     0- 99 System related errors
	  //   100-199 Connection related errors
	  //   200-299 Certificate errors
	  //   300-399 HTTP errors
	  //   400-499 Cache errors
	  //   600-699 FTP errors
	  //   700-799 Certificate manager errors
	  //   800-899 DNS resolver errors
	  let title = module.exports.errorMap[errorCode];
	  if (!title) {
	    if (errorCode >= 100 && errorCode <= 199) {
	      title = 'networkError';
	    } else if (errorCode >= 300 && errorCode <= 399) {
	      title = 'httpError';
	    } else if (errorCode >= 600 && errorCode <= 699) {
	      title = 'ftpError';
	    } else if (errorCode >= 800 && errorCode <= 899) {
	      title = 'dnsError';
	    } else if (errorCode === 400) {
	      title = 'cacheError';
	    } else {
	      title = 'unknownError';
	    }
	  }
	  return title;
	};
	
	module.exports.errorMap = {
	  // A connection was reset (corresponding to a TCP RST).
	  101: 'connectionReset',
	  // A connection attempt was refused.
	  102: 'connectionRefused',
	  // A connection timed out as a result of not receiving an ACK for data sent.
	  // This can include a FIN packet that did not get ACK'd.
	  103: 'connectionAborted',
	  // A connection attempt failed.
	  104: 'connectionFailed',
	  // The host name could not be resolved.
	  105: 'nameNotResolved',
	  // The Internet connection has been lost.
	  106: 'internetDisconnected',
	  // An SSL protocol error occurred.
	  107: 'sslProtocolError',
	  // The IP address or port number is invalid (e.g., cannot connect to the IP
	  // address 0 or the port 0).
	  108: 'addressInvalid',
	  // The IP address is unreachable.  This usually means that there is no route to
	  // the specified host or network.
	  109: 'addressUnreachable',
	  // The server requested a client certificate for SSL client authentication.
	  110: 'sslClientAuthCertNeeded',
	  // A tunnel connection through the proxy could not be established.
	  111: 'tunnelConnectionFailed',
	  // No SSL protocol versions are enabled.
	  112: 'noSslVersionsEnabled',
	  // The client and server don't support a common SSL protocol version or
	  // cipher suite.
	  113: 'sslVersionOrCipherMismatch',
	  // The server requested a renegotiation (rehandshake).
	  114: 'sslRenegotiationRequested',
	  // The proxy requested authentication (for tunnel establishment) with an
	  // unsupported method.
	  115: 'proxyAuthUnsupported',
	  // During SSL renegotiation (rehandshake), the server sent a certificate with
	  // an error.
	  //
	  // Note: this error is not in the -2xx range so that it won't be handled as a,
	  // certificate error.
	  116: 'certErrorInSslRenegotiation',
	  // The SSL handshake failed because of a bad or missing client certificate.
	  117: 'badSslClientAuthCert',
	  // A connection attempt timed out.
	  118: 'connectionTimedOut',
	  // There are too many pending DNS resolves, so a request in the queue was
	  // aborted.
	  119: 'hostResolverQueueTooLarge',
	  // Failed establishing a connection to the SOCKS proxy server for a target host.
	  120: 'socksConnectionFailed',
	  // The SOCKS proxy server failed establishing connection to the target host
	  // because that host is unreachable.
	  121: 'socksConnectionHostUnreachable',
	  // The request to negotiate an alternate protocol failed.
	  122: 'npnNegotiationFailed',
	  // The peer sent an SSL no_renegotiation alert message.
	  123: 'sslNoRenegotiation',
	  // Winsock sometimes reports more data written than passed.  This is probably
	  // due to a broken LSP.
	  124: 'winsockUnexpectedWrittenBytes',
	  // An SSL peer sent us a fatal decompression_failure alert. This typically
	  // occurs when a peer selects DEFLATE compression in the mistaken belief that
	  // it supports it.
	  125: 'sslDecompressionFailureAlert',
	  // An SSL peer sent us a fatal bad_record_mac alert. This has been observed
	  // from servers with buggy DEFLATE support.
	  126: 'sslBadRecordMacAlert',
	  // The proxy requested authentication (for tunnel establishment).
	  127: 'proxyAuthRequested',
	  // The SSL server attempted to use a weak ephemeral Diffie-Hellman key.
	  129: 'sslWeakServerEphemeralDhKey',
	  // Could not create a connection to the proxy server. An error occurred
	  // either in resolving its name, or in connecting a socket to it.
	  // Note that this does NOT include failures during the actual "CONNECT" method
	  // of an HTTP proxy.
	  130: 'proxyConnectionFailed',
	  // A mandatory proxy configuration could not be used. Currently this means
	  // that a mandatory PAC script could not be fetched, parsed or executed.
	  131: 'mandatoryProxyConfigurationFailed',
	  // We've hit the max socket limit for the socket pool while preconnecting.  We
	  // don't bother trying to preconnect more sockets.
	  133: 'preconnectMaxSocketLimit',
	  // The permission to use the SSL client certificate's private key was denied.
	  134: 'sslClientAuthPrivateKeyAccessDenied',
	  // The SSL client certificate has no private key.
	  135: 'sslClientAuthCertNoPrivateKey',
	  // The certificate presented by the HTTPS Proxy was invalid.
	  136: 'proxyCertificateInvalid',
	  // An error occurred when trying to do a name resolution (DNS).
	  137: 'nameResolutionFailed',
	  // Permission to access the network was denied. This is used to distinguish
	  // errors that were most likely caused by a firewall from other access denied
	  // errors. See also ERR_ACCESS_DENIED.
	  138: 'networkAccessDenied',
	  // The request throttler module cancelled this request to avoid DDOS.
	  139: 'temporarilyThrottled',
	  // A request to create an SSL tunnel connection through the HTTPS proxy
	  // received a non-200 (OK) and non-407 (Proxy Auth) response.  The response
	  // body might include a description of why the request failed.
	  140: 'httpsProxyTunnelResponse',
	  // We were unable to sign the CertificateVerify data of an SSL client auth
	  // handshake with the client certificate's private key.
	  //
	  // Possible causes for this include the user implicitly or explicitly
	  // denying access to the private key, the private key may not be valid for
	  // signing, the key may be relying on a cached handle which is no longer
	  // valid, or the CSP won't allow arbitrary data to be signed.
	  141: 'sslClientAuthSignatureFailed',
	  // The message was too large for the transport.  (for example a UDP message
	  // which exceeds size threshold).
	  142: 'msgTooBig',
	  // A SPDY session already exists, and should be used instead of this connection.
	  143: 'spdySessionAlreadyExists',
	  // Websocket protocol error. Indicates that we are terminating the connection
	  // due to a malformed frame or other protocol violation.
	  145: 'wsProtocolError',
	  // Returned when attempting to bind an address that is already in use.
	  147: 'addressInUse',
	  // An operation failed because the SSL handshake has not completed.
	  148: 'sslHandshakeNotCompleted',
	  // SSL peer's public key is invalid.
	  149: 'sslBadPeerPublicKey',
	  // The certificate didn't match the built-in public key pins for the host name.
	  // The pins are set in net/http/transport_security_state.cc and require that
	  // one of a set of public keys exist on the path from the leaf to the root.
	  150: 'sslPinnedKeyNotInCertChain',
	  // Server request for client certificate did not contain any types we support.
	  151: 'clientAuthCertTypeUnsupported',
	  // Server requested one type of cert, then requested a different type while the
	  // first was still being generated.
	  152: 'originBoundCertGenerationTypeMismatch',
	  // An SSL peer sent us a fatal decrypt_error alert. This typically occurs when
	  // a peer could not correctly verify a signature (in CertificateVerify or
	  // ServerKeyExchange) or validate a Finished message.
	  153: 'sslDecryptErrorAlert',
	  // There are too many pending WebSocketJob instances, so the new job was not
	  // pushed to the queue.
	  154: 'wsThrottleQueueTooLarge',
	  // The SSL server certificate changed in a renegotiation.
	  156: 'ssl_server_cert_changed',
	  // The SSL server indicated that an unnecessary TLS version fallback was
	  // performed.
	  157: 'sslInappropriateFallback',
	  // Certificate Transparency: All Signed Certificate Timestamps failed to verify.,
	  158: 'ctNoSctsVerifiedOk',
	  // The SSL server sent us a fatal unrecognized_name alert.
	  159: 'sslUnrecognizedNameAlert',
	  // Failed to set the socket's receive buffer size as requested.
	  160: 'socketSetReceiveBufferSizeError',
	  // Failed to set the socket's send buffer size as requested.
	  161: 'socketSetSendBufferSizeError',
	  // Failed to set the socket's receive buffer size as requested, despite success
	  // return code from setsockopt.
	  162: 'socketReceiveBufferSizeUnchangeable',
	  // Failed to set the socket's send buffer size as requested, despite success
	  // return code from setsockopt.
	  163: 'socketSendBufferSizeUnchangeable',
	  // Failed to import a client certificate from the platform store into the SSL
	  // library.
	  164: 'sslClientAuthCertBadFormat',
	  // The SSL server requires falling back to a version older than the configured
	  // minimum fallback version, and thus fallback failed.
	  165: 'sslFallbackBeyondMinimumVersion',
	  // Resolving a hostname to an IP address list included the IPv4 address
	  // "127.0.53.53". This is a special IP address which ICANN has recommended to
	  // indicate there was a name collision, and alert admins to a potential
	  // problem.
	  166: 'icannNameCollision',
	  // The SSL server presented a certificate which could not be decoded. This is
	  // not a certificate error code as no X509Certificate object is available. This
	  // error is fatal.
	  167: 'sslServerCertBadFormat',
	  // Certificate Transparency: received a signed tree head that failed to parse.,
	  168: 'ctSthParsingFailed',
	  // Certificate Transparency: Received a signed tree head whose JSON parsing was,
	  // OK but was missing some of the fields.
	  169: 'ctSthIncomplete',
	  // The attempt to reuse a connection to send proxy auth credentials failed
	  // before the AuthController was used to generate credentials. The caller should
	  // reuse the controller with a new connection. This error is only used
	  // internally by the network stack.
	  170: 'unableToReuseConnectionForProxyAuth',
	  // The URL is invalid.
	  300: 'invalidURL',
	  // The scheme of the URL is disallowed.
	  301: 'disallowedURLScheme',
	  // The scheme of the URL is unknown.
	  302: 'unknownURLScheme',
	  // Attempting to load an URL resulted in too many redirects.
	  310: 'tooManyRedirects',
	  // Attempting to load an URL resulted in an unsafe redirect (e.g., a redirect
	  // to file:// is considered unsafe).
	  311: 'unsafeRedirect',
	  // Attempting to load an URL with an unsafe port number.  These are port
	  // numbers that correspond to services, which are not robust to spurious input
	  // that may be constructed as a result of an allowed web construct (e.g., HTTP
	  // looks a lot like SMTP, so form submission to port 25 is denied).
	  312: 'unsafePort',
	  // The server's response was invalid.
	  320: 'invalidResponse',
	  // Error in chunked transfer encoding.
	  321: 'invalidChunkedEncoding',
	  // The server did not support the request method.
	  322: 'methodNotSupported',
	  // The response was 407 (Proxy Authentication Required), yet we did not send
	  // the request to a proxy.
	  323: 'unexpectedProxyAuth',
	  // The server closed the connection without sending any data.
	  324: 'emptyResponse',
	  // The headers section of the response is too large.
	  325: 'responseHeadersTooBig',
	  // The PAC requested by HTTP did not have a valid status code (non-200).
	  326: 'pacStatusNotOk',
	  // The evaluation of the PAC script failed.
	  327: 'pacScriptFailed',
	  // The response was 416 (Requested range not satisfiable) and the server cannot
	  // satisfy the range requested.
	  328: 'requestRangeNotSatisfiable',
	  // The identity used for authentication is invalid.
	  329: 'malformedIdentity',
	  // Content decoding of the response body failed.
	  330: 'contentDecodingFailed',
	  // An operation could not be completed because all network IO
	  // is suspended.
	  331: 'networkIoSuspended',
	  // FLIP data received without receiving a SYN_REPLY on the stream.
	  332: 'synReplyNotReceived',
	  // Converting the response to target encoding failed.
	  333: 'encodingConversionFailed',
	  // The server sent an FTP directory listing in a format we do not understand.
	  334: 'unrecognizedFtpDirectoryListingFormat',
	  // Attempted use of an unknown SPDY stream id.
	  335: 'invalidSpdyStream',
	  // There are no supported proxies in the provided list.
	  336: 'noSupportedProxies',
	  // There is a SPDY protocol error.
	  337: 'spdyProtocolError',
	  // Credentials could not be established during HTTP Authentication.
	  338: 'invalidAuthCredentials',
	  // An HTTP Authentication scheme was tried which is not supported on this
	  // machine.
	  339: 'unsupportedAuthScheme',
	  // Detecting the encoding of the response failed.
	  340: 'encodingDetectionFailed',
	  // (GSSAPI) No Kerberos credentials were available during HTTP Authentication.
	  341: 'missingAuthCredentials',
	  // An unexpected, but documented, SSPI or GSSAPI status code was returned.
	  342: 'unexpectedSecurityLibraryStatus',
	  // The environment was not set up correctly for authentication (for
	  // example, no KDC could be found or the principal is unknown.
	  343: 'misconfiguredAuthEnvironment',
	  // An undocumented SSPI or GSSAPI status code was returned.
	  344: 'undocumentedSecurityLibraryStatus',
	  // The HTTP response was too big to drain.
	  345: 'responseBodyTooBigToDrain',
	  // The HTTP response contained multiple distinct Content-Length headers.
	  346: 'responseHeadersMultipleContentLength',
	  // SPDY Headers have been received, but not all of them - status or version
	  // headers are missing, so we're expecting additional frames to complete them.
	  347: 'incompleteSpdyHeaders',
	  // No PAC URL configuration could be retrieved from DHCP. This can indicate
	  // either a failure to retrieve the DHCP configuration, or that there was no
	  // PAC URL configured in DHCP.
	  348: 'pacNotInDhcp',
	  // The HTTP response contained multiple Content-Disposition headers.
	  349: 'responseHeadersMultipleContentDisposition',
	  // The HTTP response contained multiple Location headers.
	  350: 'responseHeadersMultipleLocation',
	  // SPDY server refused the stream. Client should retry. This should never be a
	  // user-visible error.
	  351: 'spdyServerRefusedStream',
	  // SPDY server didn't respond to the PING message.
	  352: 'spdyPingFailed',
	  // The HTTP response body transferred fewer bytes than were advertised by the
	  // Content-Length header when the connection is closed.
	  354: 'contentLengthMismatch',
	  // The HTTP response body is transferred with Chunked-Encoding, but the
	  // terminating zero-length chunk was never sent when the connection is closed.
	  355: 'incompleteChunkedEncoding',
	  // There is a QUIC protocol error.
	  356: 'quicProtocolError',
	  // The HTTP headers were truncated by an EOF.
	  357: 'responseHeadersTruncated',
	  // The QUIC crypto handshake failed.  This means that the server was unable
	  // to read any requests sent, so they may be resent.
	  358: 'quicHandshakeFailed',
	  // Transport security is inadequate for the SPDY version.
	  360: 'spdyInadequateTransportSecurity',
	  // The peer violated SPDY flow control.
	  361: 'spdyFlowControlError',
	  // The peer sent an improperly sized SPDY frame.
	  362: 'spdyFrameSizeError',
	  // Decoding or encoding of compressed SPDY headers failed.
	  363: 'spdyCompressionError',
	  // Proxy Auth Requested without a valid Client Socket Handle.
	  364: 'proxyAuthRequestedWithNoConnection',
	  // HTTP_1_1_REQUIRED error code received on HTTP/2 session.
	  365: 'http11Required',
	  // HTTP_1_1_REQUIRED error code received on HTTP/2 session to proxy.
	  366: 'proxyHTTP11Required',
	  // The PAC script terminated fatally and must be reloaded.
	  367: 'pacScriptTerminated',
	  // The certificate offered by the alternative server is not valid for the
	  // origin, a violation of HTTP Alternative Services specification Section 2.1,
	  // https://tools.ietf.org/id/draft-ietf-httpbis-alt-svc-06.html#host_auth.
	  368: 'alternativeCertNotValidForOrigin',
	  // Request is throttled because of a Backoff header.
	  // See: crbug.com/486891.,
	  369: 'temporaryBackoff',
	  400: 'cacheMiss',
	  // The server's response was insecure (e.g. there was a cert error).
	  501: 'insecureResponse',
	  // DNS error codes.
	  // DNS resolver received a malformed response.
	  800: 'dnsMalformedResponse',
	  // DNS server requires TCP
	  801: 'dnsServerRequiresTcp',
	  // DNS server failed.  This error is returned for all of the following
	  // error conditions:
	  // 1 - Format error - The name server was unable to interpret the query.
	  // 2 - Server failure - The name server was unable to process this query
	  //     due to a problem with the name server.
	  // 4 - Not Implemented - The name server does not support the requested
	  //     kind of query.
	  // 5 - Refused - The name server refuses to perform the specified
	  //     operation for policy reasons.
	  802: 'dnsServerFailed',
	  // DNS transaction timed out.
	  803: 'dnsTimedOut',
	  // The entry was not found in cache, for cache-only lookups.
	  804: 'dnsCacheMiss',
	  // Suffix search list rules prevent resolution of the given host name.
	  805: 'dnsSearchEmpty',
	  // Failed to sort addresses according to RFC3484.
	  806: 'dnsSortError'
	};
	
	/**
	 * Returns true if HTTP response code is one we want to collect usage for
	 * @param {number} responseCode - HTTP response code to be evaluated
	 * @return {boolean} true if the code represents one w/ content, false if not
	 */
	module.exports.responseHasContent = responseCode => {
	  switch (responseCode) {
	    case 200: // ok
	    case 203: // non-authoritative
	    case 206: // partial content
	    case 304:
	      // not modified (cached)
	      return true;
	  }
	  return false;
	};

/***/ },
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */,
/* 568 */,
/* 569 */,
/* 570 */,
/* 571 */,
/* 572 */,
/* 573 */,
/* 574 */,
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */,
/* 586 */,
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */,
/* 594 */,
/* 595 */,
/* 596 */,
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(618)
	var ieee754 = __webpack_require__(619)
	var isArray = __webpack_require__(620)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 618 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 619 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 620 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;
	
	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.8.3';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };
	
	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };
	
	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };
	
	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };
	
	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }
	
	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };
	
	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);
	
	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };
	
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = property;
	
	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 622 */,
/* 623 */,
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	/*
	 * Educates users that this is DRM, why it is not great, and that
	 * we don't own the code being executed if it is turned on.  Provides
	 * more info URL link to learn about DRM and Google's license URL link.
	 */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const appConfig = __webpack_require__(203);
	
	class WidevineInfo extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onMoreInfo = this.onMoreInfo.bind(this);
	    this.onViewLicense = this.onViewLicense.bind(this);
	  }
	  onMoreInfo() {
	    this.props.newFrameAction({
	      location: appConfig.widevine.moreInfoUrl
	    }, true);
	  }
	  onViewLicense() {
	    this.props.newFrameAction({
	      location: appConfig.widevine.licenseUrl
	    }, true);
	  }
	  render() {
	    return _jsx('div', {
	      className: 'widevineInfo'
	    }, void 0, _jsx('div', {
	      className: 'subtext'
	    }, void 0, _jsx('span', {
	      'data-l10n-id': 'enableWidevineSubtext'
	    }), _jsx('span', {
	      className: 'fa fa-info-circle',
	      onClick: this.onMoreInfo,
	      title: appConfig.widevine.moreInfoUrl
	    })), _jsx('div', {
	      className: 'subtext'
	    }, void 0, _jsx('span', {
	      'data-l10n-id': 'enableWidevineSubtext2'
	    }), _jsx('span', {
	      className: 'fa fa-info-circle',
	      onClick: this.onViewLicense,
	      title: appConfig.widevine.licenseUrl
	    })));
	  }
	}
	
	module.exports = WidevineInfo;

/***/ },
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(645);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./forms.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./forms.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\ninput,\nselect {\n  box-sizing: border-box;\n}\n.flyoutDialog {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  text-align: left;\n  top: 30px;\n}\n.releaseNotes {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  width: auto;\n  max-width: 350px;\n  text-align: left;\n}\n.releaseNotes h1 {\n  margin-bottom: 10px;\n}\n.siteInfo > ul {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  text-align: left;\n  width: auto;\n}\n.siteInfo > ul li {\n  list-style-type: none;\n  padding: 10px 0;\n}\n.siteInfo > ul li .fa {\n  padding-right: 10px;\n}\n.siteInfo > ul li.extendedValidation {\n  color: green;\n}\n.siteInfo > ul li ul {\n  max-height: 300px;\n  overflow-y: auto;\n  margin-top: -20px;\n  padding: 0 10px;\n  max-width: 400px;\n}\n.clearBrowsingDataPanel .clearBrowsingData {\n  background-color: #eee;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  background-color: #f7f7f7;\n  border-radius: 4px;\n  max-width: 325px;\n  padding: 0;\n  text-align: left;\n  width: 473px;\n  -webkit-user-select: none;\n  cursor: default;\n  color: #3B3B3B;\n  overflow-y: auto;\n  max-height: 100%;\n}\n.clearBrowsingDataPanel .clearBrowsingData .clickable {\n  color: #5B5B5B;\n}\n.clearBrowsingDataPanel .clearBrowsingData .clickable:hover {\n  color: #000;\n}\n.clearBrowsingDataPanel .clearBrowsingData .formSection {\n  padding: 16px 30px;\n}\n.clearBrowsingDataPanel .clearBrowsingData .formSection.clearBrowsingDataWarning {\n  background-color: #dddee0;\n}\n.clearBrowsingDataPanel .clearBrowsingData .formSection.clearBrowsingDataTitle {\n  color: #ff5000;\n  font-size: 1.2em;\n}\n.clearBrowsingDataPanel .clearBrowsingData .formSection.clearBrowsingDataOptions {\n  padding: 0 30px;\n}\n.clearBrowsingDataPanel .clearBrowsingData .formSection.clearBrowsingDataButtons {\n  text-align: right;\n  padding: 16px 10px;\n}\n.commonDialog .commonForm {\n  background-color: #eee;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  background-color: #f7f7f7;\n  border-radius: 4px;\n  max-width: 422px;\n  padding: 0;\n  text-align: left;\n  max-width: 600px;\n  -webkit-user-select: none;\n  cursor: default;\n  color: #3B3B3B;\n  overflow-y: auto;\n  max-height: 100%;\n}\n.commonDialog .commonForm .clickable {\n  color: #5B5B5B;\n}\n.commonDialog .commonForm .clickable:hover {\n  color: #000;\n}\n.commonDialog .commonForm .formSection {\n  padding: 16px 30px;\n}\n.commonDialog .commonForm .formSection.commonFormTitle {\n  color: #ff5000;\n  font-size: 1.2em;\n}\n.commonDialog .commonForm .formSection.commonFormButtons {\n  text-align: center;\n}\n.commonDialog .commonForm .formSection.commonFormBottom {\n  background-color: #dddee0;\n  text-align: center;\n}\n.commonDialog .commonForm .formSection .commonFormButtonGroup {\n  margin: 0 auto;\n  display: inline-block;\n}\n.importBrowserDataPanel .importBrowserData {\n  background-color: #eee;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  background-color: #f7f7f7;\n  border-radius: 4px;\n  max-width: 422px;\n  padding: 0;\n  text-align: left;\n  width: 614px;\n  -webkit-user-select: none;\n  cursor: default;\n  color: #3B3B3B;\n  overflow-y: auto;\n  max-height: 100%;\n}\n.importBrowserDataPanel .importBrowserData .clickable {\n  color: #5B5B5B;\n}\n.importBrowserDataPanel .importBrowserData .clickable:hover {\n  color: #000;\n}\n.importBrowserDataPanel .importBrowserData .formSection {\n  padding: 16px 30px;\n}\n.importBrowserDataPanel .importBrowserData .formSection.importBrowserDataWarning {\n  background-color: #dddee0;\n}\n.importBrowserDataPanel .importBrowserData .formSection.importBrowserDataTitle {\n  color: #ff5000;\n  font-size: 1.2em;\n}\n.importBrowserDataPanel .importBrowserData .formSection.importBrowserDataOptions {\n  padding: 0 30px;\n}\n.importBrowserDataPanel .importBrowserData .formSection.importBrowserSubDataOptions {\n  padding: 0 0 0 20px;\n}\n.importBrowserDataPanel .importBrowserData .formSection.importBrowserDataButtons {\n  text-align: right;\n  padding: 16px 10px;\n}\n.manageAutofillDataPanel .manageAutofillData {\n  background-color: #eee;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  background-color: #f7f7f7;\n  border-radius: 4px;\n  max-width: 450px;\n  padding: 0;\n  text-align: left;\n  width: 473px;\n  -webkit-user-select: none;\n  cursor: default;\n  color: #3B3B3B;\n  overflow-y: auto;\n  max-height: 100%;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow {\n  padding: 16px 30px;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow.manageAutofillDataTitle {\n  color: #ff5000;\n  font-size: 1.2em;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow.manageAutofillDataOptions {\n  padding: 0 30px;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow.manageAutofillDataOptions > label {\n  padding-right: 2px;\n  width: 100px;\n  text-align: left;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow.manageAutofillDataOptions > input {\n  padding: 2px;\n  margin: 0;\n  width: 300px;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow.manageAutofillDataOptions > select {\n  width: 6em;\n}\n.manageAutofillDataPanel .manageAutofillData .formRow.manageAutofillDataButtons {\n  text-align: right;\n  padding: 16px 10px;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser {\n  background-color: #eee;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  background-color: #f7f7f7;\n  border-radius: 4px;\n  max-width: 422px;\n  padding: 1;\n  text-align: left;\n  width: 614px;\n  height: 120px;\n  -webkit-user-select: none;\n  cursor: default;\n  color: #3B3B3B;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  max-height: 100%;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser .clickable {\n  color: #5B5B5B;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser .clickable:hover {\n  color: #000;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser .checkDefaultBrowserButtons {\n  text-align: right;\n  padding: 16px 10px;\n  position: relative;\n  top: -30px;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser .makeBraveDefault {\n  font-weight: bold;\n  display: inline-block;\n  position: relative;\n  top: -35px;\n  margin-left: 15px;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser .braveIcon {\n  background-image: -webkit-image-set(url(" + __webpack_require__(646) + ") 2x);\n  background-repeat: no-repeat;\n  height: 64px;\n  width: 64px;\n  display: inline-block;\n  position: relative;\n  top: 10px;\n}\n.checkDefaultBrowserDialog .checkDefaultBrowser .checkDefaultOnStartup {\n  left: 75px;\n  position: relative;\n  top: -25px;\n}\n.braveryPanelContainer .braveryPanel {\n  background-color: #eee;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  border-radius: 4px;\n  padding: 0;\n  text-align: left;\n  width: 500px;\n  right: 20px;\n  -webkit-user-select: none;\n  cursor: default;\n  color: #3B3B3B;\n  overflow-y: auto;\n  max-height: calc(100% - 30px);\n}\n.braveryPanelContainer .braveryPanel .clickable {\n  color: #5B5B5B;\n}\n.braveryPanelContainer .braveryPanel .clickable:hover {\n  color: #000;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader {\n  color: white;\n  display: flex;\n  background-color: #808080;\n  padding: 20px;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader .switchControl {\n  padding: 0;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader .switchControl .switchControlTopText {\n  color: #d3d3d3;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader .braveryPanelHeaderLeft {\n  min-width: 0;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader .braveryPanelHeaderLeft .braverySettingsFor {\n  font-size: 20px;\n  font-weight: normal;\n  vertical-align: middle;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inherit;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader .braveryPanelHeaderLeft .braverySiteIcon {\n  display: inline-block;\n  margin-right: 6px;\n  vertical-align: middle;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelHeader .braveryPanelHeaderRight {\n  margin-left: auto;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats {\n  background-color: #f7f7f7;\n  display: flex;\n  justify-content: space-around;\n  padding: 20px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .braveryStat {\n  font-size: 40px;\n  color: #555555;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .braveryStat.adsBlockedStat {\n  color: #fe521d;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .braveryStat.trackersBlockedStat {\n  color: #f39030;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .braveryStat.redirectedResourcesStat {\n  color: #0796fa;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .braveryStat.fpStat {\n  color: #ffc000;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .statDisabled {\n  opacity: 0.3;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats .statClickable {\n  cursor: pointer;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelStats > div {\n  max-width: 75px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody {\n  background-color: #eee;\n  padding: 20px;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryAdvanced {\n  display: flex;\n  flex-direction: row;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryAdvancedTitle {\n  display: flex;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryAdvancedTitle.disabled {\n  opacity: 0.3;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryAdvancedTitle .braveryAdvancedIndicator {\n  margin-left: 5px;\n  margin-right: 5px;\n  margin-top: 2px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryControlGroup {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  margin: 5px 10px auto 10px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryControlGroup .braverySelectTitle {\n  margin-bottom: 4px;\n  margin-left: 8px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryControlGroup .braverySelectTitle.disabled {\n  opacity: 0.3;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .braveryControlGroup select {\n  font-size: 13px;\n  margin-bottom: 25px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .info {\n  display: inline;\n  cursor: pointer;\n  padding-left: 2px;\n  font-size: 15px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody hr {\n  background-color: #ccc;\n  border: 0;\n  height: 1px;\n  margin: 10px 0;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody hr.braveryBottomSplitter {\n  margin-top: 30px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .reloadButton {\n  display: flex;\n  float: right;\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n.braveryPanelContainer .braveryPanel .braveryPanelBody .reloadButton .reloadText {\n  margin-right: 10px;\n}\n.braveryPanelContainer .braveryPanel ul {\n  -webkit-user-select: initial;\n  cursor: text;\n}\n.braveryPanelContainer .braveryPanel li {\n  list-style-type: none;\n  padding: 10px 0;\n}\n.braveryPanelContainer .braveryPanel li .fa {\n  padding-right: 10px;\n}\n.braveryPanelContainer .braveryPanel li.extendedValidation {\n  color: green;\n}\n.braveryPanelContainer .braveryPanel li ul {\n  font-size: smaller;\n  max-height: 300px;\n  overflow-y: scroll;\n  margin-top: -20px;\n  padding: 0 10px;\n}\n.noScriptInfo .dialogInner {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  text-align: left;\n  top: 30px;\n  right: 20px;\n  width: auto;\n  max-width: 350px;\n  text-align: center;\n  font-size: 15px;\n  cursor: default;\n}\n.noScriptInfo .dialogInner .truncate {\n  margin-bottom: 5px;\n}\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.dialog > .bookmarkDialog {\n  width: 350px;\n  position: absolute;\n  top: 30px;\n}\n.dialog > .bookmarkDialog > .bookmarkForm {\n  width: 350px;\n}\n.dialog > .bookmarkDialog .fa-close {\n  color: #5a5a5a;\n  font-size: 16px;\n  float: right;\n  margin-top: 7px;\n  margin-right: 10px;\n}\n.dialog > .bookmarkDialog .fa-close:hover {\n  color: #000;\n}\n.bookmarkForm {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  display: table;\n  text-align: left;\n  width: auto;\n  background: linear-gradient(#FFFFFF, #DEDEDE);\n  margin-top: 10px;\n  padding: 0;\n  min-width: 310px;\n}\n.bookmarkForm .genericFormSubtitle {\n  margin-bottom: 6px;\n}\n.bookmarkForm h2 {\n  font-size: 14px;\n  margin-bottom: 8px;\n}\n.bookmarkForm .genericFormTable {\n  display: flex;\n  flex-flow: column nowrap;\n  min-width: 350px;\n}\n.bookmarkForm .genericFormTable > div:not(.formHeader) {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin: 2px;\n}\n.bookmarkForm .genericFormTable > div > label {\n  padding-right: 4px;\n  width: 20%;\n  text-align: right;\n}\n.bookmarkForm .genericFormTable > div > input,\n.bookmarkForm .genericFormTable > div select {\n  padding: 2px;\n  margin: 0;\n  width: 80%;\n}\n.bookmarkForm .arrowUp {\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 10px solid #FFFFFF;\n  position: relative;\n  bottom: 10px;\n  left: 37px;\n}\n.bookmarkForm .arrowUp.withHomeButton {\n  left: 61px;\n}\n.bookmarkForm .bookmarkFormRow {\n  margin-bottom: 10px;\n}\n.bookmarkForm .bookmarkButtons {\n  display: flex;\n  justify-content: flex-end;\n  margin: 20px 0 10px;\n}\n.bookmarkForm .bookmarkFormInner {\n  padding: 10px 30px;\n}\n.bookmarkForm .bookmarkFormInner h2 {\n  -webkit-user-select: none;\n  cursor: default;\n  min-width: 250px;\n}\n.bookmarkForm label {\n  color: #444444;\n  margin-left: 5px;\n}\n.bookmarkForm h2 {\n  color: #ff5000;\n  font-weight: normal;\n  font-size: 16px;\n}\n.bookmarkForm input,\n.bookmarkForm select {\n  display: block;\n  width: 100%;\n  max-width: 250px;\n  height: 25px;\n  border-radius: 5px;\n  padding: 0 5px;\n  margin: 5px 0 5px 0;\n  font-size: 0.9em;\n  border: solid 1px #ececec;\n  background: white;\n  color: #444444;\n  outline: none;\n}\n.bookmarkForm input {\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.bookmarkForm select {\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.8);\n}\n.bookmarkFormFooter {\n  background: rgba(0, 0, 0, 0.1);\n  padding: 10px 30px;\n}\n.bookmarkFormFooter span {\n  font-size: 12px;\n  text-align: left;\n}\n.genericForm {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  top: 30px;\n  display: table;\n  text-align: left;\n  width: auto;\n}\n.genericForm .genericFormSubtitle {\n  margin-bottom: 6px;\n}\n.genericForm h2 {\n  font-size: 14px;\n  margin-bottom: 8px;\n}\n.genericForm .genericFormTable {\n  display: flex;\n  flex-flow: column nowrap;\n  min-width: 350px;\n}\n.genericForm .genericFormTable > div:not(.formHeader) {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin: 2px;\n}\n.genericForm .genericFormTable > div > label {\n  padding-right: 4px;\n  width: 20%;\n  text-align: right;\n}\n.genericForm .genericFormTable > div > input,\n.genericForm .genericFormTable > div select {\n  padding: 2px;\n  margin: 0;\n  width: 80%;\n}\n#navigator .urlBarSuggestions {\n  background-color: #eee;\n  border-radius: 4px;\n  box-shadow: 2px 2px 8px #3b3b3b;\n  color: #000;\n  font-size: 13px;\n  padding: 10px 30px;\n  position: absolute;\n  text-align: left;\n  top: 30px;\n  color: #555555;\n  left: 0;\n  overflow-y: auto;\n  padding: 0 0;\n  width: 100%;\n  z-index: 3000;\n}\n#navigator .urlBarSuggestions .suggestionTitle {\n  display: inline-block;\n  font-size: 15px;\n  font-weight: 200;\n  margin-bottom: 6px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n  vertical-align: middle;\n}\n#navigator .urlBarSuggestions .suggestionLocation {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n}\n#navigator .urlBarSuggestions li + li.suggestionSection {\n  border-top: 1px solid #ccc;\n}\n#navigator .urlBarSuggestions .suggestionSection {\n  display: flex;\n  align-items: center;\n}\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionTitle {\n  color: #999999;\n  display: inline-block;\n  font-size: 12px;\n}\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionIcon {\n  margin-right: 4px;\n}\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionIcon.bookmarksTitle {\n  color: #ff5000;\n}\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionIcon.tabsTitle {\n  color: #37A9FD;\n}\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionIcon.topSiteTitle,\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionIcon.historyTitle,\n#navigator .urlBarSuggestions .suggestionSection .suggestionSectionIcon.searchTitle {\n  color: #333;\n}\n#navigator .urlBarSuggestions li {\n  list-style-type: none;\n  padding: 10px 20px;\n  z-index: 3100;\n}\n#navigator .urlBarSuggestions li.bookmarkSuggestion:not(.selected) .suggestionTitle {\n  color: #ff5000;\n}\n#navigator .urlBarSuggestions li.tabSuggestion:not(.selected) .suggestionTitle {\n  color: #37A9FD;\n}\n#navigator .urlBarSuggestions li.topSiteSuggestion,\n#navigator .urlBarSuggestions li.searchSuggestion {\n  padding: 7px 20px;\n}\n#navigator .urlBarSuggestions li.topSiteSuggestion .suggestionTitle,\n#navigator .urlBarSuggestions li.searchSuggestion .suggestionTitle {\n  font-size: inherit;\n  font-weight: inherit;\n}\n#navigator .urlBarSuggestions li.selected {\n  color: white;\n  background-color: #37A9FD;\n  background: linear-gradient(#51A5F9, #2B78CA);\n}\n#navigator .urlBarSuggestions li * {\n  /* To allow for mouse listeners to work on the list items. */\n  pointer-events: none;\n}\n", ""]);
	
	// exports


/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "493bc2b131dc439f27e05c4d3f4e93e7.png";

/***/ },
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	// Stylesheets are included here for webpack live reloading
	__webpack_require__(277);
	__webpack_require__(275);
	__webpack_require__(655);
	__webpack_require__(657);
	__webpack_require__(659);
	__webpack_require__(661);
	__webpack_require__(644);
	__webpack_require__(237);
	__webpack_require__(681);
	__webpack_require__(684);
	__webpack_require__(686);
	__webpack_require__(688);
	__webpack_require__(690);
	__webpack_require__(694);
	__webpack_require__(696);
	__webpack_require__(698);
	__webpack_require__(222);
	
	const React = __webpack_require__(214);
	const ReactDOM = __webpack_require__(12);
	const Window = __webpack_require__(700);
	const electron = __webpack_require__(703);
	const { currentWindowWebContents } = __webpack_require__(706);
	const ipc = electron.ipcRenderer;
	const webFrame = electron.webFrame;
	const windowStore = __webpack_require__(701);
	const appStoreRenderer = __webpack_require__(207);
	const windowActions = __webpack_require__(716);
	const messages = __webpack_require__(211);
	const Immutable = __webpack_require__(188);
	const patch = __webpack_require__(798);
	const l10n = __webpack_require__(728);
	
	// don't allow scaling or zooming of the ui
	webFrame.setPageScaleLimits(1, 1);
	webFrame.setZoomLevelLimits(0, 0);
	// override any default zoom level changes
	currentWindowWebContents.setZoomLevel(0.0);
	
	l10n.init();
	
	ipc.on(messages.REQUEST_WINDOW_STATE, () => {
	  ipc.send(messages.RESPONSE_WINDOW_STATE, windowStore.getState().toJS());
	});
	
	if (false) {
	  electron.testData = {
	    appStoreRenderer,
	    windowActions,
	    windowStore
	  };
	}
	
	ipc.on(messages.APP_STATE_CHANGE, (e, action) => {
	  appStoreRenderer.state = action.stateDiff ? appStoreRenderer.state = patch(appStoreRenderer.state, Immutable.fromJS(action.stateDiff)) : appStoreRenderer.state = Immutable.fromJS(action.state);
	});
	
	ipc.on(messages.CLEAR_CLOSED_FRAMES, () => {
	  windowActions.clearClosedFrames();
	});
	
	window.addEventListener('beforeunload', function () {
	  ipc.send(messages.LAST_WINDOW_STATE, windowStore.getState().toJS());
	});
	
	ipc.on(messages.INITIALIZE_WINDOW, (e, disposition, appState, frames, initWindowState) => {
	  appStoreRenderer.state = Immutable.fromJS(appState);
	  ReactDOM.render(_jsx(Window, {
	    includePinnedSites: disposition !== 'new-popup',
	    frames: frames,
	    initWindowState: initWindowState
	  }), document.getElementById('appContainer'));
	});

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(656);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./contextMenu.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./contextMenu.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n:root {\n  --context-menu-single-max-width: 400px;\n}\n.contextMenu {\n  border-radius: 4px;\n  box-sizing: border-box;\n  color: black;\n  cursor: default;\n  display: flex;\n  font-size: 14px;\n  height: 100%;\n  width: 100%;\n  max-height: calc(100% - 64px);\n  overflow: auto;\n  position: absolute;\n  z-index: 3000;\n  -webkit-user-select: none;\n}\n.contextMenu.contextMenuScrollable {\n  overflow-y: scroll;\n}\n.contextMenu.reverseExpand {\n  flex-direction: row-reverse;\n}\n.contextMenu .contextMenuSingle {\n  background-color: rgba(238, 238, 238, 0.97);\n  border: 1px solid rgba(204, 204, 204, 0.54);\n  box-shadow: 1px 4px 8px -3px rgba(0, 0, 0, 0.5);\n  border-radius: 4px;\n  box-sizing: border-box;\n  display: table;\n  min-width: 220px;\n  max-width: var(--context-menu-single-max-width);\n}\n.contextMenu .contextMenuSingle.isSubmenu {\n  position: relative;\n}\n.contextMenu .selectedByKeyboard {\n  background-color: #488afb;\n  color: white;\n}\n.contextMenu .contextMenuIcon {\n  font-size: 14px;\n  margin-right: 8px;\n}\n.contextMenu .contextMenuIcon.hasFaIcon {\n  color: #444444;\n}\n.contextMenuItem {\n  max-width: 420px;\n  padding: 6px 10px 6px 20px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  -webkit-user-select: none;\n}\n.contextMenuItem.hasIcon {\n  padding-left: 10px;\n}\n.contextMenuItem.hasIcon.hasFaIcon {\n  padding-left: 12px;\n}\n.contextMenuItem.checkedMenuItem {\n  padding-left: 4px;\n}\n.contextMenuItem.checkedMenuItem .contextMenuCheckIndicator {\n  padding-right: 4px;\n}\n.contextMenuItem.multiContextMenuItem {\n  display: flex;\n}\n.contextMenuItem.multiContextMenuItem .contextMenuSubItem {\n  border: 1px solid #aaaaaa;\n  border-radius: 4px;\n  background-color: #fbfbfb;\n  color: black;\n  flex-grow: 1;\n  margin: 1px;\n  padding: 4px;\n  text-align: center;\n}\n.contextMenuItem.multiContextMenuItem .multiItemTitle {\n  margin-top: auto;\n  margin-bottom: auto;\n  padding-right: 10px;\n}\n.contextMenuItem.contextMenuSeparator {\n  padding: 1px 0px;\n}\n.contextMenuItem.contextMenuSeparator hr {\n  background-color: #bbb;\n  border: none;\n  height: 1px;\n  width: 100%;\n}\n.contextMenuItem:not([disabled]):not(.contextMenuSeparator):hover {\n  background-color: #488afb;\n  color: white;\n}\n.contextMenuItem:not([disabled]):not(.contextMenuSeparator):hover .accelerator,\n.contextMenuItem:not([disabled]):not(.contextMenuSeparator):hover .submenuIndicator {\n  color: #fff;\n}\n.contextMenuItem[disabled] {\n  color: #bbb;\n}\n.contextMenuItem .contextMenuItemText {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.contextMenuItem .submenuIndicatorContainer {\n  display: flex;\n  margin: auto 0 auto auto;\n}\n.contextMenuItem .submenuIndicatorContainer .submenuIndicatorSpacer {\n  flex-grow: 1;\n}\n.contextMenuItem .submenuIndicatorContainer .submenuIndicator {\n  color: #676767;\n  font-size: 10px;\n  float: right;\n  margin: auto 0 auto 5px;\n}\n.contextMenuItem .submenuIndicatorContainer .accelerator {\n  color: #676767;\n  font-size: 10px;\n  float: right;\n  margin: auto 0 auto 5px;\n  font-size: 14px;\n  margin-left: 10px;\n}\n.contextMenuItem .fa {\n  font-size: 15px;\n}\n.platform--win32 .contextMenuItem {\n  font: menu;\n  font-size: 12px;\n}\n.platform--win32 .accelerator {\n  font: menu;\n  font-size: 12px !important;\n}\n", ""]);
	
	// exports


/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(658);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./popupWindow.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./popupWindow.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.popupWindow {\n  box-sizing: border-box;\n  color: black;\n  cursor: default;\n  display: flex;\n  font-size: 11px;\n  padding: 0px 0px;\n  position: absolute;\n  z-index: 3000;\n  -webkit-user-select: none;\n  border: solid 1px #b8b8b8;\n  box-shadow: 0 3px 10px #ccc;\n}\n.popupWindow.reverseExpand {\n  flex-direction: row-reverse;\n}\n", ""]);
	
	// exports


/***/ },
/* 659 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(660);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./main.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./main.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\nbody {\n  background-color: #000;\n}\n#windowContainer {\n  color: #f00;\n}\n", ""]);
	
	// exports


/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(662);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./navigationBar.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./navigationBar.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/**\n * Navigation layers\n */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@keyframes tabFadeIn {\n  0% {\n    opacity: 0.5;\n  }\n  50% {\n    opacity: 0.6;\n  }\n  100% {\n    opacity: 0.5;\n  }\n}\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n@media (max-width: 600px) {\n  .loadTime {\n    display: none;\n  }\n}\n.platform--darwin .navigatorWrapper .backforward {\n  margin-left: 76px;\n}\n.platform--win32 div#window.frameless:not(.isFullScreen):not(.isMaximized) {\n  border: 1px solid #000;\n  box-sizing: border-box;\n}\n.platform--win32 .backforward {\n  padding-left: 5px;\n}\n.platform--win32 #navigator input {\n  font-weight: 500;\n  margin: 1px 0 0 3px;\n}\n.platform--win32 #urlInput {\n  width: 100%;\n}\n@media (max-width: 720px) {\n  .platform--win32 .navigatorWrapper .topLevelEndButtons .extraDragArea {\n    width: 0;\n  }\n}\n@media (max-width: 650px) {\n  .platform--win32 #titleBar {\n    width: 100px;\n  }\n  .platform--win32 .menubarContainer .menubar .menubarItem {\n    padding: 0 5px 1px;\n  }\n}\n@media (max-width: 500px) {\n  .platform--win32 .loadTime {\n    display: none;\n  }\n  .platform--win32 .menubarContainer .menubar .menubarItem {\n    padding: 0 3px 1px;\n  }\n}\n.platform--win32.win7 .windowCaptionButtons > .container {\n  margin-right: 6px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton {\n  outline: 0;\n  height: 18px;\n  color: #b1acac;\n  border: 1px solid #adadad;\n  border-top: 0;\n  display: inline-block;\n  background-color: #f5f5f5;\n  box-shadow: inset 1px 1px rgba(255, 255, 255, 0.9);\n  width: 25px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.minimize {\n  width: 28px;\n  border-right: 0px;\n  border-radius: 0 0 0 4px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.minimize:hover {\n  background-color: #fff;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.minimize:active {\n  background-color: #cacacb;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.minimize .widget {\n  width: 10px;\n  height: 3px;\n  border: 1px solid #838383;\n  background: #fff;\n  display: inline-block;\n  border-radius: 1px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize {\n  border-right: 0px;\n  width: 27px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize:hover {\n  background-color: #fff;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize:hover .widget .widget2 {\n  background-color: #fff;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize:active {\n  background-color: #cacacb;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize:active .widget .widget2 {\n  background-color: #cacacb;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen:hover {\n  background-color: #e5e5e5;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen:active {\n  background-color: #cacacb;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen .widget .widget1 {\n  width: 8px;\n  top: 2px;\n  left: 10px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen .widget .widget2 {\n  width: 8px;\n  height: 8px;\n  top: -5px;\n  left: 6px;\n  background: #fff;\n  border-radius: 1px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen .widget .widget3 {\n  display: inline-block;\n  width: 2px;\n  height: 2px;\n  border: 1px solid #838383;\n  background: #fff;\n  position: relative;\n  top: -20px;\n  left: -2px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize .widget .widget1 {\n  width: 10px;\n  height: 8px;\n  border: 1px solid #838383;\n  background: #fff;\n  position: relative;\n  top: 2px;\n  left: 7px;\n  border-radius: 1px;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize .widget .widget2 {\n  width: 4px;\n  height: 2px;\n  border: 1px solid #838383;\n  background-color: #f5f5f5;\n  position: relative;\n  top: -5px;\n  left: 10px;\n  border-radius: 0;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.maximize .widget .widget3 {\n  display: none;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.close {\n  width: 48px;\n  border-radius: 0 0 4px 0;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.close:hover {\n  background-color: #d9504e;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.close:active {\n  background-color: #d7393d;\n}\n.platform--win32.win7 .windowCaptionButtons > .container button.captionButton.close .widget {\n  background: url(" + __webpack_require__(663) + ") no-repeat;\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  position: relative;\n  top: 3px;\n}\n.platform--win32.win10.inactive div#window.frameless:not(.isFullScreen):not(.isMaximized) {\n  border: 1px solid #aaaaaa;\n}\n.platform--win32.win10 div#window.frameless:not(.isFullScreen):not(.isMaximized) {\n  border: 1px solid #2283d3;\n}\n.platform--win32.win10 .windowCaptionButtons.verticallyCenter > .container {\n  height: 100%;\n}\n.platform--win32.win10 .windowCaptionButtons:not(.verticallyCenter) > .container button.captionButton {\n  height: 29px;\n}\n.platform--win32.win10 .windowCaptionButtons:not(.verticallyCenter) > .container button.captionButton.fullscreen {\n  height: 21px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton {\n  width: 45px;\n  border: 0;\n  background-color: transparent;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.minimize:hover {\n  background-color: #e5e5e5;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.minimize:active {\n  background-color: #cacacb;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.minimize.fullscreen .widget {\n  top: 5px;\n  left: -2px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.minimize .widget {\n  background: url(" + __webpack_require__(664) + ") no-repeat;\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n  position: relative;\n  top: 4px;\n  left: -1px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize {\n  border-right: 0px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize:hover {\n  background-color: #e5e5e5;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize:active {\n  background-color: #cacacb;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen:hover {\n  background-color: #e5e5e5;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen:active {\n  background-color: #cacacb;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize.fullscreen .widget {\n  background: url(" + __webpack_require__(665) + ") no-repeat;\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n  position: relative;\n  top: 0px;\n  left: -2px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize .widget {\n  background: url(" + __webpack_require__(666) + ") no-repeat;\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n  position: relative;\n  top: -1px;\n  left: -1px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize .widget .widget1 {\n  display: none;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize .widget .widget2 {\n  display: none;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.maximize .widget .widget3 {\n  display: none;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close {\n  width: 46px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close:hover {\n  background-color: #e5182c;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close:hover .widget {\n  background: url(" + __webpack_require__(667) + ") no-repeat;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close:not(:hover) .widget {\n  background: url(" + __webpack_require__(668) + ") no-repeat;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close:active {\n  background-color: #ef717c;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close.fullscreen {\n  top: 0px;\n  width: 45px;\n}\n.platform--win32.win10 .windowCaptionButtons > .container button.captionButton.close .widget {\n  display: inline-block;\n  height: 10px;\n  left: -1px;\n  position: relative;\n  top: -1px;\n  width: 10px;\n}\n.platform--win32.win10 .verticallyCenter {\n  justify-content: center;\n}\n.navbarCaptionButtonContainer {\n  display: flex;\n  border-bottom: 1px solid #bbb;\n}\n.navbarCaptionButtonContainer.allowDragging {\n  -webkit-app-region: drag;\n}\n.navbarMenubarFlexContainer {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  box-sizing: border-box;\n  position: relative;\n  overflow: visible;\n  white-space: nowrap;\n}\n.navbarMenubarBlockContainer {\n  display: block;\n  width: 100%;\n}\n.windowCaptionButtons {\n  display: flex;\n  flex-direction: column;\n  white-space: nowrap;\n}\n.windowCaptionButtons .hidden {\n  display: none;\n}\n.windowCaptionButtons button.captionButton {\n  outline: none;\n  vertical-align: top;\n}\n.windowCaptionButtons.fullscreen .win7 {\n  margin-top: 1px;\n}\n.windowCaptionButtons .container {\n  display: flex;\n  flex-grow: 0;\n  -webkit-app-region: no-drag;\n}\n.menubarContainer {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n}\n.menubarContainer .menubar {\n  display: flex;\n  cursor: default;\n  -webkit-user-select: none;\n  flex-grow: 1;\n  margin-top: 2px;\n  height: 19px;\n}\n.menubarContainer .menubar .menubarItem {\n  color: black;\n  font: menu;\n  font-size: 12px;\n  -webkit-app-region: no-drag;\n  padding: 0 10px 1px;\n  border: 1px solid transparent;\n}\n.menubarContainer .menubar .menubarItem:hover {\n  background-color: #e5f3ff;\n  border: 1px solid #cce8ff;\n}\n.menubarContainer .menubar .selected {\n  background-color: #cce8ff !important;\n  border: 1px solid #99d1ff !important;\n}\n.menubarContainer .windowCaptionButtons {\n  flex-grow: 0;\n}\n.navigatorWrapper {\n  display: flex;\n}\n.navigatorWrapper .backforward {\n  display: flex;\n}\n.navigatorWrapper .backforward .backButton,\n.navigatorWrapper .backforward .forwardButton {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n}\n.navigatorWrapper .backforward .backButton {\n  background: url(" + __webpack_require__(669) + ") center no-repeat;\n  background-size: 14px 14px;\n}\n.navigatorWrapper .backforward .forwardButton {\n  background: url(" + __webpack_require__(670) + ") center no-repeat;\n  background-size: 14px 14px;\n}\n.navigatorWrapper #navigator {\n  display: flex;\n  flex-grow: 1;\n  min-width: 0%;\n  max-width: 900px;\n  margin-right: 38px;\n}\n.navigatorWrapper #navigator.titleMode {\n  padding-right: 17px;\n}\n@media (max-width: 600px) {\n  .navigatorWrapper #navigator {\n    padding-right: 0;\n  }\n}\n@media (max-width: 600px) {\n  .navigatorWrapper #navigator {\n    width: 100%;\n  }\n}\n@media (max-width: 600px) {\n  .navigatorWrapper #navigator.titleMode {\n    transition: padding 100ms ease-in-out;\n    padding-right: 0;\n  }\n}\n.navigatorWrapper .topLevelEndButtons {\n  display: flex;\n  flex-direction: row;\n  margin-left: 3px;\n}\n.navigatorWrapper .topLevelEndButtons .extensionButton {\n  -webkit-app-region: no-drag;\n  background-size: contain;\n  height: 17px;\n  margin: 4px 4px 0 0;\n  opacity: 0.85;\n}\n.navigatorWrapper .topLevelEndButtons .braveMenu {\n  width: 23px;\n  margin-right: 4px;\n  -webkit-app-region: no-drag;\n  -webkit-user-select: none;\n}\n.navigatorWrapper .topLevelEndButtons .braveMenu.braveShieldsDown {\n  -webkit-filter: grayscale(100%);\n}\n.navigatorWrapper .topLevelEndButtons .braveMenu.braveShieldsDisabled {\n  -webkit-filter: grayscale(100%);\n  opacity: 0.4;\n}\n.navigatorWrapper .topLevelEndButtons .braveMenu.leftOfCaptionButton {\n  margin-right: 3px;\n}\n@media (max-width: 1000px) {\n  .navigatorWrapper .topLevelEndButtons .extraDragArea {\n    display: flex;\n    flex-grow: 0;\n    width: 80px;\n  }\n}\n.navigationButton {\n  background-color: #5a5a5a;\n  display: inline-block;\n  width: 100%;\n  height: 100%;\n  margin: 0 7px 0 0;\n}\n.navigationButtonContainer {\n  border-radius: 4px;\n  height: 24px;\n  width: 26px;\n  margin-left: -3px;\n  margin-right: 6px;\n}\n.navigationButtonContainer.nav {\n  margin-left: 4px;\n  margin-right: 1px;\n  width: 34px;\n}\n.navigationButtonContainer:last-child {\n  margin-right: 8px;\n}\n.navigationButtonContainer:not(.disabled):hover {\n  background: white;\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.15);\n}\n.noScriptButtonContainer {\n  display: flex;\n  margin-left: 6px;\n}\n.noScriptButtonContainer .noScript {\n  font-size: 16px;\n  color: #ff5000;\n}\n.noScriptButtonContainer .noScript:hover {\n  color: #ff5000;\n}\n#navigator .stopButton,\n#navigator .reloadButton,\n#navigator .homeButton {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n}\n#navigator .stopButton {\n  background: url(" + __webpack_require__(220) + ") center no-repeat;\n  background-size: 11px 11px;\n}\n#navigator .reloadButton {\n  background: url(" + __webpack_require__(671) + ") center no-repeat;\n  background-size: 13px 13px;\n}\n#navigator .homeButton {\n  background: url(" + __webpack_require__(672) + ") center no-repeat;\n  background-size: 16px 16px;\n}\n.navigatorWrapper {\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 1px;\n  height: 36px;\n  box-sizing: border-box;\n  /**\n   * Left buttons\n   */\n}\n.navigatorWrapper .backforward {\n  display: flex;\n  z-index: 2000;\n  transition: margin 100ms ease-in-out;\n}\n.navigatorWrapper .backforward button {\n  -webkit-user-select: none;\n  color: #5a5a5a;\n  cursor: default;\n  border-radius: 4px;\n  font-weight: 300;\n  opacity: 0.2;\n}\n.navigatorWrapper .backforward button:not([disabled]) {\n  opacity: 0.85;\n  -webkit-app-region: no-drag;\n}\n.urlbarForm {\n  position: relative;\n  width: 0;\n  align-items: center;\n  justify-content: center;\n  height: 25px;\n  padding: 0 10px 0 3px;\n  display: flex;\n  flex-grow: 1;\n  min-width: 0%;\n}\n.urlbarForm *:not(legend) {\n  z-index: 2100;\n}\n.urlbarForm input:focus + legend:before {\n  content: ' ';\n  position: absolute;\n  background: #fff;\n  border-radius: 4px;\n  box-shadow: 0 0 1px #37A9FD, inset 0 0 2px #37A9FD, inset 0 1px 8px rgba(0, 137, 255, 0.1);\n  color: #333;\n  outline: none;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  z-index: 2000;\n}\n#navigator:not(.titleMode) .urlbarForm {\n  background: white;\n  border-radius: 4px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1), inset 0 1px 0 rgba(0, 0, 0, 0.05), inset 0 1px 1px rgba(0, 0, 0, 0.1);\n  color: #555555;\n}\n@media (max-width: 600px) {\n  .urlbarForm {\n    max-width: 80%;\n  }\n}\n#navigator {\n  font-size: 20px;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 0;\n  position: relative;\n  -webkit-user-select: none;\n  z-index: 2000;\n}\n#navigator > * {\n  -webkit-app-region: no-drag;\n}\n#navigator form {\n  -webkit-app-region: drag;\n}\n#navigator form input,\n#navigator form .urlbarIcon {\n  -webkit-app-region: no-drag;\n}\n#navigator .endButtons {\n  display: flex;\n}\n#navigator:not(.titleMode) > * {\n  animation: fadeIn .6s;\n  opacity: 0;\n  animation-fill-mode: forwards;\n}\n#navigator:not(.titleMode) .urlbarForm.noBorderRadius {\n  border-radius: 0;\n}\n#navigator:not(.titleMode) .bookmarkButtonContainer,\n#navigator:not(.titleMode) .addPublisherButtonContainer {\n  border: 1px solid #CBCBCB;\n  border-radius: 4px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  height: 25px;\n  width: 25px;\n  min-height: 25px;\n  min-width: 25px;\n  -webkit-app-region: no-drag;\n}\n#navigator:not(.titleMode) .bookmarkButtonContainer {\n  border-right: none;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n#navigator:not(.titleMode) .bookmarkButtonContainer .bookmarkButton {\n  background: url(" + __webpack_require__(673) + ") center no-repeat;\n  -webkit-mask-repeat: no-repeat;\n  background-size: 14px 14px;\n  margin: 0;\n  height: 0;\n  width: 25px;\n  height: 25px;\n}\n#navigator:not(.titleMode) .bookmarkButtonContainer .bookmarkButton.removeBookmarkButton {\n  background: url(" + __webpack_require__(674) + ") center no-repeat;\n  background-size: 14px 14px;\n}\n#navigator.titleMode {\n  animation: fadeIn 1.2s;\n}\n#navigator.titleMode input {\n  display: none;\n}\n#navigator.titleMode #titleBar {\n  display: inline-block;\n  background: rgba(243, 243, 243, 0);\n  color: #555555;\n  font-size: 13px;\n  max-width: 100%;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-left: 2px;\n}\n#navigator.titleMode #titleBar strong {\n  font-weight: 600;\n}\n#navigator.titleMode .endButtons {\n  display: none;\n}\n#navigator.titleMode .urlbarIcon {\n  display: inline-block;\n  opacity: 0.5;\n  position: relative;\n  left: 2px;\n  min-width: 0;\n}\n#navigator.titleMode .urlbarIcon.fa-unlock {\n  color: #C63626;\n  opacity: 1.0;\n}\n#navigator.titleMode .bookmarkButton:not(.removeBookmarkButton) {\n  display: none;\n}\n#navigator #titleBar {\n  display: none;\n  text-overflow: ellipsis;\n}\n#navigator .urlbarForm {\n  /* Disable selection of button text */\n}\n#navigator .urlbarForm .loadTime {\n  color: #37A9FD;\n  background: white;\n  font-size: 12px;\n  text-align: right;\n  cursor: default;\n}\n#navigator .urlbarForm .loadTime.onFocus {\n  display: none;\n}\n#navigator .urlbarForm > span {\n  -webkit-user-select: none;\n}\n#navigator .urlbarForm > * {\n  position: relative;\n  top: 1px;\n}\n#navigator .urlbarForm .inputbar-wrapper {\n  background: white;\n  display: flex;\n  flex: 1 1 0;\n  border-radius: 4px;\n  align-items: center;\n  justify-content: center;\n}\n#navigator .urlbarForm input {\n  background: white;\n  border: none;\n  box-sizing: border-box;\n  color: #555555;\n  cursor: text;\n  flex-grow: 1;\n  font-size: 13px;\n  font-weight: normal;\n  outline: none;\n  text-overflow: ellipsis;\n  min-width: 0%;\n}\n#navigator .urlbarForm input:hover {\n  background: white;\n}\n#navigator .urlbarForm input.private {\n  background: #392e54;\n  color: #555555;\n}\n#navigator .urlbarForm input:focus {\n  margin-right: 3px;\n}\n#navigator .urlbarForm .urlbarIconContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 25px;\n  width: 25px;\n  min-height: 25px;\n  min-width: 25px;\n}\n#navigator .urlbarForm .urlbarIconContainer .urlbarIcon {\n  color: #5a5a5a;\n  font-size: 13px;\n  background-repeat: no-repeat;\n  background-position: center;\n}\n#navigator .urlbarForm .urlbarIconContainer .urlbarIcon.fa-search {\n  position: relative;\n  bottom: 1px;\n}\n#navigator .urlbarForm .urlbarIconContainer .urlbarIcon.fa-lock,\n#navigator .urlbarForm .urlbarIconContainer .urlbarIcon.fa-unlock {\n  font-size: 16px;\n}\n#navigator .urlbarForm .urlbarIconContainer .urlbarIcon.fa-unlock {\n  color: #C63626;\n}\n#navigator .urlbarForm .urlbarIconContainer .urlbarIcon.extendedValidation {\n  color: green;\n}\n.topLevelEndButtons .braveMenu {\n  background-image: -webkit-image-set(url(" + __webpack_require__(675) + ") 1x, url(" + __webpack_require__(676) + ") 2x, url(" + __webpack_require__(677) + ") 3x);\n  background-repeat: no-repeat;\n  height: 24px;\n}\n.topLevelEndButtons .braveMenu:hover {\n  background-image: -webkit-image-set(url(" + __webpack_require__(678) + ") 1x, url(" + __webpack_require__(679) + ") 2x, url(" + __webpack_require__(680) + ") 3x);\n}\n", ""]);
	
	// exports


/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "392507919f6ec931361b489a56c65ce9.svg";

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "d5a535fdec793b2b9219ef7abfa185ce.svg";

/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "5ccced21c6505bfab561c1e015e407e1.svg";

/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "23b20b72da217563c4304c07c5206dd0.svg";

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e008bf562e79f9e1fd5110df9d61627d.svg";

/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "c11dbc2db4c1e34f10ac562b48e1d886.svg";

/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "430b679826c6e11b1767e7e05649e028.svg";

/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "2e7aa1b656ba910260191a20406af15f.svg";

/***/ },
/* 671 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "38ad268f3a41dc9191cc26857537e4c1.svg";

/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "a60b6ab6aaca89b5627cee5fb224ce64.svg";

/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f88876b2519c8cbda6ef6fa17e83eeff.svg";

/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "bc90457507bcff2412ad0d500d7f92a9.svg";

/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "b6fb7a0b51d3af832d445c02e46d434d.png";

/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "a34dd95ecb584ddb353a854a069d89a1.png";

/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "0c4a088449e73ec59b36bb111c7e03b5.png";

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "69e1af008c893d635dabe4b7feb5f366.png";

/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "51a0855604244165c58b5867df7d5676.png";

/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "1be94b6e3fe1720c770ab40ab0c71cbe.png";

/***/ },
/* 681 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(682);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./tabs.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./tabs.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.platform--win32 .tab {\n  color: #555;\n}\n.platform--win32 .tab .tabTitle {\n  font-weight: 500;\n  font-size: 12px;\n  height: 18px;\n}\n.tabs {\n  box-sizing: border-box;\n  background: none;\n  display: flex;\n  flex: 1;\n  overflow: auto;\n  padding: 0 4px 0 0;\n  height: 28px;\n  margin-top: 2px;\n  position: relative;\n  white-space: nowrap;\n  z-index: 1000;\n}\n.tabStripContainer {\n  display: flex;\n  flex: 1;\n  z-index: 1000;\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n.tabStripContainer.allowDragging {\n  -webkit-app-region: drag;\n}\n.tabStripContainer.allowDragging > * {\n  -webkit-app-region: no-drag;\n}\n.tabStripContainer.isPreview {\n  opacity: 0.5;\n  animation: tabFadeIn 0.75s ease-in-out;\n  animation-fill-mode: forwards;\n}\n.tabStripContainer .newFrameButton {\n  background: #5a5a5a;\n  min-width: 25px;\n  min-height: 25px;\n  -webkit-mask-image: url(" + __webpack_require__(683) + ");\n  -webkit-mask-repeat: no-repeat;\n  -webkit-mask-position: center;\n  -webkit-mask-size: 12px 12px;\n  -webkit-mask-origin: border;\n  border: 3px solid #dddddd;\n}\n.tabStripContainer .newFrameButton:hover {\n  opacity: 1.0;\n  background-color: black;\n}\n.tab {\n  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.1));\n  border-radius: 4px 4px 0px 0px;\n  border-width: 1px 1px 0;\n  box-sizing: border-box;\n  color: #3B3B3B;\n  display: flex;\n  height: 23px;\n  margin-top: 2px;\n  transition: transform 200ms ease;\n  left: 0;\n  opacity: 1.0;\n  padding: 0;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid rgba(0, 0, 0, 0);\n  border-bottom: 1px;\n}\n.tab .tabTitle {\n  -webkit-user-select: none;\n  box-sizing: border-box;\n  display: inline-block;\n  font-size: 12px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 16px;\n  white-space: nowrap;\n  vertical-align: middle;\n  width: calc(100% - 40px);\n  height: 15px;\n  margin-left: 7px;\n}\n.tab .tabIcon {\n  background-position: center;\n  background-repeat: no-repeat;\n  display: inline-block;\n  font-size: 12px;\n  text-align: center;\n  margin-left: 7px;\n}\n.tab .thumbnail {\n  display: none;\n  position: absolute;\n  top: 32px;\n  left: 0;\n  border: 1px solid #000;\n  padding: 10px;\n  background: #fff;\n  pointer-events: none;\n  z-index: 1100;\n}\n.tab.active {\n  background: linear-gradient(to bottom, white, #F3F3F3);\n  height: 25px;\n  margin-top: 1px;\n  box-shadow: inset 1px 1px 2px 0px white;\n  box-shadow: 0px -1px 4px 0px rgba(51, 51, 51, 0.12);\n  border: 1px solid #bbb;\n  border-bottom: 1px;\n}\n.tab.private {\n  background: #392e54;\n  color: #fff;\n}\n.tab.private:not(.active) {\n  background: #9c8dc1;\n}\n.tab:hover .closeTab {\n  opacity: 0.5;\n}\n.tab:hover .thumbnail {\n  display: block;\n}\n.tab:not(.active):hover {\n  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.8), rgba(250, 250, 250, 0.4));\n}\n.tab:not(.active):hover.private {\n  background: #665296;\n}\n.tab.dragging:hover .closeTab {\n  opacity: 0;\n}\n.tab .closeTab {\n  opacity: 0;\n  text-align: center;\n  width: 16px;\n  height: 16px;\n  margin-left: 4px;\n  margin-right: 4px;\n  border: 0px solid white;\n  border-radius: 50%;\n  z-index: 1000;\n}\n.tab .closeTab:hover {\n  opacity: 1;\n}\n.tabArea {\n  box-sizing: border-box;\n  display: inline-block;\n  padding: 0 4px 0 0;\n  position: relative;\n  vertical-align: top;\n  overflow: hidden;\n}\n.tabArea:not(.partOfFullPageSet) {\n  max-width: 184px;\n}\n.tabArea:not(.isPinned) {\n  flex: 1;\n}\n.tabArea:not(.isPinned):first-child {\n  padding-left: 6px;\n}\n.tabArea.isPinned:last-child {\n  padding-right: 6px;\n}\n.tabArea.isPinned .tabIcon {\n  margin: 0;\n  padding: 0 4px;\n}\n.tabArea.draggingOverLeft:not(.isDragging) {\n  margin-left: 50px;\n}\n.tabArea.draggingOverRight:not(.isDragging) {\n  margin-right: 50px;\n}\n.tabArea.isDragging {\n  opacity: 0.2;\n}\n.tabArea hr.dragIndicator {\n  position: absolute;\n  top: 0;\n  left: -1px;\n  z-index: 1100;\n  height: 100%;\n  width: 1px;\n  display: none;\n}\n.tabArea hr.dragIndicator.dragIndicatorEnd {\n  bottom: -5px;\n  top: 0;\n  right: -3px;\n  left: unset;\n}\n.tabArea hr.dragIndicator.dragActive {\n  display: block;\n  color: #37A9FD;\n}\n.tabsToolbar {\n  background: #dddddd;\n  display: flex;\n  height: 28px;\n  -webkit-user-select: none;\n}\n.tabsToolbarButtons {\n  background: #dddddd;\n  padding-right: 2px;\n}\n.tabsToolbarButtons .browserButton {\n  display: inline-block;\n  line-height: 26px;\n}\n.tabPages {\n  background: #dddddd;\n  display: flex;\n  height: 9px;\n  justify-content: center;\n  position: relative;\n  text-align: center;\n  z-index: 1000;\n}\n.tabPages.allowDragging {\n  -webkit-app-region: drag;\n}\n.tabPages.allowDragging > * {\n  -webkit-app-region: no-drag;\n}\n.tabPages.singlePage {\n  height: 1px;\n}\n.tabPages > div {\n  display: flex;\n}\n.tabPage {\n  align-items: center;\n  background-color: #aaaaaa;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  display: inline-block;\n  margin: auto 2.5px;\n  margin-top: 3px;\n  height: 6px;\n  width: 36px;\n  vertical-align: middle;\n}\n.tabPage:hover {\n  background-color: #f0f0f0;\n  border: 2px solid white;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0);\n}\n.tabPage.audioPlaybackActive {\n  border: 1px solid #37A9FD;\n}\n.tabPage.active {\n  background-color: #F3F3F3;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0);\n}\n.prevTab,\n.nextTab {\n  display: none;\n  color: #a0a0a0;\n  font-size: 21px !important;\n  height: 20px;\n  line-height: 19px !important;\n  text-align: center;\n  vertical-align: top;\n  margin-top: 4px;\n  margin-left: -5px;\n  margin-right: -5px;\n  width: 30px;\n}\n.prevTab:not([disabled]),\n.nextTab:not([disabled]) {\n  display: block;\n  background: #dddddd;\n}\n.prevTab:not([disabled]):hover,\n.nextTab:not([disabled]):hover {\n  color: white;\n}\n.prevTab {\n  background: linear-gradient(to right, white, #dddddd);\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 4px;\n}\n.nextTab {\n  background: linear-gradient(to left, #afb0b4, #cccccc);\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 4px;\n}\n.pinnedTabs {\n  margin-left: 9px;\n  margin-top: 2px;\n}\n.segmentedControl {\n  width: 30%;\n  border: solid 1px #ff5000;\n  border-radius: 4px;\n  margin: 0 auto 20px;\n  height: 2em;\n}\n.segmentedControl > div {\n  color: #ff5000;\n  text-align: center;\n  display: inline-block;\n  width: 50%;\n  height: 2em;\n  line-height: 2em;\n  cursor: pointer;\n}\n.segmentedControl > div.selected {\n  color: white;\n  background: #ff5000;\n}\n", ""]);
	
	// exports


/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "cd1a406ba824513a8d92a2e1418a2977.svg";

/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(685);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./findbar.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./findbar.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.findBar {\n  background: #F7F7F7;\n  border-bottom: 1px solid #ececec;\n  color: #37A9FD;\n  display: flex;\n  font-size: 12px;\n  align-items: center;\n  justify-content: center;\n  padding: 5px 10px;\n  animation: slideIn 25ms;\n}\n.findBar .findMatchText {\n  margin: 0 10px;\n  min-width: 60px;\n  text-align: center;\n}\n.findBar label {\n  color: #656565;\n  -webkit-user-select: none;\n}\n.findBar span.findButton {\n  color: #999999;\n  cursor: default;\n  border: 1px solid transparent;\n  font-size: 18px;\n  margin: 0 2px;\n  opacity: 0.5;\n}\n.findBar span.findButton:not([disabled]):hover {\n  opacity: 1;\n}\n.findBar span.findButton.hideButton:not([disabled]):hover {\n  background: #F3F3F3;\n}\n.findBar .closeButton {\n  color: white;\n  font-size: 22px;\n  margin-right: 0;\n  opacity: 0.5;\n  transform: rotate(45deg);\n  -webkit-user-select: none;\n}\n.findBar .searchContainer {\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n}\n.findBar .searchStringContainer {\n  display: inline-block;\n  position: relative;\n}\n.findBar .searchStringContainer span {\n  color: #999999;\n  padding: 0 5px;\n}\n.findBar .searchStringContainer input {\n  height: 24px;\n  width: 200px;\n  margin-right: 5px;\n  padding: 0 25px;\n  border: none;\n  border-radius: 4px;\n}\n.findBar .searchStringContainer .foundResults {\n  color: #555;\n  font-size: 10px;\n  margin-right: 8px;\n  position: absolute;\n  right: 0;\n  top: 5px;\n}\n.findBar .searchStringContainerIcon {\n  position: absolute;\n  line-height: 24px;\n}\n.findBar .searchStringContainerIcon.fa-times {\n  right: 10px;\n}\n.findBar .caseSensitivityContainer {\n  color: #999999;\n  margin-top: 6px;\n}\n.findBar .caseSensitivityContainer input {\n  margin-right: 6px;\n}\n", ""]);
	
	// exports


/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(687);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./dialogs.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./dialogs.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 687 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.dialog {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  z-index: 3000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.15);\n}\n.dialog menu {\n  height: 300px;\n  width: 500px;\n  flex: 0 0 auto;\n  background: #3a3a3a;\n  color: #fff;\n  font-size: 13px;\n  display: flex;\n  flex-direction: column;\n}\n.dialog menu.contextMenuWithPosition {\n  height: auto;\n  padding: 10px;\n  width: auto;\n}\n.dialog menu.contextMenuWithPosition span {\n  width: 250px;\n}\n.dialog menu h1 {\n  border-bottom: 1px solid #444444;\n  margin-bottom: 10px;\n  padding-bottom: 10px;\n  padding: 10px 14px;\n  font-size: 18px;\n  font-weight: normal;\n}\n.dialog menu p,\n.dialog menu li,\n.dialog menu form {\n  padding: 10px 14px;\n}\n.dialog menu span {\n  display: block;\n  box-sizing: border-box;\n  width: 100%;\n  padding: 10px 14px;\n}\n.dialog menu span + span {\n  border-top: 1px solid #444444;\n}\n.dialog menu span.option:hover {\n  background-color: #37A9FD;\n  cursor: pointer;\n}\n.dialog menu section.body {\n  border-bottom: 1px solid #444444;\n  flex: 1 1 auto;\n}\n.dialog menu section.body input {\n  width: 100%;\n}\n.dialog menu section.body ul {\n  list-style-type: none;\n}\n.dialog menu section.body ul.select li:hover {\n  background: #008FFF;\n  cursor: pointer;\n}\n.connectionInfo {\n  max-width: 400px;\n  padding: 10px;\n}\n", ""]);
	
	// exports


/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(689);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./updateBar.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./updateBar.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.updateBar {\n  background-color: #ffefc0;\n  border-bottom: 1px solid #888;\n  line-height: 24px;\n  padding: 6px 12px 6px 20px;\n  background-color: #fff;\n  padding: 8px 20px 6px 20px;\n  padding: 8px 16px 8px 20px;\n}\n.updateBar.greetingStyle {\n  background-color: #fff;\n  padding: 8px 20px 6px 20px;\n}\n.updateBar.greetingStyle .button {\n  cursor: default;\n  display: inline-block;\n  line-height: 25px;\n  width: 25px;\n  font-size: 13px;\n  color: #5a5a5a;\n  border-radius: 4px;\n  margin: 0 3px;\n  text-align: center;\n  transition: .1s opacity, .1s background;\n  user-select: none;\n  -webkit-user-select: none;\n  background-color: #eee;\n  border-style: none;\n  font-size: 14px;\n  height: 25px;\n  line-height: 27px;\n  margin: auto 0 auto 4px;\n  padding: 0px 25px;\n  width: auto;\n}\n.updateBar.greetingStyle .button + .browserButton {\n  margin-left: 5px;\n}\n.updateBar.greetingStyle .button:not([disabled]):hover {\n  color: black;\n}\n.updateBar.greetingStyle .button[disabled] {\n  pointer-events: none;\n  animation: none !important;\n  opacity: .25 !important;\n}\n.updateBar.greetingStyle .button.smallButton {\n  line-height: 18px;\n  width: 18px;\n  height: 18px;\n  font-size: 24px;\n}\n.updateBar.greetingStyle .button.primaryButton,\n.updateBar.greetingStyle .button.actionButton,\n.updateBar.greetingStyle .button.wideButton,\n.updateBar.greetingStyle .button.subtleButton,\n.updateBar.greetingStyle .button.whiteButton {\n  color: #fff;\n  line-height: 1.25;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  width: auto;\n  height: auto;\n  min-width: calc(78px);\n}\n.updateBar.greetingStyle .button.primaryButton,\n.updateBar.greetingStyle .button.actionButton,\n.updateBar.greetingStyle .button.subtleButton,\n.updateBar.greetingStyle .button.whiteButton {\n  padding-right: 16px;\n  padding-left: 16px;\n}\n.updateBar.greetingStyle .button.primaryButton {\n  background: linear-gradient(#FF7A1D, #ff5000);\n  border: 2px solid transparent;\n  border-top: 2px solid #FF7A1D;\n  border-bottom: 2px solid #ff5000;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  font-weight: 500;\n}\n.updateBar.greetingStyle .button.primaryButton:hover {\n  border: 2px solid white;\n  color: white;\n  cursor: pointer;\n}\n.updateBar.greetingStyle .button.actionButton {\n  background-color: #4099FF;\n}\n.updateBar.greetingStyle .button.wideButton {\n  width: auto;\n  padding-right: 35px;\n  padding-left: 35px;\n}\n.updateBar.greetingStyle .button.whiteButton {\n  background: linear-gradient(white, #ececec);\n  border: 1px solid white;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  color: #444444;\n}\n.updateBar.greetingStyle .button.whiteButton:hover {\n  border: 1px solid #999999;\n}\n.updateBar.greetingStyle .button.inlineButton {\n  display: inline;\n}\n.updateBar.greetingStyle .button.subtleButton {\n  background-color: #ccc;\n  font-size: 14px;\n}\n.updateBar.greetingStyle .button.primary {\n  background-color: #ff5000;\n  color: #fff;\n  margin-right: 0px;\n}\n.updateBar.greetingStyle .button.primary:hover {\n  background-color: #ff7333;\n  color: #fff !important;\n}\n.updateBar.greetingStyle .button.primary:active {\n  background-color: #cc4000;\n  color: #fff !important;\n}\n.updateBar label {\n  font-size: 15px;\n  padding: 0 10px 0 0;\n  color: #666;\n  -webkit-user-select: none;\n}\n.updateBar input[type=\"checkbox\"] {\n  margin: 0 3px;\n}\n.updateBar .button {\n  font-size: 13px;\n  margin-right: 10px;\n  padding: 2px 15px;\n  text-transform: capitalize;\n  width: auto;\n  -webkit-user-select: none;\n}\n.updateBar .greeting {\n  color: #ff5000;\n  font-size: 16px;\n  margin: auto 10px auto 0;\n  user-select: none;\n  -webkit-user-select: none;\n}\n.updateBar .message {\n  color: #000;\n  font-size: 15px;\n  margin: auto 0;\n  user-select: none;\n  -webkit-user-select: none;\n  cursor: default;\n}\n.updateBar .message.secondary {\n  color: #888;\n  font-size: 14px;\n  padding: 0;\n  margin: auto 0 auto 10px;\n}\n.updateBar .options {\n  float: right;\n  margin-left: 6px;\n}\n.updateBar .spacer {\n  flex-grow: 1;\n}\n.updateBar .notificationAdvanced {\n  color: grey;\n  cursor: pointer;\n  text-decoration: underline;\n  font-size: 13px;\n  margin: 5px;\n}\n.updateBar .button {\n  cursor: default;\n  display: inline-block;\n  line-height: 25px;\n  width: 25px;\n  font-size: 13px;\n  color: #5a5a5a;\n  border-radius: 4px;\n  margin: 0 3px;\n  text-align: center;\n  transition: .1s opacity, .1s background;\n  user-select: none;\n  -webkit-user-select: none;\n  background-color: #eee;\n  border-style: none;\n  font-size: 14px;\n  height: 25px;\n  line-height: 27px;\n  margin: auto 0 auto 4px;\n  padding: 0px 25px;\n  width: auto;\n}\n.updateBar .button + .browserButton {\n  margin-left: 5px;\n}\n.updateBar .button:not([disabled]):hover {\n  color: black;\n}\n.updateBar .button[disabled] {\n  pointer-events: none;\n  animation: none !important;\n  opacity: .25 !important;\n}\n.updateBar .button.smallButton {\n  line-height: 18px;\n  width: 18px;\n  height: 18px;\n  font-size: 24px;\n}\n.updateBar .button.primaryButton,\n.updateBar .button.actionButton,\n.updateBar .button.wideButton,\n.updateBar .button.subtleButton,\n.updateBar .button.whiteButton {\n  color: #fff;\n  line-height: 1.25;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  width: auto;\n  height: auto;\n  min-width: calc(78px);\n}\n.updateBar .button.primaryButton,\n.updateBar .button.actionButton,\n.updateBar .button.subtleButton,\n.updateBar .button.whiteButton {\n  padding-right: 16px;\n  padding-left: 16px;\n}\n.updateBar .button.primaryButton {\n  background: linear-gradient(#FF7A1D, #ff5000);\n  border: 2px solid transparent;\n  border-top: 2px solid #FF7A1D;\n  border-bottom: 2px solid #ff5000;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  font-weight: 500;\n}\n.updateBar .button.primaryButton:hover {\n  border: 2px solid white;\n  color: white;\n  cursor: pointer;\n}\n.updateBar .button.actionButton {\n  background-color: #4099FF;\n}\n.updateBar .button.wideButton {\n  width: auto;\n  padding-right: 35px;\n  padding-left: 35px;\n}\n.updateBar .button.whiteButton {\n  background: linear-gradient(white, #ececec);\n  border: 1px solid white;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  color: #444444;\n}\n.updateBar .button.whiteButton:hover {\n  border: 1px solid #999999;\n}\n.updateBar .button.inlineButton {\n  display: inline;\n}\n.updateBar .button.subtleButton {\n  background-color: #ccc;\n  font-size: 14px;\n}\n.updateBar .button.primary {\n  background-color: #ff5000;\n  color: #fff;\n  margin-right: 0px;\n}\n.updateBar .button.primary:hover {\n  background-color: #ff7333;\n  color: #fff !important;\n}\n.updateBar .button.primary:active {\n  background-color: #cc4000;\n  color: #fff !important;\n}\n", ""]);
	
	// exports


/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(691);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./downloadBar.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./downloadBar.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n:root {\n  --download-item-width: 200px;\n  --download-item-margin: 10px;\n  --download-bar-padding: 20px;\n  --download-bar-buttons: 22px;\n}\n.downloadsBar {\n  -webkit-user-select: none;\n  box-sizing: border-box;\n  cursor: default;\n  background-color: #e6e6e6;\n  border-top: 1px solid #888;\n  color: black;\n  display: flex;\n  height: 50px;\n  padding: 5px var(--download-bar-padding);\n  width: 100%;\n  z-index: 1000;\n}\n.downloadsBar .downloadItems {\n  display: flex;\n  flex-grow: 1;\n  position: relative;\n}\n.downloadsBar .downloadItems .downloadItem {\n  background-color: white;\n  border: 1px solid #c7c7c7;\n  border-radius: 4px;\n  box-sizing: border-box;\n  display: flex;\n  font-size: 11px;\n  flex-direction: column;\n  height: 36px;\n  padding: 0 14px;\n  position: relative;\n  margin: auto var(--download-item-margin) auto 0;\n  max-width: var(--download-item-width);\n  min-width: var(--download-item-width);\n}\n.downloadsBar .downloadItems .downloadItem:hover {\n  height: 62px;\n  top: -24px;\n}\n.downloadsBar .downloadItems .downloadItem:hover .downloadInfo .downloadArrow {\n  display: none;\n}\n.downloadsBar .downloadItems .downloadItem:hover .downloadProgress {\n  bottom: 0;\n}\n.downloadsBar .downloadItems .downloadItem:not(:hover) .downloadActions {\n  display: none;\n}\n.downloadsBar .downloadItems .downloadItem.paused .downloadProgress {\n  border-right: 1px solid black;\n}\n.downloadsBar .downloadItems .downloadItem.completed,\n.downloadsBar .downloadItems .downloadItem.interrupted,\n.downloadsBar .downloadItems .downloadItem.cancelled {\n  background-color: #e6e6e6;\n}\n.downloadsBar .downloadItems .downloadItem.completed .downloadState,\n.downloadsBar .downloadItems .downloadItem.interrupted .downloadState,\n.downloadsBar .downloadItems .downloadItem.cancelled .downloadState {\n  font-weight: bold;\n}\n.downloadsBar .downloadItems .downloadItem .downloadProgress {\n  background-color: #37A9FD;\n  left: 0;\n  opacity: 0.5;\n  position: absolute;\n  height: 35px;\n  width: 100%;\n}\n.downloadsBar .downloadItems .downloadItem .downloadInfo {\n  display: flex;\n  margin: auto 0;\n}\n.downloadsBar .downloadItems .downloadItem .downloadInfo .downloadFilename,\n.downloadsBar .downloadItems .downloadItem .downloadInfo .downloadState {\n  margin: auto 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 150px;\n}\n.downloadsBar .downloadItems .downloadItem .downloadInfo .downloadArrow {\n  width: 14px;\n  margin: auto 0 auto auto;\n}\n.downloadsBar .downloadItems .downloadItem .downloadInfo > span {\n  width: 150px;\n  margin-right: 12px;\n}\n.downloadsBar .downloadItems .downloadItem .downloadActions {\n  margin: auto 0;\n}\n.downloadsBar .downloadItems .downloadItem .downloadActions .browserButton {\n  font-size: 14px;\n  height: auto;\n  line-height: inherit;\n  margin: auto 15px auto auto;\n  width: auto;\n}\n.downloadsBar .downloadItems .downloadItem .downloadActions .browserButton.removeDownloadFromList {\n  float: right;\n  margin-right: 0;\n}\n.downloadsBar .downloadItems .downloadItem .downloadActions .browserButton:hover {\n  color: #37A9FD;\n}\n.downloadsBar .downloadBarButtons {\n  margin: auto 0;\n}\n.downloadsBar .downloadBarButtons .downloadButton {\n  background: url(" + __webpack_require__(692) + ") center no-repeat;\n  background-size: 14px 14px;\n  height: 18px;\n  width: 18px;\n}\n.downloadsBar .downloadBarButtons .downloadButton:hover {\n  background: url(" + __webpack_require__(693) + ") center no-repeat;\n  background-size: 14px 14px;\n  height: 18px;\n  width: 18px;\n}\n.downloadsBar .downloadBarButtons .downloadButton.hideButton:not([disabled]):hover {\n  background: #F3F3F3;\n}\n", ""]);
	
	// exports


/***/ },
/* 692 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "1acaa76443941825560798bdb3936bf9.svg";

/***/ },
/* 693 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "3bad0d188335cbfe4a29bd448fa4d0e3.svg";

/***/ },
/* 694 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(695);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./bookmarksToolbar.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./bookmarksToolbar.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n:root {\n  --bookmark-item-max-width: 100px;\n  --bookmark-item-padding: 4px;\n  --bookmark-item-margin: 3px;\n  --bookmark-item-chevron-margin: 4px;\n  --bookmark-item-font-size: 16px;\n  --bookmarks-toolbar-padding: 10px;\n}\n.bookmarksToolbar {\n  background: #eee;\n  border-bottom: 1px solid #aaaaaa;\n  border-top: 1px solid #FFFFFF;\n  box-sizing: border-box;\n  display: flex;\n  flex: 1;\n  padding: 3px var(--bookmarks-toolbar-padding);\n  height: 24px;\n}\n.bookmarksToolbar.allowDragging {\n  -webkit-app-region: drag;\n}\n.bookmarksToolbar.allowDragging > * {\n  -webkit-app-region: no-drag;\n}\n.bookmarksToolbar.showFavicon {\n  height: 28px;\n}\n.bookmarksToolbar.showOnlyFavicon {\n  padding: 0px 0px 0px 10px;\n  margin: 0px;\n}\n.bookmarksToolbar .bookmarkToolbarButton {\n  border-radius: 3px;\n  color: #656565;\n  cursor: default;\n  font-size: 11px;\n  line-height: 12px;\n  margin: auto var(--bookmark-item-margin);\n  padding: 2px var(--bookmark-item-padding);\n  text-overflow: ellipsis;\n  user-select: none;\n  white-space: nowrap;\n  max-width: var(--bookmark-item-max-width);\n  box-sizing: border-box;\n  -webkit-user-select: none;\n  align-items: center;\n  display: flex;\n}\n.bookmarksToolbar .bookmarkToolbarButton:hover {\n  background: white;\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.1);\n}\n.bookmarksToolbar .bookmarkToolbarButton.draggingOverLeft:not(.isDragging) {\n  margin-left: 25px;\n}\n.bookmarksToolbar .bookmarkToolbarButton.draggingOverRight:not(.isDragging) {\n  margin-right: 25px;\n}\n.bookmarksToolbar .bookmarkToolbarButton.isDragging {\n  opacity: 0.2;\n}\n.bookmarksToolbar .bookmarkToolbarButton.showOnlyFavicon {\n  padding: 2px 4px;\n  margin: auto 0px;\n}\n.bookmarksToolbar .bookmarkToolbarButton.showOnlyFavicon .bookmarkFavicon:not(.bookmarkFolder),\n.bookmarksToolbar .bookmarkToolbarButton.showOnlyFavicon .bookmarkFile:not(.bookmarkFolder) {\n  margin-right: 0px;\n}\n.bookmarksToolbar .bookmarkToolbarButton .bookmarkFavicon {\n  background-position: center;\n  background-repeat: no-repeat;\n  display: inline-block;\n  margin-right: 4px;\n}\n.bookmarksToolbar .bookmarkToolbarButton .bookmarkText {\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.bookmarksToolbar .bookmarkToolbarButton .bookmarkFolder {\n  font-size: 15px;\n  text-align: center;\n  color: #444444;\n}\n.bookmarksToolbar .bookmarkToolbarButton .bookmarkFile {\n  font-size: 13px;\n  text-align: center;\n  color: #444444;\n}\n.bookmarksToolbar .bookmarkToolbarButton .bookmarkFolderChevron {\n  color: #676767;\n  margin-left: var(--bookmark-item-chevron-margin);\n  font-size: 8px;\n}\n.bookmarksToolbar .bookmarkButton {\n  box-sizing: border-box;\n  font-size: 14px;\n  height: auto;\n  line-height: 12px;\n  margin-left: auto;\n  margin-right: 5px;\n  width: auto;\n  -webkit-user-select: none;\n}\n.bookmarksToolbar .overflowIndicator {\n  padding-left: 6px;\n  padding-right: 11px;\n  margin-left: auto;\n  margin-right: 0;\n  margin-bottom: auto;\n  margin-top: auto;\n}\n", ""]);
	
	// exports


/***/ },
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(697);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./notificationBar.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./notificationBar.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n:root {\n  --navbar-height: 36px;\n  --downloads-bar-height: 50px;\n}\n.notificationBar {\n  display: inline-block;\n  width: 100%;\n}\n.notificationBar .notificationItem {\n  background-color: #ffefc0;\n  border-bottom: 1px solid #888;\n  line-height: 24px;\n  padding: 6px 12px 6px 20px;\n}\n.notificationBar .notificationItem.greetingStyle {\n  background-color: #fff;\n  padding: 8px 20px 6px 20px;\n}\n.notificationBar .notificationItem.greetingStyle .button {\n  cursor: default;\n  display: inline-block;\n  line-height: 25px;\n  width: 25px;\n  font-size: 13px;\n  color: #5a5a5a;\n  border-radius: 4px;\n  margin: 0 3px;\n  text-align: center;\n  transition: .1s opacity, .1s background;\n  user-select: none;\n  -webkit-user-select: none;\n  background-color: #eee;\n  border-style: none;\n  font-size: 14px;\n  height: 25px;\n  line-height: 27px;\n  margin: auto 0 auto 4px;\n  padding: 0px 25px;\n  width: auto;\n}\n.notificationBar .notificationItem.greetingStyle .button + .browserButton {\n  margin-left: 5px;\n}\n.notificationBar .notificationItem.greetingStyle .button:not([disabled]):hover {\n  color: black;\n}\n.notificationBar .notificationItem.greetingStyle .button[disabled] {\n  pointer-events: none;\n  animation: none !important;\n  opacity: .25 !important;\n}\n.notificationBar .notificationItem.greetingStyle .button.smallButton {\n  line-height: 18px;\n  width: 18px;\n  height: 18px;\n  font-size: 24px;\n}\n.notificationBar .notificationItem.greetingStyle .button.primaryButton,\n.notificationBar .notificationItem.greetingStyle .button.actionButton,\n.notificationBar .notificationItem.greetingStyle .button.wideButton,\n.notificationBar .notificationItem.greetingStyle .button.subtleButton,\n.notificationBar .notificationItem.greetingStyle .button.whiteButton {\n  color: #fff;\n  line-height: 1.25;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  width: auto;\n  height: auto;\n  min-width: calc(78px);\n}\n.notificationBar .notificationItem.greetingStyle .button.primaryButton,\n.notificationBar .notificationItem.greetingStyle .button.actionButton,\n.notificationBar .notificationItem.greetingStyle .button.subtleButton,\n.notificationBar .notificationItem.greetingStyle .button.whiteButton {\n  padding-right: 16px;\n  padding-left: 16px;\n}\n.notificationBar .notificationItem.greetingStyle .button.primaryButton {\n  background: linear-gradient(#FF7A1D, #ff5000);\n  border: 2px solid transparent;\n  border-top: 2px solid #FF7A1D;\n  border-bottom: 2px solid #ff5000;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  font-weight: 500;\n}\n.notificationBar .notificationItem.greetingStyle .button.primaryButton:hover {\n  border: 2px solid white;\n  color: white;\n  cursor: pointer;\n}\n.notificationBar .notificationItem.greetingStyle .button.actionButton {\n  background-color: #4099FF;\n}\n.notificationBar .notificationItem.greetingStyle .button.wideButton {\n  width: auto;\n  padding-right: 35px;\n  padding-left: 35px;\n}\n.notificationBar .notificationItem.greetingStyle .button.whiteButton {\n  background: linear-gradient(white, #ececec);\n  border: 1px solid white;\n  box-shadow: 0px 1px 5px -1px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  color: #444444;\n}\n.notificationBar .notificationItem.greetingStyle .button.whiteButton:hover {\n  border: 1px solid #999999;\n}\n.notificationBar .notificationItem.greetingStyle .button.inlineButton {\n  display: inline;\n}\n.notificationBar .notificationItem.greetingStyle .button.subtleButton {\n  background-color: #ccc;\n  font-size: 14px;\n}\n.notificationBar .notificationItem.greetingStyle .button.primary {\n  background-color: #ff5000;\n  color: #fff;\n  margin-right: 0px;\n}\n.notificationBar .notificationItem.greetingStyle .button.primary:hover {\n  background-color: #ff7333;\n  color: #fff !important;\n}\n.notificationBar .notificationItem.greetingStyle .button.primary:active {\n  background-color: #cc4000;\n  color: #fff !important;\n}\n.notificationBar .notificationItem label {\n  font-size: 15px;\n  padding: 0 10px 0 0;\n  color: #666;\n  -webkit-user-select: none;\n}\n.notificationBar .notificationItem input[type=\"checkbox\"] {\n  margin: 0 3px;\n}\n.notificationBar .notificationItem .button {\n  font-size: 13px;\n  margin-right: 10px;\n  padding: 2px 15px;\n  text-transform: capitalize;\n  width: auto;\n  -webkit-user-select: none;\n}\n.notificationBar .notificationItem .greeting {\n  color: #ff5000;\n  font-size: 16px;\n  margin: auto 10px auto 0;\n  user-select: none;\n  -webkit-user-select: none;\n}\n.notificationBar .notificationItem .message {\n  color: #000;\n  font-size: 15px;\n  margin: auto 0;\n  user-select: none;\n  -webkit-user-select: none;\n  cursor: default;\n}\n.notificationBar .notificationItem .message.secondary {\n  color: #888;\n  font-size: 14px;\n  padding: 0;\n  margin: auto 0 auto 10px;\n}\n.notificationBar .notificationItem .options {\n  float: right;\n  margin-left: 6px;\n}\n.notificationBar .notificationItem .spacer {\n  flex-grow: 1;\n}\n.notificationBar .notificationItem .notificationAdvanced {\n  color: grey;\n  cursor: pointer;\n  text-decoration: underline;\n  font-size: 13px;\n  margin: 5px;\n}\n", ""]);
	
	// exports


/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(699);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(221)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./addEditBookmark.less", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js?-minimize!./../node_modules/less-loader/index.js!./addEditBookmark.less");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports
	
	
	// module
	exports.push([module.id, "/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n.removeBookmarkLink {\n  margin-right: auto;\n}\n", ""]);
	
	// exports


/***/ },
/* 700 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	// Controller view which manages the top level immutable state for the app
	
	const React = __webpack_require__(214);
	const Immutable = __webpack_require__(188);
	const windowStore = __webpack_require__(701);
	const appStoreRenderer = __webpack_require__(207);
	const windowActions = __webpack_require__(716);
	const Main = __webpack_require__(721);
	const SiteTags = __webpack_require__(256);
	const cx = __webpack_require__(236);
	const { getPlatformStyles } = __webpack_require__(251);
	
	class Window extends React.Component {
	  constructor(props) {
	    super(props);
	    // initialize appState from props
	    // and then listen for updates
	    this.appState = appStoreRenderer.state;
	    this.windowState = Immutable.fromJS(this.props.initWindowState) || windowStore.getState();
	    this.state = {
	      immutableData: {
	        windowState: this.windowState,
	        appState: this.appState
	      }
	    };
	    if (this.props.initWindowState) {
	      windowActions.setState(this.windowState);
	    }
	
	    this.onChange = this.onChange.bind(this);
	    this.onAppStateChange = this.onAppStateChange.bind(this);
	    windowStore.addChangeListener(this.onChange);
	    appStoreRenderer.addChangeListener(this.onAppStateChange);
	  }
	
	  componentWillMount() {
	    if (!this.props.initWindowState || this.props.initWindowState.frames.length === 0) {
	      if (this.props.frames.length === 0) {
	        windowActions.newFrame();
	      } else {
	        this.props.frames.forEach(frame => {
	          windowActions.newFrame(frame);
	        });
	      }
	    }
	  }
	
	  render() {
	    let classes = {};
	    classes['windowContainer'] = true;
	
	    const platformClasses = getPlatformStyles();
	    platformClasses.forEach(className => {
	      classes[className] = true;
	    });
	
	    // Windows puts a 1px border around frameless window
	    // For Windows 10, this defaults to blue. When window
	    // becomes inactive it needs to change to gray.
	    if (classes['win10']) {
	      classes['inactive'] = !this.windowState.getIn(['ui', 'hasFocus']);
	    }
	
	    return _jsx('div', {
	      id: 'windowContainer',
	      className: cx(classes)
	    }, void 0, _jsx(Main, {
	      windowState: this.state.immutableData.windowState,
	      appState: this.state.immutableData.appState
	    }));
	  }
	
	  componentWillUnmount() {
	    windowStore.removeChangeListener(this.onChange);
	    appStoreRenderer.removeChangeListener(this.onAppStateChange);
	  }
	
	  shouldComponentUpdate(nextProps, nextState) {
	    return nextState.immutableData !== this.state.immutableData;
	  }
	
	  onChange() {
	    this.windowState = windowStore.getState();
	    this.setState({
	      immutableData: {
	        windowState: this.windowState,
	        appState: this.appState
	      }
	    });
	  }
	
	  onAppStateChange() {
	    this.appState = appStoreRenderer.state;
	    this.setState({
	      immutableData: {
	        windowState: this.windowState,
	        appState: this.appState
	      }
	    });
	
	    if (!this.props.includePinnedSites) {
	      return;
	    }
	
	    const sites = this.appState.get('sites');
	    const frames = this.windowState.get('frames');
	
	    // Check for new pinned sites which we don't already know about
	    const sitesToAdd = sites.filter(site => {
	      return site.get('tags').includes(SiteTags.PINNED) && !frames.find(frame => frame.get('pinnedLocation') &&
	      // Compare to the original src of the pinned frame
	      frame.get('pinnedLocation') === site.get('location') && (frame.get('partitionNumber') || 0) === (site.get('partitionNumber') || 0));
	    });
	    sitesToAdd.forEach(site => {
	      windowActions.newFrame({
	        location: site.get('location'),
	        partitionNumber: site.get('partitionNumber'),
	        isPinned: true
	      }, false);
	    });
	
	    // Check for unpinned sites which should be closed
	    const framesToClose = frames.filter(frame => frame.get('pinnedLocation') &&
	    // Compare to the original src of the pinned frame
	    !sites.find(site => frame.get('pinnedLocation') === site.get('location') && (frame.get('partitionNumber') || 0) === (site.get('partitionNumber') || 0) && site.get('tags').includes(SiteTags.PINNED)));
	    framesToClose.forEach(frameProps => windowActions.closeFrame(frames, frameProps, true));
	  }
	}
	Window.propTypes = { appState: React.PropTypes.object, frames: React.PropTypes.array, initWindowState: React.PropTypes.object };
	
	module.exports = Window;

/***/ },
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const AppDispatcher = __webpack_require__(702);
	const EventEmitter = __webpack_require__(208).EventEmitter;
	const appActions = __webpack_require__(704);
	const appConstants = __webpack_require__(234);
	const windowConstants = __webpack_require__(233);
	const config = __webpack_require__(201);
	const settings = __webpack_require__(204);
	const Immutable = __webpack_require__(188);
	const frameStateUtil = __webpack_require__(705);
	const { activeFrameStatePath, frameStatePathForFrame, tabStatePathForFrame } = frameStateUtil;
	const ipc = __webpack_require__(703).ipcRenderer;
	const messages = __webpack_require__(211);
	const debounce = __webpack_require__(209);
	const getSetting = __webpack_require__(202).getSetting;
	const UrlUtil = __webpack_require__(190);
	const { currentWindowId, isFocused } = __webpack_require__(706);
	const { tabFromFrame } = __webpack_require__(705);
	const { l10nErrorText } = __webpack_require__(503);
	const { aboutUrls, newFrameUrl } = __webpack_require__(187);
	const Serializer = __webpack_require__(232);
	const assert = __webpack_require__(707);
	
	let windowState = Immutable.fromJS({
	  activeFrameKey: null,
	  frames: [],
	  tabs: [],
	  closedFrames: [],
	  ui: {
	    tabs: {},
	    mouseInTitlebar: false,
	    menubar: {}
	  },
	  searchDetail: null
	});
	let lastEmittedState;
	
	const CHANGE_EVENT = 'change';
	
	/**
	 * Updates the tab page index to the specified frameProps
	 * @param frameProps Any frame belonging to the page
	 */
	const updateTabPageIndex = frameProps => {
	  // No need to update tab page index if we are given a pinned frame
	  if (frameProps.get('pinnedLocation')) {
	    return;
	  }
	
	  const index = frameStateUtil.getFrameTabPageIndex(windowState.get('frames').filter(frame => !frame.get('pinnedLocation')), frameProps, getSetting(settings.TABS_PER_PAGE));
	  if (index === -1) {
	    return;
	  }
	  windowState = windowState.setIn(['ui', 'tabs', 'tabPageIndex'], index);
	  windowState = windowState.deleteIn(['ui', 'tabs', 'previewTabPageIndex']);
	};
	
	const focusWebview = framePath => {
	  windowState = windowState.mergeIn(framePath, {
	    activeShortcut: 'focus-webview',
	    activeShortcutDetails: null
	  });
	};
	
	let currentKey = 0;
	let currentPartitionNumber = 0;
	const incrementNextKey = () => ++currentKey;
	const incrementPartitionNumber = () => ++currentPartitionNumber;
	
	class WindowStore extends EventEmitter {
	  getState() {
	    return windowState;
	  }
	
	  get state() {
	    return windowState;
	  }
	
	  getFrames() {
	    return this.state.get('frames');
	  }
	
	  getFrame(key) {
	    return frameStateUtil.getFrameByKey(windowState, key);
	  }
	
	  getFrameCount() {
	    return this.state.get('frames').size;
	  }
	
	  emitChanges() {
	    if (lastEmittedState !== windowState) {
	      lastEmittedState = windowState;
	      this.emit(CHANGE_EVENT);
	    }
	  }
	
	  addChangeListener(callback) {
	    this.on(CHANGE_EVENT, callback);
	  }
	
	  removeChangeListener(callback) {
	    this.removeListener(CHANGE_EVENT, callback);
	  }
	}
	
	const addToHistory = frameProps => {
	  let history = frameProps.get('history') || Immutable.fromJS([]);
	  if (!aboutUrls.get(frameProps.get('location'))) {
	    history = history.push(frameProps.get('location'));
	  }
	  return history.slice(-10);
	};
	
	const newFrame = (frameOpts, openInForeground, insertionIndex, nextKey) => {
	  if (frameOpts === undefined) {
	    frameOpts = {};
	  }
	  frameOpts = frameOpts.toJS ? frameOpts.toJS() : frameOpts;
	
	  // handle tabs.create properties
	  insertionIndex = frameOpts.index !== undefined ? frameOpts.index : insertionIndex;
	
	  if (frameOpts.partition) {
	    frameOpts.isPrivate = frameStateUtil.isPrivatePartition(frameOpts.partition);
	    if (frameStateUtil.isSessionPartition(frameOpts.partition)) {
	      frameOpts.partitionNumber = frameStateUtil.getPartitionNumber(frameOpts.partition);
	    }
	  }
	
	  if (frameOpts.disposition) {
	    openInForeground = frameOpts.disposition !== 'background-tab';
	  }
	
	  if (openInForeground === undefined) {
	    openInForeground = true;
	  }
	
	  // evaluate the location
	  frameOpts.location = frameOpts.location || newFrameUrl();
	  if (frameOpts.location && UrlUtil.isURL(frameOpts.location)) {
	    frameOpts.location = UrlUtil.getUrlFromInput(frameOpts.location);
	  } else {
	    // location is a search
	    const defaultURL = windowStore.getState().getIn(['searchDetail', 'searchURL']);
	    if (defaultURL) {
	      frameOpts.location = defaultURL.replace('{searchTerms}', encodeURIComponent(frameOpts.location));
	    } else {
	      // Bad URLs passed here can actually crash the browser
	      frameOpts.location = '';
	    }
	  }
	
	  let partitionNumber = frameOpts.partitionNumber;
	  let nextPartitionNumber = 0;
	  if (partitionNumber) {
	    nextPartitionNumber = partitionNumber;
	    if (currentPartitionNumber < nextPartitionNumber) {
	      currentPartitionNumber = nextPartitionNumber;
	    }
	  } else if (frameOpts.isPartitioned) {
	    nextPartitionNumber = incrementPartitionNumber();
	  }
	
	  // TODO: longer term get rid of parentFrameKey completely instead of
	  // calculating it here.
	  let parentFrameKey = frameOpts.parentFrameKey;
	  if (frameOpts.openerTabId) {
	    parentFrameKey = frameStateUtil.getFrameKeyByTabId(windowState, frameOpts.openerTabId);
	  }
	
	  // Find the closest index to the current frame's index which has
	  // a different ancestor frame key.
	  const frames = windowState.get('frames');
	  if (insertionIndex === undefined) {
	    insertionIndex = frameStateUtil.findIndexForFrameKey(frames, parentFrameKey);
	    if (insertionIndex === -1) {
	      insertionIndex = frames.size;
	    } else {
	      while (insertionIndex < frames.size) {
	        ++insertionIndex;
	        if (!frameStateUtil.isAncestorFrameKey(frames, frames.get(insertionIndex), parentFrameKey)) {
	          break;
	        }
	      }
	    }
	  }
	  if (frameStateUtil.isFrameKeyPinned(frames, parentFrameKey)) {
	    insertionIndex = 0;
	  }
	
	  if (nextKey === undefined) {
	    nextKey = incrementNextKey();
	  }
	
	  windowState = windowState.merge(frameStateUtil.addFrame(windowState, windowState.get('tabs'), frameOpts, nextKey, nextPartitionNumber, openInForeground ? nextKey : windowState.get('activeFrameKey'), insertionIndex));
	
	  if (openInForeground) {
	    const activeFrame = frameStateUtil.getActiveFrame(windowState);
	    updateTabPageIndex(activeFrame);
	    // For about:newtab we want to have the urlbar focused, not the new frame.
	    // Otherwise we want to focus the new tab when it is a new frame in the foreground.
	    if (activeFrame.get('location') !== 'about:newtab') {
	      focusWebview(activeFrameStatePath(windowState));
	    }
	  }
	};
	
	const windowStore = new WindowStore();
	const emitChanges = debounce(windowStore.emitChanges.bind(windowStore), 5);
	
	const applyReducers = (state, action) => [__webpack_require__(711), __webpack_require__(712)].reduce((windowState, reducer) => {
	  const newState = reducer(windowState, action);
	  assert.ok(Immutable.Map.isMap(newState), `Oops! action ${action.actionType} didn't return valid state for reducer:\n\n${reducer}`);
	  return newState;
	}, windowState);
	
	const immediatelyEmittedActions = [windowConstants.WINDOW_SET_NAVBAR_INPUT, windowConstants.WINDOW_SET_FIND_DETAIL, windowConstants.WINDOW_SET_BOOKMARK_DETAIL, windowConstants.WINDOW_AUTOFILL_POPUP_HIDDEN, windowConstants.WINDOW_SET_CONTEXT_MENU_DETAIL, windowConstants.WINDOW_SET_POPUP_WINDOW_DETAIL, windowConstants.WINDOW_SET_PINNED, windowConstants.WINDOW_SET_AUTOFILL_ADDRESS_DETAIL, windowConstants.WINDOW_SET_AUTOFILL_CREDIT_CARD_DETAIL, windowConstants.WINDOW_SET_MODAL_DIALOG_DETAIL];
	
	// Register callback to handle all updates
	const doAction = action => {
	  // console.log(action.actionType, action, windowState.toJS())
	  windowState = applyReducers(windowState, action);
	  switch (action.actionType) {
	    case windowConstants.WINDOW_SET_STATE:
	      windowState = action.windowState;
	      currentKey = windowState.get('frames').reduce((previousVal, frame) => Math.max(previousVal, frame.get('key')), 0);
	      currentPartitionNumber = windowState.get('frames').reduce((previousVal, frame) => Math.max(previousVal, frame.get('partitionNumber')), 0);
	      const activeFrame = frameStateUtil.getActiveFrame(windowState);
	      if (activeFrame && activeFrame.get('location') !== 'about:newtab') {
	        focusWebview(activeFrameStatePath(windowState));
	      }
	      // We should not emit here because the Window already know about the change on startup.
	      return;
	    case windowConstants.WINDOW_SET_FRAME_TAB_ID:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        tabId: action.tabId
	      });
	      break;
	    case windowConstants.WINDOW_SET_FRAME_ERROR:
	      const frameKey = action.frameProps.get('key');
	      // set the previous location to the most recent history item or the default url
	      let previousLocation = action.frameProps.get('history').unshift(config.defaultUrl).findLast(url => url !== action.errorDetails.url);
	
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        aboutDetails: Object.assign({
	          title: action.errorDetails.title || l10nErrorText(action.errorDetails.errorCode),
	          message: action.errorDetails.message,
	          previousLocation,
	          frameKey
	        }, action.errorDetails)
	      });
	      break;
	    case windowConstants.WINDOW_SET_FRAME_TITLE:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        title: action.title
	      });
	      windowState = windowState.mergeIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        title: action.title
	      });
	      break;
	    case windowConstants.WINDOW_SET_FINDBAR_SHOWN:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        findbarShown: action.shown
	      });
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        findbarSelected: action.shown
	      });
	      break;
	    case windowConstants.WINDOW_SET_FINDBAR_SELECTED:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        findbarSelected: action.selected
	      });
	      break;
	    case windowConstants.WINDOW_WEBVIEW_LOAD_START:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        loading: true,
	        provisionalLocation: action.location,
	        startLoadTime: new Date().getTime(),
	        endLoadTime: null
	      });
	      windowState = windowState.mergeIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        loading: true,
	        provisionalLocation: action.location
	      });
	      break;
	    case windowConstants.WINDOW_WEBVIEW_LOAD_END:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        loading: false,
	        endLoadTime: new Date().getTime(),
	        history: addToHistory(action.frameProps)
	      });
	      windowState = windowState.mergeIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        loading: false
	      });
	      break;
	    case windowConstants.WINDOW_SET_FULL_SCREEN:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        isFullScreen: action.isFullScreen !== undefined ? action.isFullScreen : windowState.getIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)].concat('isFullScreen')),
	        showFullScreenWarning: action.showFullScreenWarning
	      });
	      break;
	    case windowConstants.WINDOW_NEW_FRAME:
	      newFrame(action.frameOpts, action.openInForeground);
	      break;
	    case windowConstants.WINDOW_VIEW_KEY:
	      newFrame(action.frameOpts, action.openInForeground);
	      break;
	    case windowConstants.WINDOW_CLOSE_FRAME:
	      // Use the frameProps we passed in, or default to the active frame
	      const frameProps = action.frameProps || frameStateUtil.getActiveFrame(windowState);
	      const index = frameStateUtil.getFramePropsIndex(windowState.get('frames'), frameProps);
	      const activeFrameKey = frameStateUtil.getActiveFrame(windowState).get('key');
	      windowState = windowState.merge(frameStateUtil.removeFrame(windowState.get('frames'), windowState.get('tabs'), windowState.get('closedFrames'), frameProps.set('closedAtIndex', index), activeFrameKey, index, getSetting(settings.TAB_CLOSE_ACTION)));
	      // If we reach the limit of opened tabs per page while closing tabs, switch to
	      // the active tab's page otherwise the user will hang on empty page
	      if (frameStateUtil.getNonPinnedFrameCount(windowState) % getSetting(settings.TABS_PER_PAGE) === 0) {
	        updateTabPageIndex(frameStateUtil.getActiveFrame(windowState));
	        windowState = windowState.deleteIn(['ui', 'tabs', 'fixTabWidth']);
	      }
	      break;
	    case windowConstants.WINDOW_UNDO_CLOSED_FRAME:
	      windowState = windowState.merge(frameStateUtil.undoCloseFrame(windowState, windowState.get('closedFrames')));
	      focusWebview(activeFrameStatePath(windowState));
	      break;
	    case windowConstants.WINDOW_CLEAR_CLOSED_FRAMES:
	      windowState = windowState.set('closedFrames', new Immutable.List());
	      break;
	    case windowConstants.WINDOW_SET_ACTIVE_FRAME:
	      if (!action.frameProps) {
	        break;
	      }
	      windowState = windowState.merge({
	        activeFrameKey: action.frameProps.get('key'),
	        previewFrameKey: null
	      });
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        lastAccessedTime: new Date().getTime()
	      });
	      windowState = windowState.deleteIn(['ui', 'tabs', 'previewTabPageIndex']);
	      updateTabPageIndex(action.frameProps);
	      break;
	    case windowConstants.WINDOW_SET_PREVIEW_FRAME:
	      windowState = windowState.merge({
	        previewFrameKey: action.frameProps && action.frameProps.get('key') !== windowState.get('activeFrameKey') ? action.frameProps.get('key') : null
	      });
	      break;
	    case windowConstants.WINDOW_SET_PREVIEW_TAB_PAGE_INDEX:
	      if (action.previewTabPageIndex !== windowState.getIn(['ui', 'tabs', 'tabPageIndex'])) {
	        windowState = windowState.setIn(['ui', 'tabs', 'previewTabPageIndex'], action.previewTabPageIndex);
	      } else {
	        windowState = windowState.deleteIn(['ui', 'tabs', 'previewTabPageIndex']);
	      }
	      break;
	    case windowConstants.WINDOW_SET_TAB_PAGE_INDEX:
	      if (action.index !== undefined) {
	        windowState = windowState.setIn(['ui', 'tabs', 'tabPageIndex'], action.index);
	        windowState = windowState.deleteIn(['ui', 'tabs', 'previewTabPageIndex']);
	      } else {
	        updateTabPageIndex(action.frameProps);
	      }
	      break;
	    case windowConstants.WINDOW_SET_IS_BEING_DRAGGED_OVER_DETAIL:
	      if (!action.dragOverKey) {
	        windowState = windowState.deleteIn(['ui', 'dragging']);
	      } else {
	        windowState = windowState.mergeIn(['ui', 'dragging', 'draggingOver'], Immutable.fromJS(Object.assign({}, action.dragDetail, { dragOverKey: action.dragOverKey, dragType: action.dragType })));
	      }
	      break;
	    case windowConstants.WINDOW_TAB_MOVE:
	      const sourceFramePropsIndex = frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.sourceFrameProps);
	      let newIndex = frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.destinationFrameProps) + (action.prepend ? 0 : 1);
	      let frames = windowState.get('frames').splice(sourceFramePropsIndex, 1);
	      let tabs = windowState.get('tabs').splice(sourceFramePropsIndex, 1);
	      if (newIndex > sourceFramePropsIndex) {
	        newIndex--;
	      }
	      frames = frames.splice(newIndex, 0, action.sourceFrameProps);
	      tabs = tabs.splice(newIndex, 0, tabFromFrame(action.sourceFrameProps));
	      windowState = windowState.set('frames', frames);
	      windowState = windowState.set('tabs', tabs);
	      // Since the tab could have changed pages, update the tab page as well
	      updateTabPageIndex(frameStateUtil.getActiveFrame(windowState));
	      break;
	    case windowConstants.WINDOW_SET_LINK_HOVER_PREVIEW:
	      windowState = windowState.mergeIn(activeFrameStatePath(windowState), {
	        hrefPreview: action.href,
	        showOnRight: action.showOnRight
	      });
	      break;
	    case windowConstants.WINDOW_SET_THEME_COLOR:
	      if (action.themeColor !== undefined) {
	        windowState = windowState.setIn(frameStatePathForFrame(windowState, action.frameProps).concat(['themeColor']), action.themeColor);
	        windowState = windowState.setIn(tabStatePathForFrame(windowState, action.frameProps).concat(['themeColor']), action.themeColor);
	      }
	      if (action.computedThemeColor !== undefined) {
	        windowState = windowState.setIn(frameStatePathForFrame(windowState, action.frameProps).concat(['computedThemeColor']), action.computedThemeColor);
	        windowState = windowState.setIn(tabStatePathForFrame(windowState, action.frameProps).concat(['computedThemeColor']), action.computedThemeColor);
	      }
	      break;
	    case windowConstants.WINDOW_SET_URL_BAR_FOCUSED:
	      windowState = windowState.setIn(activeFrameStatePath(windowState).concat(['navbar', 'urlbar', 'focused']), action.isFocused);
	      break;
	    case windowConstants.WINDOW_SET_URL_BAR_SELECTED:
	      const urlBarPath = activeFrameStatePath(windowState).concat(['navbar', 'urlbar']);
	      windowState = windowState.mergeIn(urlBarPath, {
	        selected: action.selected
	      });
	      // selection implies focus
	      if (action.selected) {
	        windowState = windowState.setIn(activeFrameStatePath(windowState).concat(['navbar', 'urlbar', 'focused']), true);
	      }
	      break;
	    case windowConstants.WINDOW_SET_ACTIVE_FRAME_SHORTCUT:
	      const framePath = action.frameProps ? ['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)] : activeFrameStatePath(windowState);
	      windowState = windowState.mergeIn(framePath, {
	        activeShortcut: action.activeShortcut,
	        activeShortcutDetails: action.activeShortcutDetails
	      });
	      break;
	    case windowConstants.WINDOW_SET_SEARCH_DETAIL:
	      windowState = windowState.merge({
	        searchDetail: action.searchDetail
	      });
	      break;
	    case windowConstants.WINDOW_SET_FIND_DETAIL:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'findDetail'], action.findDetail);
	      break;
	    case windowConstants.WINDOW_SET_BOOKMARK_DETAIL:
	      if (!action.currentDetail && !action.originalDetail) {
	        windowState = windowState.delete('bookmarkDetail');
	      } else {
	        windowState = windowState.mergeIn(['bookmarkDetail'], {
	          currentDetail: action.currentDetail,
	          originalDetail: action.originalDetail,
	          destinationDetail: action.destinationDetail,
	          shouldShowLocation: action.shouldShowLocation,
	          isBookmarkHanger: action.isBookmarkHanger
	        });
	      }
	      break;
	    case windowConstants.WINDOW_AUTOFILL_SELECTION_CLICKED:
	      ipc.send('autofill-selection-clicked', action.tabId, action.value, action.frontEndId, action.index);
	      windowState = windowState.delete('contextMenuDetail');
	      break;
	    case windowConstants.WINDOW_AUTOFILL_POPUP_HIDDEN:
	    case windowConstants.WINDOW_SET_CONTEXT_MENU_DETAIL:
	      if (!action.detail) {
	        if (windowState.getIn(['contextMenuDetail', 'type']) === 'hamburgerMenu') {
	          windowState = windowState.set('hamburgerMenuWasOpen', true);
	        } else {
	          windowState = windowState.set('hamburgerMenuWasOpen', false);
	        }
	        windowState = windowState.delete('contextMenuDetail');
	
	        if (windowState.getIn(['contextMenuDetail', 'type']) === 'autofill' && windowState.getIn(['contextMenuDetail', 'tabId']) === action.tabId) {
	          if (action.notify) {
	            ipc.send('autofill-popup-hidden', action.tabId);
	          }
	        }
	      } else {
	        if (!(action.detail.get('type') === 'hamburgerMenu' && windowState.get('hamburgerMenuWasOpen'))) {
	          windowState = windowState.set('contextMenuDetail', action.detail);
	        }
	        windowState = windowState.set('hamburgerMenuWasOpen', false);
	      }
	      break;
	    case windowConstants.WINDOW_SET_POPUP_WINDOW_DETAIL:
	      if (!action.detail) {
	        windowState = windowState.delete('popupWindowDetail');
	      } else {
	        windowState = windowState.set('popupWindowDetail', action.detail);
	      }
	      break;
	    case windowConstants.WINDOW_SET_PINNED:
	      // Check if there's already a frame which is pinned.
	      // If so we just want to set it as active.
	      const location = action.frameProps.get('location');
	      const alreadyPinnedFrameProps = windowState.get('frames').find(frame => frame.get('pinnedLocation') && frame.get('pinnedLocation') === location && (action.frameProps.get('partitionNumber') || 0) === (frame.get('partitionNumber') || 0));
	      if (alreadyPinnedFrameProps && action.isPinned) {
	        action.actionType = windowConstants.WINDOW_CLOSE_FRAME;
	        doAction(action);
	        action.actionType = windowConstants.WINDOW_SET_ACTIVE_FRAME;
	        action.frameProps = alreadyPinnedFrameProps;
	        doAction(action);
	      } else {
	        windowState = windowState.setIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'pinnedLocation'], action.isPinned ? location : undefined);
	        windowState = windowState.setIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'pinnedLocation'], action.isPinned ? location : undefined);
	      }
	      // Remove preview frame key when unpinning / pinning
	      // becuase it can get messed up.
	      windowState = windowState.merge({
	        previewFrameKey: null
	      });
	      windowState = windowState.deleteIn(['ui', 'tabs', 'previewTabPageIndex']);
	      break;
	    case windowConstants.WINDOW_SET_AUDIO_MUTED:
	      windowState = windowState.setIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'audioMuted'], action.muted);
	      windowState = windowState.setIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'audioMuted'], action.muted);
	      break;
	    case windowConstants.WINDOW_SET_AUDIO_PLAYBACK_ACTIVE:
	      windowState = windowState.setIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'audioPlaybackActive'], action.audioPlaybackActive);
	      windowState = windowState.setIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'audioPlaybackActive'], action.audioPlaybackActive);
	      break;
	    case windowConstants.WINDOW_SET_FAVICON:
	      windowState = windowState.setIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'icon'], action.favicon);
	      windowState = windowState.setIn(['tabs', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'icon'], action.favicon);
	      break;
	    case windowConstants.WINDOW_SET_LAST_ZOOM_PERCENTAGE:
	      windowState = windowState.setIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'lastZoomPercentage'], action.percentage);
	      break;
	    case windowConstants.WINDOW_SET_MAXIMIZE_STATE:
	      windowState = windowState.setIn(['ui', 'isMaximized'], action.isMaximized);
	      break;
	    case windowConstants.WINDOW_SAVE_POSITION:
	      windowState = windowState.setIn(['ui', 'position'], action.position);
	      break;
	    case windowConstants.WINDOW_SAVE_SIZE:
	      windowState = windowState.setIn(['ui', 'size'], action.size);
	      break;
	    case windowConstants.WINDOW_SET_FULLSCREEN_STATE:
	      windowState = windowState.setIn(['ui', 'isFullScreen'], action.isFullScreen);
	      break;
	    case windowConstants.WINDOW_SET_MOUSE_IN_TITLEBAR:
	      windowState = windowState.setIn(['ui', 'mouseInTitlebar'], action.mouseInTitlebar);
	      break;
	    case windowConstants.WINDOW_SET_NOSCRIPT_VISIBLE:
	      windowState = windowState.setIn(['ui', 'noScriptInfo', 'isVisible'], action.isVisible);
	      break;
	    case windowConstants.WINDOW_SET_SITE_INFO_VISIBLE:
	      windowState = windowState.setIn(['ui', 'siteInfo', 'isVisible'], action.isVisible);
	      break;
	    case windowConstants.WINDOW_SET_BRAVERY_PANEL_DETAIL:
	      if (!action.braveryPanelDetail) {
	        windowState = windowState.delete('braveryPanelDetail');
	      } else {
	        windowState = windowState.mergeIn(['braveryPanelDetail'], {
	          advancedControls: action.braveryPanelDetail.advancedControls,
	          expandAdblock: action.braveryPanelDetail.expandAdblock,
	          expandHttpse: action.braveryPanelDetail.expandHttpse,
	          expandNoScript: action.braveryPanelDetail.expandNoScript,
	          expandFp: action.braveryPanelDetail.expandFp
	        });
	      }
	      break;
	    case windowConstants.WINDOW_SET_CLEAR_BROWSING_DATA_VISIBLE:
	      windowState = windowState.setIn(['ui', 'isClearBrowsingDataPanelVisible'], action.isVisible);
	      break;
	    case windowConstants.WINDOW_SET_IMPORT_BROWSER_DATA_DETAIL:
	      if (!action.importBrowserDataDetail) {
	        windowState = windowState.delete('importBrowserDataDetail');
	      } else {
	        windowState = windowState.set('importBrowserDataDetail', Immutable.fromJS(action.importBrowserDataDetail));
	      }
	      break;
	    case windowConstants.WINDOW_SET_IMPORT_BROWSER_DATA_SELECTED:
	      if (!action.selected) {
	        windowState = windowState.delete('importBrowserDataSelected');
	      } else {
	        windowState = windowState.set('importBrowserDataSelected', Immutable.fromJS(action.selected));
	      }
	      break;
	    case windowConstants.WINDOW_WIDEVINE_PANEL_DETAIL_CHANGED:
	      if (!action.widevinePanelDetail) {
	        windowState = windowState.delete('widevinePanelDetail');
	      } else {
	        windowState = windowState.mergeIn(['widevinePanelDetail'], Immutable.fromJS(action.widevinePanelDetail));
	      }
	      break;
	    case windowConstants.WINDOW_WIDEVINE_SITE_ACCESSED_WITHOUT_INSTALL:
	      const activeLocation = windowState.getIn(activeFrameStatePath(windowState).concat(['location']));
	      windowState = windowState.set('widevinePanelDetail', Immutable.Map({
	        alsoAddRememberSiteSetting: true,
	        location: activeLocation,
	        shown: true
	      }));
	      break;
	    case windowConstants.WINDOW_SET_AUTOFILL_ADDRESS_DETAIL:
	      if (!action.currentDetail && !action.originalDetail) {
	        windowState = windowState.delete('autofillAddressDetail');
	      } else {
	        windowState = windowState.mergeIn(['autofillAddressDetail'], {
	          currentDetail: action.currentDetail,
	          originalDetail: action.originalDetail
	        });
	      }
	      break;
	    case windowConstants.WINDOW_SET_AUTOFILL_CREDIT_CARD_DETAIL:
	      if (!action.currentDetail && !action.originalDetail) {
	        windowState = windowState.delete('autofillCreditCardDetail');
	      } else {
	        windowState = windowState.mergeIn(['autofillCreditCardDetail'], {
	          currentDetail: action.currentDetail,
	          originalDetail: action.originalDetail
	        });
	      }
	      break;
	    case windowConstants.WINDOW_SET_DOWNLOADS_TOOLBAR_VISIBLE:
	      windowState = windowState.setIn(['ui', 'downloadsToolbar', 'isVisible'], action.isVisible);
	      break;
	    case windowConstants.WINDOW_SET_RELEASE_NOTES_VISIBLE:
	      windowState = windowState.setIn(['ui', 'releaseNotes', 'isVisible'], action.isVisible);
	      break;
	    case windowConstants.WINDOW_SET_SECURITY_STATE:
	      let path = frameStatePathForFrame(windowState, action.frameProps);
	      if (action.securityState.secure !== undefined) {
	        windowState = windowState.setIn(path.concat(['security', 'isSecure']), action.securityState.secure);
	      }
	      if (action.securityState.runInsecureContent !== undefined) {
	        windowState = windowState.setIn(path.concat(['security', 'runInsecureContent']), action.securityState.runInsecureContent);
	      }
	      if (action.securityState.certDetails) {
	        windowState = windowState.setIn(path.concat(['security', 'certDetails']), action.securityState.certDetails);
	      }
	      break;
	    case windowConstants.WINDOW_SET_BLOCKED_BY:
	      const blockedByPath = ['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), action.blockType, 'blocked'];
	      let blockedBy = windowState.getIn(blockedByPath) || new Immutable.List();
	      blockedBy = blockedBy.toSet().add(action.location).toList();
	      windowState = windowState.setIn(blockedByPath, blockedBy);
	      break;
	    case windowConstants.WINDOW_SET_REDIRECTED_BY:
	      const redirectedByPath = ['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps), 'httpsEverywhere', action.ruleset];
	      let redirectedBy = windowState.getIn(redirectedByPath) || new Immutable.List();
	      windowState = windowState.setIn(redirectedByPath, redirectedBy.push(action.location));
	      break;
	    case windowConstants.WINDOW_ADD_HISTORY:
	      windowState = windowState.mergeIn(['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)], {
	        history: addToHistory(action.frameProps)
	      });
	      break;
	    case windowConstants.WINDOW_SET_BLOCKED_RUN_INSECURE_CONTENT:
	      const blockedRunInsecureContentPath = ['frames', frameStateUtil.getFramePropsIndex(windowState.get('frames'), action.frameProps)];
	      if (action.source) {
	        let blockedList = windowState.getIn(blockedRunInsecureContentPath.concat(['security', 'blockedRunInsecureContent'])) || new Immutable.List();
	        windowState = windowState.setIn(blockedRunInsecureContentPath.concat(['security', 'blockedRunInsecureContent']), blockedList.push(action.source));
	      } else {
	        windowState = windowState.deleteIn(blockedRunInsecureContentPath.concat(['security', 'blockedRunInsecureContent']));
	      }
	      break;
	    case windowConstants.WINDOW_TOGGLE_MENUBAR_VISIBLE:
	      if (getSetting(settings.AUTO_HIDE_MENU)) {
	        doAction({ actionType: windowConstants.WINDOW_SET_CONTEXT_MENU_DETAIL });
	        // Use value if provided; if not, toggle to opposite.
	        const newVisibleStatus = typeof action.isVisible === 'boolean' ? action.isVisible : !windowState.getIn(['ui', 'menubar', 'isVisible']);
	        // Clear selection when menu is shown
	        if (newVisibleStatus) {
	          doAction({ actionType: windowConstants.WINDOW_SET_MENUBAR_SELECTED_INDEX, index: 0 });
	        }
	        windowState = windowState.setIn(['ui', 'menubar', 'isVisible'], newVisibleStatus);
	      }
	      break;
	    case windowConstants.WINDOW_HIDE_BOOKMARK_HANGER:
	      const hangerShowing = windowState.getIn(['bookmarkDetail', 'isBookmarkHanger']);
	      if (hangerShowing) {
	        windowState = windowState.delete('bookmarkDetail');
	      }
	      break;
	    case windowConstants.WINDOW_RESET_MENU_STATE:
	      doAction({ actionType: windowConstants.WINDOW_SET_POPUP_WINDOW_DETAIL });
	      doAction({ actionType: windowConstants.WINDOW_HIDE_BOOKMARK_HANGER });
	      if (getSetting(settings.AUTO_HIDE_MENU)) {
	        doAction({ actionType: windowConstants.WINDOW_TOGGLE_MENUBAR_VISIBLE, isVisible: false });
	      } else {
	        doAction({ actionType: windowConstants.WINDOW_SET_CONTEXT_MENU_DETAIL });
	      }
	      doAction({ actionType: windowConstants.WINDOW_SET_MENUBAR_SELECTED_INDEX });
	      doAction({ actionType: windowConstants.WINDOW_SET_CONTEXT_MENU_SELECTED_INDEX });
	      doAction({ actionType: windowConstants.WINDOW_SET_BOOKMARKS_TOOLBAR_SELECTED_FOLDER_ID });
	      break;
	    case windowConstants.WINDOW_SET_MENUBAR_SELECTED_INDEX:
	      windowState = windowState.setIn(['ui', 'menubar', 'selectedIndex'], action.index);
	      break;
	    case windowConstants.WINDOW_SET_CONTEXT_MENU_SELECTED_INDEX:
	      windowState = windowState.setIn(['ui', 'contextMenu', 'selectedIndex'], Array.isArray(action.index) ? action.index : null);
	      break;
	    case windowConstants.WINDOW_SET_LAST_FOCUSED_SELECTOR:
	      windowState = windowState.setIn(['ui', 'menubar', 'lastFocusedSelector'], action.selector);
	      break;
	    case windowConstants.WINDOW_SET_BOOKMARKS_TOOLBAR_SELECTED_FOLDER_ID:
	      windowState = windowState.setIn(['ui', 'bookmarksToolbar', 'selectedFolderId'], action.folderId);
	      break;
	    case windowConstants.WINDOW_ON_FOCUS_CHANGED:
	      windowState = windowState.setIn(['ui', 'hasFocus'], action.hasFocus);
	      break;
	    case windowConstants.WINDOW_SET_MODAL_DIALOG_DETAIL:
	      if (action.className && action.props === undefined) {
	        windowState = windowState.deleteIn(['modalDialogDetail', action.className]);
	      } else if (action.className) {
	        windowState = windowState.setIn(['modalDialogDetail', action.className], Immutable.fromJS(action.props));
	      }
	      break;
	    case appConstants.APP_NEW_TAB:
	      newFrame(action.frameProps, action.frameProps.get('disposition') === 'foreground-tab');
	      break;
	    case windowConstants.WINDOW_TAB_CLOSED_WITH_MOUSE:
	      if (frameStateUtil.getNonPinnedFrameCount(windowState) % getSetting(settings.TABS_PER_PAGE) === 0) {
	        windowState = windowState.deleteIn(['ui', 'tabs', 'fixTabWidth']);
	      } else {
	        windowState = windowState.setIn(['ui', 'tabs', 'fixTabWidth'], action.data.fixTabWidth);
	      }
	      break;
	    case windowConstants.WINDOW_TAB_MOUSE_LEAVE:
	      windowState = windowState.deleteIn(['ui', 'tabs', 'fixTabWidth']);
	      break;
	    default:
	      break;
	  }
	
	  // Some events must be emitted right away, such as bound countrols
	  if (immediatelyEmittedActions.includes(action.actionType)) {
	    windowStore.emitChanges();
	  } else {
	    emitChanges();
	  }
	};
	
	ipc.on(messages.SHORTCUT_NEXT_TAB, () => {
	  windowState = frameStateUtil.makeNextFrameActive(windowState);
	  updateTabPageIndex(frameStateUtil.getActiveFrame(windowState));
	  emitChanges();
	});
	
	ipc.on(messages.SHORTCUT_PREV_TAB, () => {
	  windowState = frameStateUtil.makePrevFrameActive(windowState);
	  updateTabPageIndex(frameStateUtil.getActiveFrame(windowState));
	  emitChanges();
	});
	
	ipc.on(messages.SHORTCUT_OPEN_CLEAR_BROWSING_DATA_PANEL, e => {
	  doAction({
	    actionType: windowConstants.WINDOW_SET_CLEAR_BROWSING_DATA_VISIBLE,
	    isVisible: true
	  });
	});
	
	const frameShortcuts = ['stop', 'reload', 'zoom-in', 'zoom-out', 'zoom-reset', 'toggle-dev-tools', 'clean-reload', 'view-source', 'mute', 'save', 'print', 'show-findbar', 'copy', 'find-next', 'find-prev'];
	frameShortcuts.forEach(shortcut => {
	  // Listen for actions on the active frame
	  ipc.on(`shortcut-active-frame-${shortcut}`, (e, args) => {
	    if (shortcut === 'toggle-dev-tools') {
	      appActions.toggleDevTools(frameStateUtil.getActiveFrameTabId(windowState));
	    } else {
	      windowState = windowState.mergeIn(activeFrameStatePath(windowState), {
	        activeShortcut: shortcut,
	        activeShortcutDetails: args
	      });
	      emitChanges();
	    }
	  });
	  // Listen for actions on frame N
	  if (['reload', 'mute'].includes(shortcut)) {
	    ipc.on(`shortcut-frame-${shortcut}`, (e, i, args) => {
	      const path = ['frames', frameStateUtil.findIndexForFrameKey(windowState.get('frames'), i)];
	      windowState = windowState.mergeIn(path, {
	        activeShortcut: shortcut,
	        activeShortcutDetails: args
	      });
	      emitChanges();
	    });
	  }
	});
	
	// Allows the parent process to dispatch window actions
	ipc.on(messages.DISPATCH_ACTION, (e, serializedPayload) => {
	  let action = Serializer.deserialize(serializedPayload);
	  let queryInfo = action.queryInfo || action.frameProps || {};
	  queryInfo = queryInfo.toJS ? queryInfo.toJS() : queryInfo;
	  if (queryInfo.windowId === -2 && isFocused()) {
	    queryInfo.windowId = currentWindowId;
	  }
	  // handle any ipc dispatches that are targeted to this window
	  if (queryInfo.windowId && queryInfo.windowId === currentWindowId) {
	    doAction(action);
	  }
	});
	
	AppDispatcher.register(doAction);
	
	module.exports = windowStore;

/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Serializer = __webpack_require__(232);
	const messages = __webpack_require__(211);
	const electron = __webpack_require__(703);
	'use strict';
	
	class AppDispatcher {
	
	  constructor() {
	    this.callbacks = [];
	    this.promises = [];
	  }
	
	  /**
	   * Register a Store's callback so that it may be invoked by an action.
	   * If the registrant is a renderer process the callback will be stored
	   * locally and an `app-dispatcher-register` message will be sent to the
	   * main process using IPC.
	   * @param {function} callback The callback to be registered.
	   * @return {number} The index of the callback within the _callbacks array.
	   */
	  register(callback) {
	    if (process.type === 'renderer') {
	      const ipc = electron.ipcRenderer;
	      ipc.send('app-dispatcher-register');
	    }
	    this.callbacks.push(callback);
	    return this.callbacks.length - 1; // index
	  }
	
	  unregister(callback) {
	    const index = this.callbacks.indexOf(callback);
	    if (index !== -1) {
	      this.callbacks.splice(index, 1);
	    }
	  }
	
	  /**
	   * dispatch
	   * Dispatches registered callbacks. If `dispatch` is called from the main process
	   * it will run all the registered callbacks. If `dispatch` is called from a renderer
	   * process it will run any local registered callbacks and then send messages.DISPATCH_ACTION
	   * to the main process where the all other registered callbacks will be run. The main
	   * process will not run any callbacks for the renderer process that send messages.DISPATCH_ACTION
	   * @param  {object} payload The data from the action.
	   */
	  dispatch(payload) {
	    if (payload.actionType === undefined) {
	      throw new Error('Dispatcher: Undefined action for payload', payload);
	    }
	    // First create array of promises for callbacks to reference.
	    const resolves = [];
	    const rejects = [];
	    this.promises = this.callbacks.map(function (_, i) {
	      return new Promise(function (resolve, reject) {
	        resolves[i] = resolve;
	        rejects[i] = reject;
	      });
	    });
	    // Dispatch to callbacks and resolve/reject promises.
	    this.callbacks.forEach(function (callback, i) {
	      // Callback can return an obj, to resolve, or a promise, to chain.
	      // See waitFor() for why this might be useful.
	      Promise.resolve(callback(payload)).then(function () {
	        resolves[i](payload);
	      }, function () {
	        rejects[i](new Error('Dispatcher callback unsuccessful'));
	      });
	    });
	    this.promises = [];
	
	    if (process.type === 'renderer') {
	      const ipc = electron.ipcRenderer;
	      ipc.send(messages.DISPATCH_ACTION, Serializer.serialize(payload));
	    }
	  }
	
	  waitFor(promiseIndexes, callback) {
	    var selectedPromises = promiseIndexes.map(index => this.promises[index]);
	    return Promise.all(selectedPromises).then(callback);
	  }
	}
	
	const appDispatcher = new AppDispatcher();
	
	if (process.type === 'browser') {
	  const electron = __webpack_require__(703);
	  const ipcMain = electron.ipcMain;
	  ipcMain.on('app-dispatcher-register', event => {
	    let registrant = event.sender;
	    const callback = function (payload) {
	      try {
	        if (registrant.isDestroyed()) {
	          appDispatcher.unregister(callback);
	        } else {
	          registrant.send(messages.DISPATCH_ACTION, Serializer.serialize(payload));
	        }
	      } catch (e) {
	        console.error('unregistering callback', e);
	        appDispatcher.unregister(callback);
	      }
	    };
	    event.sender.on('crashed', () => {
	      appDispatcher.unregister(callback);
	    });
	    event.sender.on('destroyed', () => {
	      appDispatcher.unregister(callback);
	    });
	    appDispatcher.register(callback);
	  });
	
	  ipcMain.on(messages.DISPATCH_ACTION, (event, payload) => {
	    payload = Serializer.deserialize(payload);
	
	    let queryInfo = payload.queryInfo || payload.frameProps || (payload.queryInfo = {});
	    queryInfo = queryInfo.toJS ? queryInfo.toJS() : queryInfo;
	    if (!event.sender.isDestroyed() && event.sender.hostWebContents) {
	      // received from an extension
	      // only extension messages will have a hostWebContents
	      // because other messages come from the main window
	
	      // default to the windowId of the hostWebContents
	      if (!queryInfo.windowId) {
	        let win = __webpack_require__(703).BrowserWindow.fromWebContents(event.sender.hostWebContents);
	        if (!win) {
	          return;
	        }
	        queryInfo.windowId = win.id;
	      }
	      // add queryInfo if we only had frameProps before
	      payload.queryInfo = queryInfo;
	      payload.senderTabId = event.sender.getId();
	
	      appDispatcher.dispatch(payload);
	    } else {
	      // received from a browser window
	      appDispatcher.dispatch(payload);
	    }
	  });
	}
	
	module.exports = appDispatcher;

/***/ },
/* 703 */
/***/ function(module, exports) {

	module.exports = chrome;

/***/ },
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const AppDispatcher = __webpack_require__(702);
	const appConstants = __webpack_require__(234);
	
	const appActions = {
	  /**
	   * Dispatches an event to the main process to replace the app state
	   * This is called from the main process on startup before anything else
	   *
	   * @param {object} appState - Initial app state object (not yet converted to ImmutableJS)
	   */
	  setState: function (appState) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_STATE,
	      appState
	    });
	  },
	
	  /**
	   * Dispatches an event to the main process to create a new window.
	   * @param {Object} frameOpts - Options for the first frame in the window.
	   * @param {Object} browserOpts - Options for the browser.
	   * @param {Object} restoredState - State for the window to restore.
	   * @param {function} cb - Callback to call after the window is loaded, will only work if called from the main process.
	   */
	  newWindow: function (frameOpts, browserOpts, restoredState, cb) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_NEW_WINDOW,
	      frameOpts,
	      browserOpts,
	      restoredState,
	      cb
	    });
	  },
	
	  closeWindow: function (windowId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CLOSE_WINDOW,
	      windowId
	    });
	  },
	
	  windowClosed: function (windowValue) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_WINDOW_CLOSED,
	      windowValue
	    });
	  },
	
	  windowCreated: function (windowValue) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_WINDOW_CREATED,
	      windowValue
	    });
	  },
	
	  windowUpdated: function (windowValue) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_WINDOW_UPDATED,
	      windowValue
	    });
	  },
	
	  /**
	   * A new tab has been requested
	   * @param {Object} createProperties - windowId, url, active, openerTabId
	   */
	  newTab: function (frameProps) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_NEW_TAB,
	      frameProps
	    });
	  },
	
	  /**
	   * A new tab has been created
	   * @param {Object} tabValue
	   */
	  tabCreated: function (tabValue) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_TAB_CREATED,
	      tabValue
	    });
	  },
	
	  /**
	   * A tab has been updated
	   * @param {Object} tabValue
	   */
	  tabUpdated: function (tabValue) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_TAB_UPDATED,
	      tabValue
	    });
	  },
	
	  /**
	   * Closes an open tab
	   * @param {number} tabId
	   */
	  tabClosed: function (tabValue) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_TAB_CLOSED,
	      tabValue
	    });
	  },
	
	  /**
	   * Adds a site to the site list
	   * @param {Object} siteDetail - Properties of the site in question, can also be an array of siteDetail
	   * @param {string} tag - A tag to associate with the site. e.g. bookmarks.
	   * @param {string} originalSiteDetail - If specified, the original site detail to edit / overwrite.
	   * @param {boolean} destinationIsParent - Whether or not the destinationDetail should be considered the new parent.
	   *   The details of the old entries will be modified if this is set, otherwise only the tag will be added.
	   */
	  addSite: function (siteDetail, tag, originalSiteDetail, destinationDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ADD_SITE,
	      siteDetail,
	      tag,
	      originalSiteDetail,
	      destinationDetail
	    });
	  },
	
	  /**
	   * Clears history (all sites without tags). Indirectly called by appActions.onClearBrowsingData().
	   */
	  clearHistory: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CLEAR_HISTORY
	    });
	  },
	
	  /**
	   * Removes a site from the site list
	   * @param {Object} siteDetail - Properties of the site in question
	   * @param {string} tag - A tag to associate with the site. e.g. bookmarks.
	   */
	  removeSite: function (siteDetail, tag) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_REMOVE_SITE,
	      siteDetail,
	      tag
	    });
	  },
	
	  /**
	   * Dispatches a message to move a site locations.
	   *
	   * @param {string} sourceDetail - the location, partitionNumber, etc of the source moved site
	   * @param {string} destinationDetail - the location, partitionNumber, etc of the destination moved site
	   * @param {boolean} prepend - Whether or not to prepend to the destinationLocation
	   *   If false, the destinationDetail is considered a sibling.
	   * @param {boolean} destinationIsParent - Whether or not the destinationDetail should be considered the new parent.
	   */
	  moveSite: function (sourceDetail, destinationDetail, prepend, destinationIsParent) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_MOVE_SITE,
	      sourceDetail,
	      destinationDetail,
	      prepend,
	      destinationIsParent
	    });
	  },
	
	  /**
	   * Dispatches a message to add/edit download details
	   * If set, also indicates that add/edit is shown
	   * @param {string} downloadId - A unique ID for the download
	   * @param {Object} downloadDetail - Properties for the download
	   */
	  mergeDownloadDetail: function (downloadId, downloadDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_MERGE_DOWNLOAD_DETAIL,
	      downloadId,
	      downloadDetail
	    });
	  },
	
	  /**
	   * Dispatches a message to clear all completed downloads
	   */
	  clearCompletedDownloads: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CLEAR_COMPLETED_DOWNLOADS
	    });
	  },
	
	  /**
	   * Dispatches a message indicating ledger recovery succeeded
	   */
	  ledgerRecoverySucceeded: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_LEDGER_RECOVERY_STATUS_CHANGED,
	      recoverySucceeded: true
	    });
	  },
	
	  /**
	   * Dispatches a message indicating ledger recovery failed
	   */
	  ledgerRecoveryFailed: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_LEDGER_RECOVERY_STATUS_CHANGED,
	      recoverySucceeded: false
	    });
	  },
	
	  /**
	   * Sets the default window size / position
	   * @param {Array} size - [width, height]
	   * @param {Array} position - [x, y]
	   */
	  defaultWindowParamsChanged: function (size, position) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DEFAULT_WINDOW_PARAMS_CHANGED,
	      size,
	      position
	    });
	  },
	
	  /**
	   * Sets the etag value for a downloaded data file.
	   * This is used for keeping track of when to re-download adblock and tracking
	   * protection data.
	   * @param {string} resourceName - 'adblock' or 'trackingProtection'
	   * @param {string} etag - The etag of the reosurce from the http response
	   */
	  setResourceETag: function (resourceName, etag) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_DATA_FILE_ETAG,
	      resourceName,
	      etag
	    });
	  },
	
	  /**
	   * Sets the lastCheck date.getTime() value for the data file
	   * @param {string} resourceName - 'adblock', 'trackingProtection', or 'httpsEverywhere'
	   * @param {number} lastCheck - The last check date of the reosurce from the http response
	   */
	  setResourceLastCheck: function (resourceName, lastCheckVersion, lastCheckDate) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_DATA_FILE_LAST_CHECK,
	      resourceName,
	      lastCheckVersion,
	      lastCheckDate
	    });
	  },
	
	  /**
	   * Sets whether the resource is enabled or not.
	   * @param {string} resourceName - 'adblock', 'trackingProtection', or 'httpsEverywhere'
	   * @param {boolean} enabled - true if the resource is enabled.
	   */
	  setResourceEnabled: function (resourceName, enabled) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_RESOURCE_ENABLED,
	      resourceName,
	      enabled
	    });
	  },
	
	  /**
	   * Indicates a resource is ready
	   * @param {string} resourceName - 'widevine'
	   */
	  resourceReady: function (resourceName) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_RESOURCE_READY,
	      resourceName
	    });
	  },
	
	  /**
	  * Checks how many resources were blocked.
	  * @param {string} resourceName - 'adblock', 'trackingProtection', or 'httpsEverywhere'
	  * @param {number} count - number of blocked resources to add to the global count
	  */
	  addResourceCount: function (resourceName, count) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ADD_RESOURCE_COUNT,
	      resourceName,
	      count
	    });
	  },
	
	  /**
	   * Sets the update.lastCheckTimestamp to the current
	   * epoch timestamp (milliseconds)
	   */
	  setUpdateLastCheck: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_UPDATE_LAST_CHECK
	    });
	  },
	
	  /**
	   * Sets the update status
	   * @param {string} status - update status from js/constants/updateStatus.js.
	   * @param {boolean} verbose - Whether to show UI for all the update steps.
	   * @param {object} metadata - Metadata from the pdate server, with info like release notes.
	   */
	  setUpdateStatus: function (status, verbose, metadata) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_UPDATE_STATUS,
	      status,
	      verbose,
	      metadata
	    });
	  },
	
	  /**
	   * Saves login credentials
	   * @param {Object} passwordDetail - login details
	   */
	  savePassword: function (passwordDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ADD_PASSWORD,
	      passwordDetail
	    });
	  },
	
	  /**
	   * Deletes login credentials
	   * @param {Object} passwordDetail - login details
	   */
	  deletePassword: function (passwordDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_REMOVE_PASSWORD,
	      passwordDetail
	    });
	  },
	
	  /**
	   * Deletes all saved login credentials
	   */
	  clearPasswords: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CLEAR_PASSWORDS
	    });
	  },
	
	  /**
	   * Changes an application level setting
	   * @param {string} key - The key name for the setting
	   * @param {string} value - The value of the setting
	   */
	  changeSetting: function (key, value) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CHANGE_SETTING,
	      key,
	      value
	    });
	  },
	
	  /**
	   * Change a hostPattern's config
	   * @param {string} hostPattern - The host pattern to update the config for
	   * @param {string} key - The config key to update
	   * @param {string|number} value - The value to update to
	   * @param {boolean} temp - Whether to change temporary or persistent
	   *   settings. defaults to false (persistent).
	   */
	  changeSiteSetting: function (hostPattern, key, value, temp) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CHANGE_SITE_SETTING,
	      hostPattern,
	      key,
	      value,
	      temporary: temp || false
	    });
	  },
	
	  /**
	   * Removes a site setting
	   * @param {string} hostPattern - The host pattern to update the config for
	   * @param {string} key - The config key to update
	   * @param {boolean} temp - Whether to change temporary or persistent
	   *   settings. defaults to false (persistent).
	   */
	  removeSiteSetting: function (hostPattern, key, temp) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_REMOVE_SITE_SETTING,
	      hostPattern,
	      key,
	      temporary: temp || false
	    });
	  },
	
	  /**
	   * Updates ledger information for the payments pane
	   * @param {object} ledgerInfo - the current ledger state
	   */
	  updateLedgerInfo: function (ledgerInfo) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_UPDATE_LEDGER_INFO,
	      ledgerInfo
	    });
	  },
	
	  /**
	   * Updates publisher information for the payments pane
	   * @param {object} publisherInfo - the current publisher synopsis
	   */
	  updatePublisherInfo: function (publisherInfo) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_UPDATE_PUBLISHER_INFO,
	      publisherInfo
	    });
	  },
	
	  /**
	   * Shows a message box in the notification bar
	   * @param {{message: string, buttons: Array.<string>, frameOrigin: string, options: Object}} detail
	   */
	  showMessageBox: function (detail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SHOW_MESSAGE_BOX,
	      detail
	    });
	  },
	
	  /**
	   * Hides a message box in the notification bar
	   * @param {string} message
	   */
	  hideMessageBox: function (message) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_HIDE_MESSAGE_BOX,
	      message
	    });
	  },
	
	  /**
	   * Clears all message boxes for a given origin.
	   * @param {string} origin
	   */
	  clearMessageBoxes: function (origin) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CLEAR_MESSAGE_BOXES,
	      origin
	    });
	  },
	
	  /**
	   * Adds a word to the dictionary
	   * @param {string} word - The word to add
	   * @param {boolean} learn - true if the word should be learned, false if ignored
	   */
	  addWord: function (word, learn) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ADD_WORD,
	      word,
	      learn
	    });
	  },
	
	  /**
	   * Adds a word to the dictionary
	   * @param {string} locale - The locale to set for the dictionary
	   */
	  setDictionary: function (locale) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_DICTIONARY,
	      locale
	    });
	  },
	
	  /**
	   * Adds information about pending basic auth login requests
	   * @param {number} tabId - The tabId that generated the request
	   * @param {string} detail - login request info
	   */
	  setLoginRequiredDetail: function (tabId, detail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_LOGIN_REQUIRED_DETAIL,
	      tabId,
	      detail
	    });
	  },
	
	  setLoginResponseDetail: function (tabId, detail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_LOGIN_RESPONSE_DETAIL,
	      tabId,
	      detail
	    });
	  },
	
	  /**
	   * Clears the data specified in clearDataDetail
	   * @param {object} clearDataDetail - the app data to clear as per doc/state.md's clearBrowsingDataDefaults
	   */
	  onClearBrowsingData: function (clearDataDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ON_CLEAR_BROWSING_DATA,
	      clearDataDetail
	    });
	  },
	
	  /**
	   * Import browser data specified in selected
	   * @param {object} selected - the browser data to import as per doc/state.md's importBrowserDataSelected
	   */
	  importBrowserData: function (selected) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_IMPORT_BROWSER_DATA,
	      selected
	    });
	  },
	
	  /**
	   * Add address data
	   * @param {object} detail - the address to add as per doc/state.md's autofillAddressDetail
	   * @param {object} originalDetail - the original address before editing
	   */
	  addAutofillAddress: function (detail, originalDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ADD_AUTOFILL_ADDRESS,
	      detail,
	      originalDetail
	    });
	  },
	
	  /**
	   * Remove address data
	   * @param {object} detail - the address to remove as per doc/state.md's autofillAddressDetail
	   */
	  removeAutofillAddress: function (detail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_REMOVE_AUTOFILL_ADDRESS,
	      detail
	    });
	  },
	
	  /**
	   * Add credit card data
	   * @param {object} detail - the credit card to add as per doc/state.md's autofillCreditCardDetail
	   * @param {object} originalDetail - the original credit card before editing
	   */
	  addAutofillCreditCard: function (detail, originalDetail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ADD_AUTOFILL_CREDIT_CARD,
	      detail,
	      originalDetail
	    });
	  },
	
	  /**
	   * Remove credit card data
	   * @param {object} detail - the credit card to remove as per doc/state.md's autofillCreditCardDetail
	   */
	  removeAutofillCreditCard: function (detail) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_REMOVE_AUTOFILL_CREDIT_CARD,
	      detail
	    });
	  },
	
	  /**
	   * Autofill data changed
	   * @param {Array} addressGuids - the guid array to access address entries in autofill DB
	   * @param {Array} creditCardGuids - the guid array to access credit card entries in autofill DB
	   */
	  autofillDataChanged: function (addressGuids, creditCardGuids) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_AUTOFILL_DATA_CHANGED,
	      addressGuids,
	      creditCardGuids
	    });
	  },
	
	  /**
	   * Dispatches a message when appWindowId loses focus
	   * Dispatches a message when windowId loses focus
	   *
	   * @param {Number} windowId - the unique id of the window
	   */
	  windowBlurred: function (windowId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_WINDOW_BLURRED,
	      windowId: windowId
	    });
	  },
	
	  /**
	   * Saves current menubar template for use w/ Windows titlebar
	   * @param {Object} menubarTemplate - JSON used to build the menu
	   */
	  setMenubarTemplate: function (menubarTemplate) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SET_MENUBAR_TEMPLATE,
	      menubarTemplate
	    });
	  },
	
	  /**
	   * Dispatches a message when the network is re-connected
	   * after being disconnected
	   */
	  networkConnected: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_NETWORK_CONNECTED
	    });
	  },
	
	  /**
	   * Dispatches a message when the network is disconnected
	   */
	  networkDisconnected: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_NETWORK_DISCONNECTED
	    });
	  },
	
	  /**
	   * Dispatch a message to set default browser
	   *
	   * @param {boolean} useBrave - whether set Brave as default browser
	   */
	  defaultBrowserUpdated: function (useBrave) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DEFAULT_BROWSER_UPDATED,
	      useBrave
	    });
	  },
	
	  /**
	   * Dispatch a message to indicate default browser check is complete
	   */
	  defaultBrowserCheckComplete: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DEFAULT_BROWSER_CHECK_COMPLETE
	    });
	  },
	
	  /**
	   * Notify the AppStore to provide default history values.
	   */
	  populateHistory: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_POPULATE_HISTORY
	    });
	  },
	
	  allowFlashOnce: function (tabId, url, isPrivate) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ALLOW_FLASH_ONCE,
	      tabId,
	      url,
	      isPrivate
	    });
	  },
	
	  allowFlashAlways: function (tabId, url) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_ALLOW_FLASH_ALWAYS,
	      tabId,
	      url
	    });
	  },
	
	  /**
	   * Dispatch a message to copy data URL to clipboard
	   **/
	  dataURLCopied: function (dataURL, html, text) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DATA_URL_COPIED,
	      dataURL,
	      html,
	      text
	    });
	  },
	
	  /**
	   * Dispatches a message when the app is shutting down.
	   */
	  shuttingDown: function () {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_SHUTTING_DOWN
	    });
	  },
	
	  /**
	   * Dispatches a message when a download is being revealed.
	   * Typically this will open the download directory in finder / explorer and select the icon.
	   * @param {string} downloadId - ID of the download being revealed
	   */
	  downloadRevealed: function (downloadId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_REVEALED,
	      downloadId
	    });
	  },
	
	  /**
	   * Dispatches a message when a download is being opened.
	   * @param {string} downloadId - ID of the download being opened
	   */
	  downloadOpened: function (downloadId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_OPENED,
	      downloadId
	    });
	  },
	
	  /**
	   * Dispatches a message when an electron download action is being performed (pause, resume, cancel)
	   * @param {string} downloadId - ID of the download item the action is being performed to
	   * @param {string} downloadAction - the action to perform from constants/electronDownloadItemActions.js
	   */
	  downloadActionPerformed: function (downloadId, downloadAction) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_ACTION_PERFORMED,
	      downloadId,
	      downloadAction
	    });
	  },
	
	  /**
	   * Dispatches a message when a download URL is being copied to the clipboard
	   * @param {string} downloadId - ID of the download item being copied to the clipboard
	   */
	  downloadCopiedToClipboard: function (downloadId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_COPIED_TO_CLIPBOARD,
	      downloadId
	    });
	  },
	
	  /**
	   * Dispatches a message when a download is being deleted
	   * @param {string} downloadId - ID of the download item being deleted
	   */
	  downloadDeleted: function (downloadId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_DELETED,
	      downloadId
	    });
	  },
	
	  /**
	   * Dispatches a message when a download is being cleared
	   * @param {string} downloadId - ID of the download item being cleared
	   */
	  downloadCleared: function (downloadId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_CLEARED,
	      downloadId
	    });
	  },
	
	  /**
	   * Dispatches a message when a download is being redownloaded
	   * @param {string} downloadId - ID of the download item being redownloaded
	   */
	  downloadRedownloaded: function (downloadId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_DOWNLOAD_REDOWNLOADED,
	      downloadId
	    });
	  },
	
	  /**
	   * Dispatches a message when text is updated to the clipboard
	   * @param {string} text - clipboard text which is copied
	   */
	  clipboardTextCopied: function (text) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_CLIPBOARD_TEXT_UPDATED,
	      text
	    });
	  },
	
	  /**
	   * Dispatches a message to toogle the dev tools on/off for the specified tabId
	   * @param {number} tabId - The tabId
	   */
	  toggleDevTools: function (tabId) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_TAB_TOGGLE_DEV_TOOLS,
	      tabId
	    });
	  },
	
	  /**
	   * Dispatches a message when a tab is being cloned
	   * @param {number} tabId - The tabId of the tab to clone
	   * @param {object} options - object containing options such as acive, back, and forward booleans
	   */
	  tabCloned: function (tabId, options) {
	    AppDispatcher.dispatch({
	      actionType: appConstants.APP_TAB_CLONED,
	      tabId,
	      options
	    });
	  }
	
	};
	
	module.exports = appActions;

/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	const config = __webpack_require__(201);
	const { tabCloseAction } = __webpack_require__(206);
	const urlParse = __webpack_require__(192);
	
	const matchFrame = (queryInfo, frame) => {
	  queryInfo = queryInfo.toJS ? queryInfo.toJS() : queryInfo;
	  return !Object.keys(queryInfo).map(queryKey => frame.get(queryKey) === queryInfo[queryKey]).includes(false);
	};
	
	function query(windowState, queryInfo) {
	  return windowState.get('frames').filter(matchFrame.bind(null, queryInfo));
	}
	
	function find(windowState, queryInfo) {
	  return windowState.get('frames').find(matchFrame.bind(null, queryInfo));
	}
	
	function isFrameKeyActive(windowState, frameKey) {
	  return windowState.get('activeFrameKey') === frameKey;
	}
	
	function getFrameDisplayIndex(windowState, frame) {
	  return findDisplayIndexForFrameKey(windowState.get('frames'), frame);
	}
	
	function getFrameIndex(windowState, frame) {
	  return findIndexForFrameKey(windowState.get('frames'), frame);
	}
	
	function getActiveFrameDisplayIndex(windowState) {
	  return getFrameDisplayIndex(windowState, windowState.get('activeFrameKey'));
	}
	
	function getActiveFrameIndex(windowState) {
	  return getFrameIndex(windowState, windowState.get('activeFrameKey'));
	}
	
	function getActiveFrameTabId(windowState) {
	  const activeFrame = getActiveFrame(windowState);
	  return activeFrame && activeFrame.get('tabId');
	}
	
	function getFrameByIndex(windowState, i) {
	  return windowState.getIn(['frames', i]);
	}
	
	// This will eventually go away fully when we replace frameKey by tabId
	function getFrameKeyByTabId(windowState, tabId) {
	  let parentFrameKey;
	  const openerFrame = getFrameByTabId(windowState, tabId);
	  if (openerFrame) {
	    parentFrameKey = openerFrame.get('key');
	  }
	  return parentFrameKey;
	}
	
	function getFrameKeysByDisplayIndex(frames) {
	  let framesByDisplayIndex = [[], []];
	  frames.forEach(frame => {
	    let key = frame.get('key');
	    if (frame.get('pinnedLocation')) {
	      framesByDisplayIndex[0].push(key);
	    } else {
	      framesByDisplayIndex[1].push(key);
	    }
	  });
	  return framesByDisplayIndex.reduce(function (a, b) {
	    return a.concat(b);
	  }, []);
	}
	
	function getFrameByDisplayIndex(windowState, i) {
	  let frames = getFrameKeysByDisplayIndex(windowState.get('frames'));
	  let key = frames[i];
	  return getFrameByKey(windowState, key);
	}
	
	function getFrameByKey(windowState, key) {
	  return find(windowState, { key });
	}
	
	function isFrameKeyPinned(frames, key) {
	  if (typeof key !== 'number') {
	    return false;
	  }
	  const frame = frames.find(matchFrame.bind(null, { key }));
	  return frame ? frame.get('pinnedLocation') : false;
	}
	
	function getNonPinnedFrameCount(windowState) {
	  return windowState.get('frames').filter(frame => !frame.get('pinnedLocation')).size;
	}
	
	function getFrameByTabId(windowState, tabId) {
	  return find(windowState, { tabId });
	}
	
	function getActiveFrame(windowState) {
	  const activeFrameIndex = getActiveFrameIndex(windowState);
	  return windowState.get('frames').get(activeFrameIndex);
	}
	
	function setActiveFrameDisplayIndex(windowState, i) {
	  const frame = getFrameByDisplayIndex(windowState, i);
	  if (!frame) {
	    return windowState;
	  }
	
	  return setActiveFrameKey(windowState, frame.get('key'));
	}
	
	function setActiveFrameIndex(windowState, i) {
	  const frame = getFrameByIndex(windowState, i);
	  if (!frame) {
	    return windowState;
	  }
	
	  return setActiveFrameKey(windowState, frame.get('key'));
	}
	
	function setActiveFrameKey(windowState, activeFrameKey) {
	  return windowState.merge({
	    activeFrameKey: activeFrameKey,
	    previewFrameKey: null
	  });
	}
	
	function makeNextFrameActive(windowState) {
	  const activeFrameIndex = getActiveFrameDisplayIndex(windowState);
	  return setActiveFrameDisplayIndex(windowState, (activeFrameIndex + 1) % windowState.get('frames').size);
	}
	
	function makePrevFrameActive(windowState) {
	  const activeFrameIndex = getActiveFrameDisplayIndex(windowState);
	  return setActiveFrameDisplayIndex(windowState, (windowState.get('frames').size + activeFrameIndex - 1) % windowState.get('frames').size);
	}
	
	/**
	 * @param {Object} windowState
	 * @param {Object} frameProps
	 * @param {String} propName
	 * @return {Object} the value of the propName associated with frameProps
	 */
	function getFramePropValue(windowState, frameProps, propName) {
	  return windowState.getIn(getFramePropPath(windowState, frameProps, propName));
	}
	
	/**
	 * @param {Object} windowState
	 * @param {Object} frameProps
	 * @param {String} propName
	 * @return {Object} the path of the propName in windowState
	 */
	function getFramePropPath(windowState, frameProps, propName) {
	  return ['frames', getFramePropsIndex(windowState.get('frames'), frameProps), propName];
	}
	
	/**
	 * Obtains the index for the specified frame key
	 */
	function findIndexForFrameKey(frames, key) {
	  return frames.findIndex(matchFrame.bind(null, { key }));
	}
	
	/**
	 * Obtains the display index for the specified frame key
	 */
	function findDisplayIndexForFrameKey(frames, key) {
	  return getFrameKeysByDisplayIndex(frames).findIndex(displayKey => displayKey === key);
	}
	
	/**
	 * Obtains the frameProps index in the frames
	 */
	function getFramePropsIndex(frames, frameProps) {
	  if (!frameProps) {
	    return -1;
	  }
	  let queryInfo = frameProps.toJS ? frameProps.toJS() : frameProps;
	  if (queryInfo.tabId) {
	    queryInfo = {
	      tabId: queryInfo.tabId
	    };
	  }
	  if (queryInfo.key) {
	    queryInfo = {
	      key: queryInfo.key
	    };
	  }
	  return frames.findIndex(matchFrame.bind(null, queryInfo));
	}
	
	/**
	 * Find frame that was accessed last
	 */
	function getFrameByLastAccessedTime(frames) {
	  const frameProps = frames.toJS().reduce((pre, cur) => {
	    return cur.pinnedLocation === undefined && cur.lastAccessedTime && cur.lastAccessedTime > pre.lastAccessedTime ? cur : pre;
	  }, {
	    lastAccessedTime: 0
	  });
	
	  return frameProps.lastAccessedTime === 0 ? -1 : getFramePropsIndex(frames, frameProps);
	}
	
	/**
	 * Determines if the specified frame was opened from the specified
	 * ancestorFrameKey.
	 *
	 * For example you may go to google.com and open 3 links in new tabs:
	 * G g1 g2 g3
	 * Then you may change to g1 and open another tab:
	 * G g1 g1.1 g2 g3
	 * But then you may go back to google.com and open another tab.
	 * It should go like so:
	 * G g1 g1.1 g2 g3 g4
	 */
	function isAncestorFrameKey(frames, frame, parentFrameKey) {
	  if (!frame || !frame.get('parentFrameKey')) {
	    return false;
	  }
	
	  if (frame.get('parentFrameKey') === parentFrameKey) {
	    return true;
	  }
	
	  // So there is a parentFrameKey but it isn't the specified one.
	  // Check recursively for each of the parentFrame's ancestors to see
	  // if we have a match.
	  const parentFrameIndex = findIndexForFrameKey(frames, frame.get('parentFrameKey'));
	  const parentFrame = frames.get(parentFrameIndex);
	  if (parentFrameIndex === -1 || !parentFrame.get('parentFrameKey')) {
	    return false;
	  }
	  return isAncestorFrameKey(frames, parentFrame, parentFrameKey);
	}
	
	function getPartitionNumber(partition) {
	  console.log(partition);
	  const regex = /partition-(\d+)/;
	  const matches = regex.exec(partition);
	  return matches && matches[0];
	}
	
	function isPrivatePartition(partition) {
	  return partition && !partition.startsWith('persist:');
	}
	
	function isSessionPartition(partition) {
	  return partition && partition.startsWith('persist:partition-');
	}
	
	function getPartition(frameOpts) {
	  let partition = 'persist:default';
	  if (frameOpts.get('isPrivate')) {
	    partition = 'default';
	  } else if (frameOpts.get('partitionNumber')) {
	    partition = `persist:partition-${frameOpts.get('partitionNumber')}`;
	  }
	  return partition;
	}
	
	/**
	 * Returns an object in the same format that was passed to it (ImmutableJS/POD)
	 * for the subset of frame data that is used for tabs.
	 */
	const tabFromFrame = frame => {
	  return frame.toJS ? Immutable.fromJS({
	    themeColor: frame.get('themeColor'),
	    computedThemeColor: frame.get('computedThemeColor'),
	    icon: frame.get('icon'),
	    audioPlaybackActive: frame.get('audioPlaybackActive'),
	    audioMuted: frame.get('audioMuted'),
	    title: frame.get('title'),
	    isPrivate: frame.get('isPrivate'),
	    partitionNumber: frame.get('partitionNumber'),
	    frameKey: frame.get('key'),
	    loading: frame.get('loading'),
	    provisionalLocation: frame.get('provisionalLocation'),
	    pinnedLocation: frame.get('pinnedLocation'),
	    location: frame.get('location')
	  }) : {
	    themeColor: frame.themeColor,
	    computedThemeColor: frame.computedThemeColor,
	    icon: frame.icon,
	    audioPlaybackActive: frame.audioPlaybackActive,
	    audioMuted: frame.audioMuted,
	    title: frame.title,
	    isPrivate: frame.isPrivate,
	    partitionNumber: frame.partitionNumber,
	    frameKey: frame.key,
	    loading: frame.loading,
	    provisionalLocation: frame.provisionalLocation,
	    pinnedLocation: frame.pinnedLocation,
	    location: frame.location
	  };
	};
	
	/**
	 * Adds a frame specified by frameOpts and newKey and sets the activeFrameKey
	 * @return Immutable top level application state ready to merge back in
	 */
	function addFrame(windowState, tabs, frameOpts, newKey, partitionNumber, activeFrameKey, insertionIndex) {
	  const frames = windowState.get('frames');
	  const url = frameOpts.location || config.defaultUrl;
	
	  // delayedLoadUrl is used as a placeholder when the new frame is created
	  // from a renderer initiated navigation (window.open, cmd/ctrl-click, etc...)
	  const delayedLoadUrl = frameOpts.delayedLoadUrl;
	  delete frameOpts.delayedLoadUrl;
	  const urlBarFocused = activeFrameKey === newKey && url === config.defaultUrl && delayedLoadUrl === undefined;
	  const location = delayedLoadUrl || url; // page url
	
	  // Only add pin requests if it's not already added
	  const isPinned = frameOpts.isPinned;
	  delete frameOpts.isPinned;
	  if (isPinned) {
	    const alreadyPinnedFrameProps = frames.find(frame => frame.get('pinnedLocation') === location && frame.get('partitionNumber') === partitionNumber);
	    if (alreadyPinnedFrameProps) {
	      return {};
	    }
	  }
	
	  // TODO: longer term get rid of parentFrameKey completely instead of
	  // calculating it here.
	  let parentFrameKey = frameOpts.parentFrameKey;
	  if (frameOpts.openerTabId) {
	    parentFrameKey = getFrameKeyByTabId(windowState, frameOpts.openerTabId);
	  }
	
	  const frame = Immutable.fromJS(Object.assign({
	    zoomLevel: config.zoom.defaultValue,
	    audioMuted: false, // frame is muted
	    location,
	    aboutDetails: undefined,
	    src: url, // what the iframe src should be
	    tabId: -1,
	    // if this is a delayed load then go ahead and start the loading indicator
	    loading: !!delayedLoadUrl,
	    startLoadTime: delayedLoadUrl ? new Date().getTime() : null,
	    endLoadTime: null,
	    lastAccessedTime: activeFrameKey === newKey ? new Date().getTime() : null,
	    isPrivate: false,
	    partitionNumber,
	    pinnedLocation: isPinned ? url : undefined,
	    key: newKey,
	    navbar: {
	      urlbar: {
	        location: url,
	        suggestions: {
	          selectedIndex: 0,
	          searchResults: [],
	          suggestionList: null
	        },
	        selected: urlBarFocused,
	        focused: urlBarFocused,
	        active: false
	      }
	    },
	    searchDetail: null,
	    findDetail: {
	      searchString: '',
	      caseSensitivity: false
	    },
	    security: {
	      isSecure: urlParse(url).protocol === 'https:',
	      certDetails: null
	    },
	    unloaded: frameOpts.unloaded,
	    parentFrameKey,
	    history: []
	  }, frameOpts));
	
	  return {
	    tabs: tabs.splice(insertionIndex, 0, tabFromFrame(frame)),
	    frames: frames.splice(insertionIndex, 0, frame),
	    activeFrameKey
	  };
	}
	
	/**
	 * Undoes a frame close and inserts it at the last index
	 * @return Immutable top level application state ready to merge back in
	 */
	function undoCloseFrame(windowState, closedFrames) {
	  if (closedFrames.size === 0) {
	    return {};
	  }
	  const closedFrame = closedFrames.last();
	  const insertIndex = closedFrame.get('closedAtIndex');
	  return {
	    closedFrames: closedFrames.pop(),
	    tabs: windowState.get('tabs').splice(insertIndex, 0, tabFromFrame(closedFrame)),
	    frames: windowState.get('frames').splice(insertIndex, 0, closedFrame.delete('guestInstanceId').set('src', closedFrame.get('location'))),
	    activeFrameKey: closedFrame.get('key')
	  };
	}
	
	/**
	 * Removes a frame specified by frameProps
	 * @return Immutable top level application state ready to merge back in
	 */
	function removeFrame(frames, tabs, closedFrames, frameProps, activeFrameKey, framePropsIndex, closeAction) {
	  function getNewActiveFrame(activeFrameIndex) {
	    // Go to the next frame if it exists.
	    let index = activeFrameIndex;
	    let nextFrame = newFrames.get(index);
	    do {
	      if (nextFrame) {
	        if (nextFrame.get('pinnedLocation') === undefined) {
	          return nextFrame.get('key');
	        }
	        nextFrame = newFrames.get(++index);
	      }
	    } while (nextFrame);
	    // Otherwise go to the frame right before the active tab.
	    index = activeFrameIndex;
	    while (index > 0) {
	      const prevFrame = newFrames.get(--index);
	      if (prevFrame && prevFrame.get('pinnedLocation') === undefined) {
	        return prevFrame.get('key');
	      }
	    }
	    // Fall back on the original logic.
	    return Math.max(newFrames.get(activeFrameIndex) ? newFrames.get(activeFrameIndex).get('key') : newFrames.get(activeFrameIndex - 1).get('key'), 0);
	  }
	
	  if (!frameProps.get('isPrivate') && frameProps.get('location') !== 'about:newtab') {
	    frameProps = frameProps.set('isFullScreen', false);
	    closedFrames = closedFrames.push(frameProps);
	    if (frameProps.get('thumbnailBlob')) {
	      window.URL.revokeObjectURL(frameProps.get('thumbnailBlob'));
	    }
	    if (closedFrames.size > config.maxClosedFrames) {
	      closedFrames = closedFrames.shift();
	    }
	  }
	
	  const newFrames = frames.splice(framePropsIndex, 1);
	  const newTabs = tabs.splice(framePropsIndex, 1);
	  let newActiveFrameKey = activeFrameKey;
	
	  // If the frame being removed IS ACTIVE
	  let isActiveFrameBeingRemoved = frameProps.get('key') === activeFrameKey;
	  if (isActiveFrameBeingRemoved && newFrames.size > 0) {
	    let activeFrameIndex;
	
	    switch (closeAction) {
	      case tabCloseAction.LAST_ACTIVE:
	        const lastActive = getFrameByLastAccessedTime(newFrames);
	        activeFrameIndex = lastActive > -1 ? lastActive : frames.count() - 1;
	        break;
	      case tabCloseAction.NEXT:
	        activeFrameIndex = frames.count() - 1 === framePropsIndex ? framePropsIndex - 1 : framePropsIndex;
	        break;
	      case tabCloseAction.FIRST:
	        activeFrameIndex = 0;
	        break;
	      // Default is a parent tab
	      default:
	        let parentFrameIndex = findIndexForFrameKey(frames, frameProps.get('parentFrameKey'));
	        activeFrameIndex = parentFrameIndex === -1 ? findIndexForFrameKey(frames, activeFrameKey) : parentFrameIndex;
	        break;
	    }
	
	    // let's find new active NON-PINNED frame.
	    newActiveFrameKey = getNewActiveFrame(activeFrameIndex);
	  }
	
	  return {
	    previewFrameKey: null,
	    activeFrameKey: newActiveFrameKey,
	    closedFrames,
	    tabs: newTabs,
	    frames: newFrames
	  };
	}
	
	/**
	 * Removes all but the specified frameProps
	 * @return Immutable top level application state ready to merge back in
	 */
	function removeOtherFrames(frames, tabs, closedFrames, frameProps) {
	  closedFrames = closedFrames.concat(frames.filter(currentFrameProps => !currentFrameProps.get('isPrivate') && currentFrameProps.get('key') !== frameProps.get('key'))).take(config.maxClosedFrames);
	  closedFrames.forEach(currentFrameProps => {
	    if (currentFrameProps.get('thumbnailBlob')) {
	      window.URL.revokeObjectURL(currentFrameProps.get('thumbnailBlob'));
	    }
	  });
	
	  frames = Immutable.fromJS([frameProps]);
	  tabs = tabFromFrame(frames.get(0));
	  return {
	    activeFrameKey: frameProps.get('key'),
	    closedFrames,
	    tabs,
	    frames
	  };
	}
	
	function getFrameTabPageIndex(frames, frameProps, tabsPerTabPage) {
	  const index = getFramePropsIndex(frames, frameProps);
	  if (index === -1) {
	    return -1;
	  }
	  return Math.floor(index / tabsPerTabPage);
	}
	
	const frameStatePath = (windowState, key) => ['frames', findIndexForFrameKey(windowState.get('frames'), key)];
	
	const activeFrameStatePath = windowState => frameStatePath(windowState, windowState.get('activeFrameKey'));
	
	const frameStatePathForFrame = (windowState, frameProps) => ['frames', getFramePropsIndex(windowState.get('frames'), frameProps)];
	
	const tabStatePath = (windowState, frameKey) => ['tabs', findIndexForFrameKey(windowState.get('frames'), frameKey)];
	
	const tabStatePathForFrame = (windowState, frameProps) => ['tabs', getFramePropsIndex(windowState.get('frames'), frameProps)];
	
	module.exports = {
	  query,
	  find,
	  isAncestorFrameKey,
	  isFrameKeyActive,
	  isFrameKeyPinned,
	  getNonPinnedFrameCount,
	  isPrivatePartition,
	  isSessionPartition,
	  getFrameIndex,
	  getFrameDisplayIndex,
	  getActiveFrameIndex,
	  getActiveFrameDisplayIndex,
	  getActiveFrameTabId,
	  getFrameByIndex,
	  getFrameByDisplayIndex,
	  getFrameByKey,
	  getFrameByTabId,
	  getPartitionNumber,
	  getActiveFrame,
	  setActiveFrameDisplayIndex,
	  setActiveFrameIndex,
	  setActiveFrameKey,
	  makeNextFrameActive,
	  makePrevFrameActive,
	  getFramePropValue,
	  getFramePropPath,
	  findIndexForFrameKey,
	  findDisplayIndexForFrameKey,
	  getFramePropsIndex,
	  getFrameKeysByDisplayIndex,
	  getPartition,
	  addFrame,
	  undoCloseFrame,
	  removeFrame,
	  removeOtherFrames,
	  tabFromFrame,
	  getFrameKeyByTabId,
	  getFrameTabPageIndex,
	  frameStatePath,
	  activeFrameStatePath,
	  frameStatePathForFrame,
	  tabStatePath,
	  tabStatePathForFrame
	};

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	const currentWindow = __webpack_require__(703).remote.getCurrentWindow();
	const currentWindowId = currentWindow.id;
	let isFocused = currentWindow.isFocused();
	let isMaximized = currentWindow.isMaximized();
	let isFullScreen = currentWindow.isMaximized();
	
	currentWindow.on('maximize', function (wnd) {
	  isMaximized = true;
	});
	
	currentWindow.on('unmaximize', function (wnd) {
	  isMaximized = false;
	});
	
	currentWindow.on('focus', function (wnd) {
	  isFocused = true;
	});
	
	currentWindow.on('blur', function (wnd) {
	  isFocused = false;
	});
	
	currentWindow.on('enter-full-screen', function (wnd) {
	  isFullScreen = true;
	});
	
	currentWindow.on('leave-full-screen', function (wnd) {
	  isFullScreen = false;
	});
	
	module.exports = {
	  currentWindow,
	  currentWindowId,
	  currentWindowWebContents: currentWindow.webContents,
	  isMaximized: () => isMaximized,
	  isFocused: () => isFocused,
	  isFullScreen: () => isFullScreen
	};

/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {(function () {
	  "use strict"
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// UTILITY
	var util = __webpack_require__(708);
	var pSlice = Array.prototype.slice;
	
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = exports;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.message = options.message;
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  var stackStartFunction = options.stackStartFunction || fail;
	
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	};
	util.inherits(assert.AssertionError, Error);
	
	assert.AssertionError.prototype.toString = function() {
	  if (this.message) {
	    return [this.name + ':', this.message].join(' ');
	  } else {
	    return [this.name + ':',
	            JSON.stringify(this.expected),
	            this.operator,
	            JSON.stringify(this.actual)].join(' ');
	  }
	};
	
	// assert.AssertionError instanceof Error
	
	assert.AssertionError.__proto__ = Error.prototype;
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	assert.ok = function ok(value, message) {
	  if (!!!value) fail(value, true, message, '==', assert.ok);
	};
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	
	  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;
	
	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }
	
	    return true;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (typeof actual != 'object' && typeof expected != 'object') {
	    return actual == expected;
	
	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}
	
	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b) {
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  try {
	    var ka = Object.keys(a),
	        kb = Object.keys(b),
	        key, i;
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (expected instanceof RegExp) {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }
	
	  return false;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }
	
	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail('Missing expected exception' + message);
	  }
	
	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail('Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};
	
	assert.ifError = function(err) { if (err) {throw err;}};
	
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(617).Buffer))

/***/ },
/* 708 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = ({"NODE_ENV":"development","BRAVE_PORT":8080}).NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(709);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(710);
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 709 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 710 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 711 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const windowConstants = __webpack_require__(233);
	const { getSourceAboutUrl, getSourceMagnetUrl, isIntermediateAboutPage, navigatableTypes } = __webpack_require__(187);
	const { isURL, getUrlFromInput } = __webpack_require__(190);
	const { activeFrameStatePath, frameStatePath, getFrameByKey, getActiveFrame, tabStatePath } = __webpack_require__(705);
	const urlParse = __webpack_require__(192);
	
	const updateNavBarInput = (state, loc, framePath) => {
	  if (framePath === undefined) {
	    framePath = activeFrameStatePath(state);
	  }
	  state = state.setIn(framePath.concat(['navbar', 'urlbar', 'location']), loc);
	  return state;
	};
	
	const urlBarReducer = (state, action) => {
	  switch (action.actionType) {
	    case windowConstants.WINDOW_SET_NAVBAR_INPUT:
	      state = updateNavBarInput(state, action.location);
	      break;
	    case windowConstants.WINDOW_SET_URL:
	      const frame = getFrameByKey(state, action.key);
	      const currentLocation = frame.get('location');
	      const parsedUrl = urlParse(action.location);
	
	      // For types that are not navigatable, just do a loadUrl on them
	      if (!navigatableTypes.includes(parsedUrl.protocol)) {
	        if (parsedUrl.protocol !== 'javascript:' || currentLocation.substring(0, 6).toLowerCase() !== 'about:') {
	          state = state.mergeIn(frameStatePath(state, action.key), {
	            activeShortcut: 'load-non-navigatable-url',
	            activeShortcutDetails: action.location
	          });
	        }
	        state = updateNavBarInput(state, frame.get('location'), frameStatePath(state, action.key));
	      } else if (currentLocation === action.location) {
	        // reload if the url is unchanged
	        state = state.mergeIn(frameStatePath(state, action.key), {
	          audioPlaybackActive: false,
	          activeShortcut: 'reload'
	        });
	        state = state.mergeIn(tabStatePath(state, action.key), {
	          audioPlaybackActive: false
	        });
	        state = updateNavBarInput(state, frame.get('location'), frameStatePath(state, action.key));
	      } else {
	        // If the user is changing back to the original src and they already navigated away then we need to
	        // explicitly set a new location via webview.loadURL.
	        let activeShortcut;
	        if (frame.get('location') !== action.location && frame.get('src') === action.location && !isIntermediateAboutPage(action.location)) {
	          activeShortcut = 'explicitLoadURL';
	        }
	
	        state = state.mergeIn(frameStatePath(state, action.key), {
	          src: action.location,
	          location: action.location,
	          activeShortcut
	        });
	        state = state.mergeIn(tabStatePath(state, action.key), {
	          location: action.location
	        });
	        // Show the location for directly-entered URLs before the page finishes
	        // loading
	        state = updateNavBarInput(state, action.location, frameStatePath(state, action.key));
	      }
	      break;
	    case windowConstants.WINDOW_SET_NAVIGATED:
	      action.location = action.location.trim();
	      // For about: URLs, make sure we store the URL as about:something
	      // and not what we map to.
	      action.location = getSourceAboutUrl(action.location) || getSourceMagnetUrl(action.location) || action.location;
	
	      if (isURL(action.location)) {
	        action.location = getUrlFromInput(action.location);
	      }
	
	      const key = action.key || state.get('activeFrameKey');
	      state = state.mergeIn(frameStatePath(state, key), {
	        location: action.location
	      });
	      state = state.mergeIn(tabStatePath(state, key), {
	        location: action.location
	      });
	      if (!action.isNavigatedInPage) {
	        state = state.mergeIn(frameStatePath(state, key), {
	          adblock: {},
	          audioPlaybackActive: false,
	          computedThemeColor: undefined,
	          httpsEverywhere: {},
	          icon: undefined,
	          location: action.location,
	          noScript: {},
	          themeColor: undefined,
	          title: '',
	          trackingProtection: {},
	          fingerprintingProtection: {}
	        });
	        // TODO: This should be moved into a tabs reducer
	        state = state.mergeIn(tabStatePath(state, key), {
	          audioPlaybackActive: false,
	          themeColor: undefined,
	          location: action.location,
	          computedThemeColor: undefined,
	          icon: undefined,
	          title: ''
	        });
	      }
	
	      // Update nav bar unless when spawning a new tab. The user might have
	      // typed in the URL bar while we were navigating -- we should preserve it.
	      if (!(action.location === 'about:newtab' && !getActiveFrame(state).get('canGoForward'))) {
	        const key = action.key || state.get('activeFrameKey');
	        state = updateNavBarInput(state, action.location, frameStatePath(state, key));
	      }
	      break;
	  }
	  return state;
	};
	
	module.exports = urlBarReducer;

/***/ },
/* 712 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const windowConstants = __webpack_require__(233);
	const getSetting = __webpack_require__(202).getSetting;
	const fetchSearchSuggestions = __webpack_require__(715);
	const { activeFrameStatePath, frameStatePath, getFrameByKey, getFrameKeyByTabId, getActiveFrame } = __webpack_require__(705);
	const searchProviders = __webpack_require__(210);
	const settings = __webpack_require__(204);
	const Immutable = __webpack_require__(188);
	const config = __webpack_require__(201);
	const top500 = __webpack_require__(717);
	const { aboutUrls, isNavigatableAboutPage, isSourceAboutUrl, isUrl } = __webpack_require__(187);
	const siteTags = __webpack_require__(256);
	const suggestion = __webpack_require__(718);
	const suggestionTypes = __webpack_require__(719);
	const { navigateSiteClickHandler, frameClickHandler } = __webpack_require__(720);
	// TODO: I think appStoreRenderer should just be collapsed into windowStore to avoid this
	const appStoreRenderer = __webpack_require__(207);
	
	const updateSearchEngineInfoFromInput = (state, frameProps) => {
	  const input = frameProps.getIn(['navbar', 'urlbar', 'location']);
	  const frameSearchDetail = frameProps.getIn(['navbar', 'urlbar', 'searchDetail']);
	  const searchDetailPath = frameStatePath(state, frameProps.get('key')).concat(['navbar', 'urlbar', 'searchDetail']);
	  if (!input || !input.length || isUrl(input) || !input.startsWith(':')) {
	    state = state.deleteIn(searchDetailPath);
	  } else if (!frameSearchDetail || !input.startsWith(frameSearchDetail.get('shortcut') + ' ')) {
	    let entries = searchProviders.providers;
	    for (let i = 0; i < entries.length; i++) {
	      const entry = entries[i];
	      if (input.startsWith(entry.shortcut + ' ')) {
	        state = state.setIn(searchDetailPath, Immutable.fromJS(Object.assign({}, entry, { activateSearchEngine: true })));
	        return state;
	      }
	    }
	    state = state.deleteIn(searchDetailPath);
	  }
	  return state;
	};
	
	const searchXHR = (state, frameProps, searchOnline) => {
	  const searchDetail = state.get('searchDetail');
	  const frameSearchDetail = frameProps.getIn(['navbar', 'urlbar', 'searchDetail']);
	  let autocompleteURL = frameSearchDetail ? frameSearchDetail.get('autocomplete') : searchDetail.get('autocompleteURL');
	  if (!getSetting(settings.OFFER_SEARCH_SUGGESTIONS) || !autocompleteURL) {
	    state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'searchResults']), Immutable.fromJS([]));
	    return state;
	  }
	
	  let input = frameProps.getIn(['navbar', 'urlbar', 'location']);
	  if (!isUrl(input) && input.length > 0) {
	    if (searchDetail) {
	      const replaceRE = new RegExp('^' + searchDetail.get('shortcut') + ' ', 'g');
	      input = input.replace(replaceRE, '');
	    }
	
	    if (searchOnline) {
	      fetchSearchSuggestions(frameProps.get('tabId'), autocompleteURL, input);
	    }
	  } else {
	    state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'searchResults']), Immutable.fromJS([]));
	  }
	  return state;
	};
	
	const setUrlSuggestions = (state, suggestionList) => {
	  if (suggestionList !== undefined) {
	    state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']), suggestionList);
	  }
	  state = updateUrlSuffix(state, suggestionList);
	  return state;
	};
	
	const setRenderUrlBarSuggestions = (state, enabled) => {
	  state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'shouldRender']), enabled);
	  if (!enabled) {
	    state = state.mergeIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions']), {
	      selectedIndex: null,
	      suggestionList: null
	    });
	    // Make sure to remove the suffix from the url bar
	    state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'selectedIndex']), null);
	    state = updateUrlSuffix(state, undefined);
	  }
	  return state;
	};
	
	/**
	 * Updates the active frame state with what the URL bar suffix should be.
	 * @param suggestionList - The suggestion list to use to figure out the suffix.
	 */
	const updateUrlSuffix = (state, suggestionList) => {
	  let selectedIndex = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'selectedIndex'])) || 0;
	  const lastSuffix = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'urlSuffix']));
	  if (!selectedIndex && lastSuffix) {
	    selectedIndex = 0;
	  }
	  const suggestion = suggestionList && suggestionList.get(selectedIndex);
	  let suffix = '';
	  if (suggestion) {
	    const autocompleteEnabled = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'autocompleteEnabled']));
	
	    if (autocompleteEnabled) {
	      const location = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'location']));
	      const index = suggestion.location.toLowerCase().indexOf(location.toLowerCase());
	      if (index !== -1) {
	        const beforePrefix = suggestion.location.substring(0, index);
	        if (beforePrefix.endsWith('://') || beforePrefix.endsWith('://www.') || index === 0) {
	          suffix = suggestion.location.substring(index + location.length);
	        }
	      }
	    }
	  }
	  state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'urlSuffix']), suffix);
	  return state;
	};
	
	const generateNewSuggestionsList = state => {
	  const activeFrameKey = state.get('activeFrameKey');
	  const urlLocation = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'location']));
	  const sites = appStoreRenderer.state.get('sites');
	  const searchResults = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'searchResults']));
	  const frameSearchDetail = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'searchDetail']));
	  const searchDetail = state.get('searchDetail');
	
	  if (!urlLocation) {
	    return state;
	  }
	
	  const urlLocationLower = urlLocation.toLowerCase();
	  let suggestionsList = new Immutable.List();
	  const defaultme = x => x;
	  const mapListToElements = ({ data, maxResults, type, clickHandler = navigateSiteClickHandler.bind(undefined),
	    sortHandler = defaultme, formatTitle = defaultme, formatUrl = defaultme,
	    filterValue = site => {
	      return site.toLowerCase().includes(urlLocationLower);
	    }
	  }) => // Filter out things which are already in our own list at a smaller index
	  data
	  // Per suggestion provider filter
	  .filter(filterValue)
	  // Filter out things which are already in the suggestions list
	  .filter(site => suggestionsList.findIndex(x => (x.location || '').toLowerCase() === (formatUrl(site) || '').toLowerCase()) === -1 ||
	  // Tab autosuggestions should always be included since they will almost always be in history
	  type === suggestionTypes.TAB).sort(sortHandler).take(maxResults).map(site => {
	    return {
	      onClick: clickHandler.bind(null, site),
	      title: formatTitle(site),
	      location: formatUrl(site),
	      type
	    };
	  });
	
	  const shouldNormalize = suggestion.shouldNormalizeLocation(urlLocationLower);
	  const urlLocationLowerNormalized = suggestion.normalizeLocation(urlLocationLower);
	  const sortBasedOnLocationPos = (s1, s2) => {
	    const location1 = shouldNormalize ? suggestion.normalizeLocation(s1.get('location')) : s1.get('location');
	    const location2 = shouldNormalize ? suggestion.normalizeLocation(s2.get('location')) : s2.get('location');
	    const pos1 = location1.indexOf(urlLocationLowerNormalized);
	    const pos2 = location2.indexOf(urlLocationLowerNormalized);
	    if (pos1 === -1 && pos2 === -1) {
	      return 0;
	    } else if (pos1 === -1) {
	      return 1;
	    } else if (pos2 === -1) {
	      return -1;
	    } else {
	      if (pos1 - pos2 !== 0) {
	        return pos1 - pos2;
	      } else {
	        // sort site.com higher than site.com/somepath
	        const sdnv1 = suggestion.simpleDomainNameValue(s1);
	        const sdnv2 = suggestion.simpleDomainNameValue(s2);
	        if (sdnv1 !== sdnv2) {
	          return sdnv2 - sdnv1;
	        } else {
	          // If there's a tie on the match location, use the age
	          // decay modified access count
	          return suggestion.sortByAccessCountWithAgeDecay(s1, s2);
	        }
	      }
	    }
	  };
	
	  const historyFilter = site => {
	    if (!site) {
	      return false;
	    }
	    const title = site.get('title') || '';
	    const location = site.get('location') || '';
	    // Note: Bookmark sites are now included in history. This will allow
	    // sites to appear in the auto-complete regardless of their bookmark
	    // status. If history is turned off, bookmarked sites will appear
	    // in the bookmark section.
	    return (title.toLowerCase().includes(urlLocationLower) || location.toLowerCase().includes(urlLocationLower)) && site.get('lastAccessedTime');
	  };
	  var historySites = sites.filter(historyFilter);
	
	  // potentially append virtual history items (such as www.google.com when
	  // searches have been made but the root site has not been visited)
	  historySites = historySites.concat(suggestion.createVirtualHistoryItems(historySites));
	
	  // history
	  if (getSetting(settings.HISTORY_SUGGESTIONS)) {
	    suggestionsList = suggestionsList.concat(mapListToElements({
	      data: historySites,
	      maxResults: config.urlBarSuggestions.maxHistorySites,
	      type: suggestionTypes.HISTORY,
	      clickHandler: navigateSiteClickHandler(site => {
	        return site.get('location');
	      }),
	      sortHandler: sortBasedOnLocationPos,
	      formatTitle: site => site.get('title'),
	      formatUrl: site => site.get('location'),
	      filterValue: historyFilter
	    }));
	  }
	
	  // bookmarks
	  if (getSetting(settings.BOOKMARK_SUGGESTIONS)) {
	    suggestionsList = suggestionsList.concat(mapListToElements({
	      data: sites,
	      maxResults: config.urlBarSuggestions.maxBookmarkSites,
	      type: suggestionTypes.BOOKMARK,
	      clickHandler: navigateSiteClickHandler(site => {
	        return site.get('location');
	      }),
	      sortHandler: sortBasedOnLocationPos,
	      formatTitle: site => site.get('title'),
	      formatUrl: site => site.get('location'),
	      filterValue: site => {
	        const title = site.get('title') || '';
	        const location = site.get('location') || '';
	        return (title.toLowerCase().includes(urlLocationLower) || location.toLowerCase().includes(urlLocationLower)) && site.get('tags') && site.get('tags').includes(siteTags.BOOKMARK);
	      }
	    }));
	  }
	
	  // about pages
	  suggestionsList = suggestionsList.concat(mapListToElements({
	    data: aboutUrls.keySeq().filter(x => isNavigatableAboutPage(x)),
	    maxResults: config.urlBarSuggestions.maxAboutPages,
	    type: suggestionTypes.ABOUT_PAGES,
	    clickHandler: navigateSiteClickHandler(x => x) }));
	
	  // opened frames
	  if (getSetting(settings.OPENED_TAB_SUGGESTIONS)) {
	    suggestionsList = suggestionsList.concat(mapListToElements({
	      data: state.get('frames'),
	      maxResults: config.urlBarSuggestions.maxOpenedFrames,
	      type: suggestionTypes.TAB,
	      clickHandler: frameClickHandler,
	      sortHandler: sortBasedOnLocationPos,
	      formatTitle: frame => frame.get('title'),
	      formatUrl: frame => frame.get('location'),
	      filterValue: frame => !isSourceAboutUrl(frame.get('location')) && frame.get('key') !== activeFrameKey && (frame.get('title') && frame.get('title').toLowerCase().includes(urlLocationLower) || frame.get('location') && frame.get('location').toLowerCase().includes(urlLocationLower)) }));
	  }
	
	  // Search suggestions
	  if (getSetting(settings.OFFER_SEARCH_SUGGESTIONS) && searchResults) {
	    suggestionsList = suggestionsList.concat(mapListToElements({
	      data: searchResults,
	      maxResults: config.urlBarSuggestions.maxSearch,
	      type: suggestionTypes.SEARCH,
	      clickHandler: navigateSiteClickHandler(searchTerms => {
	        let searchURL = frameSearchDetail ? frameSearchDetail.get('search') : searchDetail.get('searchURL');
	        return searchURL.replace('{searchTerms}', encodeURIComponent(searchTerms));
	      })
	    }));
	  }
	
	  // Alexa top 500
	  suggestionsList = suggestionsList.concat(mapListToElements({
	    data: top500,
	    maxResults: config.urlBarSuggestions.maxTopSites,
	    type: suggestionTypes.TOP_SITE,
	    clickHandler: navigateSiteClickHandler(x => x) }));
	
	  return setUrlSuggestions(state, suggestionsList);
	};
	
	const urlBarSuggestionsReducer = (state, action) => {
	  switch (action.actionType) {
	    case windowConstants.WINDOW_SET_NAVIGATED:
	      const key = action.key || state.get('activeFrameKey');
	      state = state.setIn(frameStatePath(state, key).concat(['navbar', 'urlbar', 'suggestions', 'shouldRender']), false);
	      const frame = getFrameByKey(state, key);
	      state = updateSearchEngineInfoFromInput(state, frame);
	      break;
	    case windowConstants.WINDOW_SET_FINDBAR_SHOWN:
	      if (action.shown) {
	        state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'shouldRender']), false);
	      }
	      break;
	    case windowConstants.WINDOW_SET_URL:
	      state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'searchResults']), Immutable.fromJS([]));
	      state = state.deleteIn(frameStatePath(state, action.key).concat(['navbar', 'urlbar', 'searchDetail']));
	      break;
	    case windowConstants.WINDOW_PREVIOUS_URL_BAR_SUGGESTION_SELECTED:
	      {
	        const selectedIndexPath = activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'selectedIndex']);
	        const suggestionList = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']));
	        const selectedIndex = state.getIn(selectedIndexPath);
	        const lastSuffix = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'urlSuffix']));
	        if (!selectedIndex && selectedIndex !== 0 && !lastSuffix) {
	          state = state.setIn(selectedIndexPath, 0);
	        } else if (selectedIndex > 0) {
	          state = state.setIn(selectedIndexPath, selectedIndex - 1);
	        }
	        state = updateUrlSuffix(state, state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']), suggestionList));
	        break;
	      }
	    case windowConstants.WINDOW_NEXT_URL_BAR_SUGGESTION_SELECTED:
	      {
	        const selectedIndexPath = activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'selectedIndex']);
	        const suggestionList = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']));
	        const selectedIndex = state.getIn(selectedIndexPath);
	        const lastSuffix = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'urlSuffix']));
	        if (!selectedIndex && selectedIndex !== 0 && !lastSuffix) {
	          state = state.setIn(selectedIndexPath, 0);
	        } else if (selectedIndex < suggestionList.size - 1) {
	          state = state.setIn(selectedIndexPath, selectedIndex + 1);
	        }
	        state = updateUrlSuffix(state, state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']), suggestionList));
	        break;
	      }
	    case windowConstants.WINDOW_SEARCH_SUGGESTION_RESULTS_AVAILABLE:
	      const frameKey = getFrameKeyByTabId(state, action.tabId);
	      state = state.setIn(frameStatePath(state, frameKey).concat(['navbar', 'urlbar', 'suggestions', 'searchResults']), action.searchResults);
	      state = generateNewSuggestionsList(state);
	      break;
	    case windowConstants.WINDOW_SET_NAVBAR_INPUT:
	      const activeFrameProps = getActiveFrame(state);
	      state = updateSearchEngineInfoFromInput(state, activeFrameProps);
	      state = searchXHR(state, activeFrameProps, true);
	      state = generateNewSuggestionsList(state);
	      state = updateUrlSuffix(state, state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']), action.suggestionList));
	      if (!action.location) {
	        state = setRenderUrlBarSuggestions(state, false);
	      }
	      break;
	    case windowConstants.WINDOW_URL_BAR_AUTOCOMPLETE_ENABLED:
	      state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'autocompleteEnabled']), action.enabled);
	      break;
	    case windowConstants.WINDOW_SET_URL_BAR_SUGGESTIONS:
	      state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'selectedIndex']), action.selectedIndex);
	      state = setUrlSuggestions(state, action.suggestionList);
	      break;
	    case windowConstants.WINDOW_SET_URL_BAR_SUGGESTION_SEARCH_RESULTS:
	      state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'searchResults']), action.searchResults);
	      break;
	    case windowConstants.WINDOW_SET_URL_BAR_ACTIVE:
	      state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'active']), action.isActive);
	      if (!action.isActive) {
	        state = state.setIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'shouldRender']), false);
	        state = state.mergeIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions']), {
	          selectedIndex: null,
	          suggestionList: null
	        });
	      }
	      break;
	    case windowConstants.WINDOW_SET_RENDER_URL_BAR_SUGGESTIONS:
	      state = setRenderUrlBarSuggestions(state, action.enabled);
	      break;
	    case windowConstants.WINDOW_ACTIVE_URL_BAR_SUGGESTION_CLICKED:
	      const selectedIndex = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'selectedIndex'])) || 0;
	      const suggestionList = state.getIn(activeFrameStatePath(state).concat(['navbar', 'urlbar', 'suggestions', 'suggestionList']));
	      if (suggestionList.size > 0) {
	        // It's important this doesn't run sync or else the returned state below will overwrite anything done in the click handler
	        setImmediate(() => suggestionList.get(selectedIndex).onClick(action.isForSecondaryAction, action.shiftKey));
	      }
	      break;
	    default:
	      return state;
	  }
	  return state;
	};
	
	module.exports = urlBarSuggestionsReducer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(713).setImmediate))

/***/ },
/* 713 */
/***/ function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(714);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ },
/* 714 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 715 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	const windowActions = __webpack_require__(716);
	const debounce = __webpack_require__(209);
	
	const fetchSearchSuggestions = debounce((tabId, autocompleteURL, searchTerms) => {
	  const xhr = new window.XMLHttpRequest();
	  xhr.open('GET', autocompleteURL.replace('{searchTerms}', encodeURIComponent(searchTerms)), true);
	  xhr.responseType = 'json';
	  xhr.send();
	  xhr.onload = () => {
	    // Once we have the online suggestions, append them to the others
	    windowActions.searchSuggestionResultsAvailable(tabId, Immutable.fromJS(xhr.response[1]));
	  };
	}, 100);
	
	module.exports = fetchSearchSuggestions;

/***/ },
/* 716 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const AppDispatcher = __webpack_require__(702);
	const windowConstants = __webpack_require__(233);
	const appActions = __webpack_require__(704);
	const messages = __webpack_require__(211);
	const siteTags = __webpack_require__(256);
	const siteUtil = __webpack_require__(259);
	const UrlUtil = __webpack_require__(190);
	const { currentWindow } = __webpack_require__(706);
	const windowStore = __webpack_require__(701);
	
	function dispatch(action) {
	  AppDispatcher.dispatch(action);
	}
	
	const windowActions = {
	
	  /**
	   * Dispatches an event to the main process to replace the window state
	   *
	   * @param {object} windowState - Initial window state object
	   */
	  setState: function (windowState) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_STATE,
	      windowState
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to load a new URL.
	   * Both the frame's src and location properties will be updated accordingly.
	   *
	   * If the frame is a pinned site and the origin of the pinned site does
	   * not match the origin of the passed in location, then a new frame will be
	   * created for the load.
	   *
	   * In general, an iframe's src should not be updated when navigating within the frame to a new page,
	   * but the location should. For user entered new URLs, both should be updated.
	   *
	   * @param {object} frame - The frame props
	   * @param {string} location - The URL of the page to load
	   */
	  loadUrl: function (frame, location) {
	    location = location.trim();
	    let newFrame = false;
	    if (frame.get('pinnedLocation') && location !== 'about:certerror' && frame.get('location') !== 'about:certerror' && location !== 'about:error' && frame.get('location') !== 'about:error') {
	      try {
	        const origin1 = new window.URL(frame.get('location')).origin;
	        const origin2 = new window.URL(location).origin;
	        if (origin1 !== origin2) {
	          newFrame = true;
	        }
	      } catch (e) {
	        newFrame = true;
	      }
	    }
	
	    if (UrlUtil.isURL(location)) {
	      location = UrlUtil.getUrlFromInput(location);
	    }
	
	    if (newFrame) {
	      this.newFrame({
	        location
	      }, true);
	    } else {
	      this.setUrl(location, frame.get('key'));
	    }
	  },
	
	  /**
	   * Dispatches a message to the store to set the new URL.
	   * @param {string} location
	   * @param {number} key
	   */
	  setUrl: function (location, key) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_URL,
	      location,
	      key
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to let it know a page has been navigated.
	   *
	   * @param {string} location - The URL of the page that was navigated to.
	   * @param {number} key - The frame key to modify.
	   * @param {boolean} isNavigatedInPage - true if it was a navigation within the same page.
	   * @param {number} tabId - the tab id
	   */
	  setNavigated: function (location, key, isNavigatedInPage, tabId) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_NAVIGATED,
	      location,
	      key,
	      isNavigatedInPage,
	      tabId
	    });
	  },
	
	  /**
	   * Dispatches a message to set the security state.
	   * @param {Object} frameProps - The frame properties to modify.
	   * @param {Object} securityState - The security state properties that have
	   *   changed.
	   */
	  setSecurityState: function (frameProps, securityState) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_SECURITY_STATE,
	      securityState,
	      frameProps
	    });
	  },
	
	  /**
	   * Dispatches a message to set the frame tab id
	   * @param {Object} frameProps - The frame properties
	   * @param {Number} tabId - the tab id to set
	   */
	  setFrameTabId: function (frameProps, tabId) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FRAME_TAB_ID,
	      frameProps,
	      tabId
	    });
	  },
	
	  /**
	   * Dispatches a message to set the frame error state
	   * @param {Object} frameProps - The frame properties
	   * @param {Object} errorDetails - The error properties
	   *   changed.
	   */
	  setFrameError: function (frameProps, errorDetails) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FRAME_ERROR,
	      frameProps,
	      errorDetails
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to set the user entered text for the URL bar.
	   * Unlike setLocation and loadUrl, this does not modify the state of src and location.
	   *
	   * @param {string} location - The text to set as the new navbar URL input
	   */
	  setNavBarUserInput: function (location) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_NAVBAR_INPUT,
	      location
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to set the current frame's title.
	   * This should be called in response to the webview encountering a `<title>` tag.
	   *
	   * @param {Object} frameProps - The frame properties to modify
	   * @param {string} title - The title to set for the frame
	   */
	  setFrameTitle: function (frameProps, title) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FRAME_TITLE,
	      frameProps,
	      title
	    });
	  },
	
	  /**
	   * Shows/hides the find-in-page bar.
	   * @param {Object} frameProps - The frame properties to modify
	   * @param {boolean} shown - Whether to show the findbar
	   */
	  setFindbarShown: function (frameProps, shown) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FINDBAR_SHOWN,
	      frameProps,
	      shown
	    });
	  },
	
	  /**
	   * Highlight text in the findbar
	   * @param {Object} frameProps - The frame properties to modify
	   * @param {boolean} selected - Whether to select the findbar search text
	   */
	  setFindbarSelected: function (frameProps, selected) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FINDBAR_SELECTED,
	      frameProps,
	      selected
	    });
	  },
	
	  /**
	   * Sets a frame as pinned
	   * @param {Object} frameProps - The frame properties to modify
	   * @param {boolean} isPinned - Whether to pin or not
	   */
	  setPinned: function (frameProps, isPinned) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_PINNED,
	      frameProps,
	      isPinned
	    });
	    const siteDetail = siteUtil.getDetailFromFrame(frameProps, siteTags.PINNED);
	    if (isPinned) {
	      appActions.addSite(siteDetail, siteTags.PINNED);
	    } else {
	      appActions.removeSite(siteDetail, siteTags.PINNED);
	    }
	  },
	
	  /**
	   * Dispatches a message to the store to indicate that the webview is loading.
	   *
	   * @param {Object} frameProps - The frame properties for the webview in question.
	   * @param {string} location - The location being loaded.
	   */
	  onWebviewLoadStart: function (frameProps, location) {
	    dispatch({
	      actionType: windowConstants.WINDOW_WEBVIEW_LOAD_START,
	      frameProps,
	      location
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to indicate that the webview is done loading.
	   *
	   * @param {Object} frameProps - The frame properties for the webview in question.
	   */
	  onWebviewLoadEnd: function (frameProps) {
	    dispatch({
	      actionType: windowConstants.WINDOW_WEBVIEW_LOAD_END,
	      frameProps
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to indicate that the webview entered full screen mode.
	   *
	   * @param {Object} frameProps - The frame properties to put in full screen
	   * @param {boolean} isFullScreen - true if the webview is entering full screen mode.
	   * @param {boolean} showFullScreenWarning - true if a warning about entering full screen should be shown.
	   */
	  setFullScreen: function (frameProps, isFullScreen, showFullScreenWarning) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FULL_SCREEN,
	      frameProps,
	      isFullScreen,
	      showFullScreenWarning
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to create a new frame
	   *
	   * @param {Object} frameOpts - An object of frame options such as isPrivate, element, and tab features.
	   *                  These may not all be hooked up in Electron yet.
	   * @param {boolean} openInForeground - true if the new frame should become the new active frame
	   */
	  newFrame: function (frameOpts, openInForeground) {
	    dispatch({
	      actionType: windowConstants.WINDOW_NEW_FRAME,
	      frameOpts: frameOpts,
	      openInForeground
	    });
	  },
	
	  /**
	   * Dispatches a message to close a frame
	   *
	   * @param {Object[]} frames - Immutable list of of all the frames
	   * @param {Object} frameProps - The properties of the frame to close
	   */
	  closeFrame: function (frames, frameProps, forceClosePinned) {
	    const ipc = __webpack_require__(703).ipcRenderer;
	    const origin = siteUtil.getOrigin(frameProps.get('location'));
	    if (origin) {
	      appActions.clearMessageBoxes(origin);
	    }
	    // If the frame was full screen, exit
	    if (frameProps && frameProps.get('isFullScreen')) {
	      this.setFullScreen(frameProps, false);
	    }
	    // Unless a caller explicitly specifies to close a pinned frame, then
	    // ignore the call.
	    const nonPinnedFrames = frames.filter(frame => !frame.get('pinnedLocation'));
	    if (frameProps && frameProps.get('pinnedLocation')) {
	      // Check for no frames at all, and if that's the case the user
	      // only has pinned frames and tried to close, so close the
	      // whole app.
	      if (nonPinnedFrames.size === 0) {
	        appActions.closeWindow(currentWindow.id);
	        return;
	      }
	
	      const frameKey = frameProps ? frameProps.get('key') : null;
	      const activeFrameKey = windowStore.getState().get('activeFrameKey');
	      const isActiveFrame = frameKey === activeFrameKey;
	
	      if (!forceClosePinned && isActiveFrame) {
	        // Go to next frame if the user tries to close a pinned tab
	        ipc.emit(messages.SHORTCUT_NEXT_TAB);
	        return;
	      }
	    }
	
	    const pinnedFrames = frames.filter(frame => frame.get('pinnedLocation'));
	
	    // If there is at least 1 pinned frame don't close the window until subsequent
	    // close attempts
	    if (nonPinnedFrames.size > 1 || pinnedFrames.size > 0) {
	      dispatch({
	        actionType: windowConstants.WINDOW_CLOSE_FRAME,
	        frameProps
	      });
	    } else {
	      appActions.closeWindow(currentWindow.id);
	    }
	  },
	
	  /**
	   * Dispatches a message to the store to undo a closed frame
	   * The new frame is expected to appear at the index it was last closed at
	   */
	  undoClosedFrame: function () {
	    dispatch({
	      actionType: windowConstants.WINDOW_UNDO_CLOSED_FRAME
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to clear closed frames
	   */
	  clearClosedFrames: function () {
	    dispatch({
	      actionType: windowConstants.WINDOW_CLEAR_CLOSED_FRAMES
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to set a new frame as the active frame.
	   *
	   * @param {Object} frameProps - the frame properties for the webview in question.
	   */
	  setActiveFrame: function (frameProps) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_ACTIVE_FRAME,
	      frameProps: frameProps
	    });
	  },
	
	  /**
	   * Dispatches a message to the store when the frame is active and the window is focused
	   *
	   * @param {Object} frameProps - the frame properties for the webview in question.
	   */
	  setFocusedFrame: function (frameProps) {
	    if (frameProps) {
	      dispatch({
	        actionType: windowConstants.WINDOW_SET_FOCUSED_FRAME,
	        frameProps: frameProps
	      });
	    }
	  },
	
	  /**
	   * Dispatches a message to the store to set a preview frame.
	   * This is done when hovering over a tab.
	   *
	   * @param {Object} frameProps - the frame properties for the webview in question.
	   */
	  setPreviewFrame: function (frameProps) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_PREVIEW_FRAME,
	      frameProps: frameProps
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to set the tab page index.
	   *
	   * @param {number} index - the tab page index to change to
	   */
	  setTabPageIndex: function (index) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_TAB_PAGE_INDEX,
	      index
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to set the tab page index being previewed.
	   *
	   * @param {number} previewTabPageIndex - The tab page index to preview
	   */
	  setPreviewTabPageIndex: function (previewTabPageIndex) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_PREVIEW_TAB_PAGE_INDEX,
	      previewTabPageIndex
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to set the tab page index.
	   *
	   * @param {number} frameProps - The frame props to center around
	   */
	  setTabPageIndexByFrame: function (frameProps) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_TAB_PAGE_INDEX,
	      frameProps
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to indicate that something is dragging over this item.
	   *
	   * @param {string} dragType - The type of drag operation being performed
	   * @param {Object} dragOverKey - A unique identifier for the storage for the item being dragged over
	   * @param {Object} dragDetail - detail about the item drag operation
	   */
	  setIsBeingDraggedOverDetail: function (dragType, dragOverKey, dragDetail) {
	    dispatch({
	      dragType,
	      actionType: windowConstants.WINDOW_SET_IS_BEING_DRAGGED_OVER_DETAIL,
	      dragOverKey,
	      dragDetail
	    });
	  },
	
	  /**
	   * Dispatches a message to the store to indicate that the specified frame should move locations.
	   *
	   * @param {Object} sourceFrameProps - the frame properties for the webview to move.
	   * @param {Object} destinationFrameProps - the frame properties for the webview to move to.
	   * @param {boolean} prepend - Whether or not to prepend to the destinationFrameProps
	   */
	  moveTab: function (sourceFrameProps, destinationFrameProps, prepend) {
	    dispatch({
	      actionType: windowConstants.WINDOW_TAB_MOVE,
	      sourceFrameProps,
	      destinationFrameProps,
	      prepend
	    });
	  },
	
	  /**
	   * Sets the URL bar suggestions and selected index.
	   *
	   * @param {Object[]} suggestionList - The list of suggestions for the entered URL bar text. This can be generated from history, bookmarks, etc.
	   * @param {number} selectedIndex - The index for the selected item (users can select items with down arrow on their keyboard)
	   */
	  setUrlBarSuggestions: function (suggestionList, selectedIndex) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_URL_BAR_SUGGESTIONS,
	      suggestionList,
	      selectedIndex
	    });
	  },
	
	  /**
	   * The active URL bar suggestion was clicked
	   * @param {boolean} isForSecondaryAction - Whether the secondary action is expected
	   *  which happens when a modifier key is pressed.
	   * @param {boolean} shiftKey - Whether the shift key is being pressed
	   */
	  activeSuggestionClicked: function (isForSecondaryAction, shiftKey) {
	    dispatch({
	      actionType: windowConstants.WINDOW_ACTIVE_URL_BAR_SUGGESTION_CLICKED,
	      isForSecondaryAction,
	      shiftKey
	    });
	  },
	
	  /**
	   * The previous suggestion is being selected
	   */
	  previousUrlBarSuggestionSelected: function () {
	    dispatch({
	      actionType: windowConstants.WINDOW_PREVIOUS_URL_BAR_SUGGESTION_SELECTED
	    });
	  },
	
	  /**
	   * The next suggestion is being selected
	   */
	  nextUrlBarSuggestionSelected: function () {
	    dispatch({
	      actionType: windowConstants.WINDOW_NEXT_URL_BAR_SUGGESTION_SELECTED
	    });
	  },
	
	  /**
	   * autocomplete for urlbar is being enabled or disabled.
	   * Autocomplete is defined to be the action of inserting text into the urlbar itself
	   * to the first item's URL match if possible.  The inserted text is auto selected so
	   * that the next character inserted will replace it.
	   * This is sometimes only temporarily disabled, e.g. a user is pressing backspace.
	   *
	   * @param {boolean} enabled - true if the urlbar should autocomplete
	   */
	  urlBarAutocompleteEnabled: function (enabled) {
	    dispatch({
	      actionType: windowConstants.WINDOW_URL_BAR_AUTOCOMPLETE_ENABLED,
	      enabled
	    });
	  },
	
	  /*
	   * Sets if we should render URL bar suggestions.
	   *
	   * @param enabled If false URL bar suggestions will not be rendered.
	   */
	  setRenderUrlBarSuggestions: function (enabled) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_RENDER_URL_BAR_SUGGESTIONS,
	      enabled
	    });
	  },
	
	  /**
	   * New URL bar suggestion search results are available.
	   * This is typically from a service like Duck Duck Go auto complete for the portion of text that the user typed in.
	   *
	   * @param {number} tabId - the tab id for the action
	   * @param searchResults The search results for the currently entered URL bar text.
	   */
	  searchSuggestionResultsAvailable: function (tabId, searchResults) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SEARCH_SUGGESTION_RESULTS_AVAILABLE,
	      tabId,
	      searchResults
	    });
	  },
	
	  /**
	   * Marks the URL bar text as selected or not
	   *
	   * @param {boolean} isSelected - Whether or not the URL bar text input should be selected
	   */
	  setUrlBarSelected: function (selected) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_URL_BAR_SELECTED,
	      selected
	    });
	  },
	
	  /**
	   * Marks the URL bar as active or not.
	   * If the URL bar is active that means it's in a position that it should be displaying
	   * autocomplete.  It may choose not to display autocomplete and still be active if there
	   * are no autocomplete results.
	   *
	   * @param {boolean} isActive - Whether or not the URL bar should be marked as active
	   */
	  setUrlBarActive: function (isActive) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_URL_BAR_ACTIVE,
	      isActive
	    });
	  },
	
	  /**
	   * Marks the URL bar as focused or not.
	   *
	   * @param {boolean} isFocused - Whether or not the URL bar should be marked as focused
	   */
	  setUrlBarFocused: function (isFocused) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_URL_BAR_FOCUSED,
	      isFocused
	    });
	  },
	  /**
	   * Dispatches a message to the store to indicate that the pending frame shortcut info should be updated.
	   *
	   * @param {Object} frameProps - Properties of the frame in question
	   * @param {string} activeShortcut - The text for the new shortcut. Usually this is null to clear info which was previously
	   * set from an IPC call.
	   * @param {string} activeShortcutDetails - Parameters for the shortcut action
	   */
	  setActiveFrameShortcut: function (frameProps, activeShortcut, activeShortcutDetails) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_ACTIVE_FRAME_SHORTCUT,
	      frameProps,
	      activeShortcut,
	      activeShortcutDetails
	    });
	  },
	
	  /**
	   * Dispatches a message to set the search engine details.
	   * @param {Object} searchDetail - the search details
	   */
	  setSearchDetail: function (searchDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_SEARCH_DETAIL,
	      searchDetail
	    });
	  },
	
	  /**
	   * Dispatches a message to set the find-in-page details.
	   * @param {Object} frameProps - Properties of the frame in question
	   * @param {Object} findDetail - the find details
	   */
	  setFindDetail: function (frameProps, findDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FIND_DETAIL,
	      frameProps,
	      findDetail
	    });
	  },
	
	  /**
	   * Dispatches a message to set add/edit bookmark details
	   * If set, also indicates that add/edit is shown
	   * @param {Object} currentDetail - Properties of the bookmark to change to
	   * @param {Object} originalDetail - Properties of the bookmark to edit
	   * @param {Object} destinationDetail - Will move the added bookmark to the specified position
	   * @param {boolean} shouldShowLocation - Whether or not to show the URL input
	   * @param {boolean} isBookmarkHanger - true if triggered from star icon in nav bar
	   */
	  setBookmarkDetail: function (currentDetail, originalDetail, destinationDetail, shouldShowLocation, isBookmarkHanger) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_BOOKMARK_DETAIL,
	      currentDetail,
	      originalDetail,
	      destinationDetail,
	      shouldShowLocation,
	      isBookmarkHanger
	    });
	  },
	
	  /**
	   * Dispatches a message to set context menu detail.
	   * If set, also indicates that the context menu is shown.
	   * @param {Object} detail - The context menu detail
	   */
	  setContextMenuDetail: function (detail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_CONTEXT_MENU_DETAIL,
	      detail
	    });
	  },
	
	  /**
	   * Dispatches a message to set popup window detail.
	   * If set, also indicates that the popup window is shown.
	   * @param {Object} detail - The popup window detail
	   */
	  setPopupWindowDetail: function (detail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_POPUP_WINDOW_DETAIL,
	      detail
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate that the frame should be muted
	   *
	   * @param {Object} frameProps - Properties of the frame in question
	   * @param {boolean} muted - true if the frame is muted
	   */
	  setAudioMuted: function (frameProps, muted) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_AUDIO_MUTED,
	      frameProps,
	      muted
	    });
	  },
	
	  /**
	   * Dispatches a mute/unmute call to all frames in a provided list (used by TabList).
	   *
	   * @param {Object} framePropsList - List of frame properties to consider
	   * @param {boolean} muted - true if the frames should be muted
	   */
	  muteAllAudio: function (framePropsList, mute) {
	    framePropsList.forEach(frameProps => {
	      if (mute && frameProps.get('audioPlaybackActive') && !frameProps.get('audioMuted')) {
	        this.setAudioMuted(frameProps, true);
	      } else if (!mute && frameProps.get('audioMuted')) {
	        this.setAudioMuted(frameProps, false);
	      }
	    });
	  },
	
	  /**
	   * Dispatches a mute call to all frames except the one provided.
	   * The provided frame will have its audio unmuted.
	   *
	   * @param {Object} frameToSkip - Properties of the frame to keep audio
	   */
	  muteAllAudioExcept: function (frameToSkip) {
	    let framePropsList = windowStore.getState().get('frames');
	
	    framePropsList.forEach(frameProps => {
	      if (frameProps.get('key') !== frameToSkip.get('key') && frameProps.get('audioPlaybackActive') && !frameProps.get('audioMuted')) {
	        this.setAudioMuted(frameProps, true);
	      } else {
	        this.setAudioMuted(frameProps, false);
	      }
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate that audio is playing
	   *
	   * @param {Object} frameProps - Properties of the frame in question
	   * @param {boolean} audioPlaybackActive - true if audio is playing in the frame
	   */
	  setAudioPlaybackActive: function (frameProps, audioPlaybackActive) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_AUDIO_PLAYBACK_ACTIVE,
	      frameProps,
	      audioPlaybackActive
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate that the theme color has changed for a page
	   *
	   * @param {Object} frameProps - Properties of the frame in question
	   * @param {string} themeColor - Theme color of the frame
	   * @param {string} computedThemeColor - Computed theme color of the
	   *   frame which is used if no frame color is present
	   */
	  setThemeColor: function (frameProps, themeColor, computedThemeColor) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_THEME_COLOR,
	      frameProps,
	      themeColor,
	      computedThemeColor
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate that the favicon has changed
	   *
	   * @param {Object} frameProps - Properties of the frame in question
	   * @param {string} favicon - A url to the favicon to use
	   */
	  setFavicon: function (frameProps, favicon) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FAVICON,
	      frameProps,
	      favicon
	    });
	  },
	
	  /**
	   * Dispatches a message to store the last zoom percentage.
	   * This is mainly just used to trigger updates throughout React.
	   *
	   * @param {object} frameProps - The frame to set blocked info on
	   * @param {number} percentage - The new zoom percentage
	   */
	  setLastZoomPercentage: function (frameProps, percentage) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_LAST_ZOOM_PERCENTAGE,
	      frameProps,
	      percentage
	    });
	  },
	
	  /**
	   * Sets the maximize state of the window
	   * @param {boolean} isMaximized - true if window is maximized
	   */
	  setMaximizeState: function (isMaximized) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_MAXIMIZE_STATE,
	      isMaximized
	    });
	  },
	
	  /**
	   * Saves the position of the window in the window state
	   * @param {Array} position - [x, y]
	   */
	  savePosition: function (position) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SAVE_POSITION,
	      position
	    });
	  },
	
	  /**
	   * Saves the size (width, height) of the window in the window state
	   * @param {Array} size - [x, y]
	   */
	  saveSize: function (size) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SAVE_SIZE,
	      size
	    });
	  },
	
	  /**
	   * Sets the fullscreen state of the window
	   * @param {boolean} isFullScreen - true if window is fullscreen
	   */
	  setWindowFullScreen: function (isFullScreen) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_FULLSCREEN_STATE,
	      isFullScreen
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate if the mouse is in the titlebar
	   *
	   * @param {boolean} mouseInTitlebar - true if the mouse is in the titlebar
	   */
	  setMouseInTitlebar: function (mouseInTitlebar) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_MOUSE_IN_TITLEBAR,
	      mouseInTitlebar
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate the site info, such as # of blocked ads, should be shown
	   *
	   * @param {boolean} isVisible - true if the site info should be shown
	   */
	  setSiteInfoVisible: function (isVisible) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_SITE_INFO_VISIBLE,
	      isVisible
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate the bravery panel should be shown
	   *
	   * @param {Object} braveryPanelDetail - Details about how to show the bravery panel.
	   *   Set to undefined to hide the panel.  See state documentation for more info.
	   */
	  setBraveryPanelDetail: function (braveryPanelDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_BRAVERY_PANEL_DETAIL,
	      braveryPanelDetail
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate if the downloads toolbar is visible
	   *
	   * @param {boolean} isVisible - true if the site info should be shown
	   */
	  setDownloadsToolbarVisible: function (isVisible) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_DOWNLOADS_TOOLBAR_VISIBLE,
	      isVisible
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate the release notes should be visible
	   *
	   * @param {boolean} isVisible - true if the site info should be shown
	   */
	  setReleaseNotesVisible: function (isVisible) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_RELEASE_NOTES_VISIBLE,
	      isVisible
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate the href preview should be shown
	   * for a hovered link
	   * @param {string} href - the href of the link
	   * @param {boolean} showOnRight - display in the right corner
	   */
	  setLinkHoverPreview: function (href, showOnRight) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_LINK_HOVER_PREVIEW,
	      href,
	      showOnRight
	    });
	  },
	
	  /**
	   * Dispatches a message to indicate the site info, such as # of blocked ads, should be shown
	   *
	   * @param {object} frameProps - The frame to set blocked info on
	   * @param {string} blockType - type of the block
	   * @param {string} location - URL that was blocked
	   */
	  setBlockedBy: function (frameProps, blockType, location) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_BLOCKED_BY,
	      frameProps,
	      blockType,
	      location
	    });
	  },
	
	  /**
	   * Similar to setBlockedBy but for httpse redirects
	   * @param {Object} frameProps - The frame to set blocked info on
	   * @param {string} ruleset - Name of the HTTPS Everywhere ruleset XML file
	   * @param {string} location - URL that was redirected
	   */
	  setRedirectedBy: function (frameProps, ruleset, location) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_REDIRECTED_BY,
	      frameProps,
	      ruleset,
	      location
	    });
	  },
	
	  /**
	   * Sets which scripts were blocked on a page.
	   * @param {Object} frameProps - The frame to set blocked info on
	   * @param {string} source - Source of blocked js
	   */
	  setNoScript: function (frameProps, source) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_NOSCRIPT,
	      frameProps,
	      source
	    });
	  },
	
	  /**
	   * Sets whether the noscript icon is visible.
	   * @param {boolean} isVisible
	   */
	  setNoScriptVisible: function (isVisible) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_NOSCRIPT_VISIBLE,
	      isVisible
	    });
	  },
	
	  /**
	   * Adds a history entry
	   * @param {Object} frameProps - The frame properties to change history for.
	   */
	  addHistory: function (frameProps) {
	    dispatch({
	      actionType: windowConstants.WINDOW_ADD_HISTORY,
	      frameProps
	    });
	  },
	
	  /**
	   * Sets whether the clear browsing data popup is visible
	   * @param {boolean} isVisible
	   */
	  setClearBrowsingDataPanelVisible: function (isVisible) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_CLEAR_BROWSING_DATA_VISIBLE,
	      isVisible
	    });
	  },
	
	  /**
	   * Sets the import browser data popup detail
	   * @param {Array} importBrowserDataDetail - list of supported browsers
	   */
	  setImportBrowserDataDetail: function (importBrowserDataDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_IMPORT_BROWSER_DATA_DETAIL,
	      importBrowserDataDetail
	    });
	  },
	
	  /**
	   * Sets the selected import browser data
	   * @param {Object} selected - selected browser data to import
	   */
	  setImportBrowserDataSelected: function (selected) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_IMPORT_BROWSER_DATA_SELECTED,
	      selected
	    });
	  },
	
	  widevineSiteAccessedWithoutInstall: function () {
	    dispatch({
	      actionType: windowConstants.WINDOW_WIDEVINE_SITE_ACCESSED_WITHOUT_INSTALL
	    });
	  },
	
	  /**
	   * Widevine popup detail changed
	   * @param {Object} widevinePanelDetail - detail of the widevine panel
	   */
	  widevinePanelDetailChanged: function (widevinePanelDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_WIDEVINE_PANEL_DETAIL_CHANGED,
	      widevinePanelDetail
	    });
	  },
	
	  /**
	   * Sets the manage autofill address popup detail
	   * @param {Object} currentDetail - Properties of the address to change to
	   * @param {Object} originalDetail - Properties of the address to edit
	   */
	  setAutofillAddressDetail: function (currentDetail, originalDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_AUTOFILL_ADDRESS_DETAIL,
	      currentDetail,
	      originalDetail
	    });
	  },
	
	  /**
	   * Sets the manage autofill credit card popup detail
	   * @param {Object} currentDetail - Properties of the credit card to change to
	   * @param {Object} originalDetail - Properties of the credit card to edit
	   */
	  setAutofillCreditCardDetail: function (currentDetail, originalDetail) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_AUTOFILL_CREDIT_CARD_DETAIL,
	      currentDetail,
	      originalDetail
	    });
	  },
	
	  /**
	   * Sets source of blocked active mixed content.
	   * @param {Object} frameProps - The frame to set source of
	   * blocked active mixed content on
	   * @param {string} source - Source of blocked active mixed content
	   */
	  setBlockedRunInsecureContent: function (frameProps, source) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_BLOCKED_RUN_INSECURE_CONTENT,
	      frameProps,
	      source
	    });
	  },
	
	  /**
	   * (Windows only)
	   * Dispatches a message to indicate the custom rendered Menubar should be toggled (shown/hidden)
	   * @param {boolean} isVisible (optional)
	   */
	  toggleMenubarVisible: function (isVisible) {
	    dispatch({
	      actionType: windowConstants.WINDOW_TOGGLE_MENUBAR_VISIBLE,
	      isVisible
	    });
	  },
	
	  /**
	   * (Windows only)
	   * Used to trigger the click() action for a menu
	   * Called from the Menubar control, handled in menu.js
	   * @param {string} label - text of the label that was clicked
	   */
	  clickMenubarSubmenu: function (label) {
	    dispatch({
	      actionType: windowConstants.WINDOW_CLICK_MENUBAR_SUBMENU,
	      label
	    });
	  },
	
	  /**
	   * Used by `main.js` when click happens on content area (not on a link or react control).
	   * - closes context menu
	   * - closes popup menu
	   * - nulls out menubar item selected (Windows only)
	   * - hides menubar if auto-hide preference is set (Windows only)
	   */
	  resetMenuState: function () {
	    dispatch({
	      actionType: windowConstants.WINDOW_RESET_MENU_STATE
	    });
	  },
	
	  /**
	   * (Windows only)
	   * Used to track selected index of a menu bar
	   * Needed because arrow keys can be used to navigate the custom menu
	   * @param {number} index - zero based index of the item.
	   *   Index excludes menu separators and hidden items.
	   */
	  setMenuBarSelectedIndex: function (index) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_MENUBAR_SELECTED_INDEX,
	      index
	    });
	  },
	
	  /**
	   * Used to track selected index of a context menu
	   * Needed because arrow keys can be used to navigate the context menu
	   * @param {number} index - zero based index of the item.
	   *   Index excludes menu separators and hidden items.
	   */
	  setContextMenuSelectedIndex: function (index) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_CONTEXT_MENU_SELECTED_INDEX,
	      index
	    });
	  },
	
	  /**
	   * (Windows only at the moment)
	   * Used to track last selected element (typically the URL bar or the frame)
	   * Important because focus is lost when using the custom menu and needs
	   * to be returned in order for the cut/copy operation to work
	   * @param {string} selector - selector used w/ querySelectorAll to return focus
	   *   after a menu item is selected (via the custom titlebar / menubar)
	   */
	  setLastFocusedSelector: function (selector) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_LAST_FOCUSED_SELECTOR,
	      selector
	    });
	  },
	
	  /**
	   * Used to get response details (such as the HTTP response code) from a response
	   * See `eventStore.js` for an example use-case
	   * @param {number} tabId - the tab id to set
	   * @param {Object} details - object containing response details
	   */
	  gotResponseDetails: function (tabId, details) {
	    dispatch({
	      actionType: windowConstants.WINDOW_GOT_RESPONSE_DETAILS,
	      tabId,
	      details
	    });
	  },
	
	  /**
	   * Fired when the mouse clicks or hovers over a bookmark folder in the bookmarks toolbar
	   * @param {number} folderId - from the siteDetail for the bookmark folder
	   *   If set to null, no menu is open. If set to -1, mouse is over a bookmark, not a folder
	   */
	  setBookmarksToolbarSelectedFolderId: function (folderId) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_BOOKMARKS_TOOLBAR_SELECTED_FOLDER_ID,
	      folderId
	    });
	  },
	
	  /**
	   * Fired when window receives or loses focus
	   * @param {boolean} hasFocus - true if focused, false if blurred
	   */
	  onFocusChanged: function (hasFocus) {
	    dispatch({
	      actionType: windowConstants.WINDOW_ON_FOCUS_CHANGED,
	      hasFocus
	    });
	  },
	
	  /**
	   * Set Modal Dialog detail
	   * @param {string} className - name of modal dialog
	   * @param {Object} props - properties of the modal dialog
	   */
	  setModalDialogDetail: function (className, props) {
	    dispatch({
	      actionType: windowConstants.WINDOW_SET_MODAL_DIALOG_DETAIL,
	      className,
	      props
	    });
	  },
	
	  autofillSelectionClicked: function (tabId, value, frontEndId, index) {
	    dispatch({
	      actionType: windowConstants.WINDOW_AUTOFILL_SELECTION_CLICKED,
	      tabId,
	      value,
	      frontEndId,
	      index
	    });
	  },
	
	  autofillPopupHidden: function (tabId, notify = false) {
	    dispatch({
	      actionType: windowConstants.WINDOW_AUTOFILL_POPUP_HIDDEN,
	      tabId,
	      notify
	    });
	  },
	
	  onTabClosedWithMouse: function (data) {
	    dispatch({
	      actionType: windowConstants.WINDOW_TAB_CLOSED_WITH_MOUSE,
	      data
	    });
	  },
	
	  onTabMouseLeave: function (data) {
	    dispatch({
	      actionType: windowConstants.WINDOW_TAB_MOUSE_LEAVE,
	      data
	    });
	  }
	};
	
	module.exports = windowActions;

/***/ },
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	
	// Top 500 alexa sites sorted by popularity
	const top500 = Immutable.fromJS(['gmail.com', 'google.com', 'mail.google.com', 'calendar.google.com', 'facebook.com', 'youtube.com', 'yahoo.com', 'baidu.com', 'wikipedia.org', 'qq.com', 'taobao.com', 'twitter.com', 'live.com', 'linkedin.com', 'sina.com.cn', 'amazon.com', 'hao123.com', 'google.co.in', 'blogspot.com', 'weibo.com', 'wordpress.com', '360.cn', 'yandex.ru', 'yahoo.co.jp', 'bing.com', 'tmall.com', 'vk.com', 'ebay.com', 'sohu.com', 'google.de', 'pinterest.com', '163.com', 'ask.com', 'google.co.uk', 'soso.com', 'google.fr', 'msn.com', 'tumblr.com', 'google.co.jp', 'mail.ru', 'instagram.com', 'microsoft.com', 'google.com.br', 'google.ru', 'paypal.com', 'imdb.com', 'google.es', 'apple.com', 'google.it', 'xinhuanet.com', 'amazon.co.jp', 'craigslist.org', 'neobux.com', 'imgur.com', 'stackoverflow.com', 'ifeng.com', 'google.com.mx', 'bbc.co.uk', 'google.com.hk', 'adcash.com', 'blogger.com', 'reddit.com', 'fc2.com', 'cnn.com', 'google.ca', 't.co', 'akamaihd.net', 'vube.com', 'go.com', 'people.com.cn', 'wordpress.org', 'about.com', 'adobe.com', 'alipay.com', 'odnoklassniki.ru', 'conduit.com', 'youku.com', 'googleusercontent.com', 'gmw.cn', 'google.com.tr', 'flickr.com', 'alibaba.com', 'aliexpress.com', 'godaddy.com', 'huffingtonpost.com', 'amazon.de', 'google.com.au', 'blogspot.in', 'ebay.de', 'netflix.com', 'kickass.to', 'google.pl', 'ku6.com', 'bp.blogspot.com', 'thepiratebay.se', 'dailymotion.com', 'weather.com', 'vimeo.com', 'dailymail.co.uk', 'cnet.com', 'espn.go.com', 'ebay.co.uk', 'rakuten.co.jp', 'indiatimes.com', 'themeforest.net', 'aol.com', 'amazonaws.com', 'uol.com.br', 'amazon.co.uk', 'google.com.sa', 'dropbox.com', 'google.com.ar', 'nytimes.com', 'slideshare.net', 'google.com.eg', 'pixnet.net', 'globo.com', 'adf.ly', 'china.com', 'secureserver.net', 'm2newmedia.com', 'directrev.com', 'buzzfeed.com', 'mozilla.org', 'wikimedia.org', 'fiverr.com', 'google.com.pk', 'ameblo.jp', 'booking.com', 'google.nl', 'livejournal.com', 'deviantart.com', 'yelp.com', 'sogou.com', 'google.com.tw', 'flipkart.com', 'wikia.com', 'hootsuite.com', 'blogfa.com', 'developunit.info', 'etsy.com', 'outbrain.com', 'wikihow.com', 'avg.com', 'google.co.th', 'clkmon.com', 'google.co.za', 'stumbleupon.com', 'soundcloud.com', 'livedoor.com', '4shared.com', 'w3schools.com', 'badoo.com', 'sourceforge.net', 'files.wordpress.com', 'archive.org', 'mediafire.com', 'google.co.ve', 'theguardian.com', 'liveinternet.ru', 'bankofamerica.com', 'addthis.com', 'aweber.com', 'forbes.com', 'foxnews.com', 'ask.fm', 'answers.com', 'indeed.com', 'chase.com', 'bet365.com', 'salesforce.com', 'gameforge.com', 'china.com.cn', 'hostgator.com', 'naver.com', 'espncricinfo.com', 'skype.com', 'google.gr', 'github.com', 'softonic.com', 'statcounter.com', 'google.com.co', 'google.co.id', 'reference.com', 'onet.pl', 'spiegel.de', 'nicovideo.jp', 'shutterstock.com', 'google.be', 'allegro.pl', 'walmart.com', 'google.com.ua', 'google.com.vn', 'google.com.ng', 'mailchimp.com', 'stackexchange.com', 'sharelive.net', 'so.com', 'gamer.com.tw', 'tripadvisor.com', 'zillow.com', 'wsj.com', 'wix.com', 'popads.net', 'loading-delivery1.com', 'google.ro', 'wellsfargo.com', 'wordreference.com', 'goo.ne.jp', 'bild.de', 'photobucket.com', 'pandora.com', 'google.se', 'bleacherreport.com', 'pcpop.com', 'media.tumblr.com', 'naver.jp', 'warriorforum.com', 'babylon.com', 'zedo.com', 'weebly.com', 'google.dz', 'taringa.net', 'blogspot.com.es', 'google.at', 'rutracker.org', 'php.net', 'google.com.ph', 'ups.com', '39.net', 'leboncoin.fr', 'mashable.com', 'businessinsider.com', 'goodreads.com', 'quikr.com', 'usatoday.com', 'dmm.co.jp', 'ucoz.ru', 'gmx.net', 'rambler.ru', 'rediff.com', 'domaintools.com', 'telegraph.co.uk', 'google.com.pe', 'comcast.net', 'intuit.com', 'kaskus.co.id', 'tianya.cn', 'avito.ru', 'ettoday.net', 'thefreedictionary.com', 'wp.pl', 'ikea.com', 'google.ch', 'amazon.fr', 'lpcloudsvr302.com', 'goal.com', 'hurriyet.com.tr', 'uploaded.net', 'ndtv.com', 'baomihua.com', 'usps.com', 'xcar.com.cn', 'coccoc.com', 'moz.com', 'google.cl', 'google.pt', 'iqiyi.com', 'pchome.net', 'codecanyon.net', 'adrotator.se', 'goodgamestudios.com', 'twitch.tv', 'google.com.bd', 'ci123.com', 'google.com.sg', 'huanqiu.com', 'fedex.com', 'nbcnews.com', 'web.de', 'onclickads.net', 'it168.com', 'bitly.com', 'google.ae', 'washingtonpost.com', 'ehow.com', 'milliyet.com.tr', 'google.co.kr', 'suning.com', 'enet.com.cn', '9gag.com', 'delta-search.com', 'hp.com', 'disqus.com', 'samsung.com', 'sochi2014.com', 'bitauto.com', 'xuite.net', 'daum.net', 'meetup.com', 'varzesh3.com', 'olx.in', 'myntra.com', 'snapdeal.com', 'scribd.com', 'extratorrent.cc', 'infusionsoft.com', '4dsply.com', 'mercadolivre.com.br', 'tmz.com', 'orange.fr', 'google.cz', 'reuters.com', 'constantcontact.com', 'chinaz.com', 'nih.gov', 'eazel.com', 'accuweather.com', 'java.com', 'hulu.com', 'bloomberg.com', 'free.fr', 'xywy.com', 'detik.com', 'libero.it', 'speedtest.net', 'mobile01.com', 'clickbank.com', 'microsoftonline.com', 'yandex.ua', 'gsmarena.com', 'bluehost.com', 'bbc.com', 'time.com', 'webmd.com', 'marca.com', 'hudong.com', 'kooora.com', 'histats.com', 'beeg.com', 'caijing.com.cn', 'xing.com', 'americanexpress.com', 'kwejk.pl', 'ad6media.fr', 'cj.com', 'in.com', 'bestbuy.com', 'zippyshare.com', 'mywebsearch.com', 'google.co.hu', 'nba.com', 'adnxs.com', 'elpais.com', 'amazon.cn', 'intoday.in', 'tinyurl.com', 'google.no', 'ign.com', 'cloudfront.net', 'hdfcbank.com', 'ebay.in', 'snapdo.com', 'lenta.ru', 'techcrunch.com', 'google.ie', 'getresponse.com', 'force.com', 'irs.gov', 'tagged.com', 'zendesk.com', 'pof.com', 'rt.com', 'cnzz.com', 'repubblica.it', 'google.az', 'douban.com', 'plugrush.com', 'groupon.com', 'siteadvisor.com', 'google.cn', 'seznam.cz', 'ero-advertising.com', 'kakaku.com', 'w3.org', 'elmundo.es', 'xe.com', 'feedly.com', 'list-manage.com', 't-online.de', 'dell.com', 'nydailynews.com', 'amazon.in', 'cntv.cn', 'ameba.jp', 'jrj.com.cn', 'surveymonkey.com', 'target.com', 'yaolan.com', 'ebay.com.au', 'odesk.com', 'uimserv.net', 'okcupid.com', 'ce.cn', 'rbc.ru', 'doorblog.jp', 'joomla.org', 'doubleclick.com', 'upworthy.com', 'habrahabr.ru', 'zimbio.com', 'life.com.tw', 'naukri.com', 'istockphoto.com', 'aili.com', 'zing.vn', 'ebay.it', 'jimdo.com', 'fbcdn.net', 'blogspot.de', 'google.co.il', 'mama.cn', 'google.dk', 'blackhatworld.com', 'webmoney.ru', 'lenovo.com', 'flipora.com', 'freelancer.com', 'latimes.com', 'gazeta.pl', 'justdial.com', 'eyny.com', 'match.com', 'pcbaby.com.cn', 'retailmenot.com', '4399.com', 'drudgereport.com', 'quora.com', 'abcnews.go.com', 'informer.com', 'att.com', 'mysearchdial.com', 'sahibinden.com', 'google.fi', 'capitalone.com', 'elance.com', 'icicibank.com', 'ck101.com', 'teensdigest.com', 'goo.gl', 'probux.com', 'issuu.com', 'ig.com.br', 'twoo.com', 'qtrax.com', 'pch.com', 'blogspot.ru', 'lifehacker.com', 'subscene.com', 'jabong.com', 'blogspot.it', 'jd.com', 'hypergames.net', 'xda-developers.com', 'livescore.com', 'empowernetwork.com', 'iminent.com', 'xgo.com.cn', 'irctc.co.in', 'sberbank.ru', 'foxsports.com', 'kinopoisk.ru', 'exoclick.com', 'rednet.cn', 'pcgames.com.cn', 'ning.com', 'lady8844.com', 'wideinfo.org', 'webcrawler.com', 'yesky.com', 'trulia.com', 'zeobit.com', 'searchfun.in', 'babytree.com', 'youm7.com', '123rf.com', 'commentcamarche.net']);
	
	module.exports = top500;

/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const urlParse = __webpack_require__(192);
	const appConfig = __webpack_require__(203);
	const _ = __webpack_require__(621);
	const Immutable = __webpack_require__(188);
	
	const sigmoid = t => {
	  return 1 / (1 + Math.pow(Math.E, -t));
	};
	
	const ONE_DAY = 1000 * 60 * 60 * 24;
	
	/*
	 * Calculate the sorting priority for a history item based on number of
	 * accesses and time since last access
	 *
	 * @param {number} count - The number of times this site has been accessed
	 * @param {number} currentTime - Current epoch millisecnds
	 * @param {boolean} lastAccessedTime - Epoch milliseconds of last access
	 *
	 */
	module.exports.sortingPriority = (count, currentTime, lastAccessedTime, ageDecayConstant) => {
	  // number of days since last access (with fractional component)
	  const ageInDays = (currentTime - (lastAccessedTime || currentTime)) / ONE_DAY;
	  // decay factor based on age
	  const ageFactor = 1 - (sigmoid(ageInDays / ageDecayConstant) - 0.5) * 2;
	  // sorting priority
	  // console.log(count, ageInDays, ageFactor, count * ageFactor)
	  return count * ageFactor;
	};
	
	/*
	 * Sort two history items by priority
	 *
	 * @param {ImmutableObject} s1 - first history item
	 * @param {ImmutableObject} s2 - second history item
	 *
	 * Return the relative order of two site entries taking into consideration
	 * the number of times the site has been accessed and the length of time
	 * since the last access.
	 *
	 * The base sort order is determined by the count attribute of the site
	 * entry. A modifier is then computed based on the length of time since
	 * the last access. A sigmoid function is used to weight more recent
	 * entries higher than entries in the past. This is not a linear function,
	 * entries in the far past with many counts will still be discounted
	 * heavily as the sigmoid modifier will cancel most of the count
	 * base parameter.
	 *
	 * Below is a sample comparison of two sites that have been accessed
	 * recently (but not at the identical time). Each site is accessed
	 * 9 times. The count is discounted by an aging factor calculated
	 * using the sigmoid decay function.
	 *
	 *   http://www.gm.ca/gm/
	 *
	 *   ageInDays 0.17171469907407408
	 *   ageFactor 0.9982828546969802
	 *   count     9
	 *   priority  0.9982828546969802
	 *
	 *   http://www.gm.com/index.html
	 *
	 *   ageInDays 0.17148791666666666
	 *   ageFactor 0.9982851225143763
	 *   count     9
	 *   priority  0.9982851225143763
	 *
	 */
	module.exports.sortByAccessCountWithAgeDecay = (s1, s2) => {
	  const now = new Date();
	  const s1Priority = module.exports.sortingPriority(s1.get('count') || 0, now.getTime(), s1.get('lastAccessedTime') || now.getTime(), appConfig.urlSuggestions.ageDecayConstant);
	  const s2Priority = module.exports.sortingPriority(s2.get('count') || 0, now.getTime(), s2.get('lastAccessedTime') || now.getTime(), appConfig.urlSuggestions.ageDecayConstant);
	  return s2Priority - s1Priority;
	};
	
	/*
	 * Return a 1 if the url is 'simple' as in without query, search or
	 * hash components. Return 0 otherwise.
	 *
	 * @param {ImmutableObject} site - object represent history entry
	 *
	 */
	module.exports.simpleDomainNameValue = site => {
	  const parsed = urlParse(site.get('location'));
	  if (parsed.hash === null && parsed.search === null && parsed.query === null && parsed.pathname === '/') {
	    return 1;
	  } else {
	    return 0;
	  }
	};
	
	/*
	 * Normalize a location for url suggestion sorting
	 *
	 * @param {string} location - history item location
	 *
	 */
	module.exports.normalizeLocation = location => {
	  location = location.replace(/www\./, '');
	  location = location.replace(/^http:\/\//, '');
	  location = location.replace(/^https:\/\//, '');
	  return location;
	};
	
	/*
	 * Determines based on user input if the location should
	 * be normalized.  If the user is typing http prefix then
	 * they are specifying something explicitly.
	 *
	 * @return true if urls being compared should be normalized
	 */
	module.exports.shouldNormalizeLocation = input => {
	  const prefixes = ['http://', 'https://', 'www.'];
	  return prefixes.every(prefix => {
	    if (input.length > prefix.length) {
	      return true;
	    }
	    for (let i = 0; i < Math.min(prefix.length, input.length); i++) {
	      if (input[i] !== prefix[i]) {
	        return true;
	      }
	    }
	    return false;
	  });
	};
	
	/*
	 * return a site representing the simple location for a
	 * set of related sites without a history item for the
	 * simple location.
	 *
	 * This is used to show a history suggestion for something
	 * like www.google.com if it has not been visited but
	 * there are two or more locations with that prefix containing
	 * path info or parameters
	 *
	 * @param {Array[Object]} sites - array of similar sites
	 */
	var virtualSite = sites => {
	  // array of sites without paths or query params
	  var simple = sites.filter(parsed => {
	    return parsed.hash === null && parsed.search === null && parsed.query === null && parsed.pathname === '/';
	  });
	  // if there are no simple locations then we will build and return one
	  if (simple.length === 0) {
	    // we need to create a virtual history item
	    return Immutable.Map({
	      location: sites[0].protocol + '//' + sites[0].host,
	      count: 0,
	      title: sites[0].host,
	      lastAccessedTime: new Date().getTime()
	    });
	  } else {
	    return;
	  }
	};
	
	/*
	 * Create an array of simple locations from history
	 * The simple locations will be the root domain for a location
	 * without parameters or path
	 *
	 * @param {ImmutableList[ImmutableMap]} - history
	 */
	module.exports.createVirtualHistoryItems = historySites => {
	  // parse each history item
	  var parsedHistorySites = historySites.map(site => {
	    return urlParse(site.get('location'));
	  }).toArray();
	  // group them by host
	  var grouped = _.groupBy(parsedHistorySites, parsedSite => {
	    return parsedSite.host || 'unknown';
	  });
	  // find groups with more than 2 of the same host
	  var multiGroupKeys = _.filter(_.keys(grouped), k => {
	    return grouped[k].length > 2;
	  });
	  // potentially create virtual history items
	  var virtualHistorySites = _.map(multiGroupKeys, location => {
	    return virtualSite(grouped[location]);
	  });
	  virtualHistorySites = _.filter(virtualHistorySites, site => {
	    return !!site;
	  });
	  return virtualHistorySites;
	};

/***/ },
/* 719 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const suggestionTypes = {
	  TAB: 'tabSuggestion',
	  BOOKMARK: 'bookmarkSuggestion',
	  HISTORY: 'historySuggestion',
	  ABOUT_PAGES: 'aboutPagesSuggestion',
	  SEARCH: 'searchSuggestion',
	  TOP_SITE: 'topSiteSuggestion'
	};
	
	module.exports = suggestionTypes;

/***/ },
/* 720 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const windowActions = __webpack_require__(716);
	const windowStore = __webpack_require__(701);
	const { getActiveFrame } = __webpack_require__(705);
	
	const navigateSiteClickHandler = formatUrl => (site, isForSecondaryAction, shiftKey) => {
	  const location = formatUrl(site);
	  // When clicked make sure to hide autocomplete
	  windowActions.setRenderUrlBarSuggestions(false);
	  if (isForSecondaryAction) {
	    windowActions.newFrame({
	      location,
	      partitionNumber: site && site.get && site.get('partitionNumber') || undefined
	    }, !!shiftKey);
	  } else {
	    const activeFrame = getActiveFrame(windowStore.state);
	    windowActions.loadUrl(activeFrame, location);
	    windowActions.setUrlBarActive(false);
	  }
	};
	
	const frameClickHandler = frameProps => windowActions.setActiveFrame(frameProps);
	
	module.exports = {
	  navigateSiteClickHandler,
	  frameClickHandler
	};

/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Immutable = __webpack_require__(188);
	const electron = __webpack_require__(703);
	const ipc = electron.ipcRenderer;
	// const systemPreferences = electron.remote.systemPreferences
	
	// Actions
	const appActions = __webpack_require__(704);
	const windowActions = __webpack_require__(716);
	const webviewActions = __webpack_require__(722);
	const contextMenus = __webpack_require__(723);
	const getSetting = __webpack_require__(202).getSetting;
	
	// Components
	const NavigationBar = __webpack_require__(737);
	const Frame = __webpack_require__(753);
	const TabPages = __webpack_require__(757);
	const TabsToolbar = __webpack_require__(758);
	const FindBar = __webpack_require__(764);
	const UpdateBar = __webpack_require__(765);
	const NotificationBar = __webpack_require__(767);
	const DownloadsBar = __webpack_require__(768);
	const Button = __webpack_require__(244);
	const BrowserActionButton = __webpack_require__(771);
	const SiteInfo = __webpack_require__(772);
	const BraveryPanel = __webpack_require__(774);
	const ClearBrowsingDataPanel = __webpack_require__(775);
	const ImportBrowserDataPanel = __webpack_require__(776);
	const WidevinePanel = __webpack_require__(777);
	const AutofillAddressPanel = __webpack_require__(778);
	const AutofillCreditCardPanel = __webpack_require__(779);
	const AddEditBookmark = __webpack_require__(780);
	const LoginRequired = __webpack_require__(781);
	const ReleaseNotes = __webpack_require__(782);
	const BookmarksToolbar = __webpack_require__(783);
	const ContextMenu = __webpack_require__(785);
	const PopupWindow = __webpack_require__(786);
	const NoScriptInfo = __webpack_require__(787);
	const LongPressButton = __webpack_require__(747);
	const Menubar = __webpack_require__(788);
	const WindowCaptionButtons = __webpack_require__(789);
	const CheckDefaultBrowserDialog = __webpack_require__(790);
	// Constants
	const appConfig = __webpack_require__(203);
	const messages = __webpack_require__(211);
	const settings = __webpack_require__(204);
	const siteTags = __webpack_require__(256);
	const dragTypes = __webpack_require__(257);
	const keyCodes = __webpack_require__(743);
	const keyLocations = __webpack_require__(791);
	const isWindows = process.platform === 'win32';
	const { bookmarksToolbarMode } = __webpack_require__(206);
	
	// State handling
	const basicAuthState = __webpack_require__(792);
	const extensionState = __webpack_require__(734);
	const aboutHistoryState = __webpack_require__(794);
	const frameStateUtil = __webpack_require__(705);
	const siteUtil = __webpack_require__(259);
	const searchProviders = __webpack_require__(210);
	const defaultBrowserState = __webpack_require__(795);
	
	// Util
	const cx = __webpack_require__(236);
	const eventUtil = __webpack_require__(250);
	const { isIntermediateAboutPage, getBaseUrl, isNavigatableAboutPage } = __webpack_require__(187);
	const siteSettings = __webpack_require__(755);
	const urlParse = __webpack_require__(192);
	const debounce = __webpack_require__(209);
	const { currentWindow, isMaximized, isFocused, isFullScreen } = __webpack_require__(706);
	const emptyMap = new Immutable.Map();
	const emptyList = new Immutable.List();
	
	class Main extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onCloseFrame = this.onCloseFrame.bind(this);
	    this.onBack = this.onBack.bind(this);
	    this.onForward = this.onForward.bind(this);
	    this.onBackLongPress = this.onBackLongPress.bind(this);
	    this.onForwardLongPress = this.onForwardLongPress.bind(this);
	    this.onMouseDown = this.onMouseDown.bind(this);
	    this.onClickWindow = this.onClickWindow.bind(this);
	    this.onDoubleClick = this.onDoubleClick.bind(this);
	    this.onDragOver = this.onDragOver.bind(this);
	    this.onDrop = this.onDrop.bind(this);
	    this.onHideSiteInfo = this.onHideSiteInfo.bind(this);
	    this.onHideBraveryPanel = this.onHideBraveryPanel.bind(this);
	    this.onHideClearBrowsingDataPanel = this.onHideClearBrowsingDataPanel.bind(this);
	    this.onHideImportBrowserDataPanel = this.onHideImportBrowserDataPanel.bind(this);
	    this.onHideWidevinePanel = this.onHideWidevinePanel.bind(this);
	    this.onHideAutofillAddressPanel = this.onHideAutofillAddressPanel.bind(this);
	    this.onHideAutofillCreditCardPanel = this.onHideAutofillCreditCardPanel.bind(this);
	    this.onHideNoScript = this.onHideNoScript.bind(this);
	    this.onHideReleaseNotes = this.onHideReleaseNotes.bind(this);
	    this.onHideCheckDefaultBrowserDialog = this.onHideCheckDefaultBrowserDialog.bind(this);
	    this.onBraveMenu = this.onBraveMenu.bind(this);
	    this.onHamburgerMenu = this.onHamburgerMenu.bind(this);
	    this.onTabContextMenu = this.onTabContextMenu.bind(this);
	    this.onFind = this.onFind.bind(this);
	    this.onFindHide = this.onFindHide.bind(this);
	    this.checkForTitleMode = debounce(this.checkForTitleMode.bind(this), 20);
	    this.lastKeyPressed = undefined;
	  }
	  registerWindowLevelShortcuts() {
	    // For window level shortcuts that don't work as local shortcuts
	    const isDarwin = process.platform === 'darwin';
	    document.addEventListener('keydown', e => {
	      switch (e.which) {
	        case keyCodes.ESC:
	          this.exitFullScreen();
	          break;
	        case keyCodes.F12:
	          if (!isDarwin) {
	            ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_TOGGLE_DEV_TOOLS);
	          }
	          break;
	        case keyCodes.NUMPAD_PLUS:
	          if (eventUtil.isForSecondaryAction(e)) {
	            ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_ZOOM_IN);
	          }
	          break;
	        case keyCodes.NUMPAD_MINUS:
	          if (eventUtil.isForSecondaryAction(e)) {
	            ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_ZOOM_OUT);
	          }
	          break;
	      }
	
	      this.lastKeyPressed = e.which;
	    });
	  }
	
	  registerCustomTitlebarHandlers() {
	    if (this.customTitlebar.enabled) {
	      document.addEventListener('keyup', e => {
	        const customTitlebar = this.customTitlebar;
	        switch (e.which) {
	          case keyCodes.ALT:
	            // Ignore right alt (AltGr)
	            if (e.location === keyLocations.DOM_KEY_LOCATION_RIGHT) {
	              break;
	            }
	
	            // Only show/hide the menu if last key pressed was ALT
	            // (typing ALT codes should not toggle menu)
	            if (this.lastKeyPressed === keyCodes.ALT) {
	              e.preventDefault();
	
	              if (getSetting(settings.AUTO_HIDE_MENU)) {
	                windowActions.toggleMenubarVisible(null);
	              } else {
	                if (customTitlebar.menubarSelectedIndex) {
	                  windowActions.setMenuBarSelectedIndex();
	                  windowActions.setContextMenuDetail();
	                } else {
	                  windowActions.setMenuBarSelectedIndex(0);
	                }
	              }
	            }
	            break;
	          case keyCodes.ESC:
	            if (getSetting(settings.AUTO_HIDE_MENU) && customTitlebar.menubarVisible && !customTitlebar.menubarSelectedIndex) {
	              e.preventDefault();
	              windowActions.toggleMenubarVisible(false);
	              break;
	            }
	            if (customTitlebar.menubarSelectedIndex) {
	              e.preventDefault();
	              windowActions.setMenuBarSelectedIndex();
	              windowActions.setContextMenuDetail();
	            }
	            break;
	        }
	      });
	
	      document.addEventListener('focus', e => {
	        let selector = document.activeElement.id ? '#' + document.activeElement.id : null;
	
	        if (!selector && document.activeElement.tagName === 'WEBVIEW') {
	          const frameKeyAttribute = document.activeElement.getAttribute('data-frame-key');
	          if (frameKeyAttribute) {
	            selector = 'webview[data-frame-key="' + frameKeyAttribute + '"]';
	          }
	        }
	
	        windowActions.setLastFocusedSelector(selector);
	      }, true);
	    }
	  }
	
	  exitFullScreen() {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    if (activeFrame && activeFrame.get('isFullScreen')) {
	      windowActions.setFullScreen(activeFrame, false);
	    }
	  }
	
	  registerSwipeListener() {
	    // Navigates back/forward on macOS two-finger swipe
	    var trackingFingers = false;
	    var swipeGesture = false;
	    var isSwipeOnEdge = false;
	    var deltaX = 0;
	    var deltaY = 0;
	    var startTime = 0;
	    var time;
	
	    this.mainWindow.addEventListener('wheel', e => {
	      if (trackingFingers) {
	        deltaX = deltaX + e.deltaX;
	        deltaY = deltaY + e.deltaY;
	        time = new Date().getTime() - startTime;
	      }
	    }, { passive: true });
	    ipc.on(messages.DEBUG_REACT_PROFILE, (e, args) => {
	      window.perf = __webpack_require__(796);
	      if (!window.perf.isRunning()) {
	        if (!window.isFirstProfiling) {
	          window.isFirstProfiling = true;
	          console.info('See this blog post for more information on profiling: http://benchling.engineering/performance-engineering-with-react/');
	        }
	        currentWindow.openDevTools();
	        console.log('starting to profile...');
	        window.perf.start();
	      } else {
	        window.perf.stop();
	        console.log('profiling stopped. Wasted:');
	        window.perf.printWasted();
	      }
	    });
	    ipc.on(messages.OPEN_BRAVERY_PANEL, e => {
	      if (!this.braveShieldsDisabled) {
	        this.onBraveMenu();
	      } else {
	        windowActions.newFrame({
	          location: 'about:preferences#shields',
	          singleFrame: true
	        }, true);
	      }
	    });
	    ipc.on(messages.ENABLE_SWIPE_GESTURE, e => {
	      swipeGesture = true;
	    });
	    ipc.on(messages.DISABLE_SWIPE_GESTURE, e => {
	      swipeGesture = false;
	    });
	    ipc.on('scroll-touch-begin', function () {
	      if (swipeGesture) {
	        // TODO(Anthony): respecting system settings on cr54
	        // systemPreferences.isSwipeTrackingFromScrollEventsEnabled()) {
	        trackingFingers = true;
	        isSwipeOnEdge = false;
	        startTime = new Date().getTime();
	      }
	    });
	    ipc.on('scroll-touch-end', function () {
	      if (time > 50 && trackingFingers && Math.abs(deltaY) < 50 && isSwipeOnEdge) {
	        if (deltaX > 70) {
	          ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_FORWARD);
	        } else if (deltaX < -70) {
	          ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_BACK);
	        }
	      }
	      trackingFingers = false;
	      deltaX = 0;
	      deltaY = 0;
	      startTime = 0;
	    });
	    ipc.on('scroll-touch-edge', function () {
	      isSwipeOnEdge = true;
	    });
	    ipc.on(messages.LEAVE_FULL_SCREEN, this.exitFullScreen.bind(this));
	  }
	
	  loadSearchProviders() {
	    let entries = searchProviders.providers;
	    let engine = getSetting(settings.DEFAULT_SEARCH_ENGINE);
	    if (this.lastLoadedSearchProviders === undefined || engine !== this.lastLoadedSearchProviders) {
	      entries.forEach(entry => {
	        if (entry.name === engine) {
	          windowActions.setSearchDetail(Immutable.fromJS({
	            searchURL: entry.search,
	            autocompleteURL: entry.autocomplete,
	            platformClientId: entry.platformClientId
	          }));
	          this.lastLoadedSearchProviders = engine;
	          return false;
	        }
	      });
	    }
	  }
	
	  componentWillUpdate(nextProps) {
	    if (!this.props.appState.getIn([appConfig.resourceNames.WIDEVINE, 'ready']) && nextProps.appState.getIn([appConfig.resourceNames.WIDEVINE, 'ready'])) {
	      const widevinePanelDetail = this.props.windowState.get('widevinePanelDetail');
	      // User may have enabled from preferences and no details are present
	      if (!widevinePanelDetail) {
	        return;
	      }
	      const origin = siteUtil.getOrigin(widevinePanelDetail.get('location'));
	      // This automatically handles reloading the frame as well
	      appActions.changeSiteSetting(origin, appConfig.resourceNames.WIDEVINE, widevinePanelDetail.get('alsoAddRememberSiteSetting') ? 1 : 0);
	    }
	  }
	
	  componentDidUpdate(prevProps) {
	    this.loadSearchProviders();
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    const activeFramePrev = frameStateUtil.getActiveFrame(prevProps.windowState);
	    const activeFrameTitle = activeFrame && (activeFrame.get('title') || activeFrame.get('location')) || '';
	    const activeFramePrevTitle = activeFramePrev && (activeFramePrev.get('title') || activeFramePrev.get('location')) || '';
	    if (activeFrameTitle !== activeFramePrevTitle) {
	      currentWindow.setTitle(activeFrameTitle);
	    }
	
	    // If the tab changes or was closed, exit out of full screen to give a better
	    // picture of what's happening.
	    if (activeFramePrev && activeFrame && activeFrame.get('key') !== activeFramePrev.get('key') && activeFramePrev.get('isFullScreen')) {
	      windowActions.setFullScreen(activeFramePrev, false);
	    }
	  }
	
	  componentDidMount() {
	    this.registerSwipeListener();
	    this.registerWindowLevelShortcuts();
	    this.registerCustomTitlebarHandlers();
	
	    ipc.on(messages.SHORTCUT_NEW_FRAME, (event, url, options = {}) => {
	      if (options.singleFrame) {
	        const frameProps = self.props.windowState.get('frames').find(frame => frame.get('location') === url);
	        if (frameProps) {
	          windowActions.setActiveFrame(frameProps);
	          return;
	        }
	      }
	      let openInForeground = getSetting(settings.SWITCH_TO_NEW_TABS) === true || options.openInForeground;
	      const frameOpts = options.frameOpts || {
	        location: url,
	        isPrivate: !!options.isPrivate,
	        isPartitioned: !!options.isPartitioned,
	        parentFrameKey: options.parentFrameKey
	      };
	      if (options.partitionNumber !== undefined) {
	        frameOpts.partitionNumber = options.partitionNumber;
	      }
	      windowActions.newFrame(frameOpts, openInForeground);
	    });
	
	    ipc.on(messages.NEW_POPUP_WINDOW, function (evt, extensionId, src, props) {
	      windowActions.setPopupWindowDetail(Immutable.fromJS({
	        left: props.left,
	        top: props.top,
	        height: props.height,
	        width: props.width,
	        src
	      }));
	    });
	
	    ipc.on(messages.SHORTCUT_CLOSE_FRAME, (e, i) => typeof i !== 'undefined' && i !== null ? windowActions.closeFrame(self.props.windowState.get('frames'), frameStateUtil.getFrameByKey(self.props.windowState, i)) : windowActions.closeFrame(self.props.windowState.get('frames'), frameStateUtil.getActiveFrame(this.props.windowState)));
	    ipc.on(messages.SHORTCUT_UNDO_CLOSED_FRAME, () => windowActions.undoClosedFrame());
	
	    ipc.on(messages.SHORTCUT_CLOSE_OTHER_FRAMES, (e, key, isCloseRight, isCloseLeft) => {
	      const currentIndex = frameStateUtil.getFrameIndex(self.props.windowState, key);
	      if (currentIndex === -1) {
	        return;
	      }
	
	      self.props.windowState.get('frames').forEach((frame, i) => {
	        if (!frame.get('pinnedLocation') && (i < currentIndex && isCloseLeft || i > currentIndex && isCloseRight)) {
	          windowActions.closeFrame(self.props.windowState.get('frames'), frame);
	        }
	      });
	    });
	
	    ipc.on(messages.SHOW_DOWNLOADS_TOOLBAR, () => {
	      windowActions.setDownloadsToolbarVisible(true);
	    });
	
	    ipc.on(messages.HIDE_DOWNLOADS_TOOLBAR, () => {
	      windowActions.setDownloadsToolbarVisible(false);
	    });
	
	    const self = this;
	    ipc.on(messages.SHORTCUT_SET_ACTIVE_FRAME_BY_INDEX, (e, i) => windowActions.setActiveFrame(frameStateUtil.getFrameByDisplayIndex(self.props.windowState, i)));
	
	    ipc.on(messages.SHORTCUT_SET_ACTIVE_FRAME_TO_LAST, () => windowActions.setActiveFrame(self.props.windowState.getIn(['frames', self.props.windowState.get('frames').size - 1])));
	
	    ipc.on(messages.BLOCKED_RESOURCE, (e, blockType, details) => {
	      const frameProps = frameStateUtil.getFrameByTabId(self.props.windowState, details.tabId);
	      frameProps && windowActions.setBlockedBy(frameProps, blockType, details.url);
	    });
	
	    ipc.on(messages.BLOCKED_PAGE, (e, blockType, details) => {
	      const frameProps = frameStateUtil.getFrameByTabId(self.props.windowState, details.tabId);
	      if (!frameProps) {
	        return;
	      }
	    });
	
	    ipc.on(messages.HTTPSE_RULE_APPLIED, (e, ruleset, details) => {
	      const frameProps = frameStateUtil.getFrameByTabId(self.props.windowState, details.tabId);
	      frameProps && windowActions.setRedirectedBy(frameProps, ruleset, details.url);
	    });
	
	    ipc.on(messages.SHORTCUT_ACTIVE_FRAME_BACK, this.onBack);
	    ipc.on(messages.SHORTCUT_ACTIVE_FRAME_FORWARD, this.onForward);
	
	    ipc.on(messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL, (e, url) => {
	      const activeFrame = frameStateUtil.getActiveFrame(self.props.windowState);
	      windowActions.loadUrl(activeFrame, url);
	    });
	
	    ipc.on(messages.CERT_ERROR, (e, details) => {
	      const frame = frameStateUtil.getFrameByTabId(self.props.windowState, details.tabId);
	      if (frame && (frame.get('location') === details.url || frame.get('provisionalLocation') === details.url)) {
	        windowActions.setFrameError(frame, {
	          url: details.url,
	          error: details.error
	        });
	        windowActions.loadUrl(frame, 'about:certerror');
	      }
	    });
	
	    ipc.on(messages.SET_SECURITY_STATE, (e, frameKey, securityState) => {
	      windowActions.setSecurityState(frameStateUtil.getFrameByKey(self.props.windowState, frameKey), securityState);
	    });
	
	    ipc.on(messages.SHOW_USERNAME_LIST, (e, usernames, origin, action, boundingRect) => {
	      const topOffset = this.tabContainer.getBoundingClientRect().top;
	      contextMenus.onShowUsernameMenu(usernames, origin, action, boundingRect, topOffset);
	    });
	
	    ipc.on(messages.HIDE_CONTEXT_MENU, () => {
	      windowActions.setContextMenuDetail();
	    });
	
	    ipc.on(messages.IMPORTER_LIST, (e, detail) => {
	      windowActions.setImportBrowserDataDetail(detail);
	      windowActions.setImportBrowserDataSelected({});
	    });
	
	    this.loadSearchProviders();
	
	    window.addEventListener('mousemove', e => {
	      if (e.pageY !== this.pageY) {
	        this.pageY = e.pageY;
	        this.checkForTitleMode();
	      }
	    });
	    window.addEventListener('focus', () => {
	      const activeFrame = frameStateUtil.getActiveFrame(self.props.windowState);
	      windowActions.setFocusedFrame(activeFrame);
	      // For whatever reason other elements are preserved but webviews are not.
	      if (document.activeElement && document.activeElement.tagName === 'BODY') {
	        webviewActions.setWebviewFocused();
	      }
	    });
	
	    // disable dnd by default
	    window.addEventListener('dragover', function (event) {
	      // allow webviews to handle dnd
	      if (event.target.tagName === 'WEBVIEW') {
	        return true;
	      }
	      event.dataTransfer.dropEffect = 'none';
	      event.preventDefault();
	      return false;
	    }, true);
	
	    window.addEventListener('drop', function (event) {
	      // allow webviews to handle dnd
	      if (event.target.tagName === 'WEBVIEW') {
	        return true;
	      }
	      event.preventDefault();
	      return false;
	    }, true);
	
	    const activeFrame = frameStateUtil.getActiveFrame(self.props.windowState);
	    if (activeFrame && activeFrame.get('title')) {
	      currentWindow.setTitle(activeFrame.get('title'));
	    }
	
	    // Handlers for saving window state
	    // TODO: revisit this code when window state moves to appStore
	    const slidingTimerMilliseconds = 1000;
	
	    const onWindowResize = debounce(function (event) {
	      const size = event.sender.getSize();
	      // NOTE: the default window size is whatever the last window resize was
	      appActions.defaultWindowParamsChanged(size);
	      windowActions.saveSize(size);
	    }, slidingTimerMilliseconds);
	
	    const onWindowMove = debounce(function (event) {
	      const position = event.sender.getPosition();
	      // NOTE: the default window position is whatever the last window move was
	      appActions.defaultWindowParamsChanged(undefined, position);
	      windowActions.savePosition(position);
	    }, slidingTimerMilliseconds);
	
	    currentWindow.on('maximize', function () {
	      windowActions.setMaximizeState(true);
	    });
	    currentWindow.on('unmaximize', function () {
	      windowActions.setMaximizeState(false);
	    });
	    currentWindow.on('resize', onWindowResize);
	    currentWindow.on('move', onWindowMove);
	    currentWindow.on('focus', function () {
	      windowActions.onFocusChanged(true);
	    });
	    currentWindow.on('blur', function () {
	      appActions.windowBlurred(currentWindow.id);
	      windowActions.onFocusChanged(false);
	    });
	    // Full screen as in F11 (not full screen on a video)
	    currentWindow.on('enter-full-screen', function (event) {
	      windowActions.setWindowFullScreen(true);
	    });
	    currentWindow.on('leave-full-screen', function (event) {
	      windowActions.setWindowFullScreen(false);
	    });
	  }
	
	  checkForTitleMode() {
	    const navigator = document.querySelector('.top');
	    // Uncaught TypeError: Cannot read property 'getBoundingClientRect' of null
	    if (!navigator) {
	      return;
	    }
	
	    const height = navigator.getBoundingClientRect().bottom;
	    if (this.pageY < height && this.props.windowState.getIn(['ui', 'mouseInTitlebar']) !== true) {
	      windowActions.setMouseInTitlebar(true);
	    } else if (this.pageY === undefined || this.pageY >= height && this.props.windowState.getIn(['ui', 'mouseInTitlebar']) !== false) {
	      windowActions.setMouseInTitlebar(false);
	    }
	  }
	
	  get activeFrame() {
	    return this.frames[this.props.windowState.get('activeFrameKey')];
	  }
	
	  // Returns the same as the active frame's location, but returns the requested
	  // URL if it's safe browsing, a cert error page or an error page.
	  get activeRequestedLocation() {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    if (!activeFrame) {
	      return undefined;
	    }
	    let location = activeFrame.get('location');
	    const history = activeFrame.get('history');
	    if (isIntermediateAboutPage(location)) {
	      const parsedUrl = urlParse(location);
	      if (parsedUrl.hash) {
	        location = parsedUrl.hash.split('#')[1];
	      } else if (history.size > 0) {
	        location = history.last();
	      }
	    }
	    return location;
	  }
	
	  onNav(e, navCheckProp, navType, navAction) {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    const activeTabId = activeFrame.get('tabId');
	    const activeTab = activeFrame ? this.props.appState.get('tabs').find(tab => tab.get('tabId') === activeTabId) : null;
	    const isNavigatable = isNavigatableAboutPage(getBaseUrl(activeFrame.get('location')));
	    if (e && eventUtil.isForSecondaryAction(e) && isNavigatable) {
	      if (activeTab && activeTab.get(navCheckProp)) {
	        appActions.tabCloned(activeTabId, {
	          [navType]: true,
	          active: !!e.shiftKey
	        });
	      }
	    } else {
	      navAction.call(this.activeFrame);
	    }
	  }
	
	  onBack(e) {
	    this.onNav(e, 'canGoBack', 'back', this.activeFrame.goBack);
	  }
	
	  onForward(e) {
	    this.onNav(e, 'canGoForward', 'forward', this.activeFrame.goForward);
	  }
	
	  onBackLongPress(target) {
	    contextMenus.onBackButtonHistoryMenu(this.activeFrame, this.activeFrame.getHistory(this.props.appState), target);
	  }
	
	  onForwardLongPress(target) {
	    contextMenus.onForwardButtonHistoryMenu(this.activeFrame, this.activeFrame.getHistory(this.props.appState), target);
	  }
	
	  onBraveMenu() {
	    if (!this.braveShieldsDisabled) {
	      windowActions.setBraveryPanelDetail({});
	    }
	  }
	
	  onHamburgerMenu(e) {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    contextMenus.onHamburgerMenu(activeFrame && activeFrame.get('location') || '', e);
	  }
	
	  onHideSiteInfo() {
	    windowActions.setSiteInfoVisible(false);
	  }
	
	  onHideBraveryPanel() {
	    windowActions.setBraveryPanelDetail();
	  }
	
	  onHideClearBrowsingDataPanel() {
	    windowActions.setClearBrowsingDataPanelVisible(false);
	  }
	
	  onHideImportBrowserDataPanel() {
	    windowActions.setImportBrowserDataDetail();
	  }
	
	  onHideWidevinePanel() {
	    windowActions.widevinePanelDetailChanged({
	      shown: false
	    });
	  }
	
	  onHideAutofillAddressPanel() {
	    windowActions.setAutofillAddressDetail();
	  }
	
	  onHideAutofillCreditCardPanel() {
	    windowActions.setAutofillCreditCardDetail();
	  }
	
	  onHideNoScript() {
	    windowActions.setNoScriptVisible(false);
	  }
	
	  onHideReleaseNotes() {
	    windowActions.setReleaseNotesVisible(false);
	  }
	
	  onHideCheckDefaultBrowserDialog() {
	    windowActions.setModalDialogDetail('checkDefaultBrowserDialog');
	  }
	
	  enableNoScript(settings) {
	    return siteSettings.activeSettings(settings, this.props.appState, appConfig).noScript === true;
	  }
	
	  onCloseFrame(activeFrameProps) {
	    windowActions.closeFrame(this.props.windowState.get('frames'), activeFrameProps);
	  }
	
	  onDragOver(e) {
	    let intersection = e.dataTransfer.types.filter(x => ['Files'].includes(x));
	    if (intersection.length > 0 || e.dataTransfer.getData('text/plain')) {
	      e.dataTransfer.dropEffect = 'copy';
	      e.preventDefault();
	    }
	  }
	
	  onDrop(e) {
	    if (e.dataTransfer.files.length > 0) {
	      Array.from(e.dataTransfer.files).forEach(file => windowActions.newFrame({ location: file.path, title: file.name }));
	    } else if (e.dataTransfer.getData('text/plain')) {
	      let activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	      if (activeFrame) {
	        windowActions.loadUrl(activeFrame, e.dataTransfer.getData('text/plain'));
	      }
	    }
	  }
	
	  onDoubleClick(e) {
	    if (!e.target.className.includes('navigatorWrapper')) {
	      return;
	    }
	    return !isMaximized() ? currentWindow.maximize() : currentWindow.unmaximize();
	  }
	
	  onMouseDown(e) {
	    // TODO(bsclifton): update this to use eventUtil.eventElHasAncestorWithClasses
	    let node = e.target;
	    while (node) {
	      if (node.classList && (node.classList.contains('popupWindow') || node.classList.contains('contextMenu') || node.classList.contains('extensionButton') || node.classList.contains('menubarItem') || node.classList.contains('bookmarkHanger'))) {
	        // Middle click (on context menu) needs to fire the click event.
	        // We need to prevent the default "Auto-Scrolling" behavior.
	        if (node.classList.contains('contextMenu') && e.button === 1) {
	          e.preventDefault();
	        }
	        // Click event is handled downstream
	        return;
	      }
	      node = node.parentNode;
	    }
	    // Hide context menus, popup menus, and menu selections
	    windowActions.resetMenuState();
	  }
	
	  onClickWindow(e) {
	    // Check for an ancestor of urlbarForm or urlBarSuggestions and if none are found
	    // then set the URL bar as non active (no autocomplete).
	    let node = e.target;
	    while (node) {
	      if (node.className === 'urlbarForm' || node.className === 'urlBarSuggestions') {
	        return;
	      }
	      node = node.parentNode;
	    }
	    windowActions.setUrlBarActive(false);
	  }
	
	  onFindHide() {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    windowActions.setFindbarShown(activeFrame, false);
	    webviewActions.stopFindInPage();
	    windowActions.setFindDetail(activeFrame, Immutable.fromJS({
	      internalFindStatePresent: false,
	      numberOfMatches: -1,
	      activeMatchOrdinal: 0
	    }));
	  }
	
	  onFind(searchString, caseSensitivity, forward, findNext) {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    webviewActions.findInPage(searchString, caseSensitivity, forward, findNext);
	    if (!findNext) {
	      windowActions.setFindDetail(activeFrame, Immutable.fromJS({
	        internalFindStatePresent: true
	      }));
	    }
	  }
	
	  onTabContextMenu(e) {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    contextMenus.onTabsToolbarContextMenu(activeFrame, undefined, undefined, e);
	  }
	
	  get allSiteSettings() {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    if (activeFrame && activeFrame.get('isPrivate')) {
	      return this.props.appState.get('siteSettings').mergeDeep(this.props.appState.get('temporarySiteSettings'));
	    }
	    return this.props.appState.get('siteSettings');
	  }
	
	  frameSiteSettings(location) {
	    if (!location) {
	      return undefined;
	    }
	    return siteSettings.getSiteSettingsForURL(this.allSiteSettings, location);
	  }
	
	  frameBraverySettings(location) {
	    return Immutable.fromJS(siteSettings.activeSettings(this.frameSiteSettings(location), this.props.appState, appConfig));
	  }
	
	  get activeTabId() {
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    return activeFrame && activeFrame.get('tabId');
	  }
	
	  get activeSiteSettings() {
	    return this.frameSiteSettings(this.activeRequestedLocation);
	  }
	
	  get braveShieldsDisabled() {
	    const activeRequestedLocation = this.activeRequestedLocation;
	    if (!activeRequestedLocation) {
	      return true;
	    }
	
	    const parsedUrl = urlParse(activeRequestedLocation);
	    return parsedUrl.protocol !== 'https:' && parsedUrl.protocol !== 'http:' && parsedUrl.protocol + parsedUrl.host !== 'about:safebrowsing';
	  }
	
	  get extensionButtons() {
	    const enabledExtensions = extensionState.getEnabledExtensions(this.props.appState);
	    const extensionBrowserActions = enabledExtensions.map(extension => extensionState.getBrowserActionByTabId(this.props.appState, extension.get('id'), this.activeTabId)).filter(browserAction => browserAction);
	    let buttons = extensionBrowserActions.map((browserAction, id) => _jsx(BrowserActionButton, {
	      browserAction: browserAction,
	      extensionId: id,
	      tabId: this.activeTabId,
	      popupWindowSrc: this.props.windowState.getIn(['popupWindowDetail', 'src'])
	    })).values();
	    buttons = Array.from(buttons);
	    if (buttons.length > 0) {
	      buttons.push(_jsx('span', {
	        className: 'buttonSeparator'
	      }));
	    }
	    return buttons;
	  }
	
	  get customTitlebar() {
	    const customTitlebarEnabled = isWindows;
	    const captionButtonsVisible = customTitlebarEnabled;
	    const menubarVisible = customTitlebarEnabled && (!getSetting(settings.AUTO_HIDE_MENU) || this.props.windowState.getIn(['ui', 'menubar', 'isVisible']));
	    const selectedIndex = this.props.windowState.getIn(['ui', 'contextMenu', 'selectedIndex']);
	    return {
	      enabled: customTitlebarEnabled,
	      captionButtonsVisible: captionButtonsVisible,
	      menubarVisible: menubarVisible,
	      menubarTemplate: menubarVisible ? this.props.appState.getIn(['menu', 'template']) : null,
	      menubarSelectedIndex: this.props.windowState.getIn(['ui', 'menubar', 'selectedIndex']),
	      contextMenuSelectedIndex: typeof selectedIndex === 'object' && Array.isArray(selectedIndex) && selectedIndex.length > 0 ? selectedIndex : null,
	      lastFocusedSelector: this.props.windowState.getIn(['ui', 'menubar', 'lastFocusedSelector']),
	      isMaximized: isMaximized() || isFullScreen()
	    };
	  }
	
	  bindHistory(frame) {
	    if (frame.get('location') === 'about:history') {
	      const history = aboutHistoryState.getHistory(this.props.appState);
	      if (history) {
	        return history;
	      }
	      appActions.populateHistory();
	    }
	    return null;
	  }
	
	  render() {
	    const comparatorByKeyAsc = (a, b) => a.get('key') > b.get('key') ? 1 : b.get('key') > a.get('key') ? -1 : 0;
	
	    // Sort frames by key so that the order of the frames do not change which could
	    // cause unexpected reloading when a user moves tabs.
	    // All frame operations work off of frame keys and not index though so unsorted frames
	    // can be passed everywhere other than the Frame elements.
	    const sortedFrames = this.props.windowState.get('frames').sort(comparatorByKeyAsc);
	    const activeFrame = frameStateUtil.getActiveFrame(this.props.windowState);
	    this.frames = {};
	    const allSiteSettings = this.allSiteSettings;
	    const activeSiteSettings = this.activeSiteSettings;
	    const nonPinnedFrames = this.props.windowState.get('frames').filter(frame => !frame.get('pinnedLocation'));
	    const tabsPerPage = Number(getSetting(settings.TABS_PER_PAGE));
	    const showBookmarksToolbar = getSetting(settings.SHOW_BOOKMARKS_TOOLBAR);
	    const btbMode = getSetting(settings.BOOKMARKS_TOOLBAR_MODE);
	    const showFavicon = btbMode === bookmarksToolbarMode.TEXT_AND_FAVICONS || btbMode === bookmarksToolbarMode.FAVICONS_ONLY;
	    const showOnlyFavicon = btbMode === bookmarksToolbarMode.FAVICONS_ONLY;
	    const siteInfoIsVisible = this.props.windowState.getIn(['ui', 'siteInfo', 'isVisible']);
	    const braveShieldsDisabled = this.braveShieldsDisabled;
	    const braveryPanelIsVisible = !braveShieldsDisabled && this.props.windowState.get('braveryPanelDetail');
	    const clearBrowsingDataPanelIsVisible = this.props.windowState.getIn(['ui', 'isClearBrowsingDataPanelVisible']);
	    const importBrowserDataPanelIsVisible = this.props.windowState.get('importBrowserDataDetail');
	    const widevinePanelIsVisible = this.props.windowState.getIn(['widevinePanelDetail', 'shown']);
	    const autofillAddressPanelIsVisible = this.props.windowState.get('autofillAddressDetail');
	    const autofillCreditCardPanelIsVisible = this.props.windowState.get('autofillCreditCardDetail');
	    const activeRequestedLocation = this.activeRequestedLocation;
	    const noScriptIsVisible = this.props.windowState.getIn(['ui', 'noScriptInfo', 'isVisible']);
	    const activeTab = activeFrame ? this.props.appState.get('tabs').find(tab => tab.get('tabId') === activeFrame.get('tabId')) : null;
	    const releaseNotesIsVisible = this.props.windowState.getIn(['ui', 'releaseNotes', 'isVisible']);
	    const checkDefaultBrowserDialogIsVisible = isFocused() && defaultBrowserState.shouldDisplayDialog(this.props.appState);
	    const braverySettings = siteSettings.activeSettings(activeSiteSettings, this.props.appState, appConfig);
	    const loginRequiredDetail = activeFrame ? basicAuthState.getLoginRequiredDetail(this.props.appState, activeFrame.get('tabId')) : null;
	    const customTitlebar = this.customTitlebar;
	    const versionInformation = this.props.appState.getIn(['about', 'brave', 'versionInformation']);
	    const braveryDefaults = Immutable.fromJS(siteSettings.braveryDefaults(this.props.appState, appConfig));
	    const contextMenuDetail = this.props.windowState.get('contextMenuDetail');
	    const shouldAllowWindowDrag = !contextMenuDetail && !this.props.windowState.get('bookmarkDetail') && !siteInfoIsVisible && !braveryPanelIsVisible && !clearBrowsingDataPanelIsVisible && !importBrowserDataPanelIsVisible && !widevinePanelIsVisible && !autofillAddressPanelIsVisible && !autofillCreditCardPanelIsVisible && !releaseNotesIsVisible && !checkDefaultBrowserDialogIsVisible && !noScriptIsVisible && activeFrame && !activeFrame.getIn(['security', 'loginRequiredDetail']) && !customTitlebar.menubarSelectedIndex;
	
	    const appStateSites = this.props.appState.get('sites');
	
	    return React.createElement(
	      'div',
	      { id: 'window',
	        className: cx({
	          isFullScreen: activeFrame && activeFrame.get('isFullScreen'),
	          isMaximized: customTitlebar.isMaximized,
	          frameless: customTitlebar.captionButtonsVisible
	        }),
	        ref: node => {
	          this.mainWindow = node;
	        },
	        onMouseDown: this.onMouseDown,
	        onClick: this.onClickWindow },
	      contextMenuDetail ? _jsx(ContextMenu, {
	        lastZoomPercentage: activeFrame && activeFrame.get('lastZoomPercentage'),
	        contextMenuDetail: contextMenuDetail,
	        selectedIndex: customTitlebar.contextMenuSelectedIndex
	      }) : null,
	      this.props.windowState.get('popupWindowDetail') ? _jsx(PopupWindow, {
	        detail: this.props.windowState.get('popupWindowDetail')
	      }) : null,
	      _jsx('div', {
	        className: 'top'
	      }, void 0, _jsx('div', {
	        className: cx({
	          navbarCaptionButtonContainer: true,
	          allowDragging: shouldAllowWindowDrag
	        })
	      }, void 0, _jsx('div', {
	        className: 'navbarMenubarFlexContainer'
	      }, void 0, customTitlebar.menubarVisible ? _jsx('div', {
	        className: 'menubarContainer'
	      }, void 0, _jsx(Menubar, {
	        template: customTitlebar.menubarTemplate,
	        selectedIndex: customTitlebar.menubarSelectedIndex,
	        contextMenuSelectedIndex: customTitlebar.contextMenuSelectedIndex,
	        contextMenuDetail: contextMenuDetail,
	        autohide: getSetting(settings.AUTO_HIDE_MENU),
	        lastFocusedSelector: customTitlebar.lastFocusedSelector
	      }), _jsx(WindowCaptionButtons, {
	        windowMaximized: customTitlebar.isMaximized
	      })) : null, _jsx('div', {
	        className: 'navigatorWrapper',
	        onDoubleClick: this.onDoubleClick,
	        onDragOver: this.onDragOver,
	        onDrop: this.onDrop
	      }, void 0, _jsx('div', {
	        className: 'backforward'
	      }, void 0, _jsx('div', {
	        className: cx({
	          navigationButtonContainer: true,
	          nav: true,
	          disabled: !activeTab || !activeTab.get('canGoBack')
	        })
	      }, void 0, _jsx(LongPressButton, {
	        l10nId: 'backButton',
	        className: 'navigationButton backButton',
	        disabled: !activeTab || !activeTab.get('canGoBack'),
	        onClick: this.onBack,
	        onLongPress: this.onBackLongPress
	      })), _jsx('div', {
	        className: cx({
	          navigationButtonContainer: true,
	          nav: true,
	          disabled: !activeTab || !activeTab.get('canGoForward')
	        })
	      }, void 0, _jsx(LongPressButton, {
	        l10nId: 'forwardButton',
	        className: 'navigationButton forwardButton',
	        disabled: !activeTab || !activeTab.get('canGoForward'),
	        onClick: this.onForward,
	        onLongPress: this.onForwardLongPress
	      }))), React.createElement(NavigationBar, {
	        ref: node => {
	          this.navBar = node;
	        },
	        navbar: activeFrame && activeFrame.get('navbar'),
	        sites: appStateSites,
	        canGoForward: activeTab && activeTab.get('canGoForward'),
	        activeFrameKey: activeFrame && activeFrame.get('key') || undefined,
	        location: activeFrame && activeFrame.get('location') || '',
	        title: activeFrame && activeFrame.get('title') || '',
	        scriptsBlocked: activeFrame && activeFrame.getIn(['noScript', 'blocked']),
	        partitionNumber: activeFrame && activeFrame.get('partitionNumber') || 0,
	        history: activeFrame && activeFrame.get('history') || emptyList,
	        suggestionIndex: activeFrame && activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'selectedIndex']) || 0,
	        isSecure: activeFrame && activeFrame.getIn(['security', 'isSecure']) && !activeFrame.getIn(['security', 'runInsecureContent']),
	        hasLocationValueSuffix: activeFrame && activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'urlSuffix']),
	        startLoadTime: activeFrame && activeFrame.get('startLoadTime') || undefined,
	        endLoadTime: activeFrame && activeFrame.get('endLoadTime') || undefined,
	        loading: activeFrame && activeFrame.get('loading'),
	        bookmarkDetail: this.props.windowState.get('bookmarkDetail'),
	        mouseInTitlebar: this.props.windowState.getIn(['ui', 'mouseInTitlebar']),
	        searchDetail: this.props.windowState.get('searchDetail'),
	        enableNoScript: this.enableNoScript(activeSiteSettings),
	        settings: this.props.appState.get('settings'),
	        noScriptIsVisible: noScriptIsVisible,
	        menubarVisible: customTitlebar.menubarVisible,
	        siteSettings: this.props.appState.get('siteSettings'),
	        synopsis: this.props.appState.getIn(['publisherInfo', 'synopsis']) || new Immutable.Map()
	      }), _jsx('div', {
	        className: 'topLevelEndButtons'
	      }, void 0, _jsx('div', {
	        className: cx({
	          extraDragArea: !customTitlebar.menubarVisible,
	          allowDragging: shouldAllowWindowDrag
	        })
	      }), this.extensionButtons, _jsx(Button, {
	        iconClass: 'braveMenu',
	        l10nId: 'braveMenu',
	        className: cx({
	          navbutton: true,
	          braveShieldsDisabled,
	          braveShieldsDown: !braverySettings.shieldsUp,
	          leftOfCaptionButton: customTitlebar.captionButtonsVisible && !customTitlebar.menubarVisible
	        }),
	        onClick: this.onBraveMenu
	      }), customTitlebar.captionButtonsVisible && !customTitlebar.menubarVisible ? _jsx('span', {
	        className: 'buttonSeparator'
	      }) : null))), customTitlebar.captionButtonsVisible && !customTitlebar.menubarVisible ? _jsx(WindowCaptionButtons, {
	        windowMaximized: customTitlebar.isMaximized,
	        verticallyCenter: 'true'
	      }) : null), siteInfoIsVisible ? _jsx(SiteInfo, {
	        frameProps: activeFrame,
	        onHide: this.onHideSiteInfo
	      }) : null, braveryPanelIsVisible ? _jsx(BraveryPanel, {
	        frameProps: activeFrame,
	        activeRequestedLocation: activeRequestedLocation,
	        braveryPanelDetail: this.props.windowState.get('braveryPanelDetail'),
	        braverySettings: braverySettings,
	        activeSiteSettings: activeSiteSettings,
	        onHide: this.onHideBraveryPanel
	      }) : null, clearBrowsingDataPanelIsVisible ? _jsx(ClearBrowsingDataPanel, {
	        clearBrowsingDataDefaults: this.props.appState.get('clearBrowsingDataDefaults'),
	        onHide: this.onHideClearBrowsingDataPanel
	      }) : null, importBrowserDataPanelIsVisible ? _jsx(ImportBrowserDataPanel, {
	        importBrowserDataDetail: this.props.windowState.get('importBrowserDataDetail'),
	        importBrowserDataSelected: this.props.windowState.get('importBrowserDataSelected'),
	        onHide: this.onHideImportBrowserDataPanel
	      }) : null, widevinePanelIsVisible ? _jsx(WidevinePanel, {
	        widevinePanelDetail: this.props.windowState.get('widevinePanelDetail'),
	        widevineReady: this.props.appState.getIn([appConfig.resourceNames.WIDEVINE, 'ready']),
	        onHide: this.onHideWidevinePanel
	      }) : null, autofillAddressPanelIsVisible ? _jsx(AutofillAddressPanel, {
	        currentDetail: this.props.windowState.getIn(['autofillAddressDetail', 'currentDetail']),
	        originalDetail: this.props.windowState.getIn(['autofillAddressDetail', 'originalDetail']),
	        onHide: this.onHideAutofillAddressPanel
	      }) : null, autofillCreditCardPanelIsVisible ? _jsx(AutofillCreditCardPanel, {
	        currentDetail: this.props.windowState.getIn(['autofillCreditCardDetail', 'currentDetail']),
	        originalDetail: this.props.windowState.getIn(['autofillCreditCardDetail', 'originalDetail']),
	        onHide: this.onHideAutofillCreditCardPanel
	      }) : null, loginRequiredDetail ? _jsx(LoginRequired, {
	        loginRequiredDetail: loginRequiredDetail,
	        tabId: activeFrame.get('tabId')
	      }) : null, this.props.windowState.get('bookmarkDetail') && !this.props.windowState.getIn(['bookmarkDetail', 'isBookmarkHanger']) ? _jsx(AddEditBookmark, {
	        sites: appStateSites,
	        currentDetail: this.props.windowState.getIn(['bookmarkDetail', 'currentDetail']),
	        originalDetail: this.props.windowState.getIn(['bookmarkDetail', 'originalDetail']),
	        destinationDetail: this.props.windowState.getIn(['bookmarkDetail', 'destinationDetail']),
	        shouldShowLocation: this.props.windowState.getIn(['bookmarkDetail', 'shouldShowLocation'])
	      }) : null, noScriptIsVisible ? _jsx(NoScriptInfo, {
	        frameProps: activeFrame,
	        noScriptGlobalEnabled: this.props.appState.getIn(['noScript', 'enabled']),
	        onHide: this.onHideNoScript
	      }) : null, releaseNotesIsVisible ? _jsx(ReleaseNotes, {
	        metadata: this.props.appState.getIn(['updates', 'metadata']),
	        onHide: this.onHideReleaseNotes
	      }) : null, checkDefaultBrowserDialogIsVisible ? _jsx(CheckDefaultBrowserDialog, {
	        checkDefaultOnStartup: this.props.windowState.getIn(['modalDialogDetail', 'checkDefaultBrowserDialog']) === undefined ? getSetting(settings.CHECK_DEFAULT_ON_STARTUP) : this.props.windowState.getIn(['modalDialogDetail', 'checkDefaultBrowserDialog', 'checkDefaultOnStartup']),
	        onHide: this.onHideCheckDefaultBrowserDialog
	      }) : null, _jsx(UpdateBar, {
	        updates: this.props.appState.get('updates')
	      }), this.props.appState.get('notifications') && this.props.appState.get('notifications').size && activeFrame ? _jsx(NotificationBar, {
	        notifications: this.props.appState.get('notifications'),
	        activeFrame: activeFrame
	      }) : null, showBookmarksToolbar ? _jsx(BookmarksToolbar, {
	        draggingOverData: this.props.windowState.getIn(['ui', 'dragging', 'draggingOver', 'dragType']) === dragTypes.BOOKMARK && this.props.windowState.getIn(['ui', 'dragging', 'draggingOver']),
	        showFavicon: showFavicon,
	        showOnlyFavicon: showOnlyFavicon,
	        shouldAllowWindowDrag: shouldAllowWindowDrag && !isWindows,
	        activeFrameKey: activeFrame && activeFrame.get('key') || undefined,
	        windowWidth: window.innerWidth,
	        contextMenuDetail: contextMenuDetail,
	        sites: appStateSites,
	        selectedFolderId: this.props.windowState.getIn(['ui', 'bookmarksToolbar', 'selectedFolderId'])
	      }) : null, _jsx('div', {
	        className: cx({
	          tabPages: true,
	          allowDragging: shouldAllowWindowDrag,
	          singlePage: nonPinnedFrames.size <= tabsPerPage
	        }),
	        onContextMenu: this.onTabContextMenu
	      }, void 0, nonPinnedFrames.size > tabsPerPage ? _jsx(TabPages, {
	        frames: nonPinnedFrames,
	        tabsPerTabPage: tabsPerPage,
	        previewTabPage: getSetting(settings.SHOW_TAB_PREVIEWS),
	        tabPageIndex: this.props.windowState.getIn(['ui', 'tabs', 'tabPageIndex'])
	      }) : null), _jsx(TabsToolbar, {
	        paintTabs: getSetting(settings.PAINT_TABS),
	        shouldAllowWindowDrag: shouldAllowWindowDrag,
	        draggingOverData: this.props.windowState.getIn(['ui', 'dragging', 'draggingOver', 'dragType']) === dragTypes.TAB && this.props.windowState.getIn(['ui', 'dragging', 'draggingOver']),
	        previewTabs: getSetting(settings.SHOW_TAB_PREVIEWS),
	        tabsPerTabPage: tabsPerPage,
	        tabPageIndex: this.props.windowState.getIn(['ui', 'tabs', 'tabPageIndex']),
	        previewTabPageIndex: this.props.windowState.getIn(['ui', 'tabs', 'previewTabPageIndex']),
	        fixTabWidth: this.props.windowState.getIn(['ui', 'tabs', 'fixTabWidth']),
	        tabs: this.props.windowState.get('tabs'),
	        sites: appStateSites,
	        activeFrameKey: activeFrame && activeFrame.get('key') || undefined,
	        onMenu: this.onHamburgerMenu
	      }, 'tab-bar'), activeFrame && activeFrame.get('findbarShown') && !activeFrame.get('isFullScreen') ? _jsx(FindBar, {
	        paintTabs: getSetting(settings.PAINT_TABS),
	        themeColor: activeFrame.get('themeColor'),
	        computedThemeColor: activeFrame.get('computedThemeColor'),
	        frameKey: activeFrame.get('key'),
	        selected: activeFrame.get('findbarSelected'),
	        findDetail: activeFrame.get('findDetail'),
	        onFind: this.onFind,
	        onFindHide: this.onFindHide
	      }) : null),
	      _jsx('div', {
	        className: 'mainContainer'
	      }, void 0, React.createElement(
	        'div',
	        { className: 'tabContainer',
	          ref: node => {
	            this.tabContainer = node;
	          } },
	        sortedFrames.map(frame => React.createElement(Frame, {
	          ref: node => {
	            this.frames[frame.get('key')] = node;
	          },
	          tabData: this.props.appState.get('tabs').find(tab => tab.get('tabId') === frame.get('tabId')),
	          urlBarFocused: activeFrame && activeFrame.getIn(['navbar', 'urlbar', 'focused']),
	          tabIndex: frameStateUtil.getFrameIndex(this.props.windowState, frame.get('key')),
	          prefOpenInForeground: getSetting(settings.SWITCH_TO_NEW_TABS),
	          onCloseFrame: this.onCloseFrame,
	          frameKey: frame.get('key'),
	          contextMenuDetail: contextMenuDetail,
	          partition: frameStateUtil.getPartition(frame),
	          key: frame.get('key'),
	          settings: ['about:preferences', 'about:history', 'about:adblock'].includes(getBaseUrl(frame.get('location'))) ? this.props.appState.get('settings') || emptyMap : null,
	          bookmarks: frame.get('location') === 'about:bookmarks' ? appStateSites.filter(site => site.get('tags').includes(siteTags.BOOKMARK)) || emptyMap : null,
	          history: this.bindHistory(frame),
	          extensions: frame.get('location') === 'about:extensions' ? this.props.appState.get('extensions') || emptyMap : null,
	          preferencesData: frame.get('location') === 'about:preferences#payments' ? this.props.appState.getIn(['about', 'preferences']) || emptyMap : null,
	          downloads: this.props.appState.get('downloads') || emptyMap,
	          bookmarkFolders: frame.get('location') === 'about:bookmarks' ? appStateSites.filter(site => site.get('tags').includes(siteTags.BOOKMARK_FOLDER)) || emptyMap : null,
	          isFullScreen: frame.get('isFullScreen'),
	          isSecure: frame.getIn(['security', 'isSecure']),
	          showFullScreenWarning: frame.get('showFullScreenWarning'),
	          findbarShown: frame.get('findbarShown'),
	          findDetail: frame.get('findDetail'),
	          hrefPreview: frame.get('hrefPreview'),
	          showOnRight: frame.get('showOnRight'),
	          location: frame.get('location'),
	          isPrivate: frame.get('isPrivate'),
	          partitionNumber: frame.get('partitionNumber'),
	          activeShortcut: frame.get('activeShortcut'),
	          activeShortcutDetails: frame.get('activeShortcutDetails'),
	          provisionalLocation: frame.get('provisionalLocation'),
	          pinnedLocation: frame.get('pinnedLocation'),
	          src: frame.get('src'),
	          guestInstanceId: frame.get('guestInstanceId'),
	          tabId: frame.get('tabId'),
	          aboutDetails: frame.get('aboutDetails'),
	          unloaded: frame.get('unloaded'),
	          audioMuted: frame.get('audioMuted'),
	          passwords: this.props.appState.get('passwords'),
	          adblock: this.props.appState.get('adblock'),
	          safeBrowsing: this.props.appState.get('safeBrowsing'),
	          httpsEverywhere: this.props.appState.get('httpsEverywhere'),
	          trackingProtection: this.props.appState.get('trackingProtection'),
	          adInsertion: this.props.appState.get('adInsertion'),
	          noScript: this.props.appState.get('noScript'),
	          flash: this.props.appState.get('flash'),
	          widevine: this.props.appState.get('widevine'),
	          cookieblock: this.props.appState.get('cookieblock'),
	          allSiteSettings: allSiteSettings,
	          ledgerInfo: this.props.appState.get('ledgerInfo') || new Immutable.Map(),
	          publisherInfo: this.props.appState.get('publisherInfo') || new Immutable.Map(),
	          frameSiteSettings: this.frameSiteSettings(frame.get('location')),
	          onFindHide: this.onFindHide,
	          enableNoScript: this.enableNoScript(this.frameSiteSettings(frame.get('location'))),
	          versionInformation: versionInformation,
	          braveryDefaults: braveryDefaults,
	          isPreview: frame.get('key') === this.props.windowState.get('previewFrameKey'),
	          isActive: frameStateUtil.isFrameKeyActive(this.props.windowState, frame.get('key')),
	          autofillCreditCards: this.props.appState.getIn(['autofill', 'creditCards']),
	          autofillAddresses: this.props.appState.getIn(['autofill', 'addresses']),
	          adblockCount: this.props.appState.getIn(['adblock', 'count']),
	          trackedBlockersCount: this.props.appState.getIn(['trackingProtection', 'count']),
	          httpsUpgradedCount: this.props.appState.getIn(['httpsEverywhere', 'count']),
	          newTabDetail: frame.get('location') === 'about:newtab' ? this.props.appState.getIn(['about', 'newtab']) : null
	        }))
	      )),
	      this.props.windowState.getIn(['ui', 'downloadsToolbar', 'isVisible']) && this.props.appState.get('downloads') && this.props.appState.get('downloads').size > 0 ? _jsx(DownloadsBar, {
	        windowWidth: window.innerWidth,
	        downloads: this.props.appState.get('downloads')
	      }) : null
	    );
	  }
	}
	
	module.exports = Main;

/***/ },
/* 722 */
/***/ function(module, exports) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const getWebview = () => document.querySelector('.frameWrapper.isActive webview');
	
	const webviewActions = {
	  /**
	   * Puts the webview in focus
	   */
	  setWebviewFocused: function () {
	    const webview = getWebview();
	    if (webview) {
	      webview.focus();
	    }
	  },
	
	  /**
	   * Inspect the element for the active webview at the x, y content position
	   * @param {number} x - horizontal position of the element to inspect
	   * @param {number} y - vertical position of the element to inspect
	   */
	  inspectElement: function (x, y) {
	    const webview = getWebview();
	    if (webview) {
	      webview.inspectElement(x, y);
	    }
	  },
	
	  /**
	   * Replaces the selected text in an editable
	   * @param {string} text - The text to replace with
	   */
	  replace: function (text) {
	    const webview = getWebview();
	    if (webview) {
	      webview.replaceMisspelling(text);
	    }
	  },
	
	  /**
	   * Shows the definition of the selected text in a pop-up window (macOS only)
	   */
	  showDefinitionForSelection: function () {
	    const webview = getWebview();
	    if (webview) {
	      webview.showDefinitionForSelection();
	    }
	  },
	
	  findInPage: function (searchString, caseSensitivity, forward, findNext, webview) {
	    webview = webview || getWebview();
	    if (!webview) {
	      return;
	    }
	
	    if (searchString) {
	      webview.findInPage(searchString, {
	        matchCase: caseSensitivity,
	        forward,
	        findNext
	      });
	    } else {
	      webview.stopFindInPage('clearSelection');
	    }
	  },
	
	  stopFindInPage: function (webview) {
	    webview = webview || getWebview();
	    if (!webview) {
	      return;
	    }
	    webview.stopFindInPage('keepSelection');
	  }
	};
	
	module.exports = webviewActions;

/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const electron = __webpack_require__(703);
	const remote = electron.remote;
	const Menu = remote.Menu;
	const Immutable = __webpack_require__(188);
	const clipboard = remote.clipboard;
	const messages = __webpack_require__(211);
	const windowStore = __webpack_require__(701);
	const windowActions = __webpack_require__(716);
	const webviewActions = __webpack_require__(722);
	const bookmarkActions = __webpack_require__(724);
	const appActions = __webpack_require__(704);
	const siteTags = __webpack_require__(256);
	const electronDownloadItemActions = __webpack_require__(725);
	const dragTypes = __webpack_require__(257);
	const siteUtil = __webpack_require__(259);
	const downloadUtil = __webpack_require__(282);
	const menuUtil = __webpack_require__(726);
	const urlUtil = __webpack_require__(190);
	const CommonMenu = __webpack_require__(727);
	const dnd = __webpack_require__(731);
	const dndData = __webpack_require__(258);
	const appStoreRenderer = __webpack_require__(207);
	const ipc = __webpack_require__(703).ipcRenderer;
	const locale = __webpack_require__(728);
	const { getSetting } = __webpack_require__(202);
	const settings = __webpack_require__(204);
	const textUtils = __webpack_require__(732);
	const { isIntermediateAboutPage, isUrl, aboutUrls } = __webpack_require__(187);
	const { getBase64FromImageUrl } = __webpack_require__(733);
	const urlParse = __webpack_require__(192);
	const eventUtil = __webpack_require__(250);
	const { currentWindow } = __webpack_require__(706);
	const config = __webpack_require__(201);
	const { bookmarksToolbarMode } = __webpack_require__(206);
	const extensionState = __webpack_require__(734);
	const extensionActions = __webpack_require__(735);
	const appStore = __webpack_require__(207);
	
	const isDarwin = process.platform === 'darwin';
	
	/**
	 * Obtains an add bookmark menu item
	 * @param {object} Detail of the bookmark to initialize with
	 */
	const addBookmarkMenuItem = (label, siteDetail, closestDestinationDetail, isParent) => {
	  return {
	    label: locale.translation(label),
	    accelerator: 'CmdOrCtrl+D',
	    click: () => {
	      if (isParent) {
	        siteDetail = siteDetail.set('parentFolderId', closestDestinationDetail && (closestDestinationDetail.get('folderId') || closestDestinationDetail.get('parentFolderId')));
	      }
	      windowActions.setBookmarkDetail(siteDetail, siteDetail, closestDestinationDetail, true);
	    }
	  };
	};
	
	const addFolderMenuItem = (closestDestinationDetail, isParent) => {
	  return {
	    label: locale.translation('addFolder'),
	    click: () => {
	      let emptyFolder = Immutable.fromJS({ tags: [siteTags.BOOKMARK_FOLDER] });
	      if (isParent) {
	        emptyFolder = emptyFolder.set('parentFolderId', closestDestinationDetail && (closestDestinationDetail.get('folderId') || closestDestinationDetail.get('parentFolderId')));
	      }
	      windowActions.setBookmarkDetail(emptyFolder, undefined, closestDestinationDetail, false);
	    }
	  };
	};
	
	const getDownloadsBarHeight = () => {
	  const root = window.getComputedStyle(document.querySelector(':root'));
	  return Number.parseInt(root.getPropertyValue('--downloads-bar-height'), 10);
	};
	
	function tabPageTemplateInit(framePropsList) {
	  return [{
	    label: locale.translation('unmuteTabs'),
	    click: (item, focusedWindow) => {
	      windowActions.muteAllAudio(framePropsList, false);
	    }
	  }, {
	    label: locale.translation('muteTabs'),
	    click: (item, focusedWindow) => {
	      windowActions.muteAllAudio(framePropsList, true);
	    }
	  }];
	}
	
	function urlBarTemplateInit(searchDetail, activeFrame, e) {
	  const items = getEditableItems(window.getSelection().toString());
	  const clipboardText = clipboard.readText();
	  const hasClipboard = clipboardText && clipboardText.length > 0;
	  const isLocationUrl = hasClipboard && isUrl(clipboardText);
	
	  if (isLocationUrl) {
	    items.push({
	      label: locale.translation('pasteAndGo'),
	      enabled: hasClipboard,
	      click: (item, focusedWindow) => {
	        windowActions.loadUrl(activeFrame, clipboardText);
	      }
	    });
	  } else {
	    let searchUrl = searchDetail.get('searchURL').replace('{searchTerms}', encodeURIComponent(clipboardText));
	
	    items.push({
	      label: locale.translation('pasteAndSearch'),
	      enabled: hasClipboard,
	      click: (item, focusedWindow) => {
	        windowActions.loadUrl(activeFrame, searchUrl);
	      }
	    });
	  }
	
	  return items;
	}
	
	function findBarTemplateInit() {
	  return getEditableItems(window.getSelection().toString());
	}
	
	function tabsToolbarTemplateInit(activeFrame, closestDestinationDetail, isParent) {
	  const template = [CommonMenu.bookmarksManagerMenuItem(), CommonMenu.bookmarksToolbarMenuItem(), CommonMenu.separatorMenuItem];
	
	  if (!isDarwin) {
	    template.push(CommonMenu.autoHideMenuBarMenuItem(), CommonMenu.separatorMenuItem);
	  }
	
	  template.push(addBookmarkMenuItem('addBookmark', siteUtil.getDetailFromFrame(activeFrame, siteTags.BOOKMARK), closestDestinationDetail, isParent), addFolderMenuItem(closestDestinationDetail, isParent));
	
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function downloadsToolbarTemplateInit(downloadId, downloadItem) {
	  const template = [];
	
	  if (downloadItem) {
	    if (downloadUtil.shouldAllowPause(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemPause'),
	        click: appActions.downloadActionPerformed.bind(null, downloadId, electronDownloadItemActions.PAUSE)
	      });
	    }
	
	    if (downloadUtil.shouldAllowResume(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemResume'),
	        click: appActions.downloadActionPerformed.bind(null, downloadId, electronDownloadItemActions.RESUME)
	      });
	    }
	
	    if (downloadUtil.shouldAllowCancel(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemCancel'),
	        click: appActions.downloadActionPerformed.bind(null, downloadId, electronDownloadItemActions.CANCEL)
	      });
	    }
	
	    if (downloadUtil.shouldAllowRedownload(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemRedownload'),
	        click: appActions.downloadRedownloaded.bind(null, downloadId)
	      });
	    }
	
	    if (downloadUtil.shouldAllowCopyLink(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemCopyLink'),
	        click: appActions.downloadCopiedToClipboard.bind(null, downloadId)
	      });
	    }
	
	    if (downloadUtil.shouldAllowOpenDownloadLocation(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemPath'),
	        click: appActions.downloadRevealed.bind(null, downloadId)
	      });
	    }
	
	    if (downloadUtil.shouldAllowDelete(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemDelete'),
	        click: appActions.downloadDeleted.bind(null, downloadId)
	      });
	    }
	
	    if (downloadUtil.shouldAllowRemoveFromList(downloadItem)) {
	      template.push({
	        label: locale.translation('downloadItemClear'),
	        click: appActions.downloadCleared.bind(null, downloadId)
	      });
	    }
	  }
	
	  if (windowStore.getState().getIn(['ui', 'downloadsToolbar', 'isVisible'])) {
	    if (template.length) {
	      template.push(CommonMenu.separatorMenuItem);
	    }
	    template.push({
	      label: locale.translation('downloadToolbarHide'),
	      click: () => {
	        windowActions.setDownloadsToolbarVisible(false);
	      }
	    });
	  }
	  if (template.length) {
	    template.push(CommonMenu.separatorMenuItem);
	  }
	  template.push({
	    label: locale.translation('downloadItemClearCompleted'),
	    click: () => {
	      appActions.clearCompletedDownloads();
	    }
	  });
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function siteDetailTemplateInit(siteDetail, activeFrame) {
	  let isHistoryEntry = false;
	  let multipleHistoryEntries = false;
	  let multipleBookmarks = false;
	  let isFolder = false;
	  let isSystemFolder = false;
	  let deleteLabel;
	  let deleteTag;
	
	  // TODO(bsclifton): pull this out to a method
	  if (siteUtil.isBookmark(siteDetail) && activeFrame) {
	    deleteLabel = 'deleteBookmark';
	    deleteTag = siteTags.BOOKMARK;
	  } else if (siteUtil.isFolder(siteDetail)) {
	    isFolder = true;
	    isSystemFolder = siteDetail.get('folderId') === 0 || siteDetail.get('folderId') === -1;
	    deleteLabel = 'deleteFolder';
	    deleteTag = siteTags.BOOKMARK_FOLDER;
	  } else if (siteUtil.isHistoryEntry(siteDetail)) {
	    isHistoryEntry = true;
	    deleteLabel = 'deleteHistoryEntry';
	  } else if (Immutable.List.isList(siteDetail)) {
	    // Multiple bookmarks OR history entries selected
	    multipleHistoryEntries = true;
	    multipleBookmarks = true;
	    siteDetail.forEach(site => {
	      if (!siteUtil.isBookmark(site)) multipleBookmarks = false;
	      if (!siteUtil.isHistoryEntry(site)) multipleHistoryEntries = false;
	    });
	    if (multipleBookmarks) {
	      deleteLabel = 'deleteBookmarks';
	      deleteTag = siteTags.BOOKMARK;
	    } else if (multipleHistoryEntries) {
	      deleteLabel = 'deleteHistoryEntries';
	    }
	  } else {
	    deleteLabel = '';
	  }
	
	  const template = [];
	
	  if (!isFolder) {
	    if (!Immutable.List.isList(siteDetail)) {
	      const location = siteDetail.get('location');
	
	      template.push(openInNewTabMenuItem(location, undefined, siteDetail.get('partitionNumber')), openInNewPrivateTabMenuItem(location), openInNewSessionTabMenuItem(location), copyAddressMenuItem('copyLinkAddress', location), CommonMenu.separatorMenuItem);
	    } else {
	      let locations = [];
	      let partitionNumbers = [];
	      siteDetail.forEach(site => {
	        locations.push(site.get('location'));
	        partitionNumbers.push(site.get('partitionNumber'));
	      });
	
	      template.push(openInNewTabMenuItem(locations, undefined, partitionNumbers), openInNewPrivateTabMenuItem(locations), openInNewSessionTabMenuItem(locations), CommonMenu.separatorMenuItem);
	    }
	  } else {
	    template.push(openAllInNewTabsMenuItem(appStoreRenderer.state.get('sites'), siteDetail), CommonMenu.separatorMenuItem);
	  }
	
	  if (!isSystemFolder) {
	    // Picking this menu item pops up the AddEditBookmark modal
	    // - History can be deleted but not edited
	    // - Multiple bookmarks cannot be edited at once
	    // - "Bookmarks Toolbar" and "Other Bookmarks" folders cannot be deleted
	    if (!isHistoryEntry && !multipleHistoryEntries && !multipleBookmarks) {
	      template.push({
	        label: locale.translation(isFolder ? 'editFolder' : 'editBookmark'),
	        click: () => windowActions.setBookmarkDetail(siteDetail, siteDetail, null, true)
	      }, CommonMenu.separatorMenuItem);
	    }
	
	    template.push({
	      label: locale.translation(deleteLabel),
	      click: () => {
	        if (Immutable.List.isList(siteDetail)) {
	          siteDetail.forEach(site => appActions.removeSite(site, deleteTag));
	        } else {
	          appActions.removeSite(siteDetail, deleteTag);
	        }
	      }
	    });
	  }
	
	  if (!isHistoryEntry && !multipleHistoryEntries) {
	    if (template[template.length - 1] !== CommonMenu.separatorMenuItem) {
	      template.push(CommonMenu.separatorMenuItem);
	    }
	    template.push(addBookmarkMenuItem('addBookmark', siteUtil.getDetailFromFrame(activeFrame, siteTags.BOOKMARK), siteDetail, true), addFolderMenuItem(siteDetail, true));
	  }
	
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function showBookmarkFolderInit(allBookmarkItems, parentBookmarkFolder, activeFrame) {
	  const items = siteUtil.filterSitesRelativeTo(allBookmarkItems, parentBookmarkFolder);
	  if (items.size === 0) {
	    return [{
	      l10nLabelId: 'emptyFolderItem',
	      enabled: false,
	      dragOver: function (e) {
	        e.preventDefault();
	        e.dataTransfer.dropEffect = 'move';
	      },
	      drop(e) {
	        e.preventDefault();
	        const bookmark = dnd.prepareBookmarkDataFromCompatible(e.dataTransfer);
	        if (bookmark) {
	          appActions.moveSite(bookmark, parentBookmarkFolder, false, true);
	        }
	      }
	    }];
	  }
	  return bookmarkItemsInit(allBookmarkItems, items, activeFrame);
	}
	
	function bookmarkItemsInit(allBookmarkItems, items, activeFrame) {
	  const btbMode = getSetting(settings.BOOKMARKS_TOOLBAR_MODE);
	  const showFavicon = btbMode === bookmarksToolbarMode.TEXT_AND_FAVICONS || btbMode === bookmarksToolbarMode.FAVICONS_ONLY;
	  const itemsList = items.toList();
	  const template = itemsList.map(site => {
	    const isFolder = siteUtil.isFolder(site);
	    let faIcon;
	    if (showFavicon && !site.get('favicon')) {
	      faIcon = isFolder ? 'fa-folder-o' : 'fa-file-o';
	    }
	    const templateItem = {
	      bookmark: site,
	      draggable: true,
	      label: site.get('customTitle') || site.get('title') || site.get('location'),
	      icon: showFavicon ? site.get('favicon') : undefined,
	      faIcon,
	      contextMenu: function (e) {
	        onSiteDetailContextMenu(site, activeFrame, e);
	      },
	      dragEnd: function (e) {
	        dnd.onDragEnd(dragTypes.BOOKMARK, site, e);
	      },
	      dragStart: function (e) {
	        dnd.onDragStart(dragTypes.BOOKMARK, site, e);
	      },
	      dragOver: function (e) {
	        e.preventDefault();
	        e.dataTransfer.dropEffect = 'move';
	      },
	      drop: function (e) {
	        e.preventDefault();
	        const bookmarkItem = dnd.prepareBookmarkDataFromCompatible(e.dataTransfer);
	        if (bookmarkItem) {
	          appActions.moveSite(bookmarkItem, site, dndData.shouldPrependVerticalItem(e.target, e.clientY));
	        }
	      },
	      click: function (e) {
	        bookmarkActions.clickBookmarkItem(allBookmarkItems, site, activeFrame, e);
	      }
	    };
	    if (isFolder) {
	      templateItem.submenu = showBookmarkFolderInit(allBookmarkItems, site, activeFrame);
	    }
	    return templateItem;
	  }).toJS();
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function moreBookmarksTemplateInit(allBookmarkItems, bookmarks, activeFrame) {
	  const template = bookmarkItemsInit(allBookmarkItems, bookmarks, activeFrame);
	  template.push({
	    l10nLabelId: 'moreBookmarks',
	    click: function () {
	      windowActions.newFrame({ location: 'about:bookmarks' });
	      windowActions.setContextMenuDetail();
	    }
	  });
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function usernameTemplateInit(usernames, origin, action) {
	  let template = [];
	  for (let username in usernames) {
	    let password = usernames[username];
	    template.push({
	      label: username,
	      click: (item, focusedWindow) => {
	        windowActions.setActiveFrameShortcut(null, messages.FILL_PASSWORD, {
	          username,
	          password,
	          origin,
	          action
	        });
	        windowActions.setContextMenuDetail();
	      }
	    });
	  }
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function autofillTemplateInit(suggestions, frame) {
	  const template = [];
	  for (let i = 0; i < suggestions.length; ++i) {
	    let value;
	    const frontendId = suggestions[i].frontend_id;
	    if (frontendId >= 0) {
	      //  POPUP_ITEM_ID_AUTOCOMPLETE_ENTRY and Autofill Entry
	      value = suggestions[i].value;
	    } else if (frontendId === -1) {
	      // POPUP_ITEM_ID_WARNING_MESSAGE
	      value = 'Disabled due to unsecure connection.';
	    } else if (frontendId === -4) {
	      // POPUP_ITEM_ID_CLEAR_FORM
	      value = 'Clear Form';
	    } else if (frontendId === -5) {
	      // POPUP_ITEM_ID_AUTOFILL_OPTIONS
	      value = 'Autofill Settings';
	    } else if (frontendId === -6) {
	      // POPUP_ITEM_ID_DATALIST_ENTRY
	      value = suggestions[i].value;
	    }
	    if (frontendId === -3) {
	      // POPUP_ITEM_ID_SEPARATOR
	      template.push(CommonMenu.separatorMenuItem);
	    } else {
	      template.push({
	        label: value,
	        click: (item, focusedWindow) => {
	          windowActions.autofillSelectionClicked(frame.get('tabId'), value, frontendId, i);
	        }
	      });
	    }
	  }
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function flashTemplateInit(frameProps) {
	  const canRunFlash = appStoreRenderer.state.getIn(['flash', 'enabled']) && getSetting(settings.FLASH_INSTALLED);
	  const template = [];
	  if (!canRunFlash) {
	    template.push({
	      label: locale.translation('openFlashPreferences'),
	      click: () => {
	        windowActions.newFrame({
	          location: 'about:preferences#security'
	        }, true);
	      }
	    });
	  } else {
	    template.push({
	      label: locale.translation('allowFlashOnce'),
	      click: () => {
	        appActions.allowFlashOnce(frameProps.get('tabId'), frameProps.get('location'), frameProps.get('isPrivate'));
	      }
	    });
	    if (!frameProps.get('isPrivate')) {
	      template.push({
	        label: locale.translation('allowFlashAlways'),
	        click: () => {
	          appActions.allowFlashAlways(frameProps.get('tabId'), frameProps.get('location'));
	        }
	      });
	    }
	  }
	  return template;
	}
	
	function tabTemplateInit(frameProps) {
	  const frameKey = frameProps.get('key');
	  const template = [CommonMenu.newTabMenuItem(frameProps.get('key'))];
	  const location = frameProps.get('location');
	  if (location !== 'about:newtab') {
	    template.push(CommonMenu.separatorMenuItem, {
	      label: locale.translation('reloadTab'),
	      click: (item, focusedWindow) => {
	        if (focusedWindow) {
	          focusedWindow.webContents.send(messages.SHORTCUT_FRAME_RELOAD, frameKey);
	        }
	      }
	    }, {
	      label: locale.translation('clone'),
	      click: (item, focusedWindow) => {
	        if (focusedWindow) {
	          appActions.tabCloned(frameProps.get('tabId'));
	        }
	      }
	    });
	  }
	
	  if (!frameProps.get('isPrivate')) {
	    const isPinned = frameProps.get('pinnedLocation');
	    if (!(location === 'about:blank' || location === 'about:newtab' || isIntermediateAboutPage(location))) {
	      template.push({
	        label: locale.translation(isPinned ? 'unpinTab' : 'pinTab'),
	        click: item => {
	          // Handle converting the current tab window into a pinned site
	          windowActions.setPinned(frameProps, !isPinned);
	        }
	      });
	    }
	  }
	
	  // template.push({
	  //   label: locale.translation('moveTabToNewWindow'),
	  //   enabled: false,
	  //   click: (item, focusedWindow) => {
	  //     // TODO: actually move tab to new window
	  //   }
	  // })
	
	  template.push(CommonMenu.separatorMenuItem, {
	    label: locale.translation('muteOtherTabs'),
	    click: (item, focusedWindow) => {
	      windowActions.muteAllAudioExcept(frameProps);
	    }
	  });
	
	  if (frameProps.get('audioPlaybackActive')) {
	    const isMuted = frameProps.get('audioMuted');
	
	    template.push({
	      label: locale.translation(isMuted ? 'unmuteTab' : 'muteTab'),
	      click: item => {
	        windowActions.setAudioMuted(frameProps, !isMuted);
	      }
	    });
	  }
	
	  template.push(CommonMenu.separatorMenuItem);
	
	  if (!frameProps.get('pinnedLocation')) {
	    template.push({
	      label: locale.translation('closeTab'),
	      click: (item, focusedWindow) => {
	        if (focusedWindow) {
	          // TODO: Don't switch active tabs when this is called
	          focusedWindow.webContents.send(messages.SHORTCUT_CLOSE_FRAME, frameKey);
	        }
	      }
	    });
	  }
	
	  template.push({
	    label: locale.translation('closeOtherTabs'),
	    click: (item, focusedWindow) => {
	      if (focusedWindow) {
	        focusedWindow.webContents.send(messages.SHORTCUT_CLOSE_OTHER_FRAMES, frameKey, true, true);
	      }
	    }
	  }, {
	    label: locale.translation('closeTabsToRight'),
	    click: (item, focusedWindow) => {
	      if (focusedWindow) {
	        focusedWindow.webContents.send(messages.SHORTCUT_CLOSE_OTHER_FRAMES, frameKey, true, false);
	      }
	    }
	  }, {
	    label: locale.translation('closeTabsToLeft'),
	    click: (item, focusedWindow) => {
	      if (focusedWindow) {
	        focusedWindow.webContents.send(messages.SHORTCUT_CLOSE_OTHER_FRAMES, frameKey, false, true);
	      }
	    }
	  }, CommonMenu.separatorMenuItem);
	
	  template.push(Object.assign({}, CommonMenu.reopenLastClosedTabItem(), { enabled: windowStore.getState().get('closedFrames').size > 0 }));
	
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function getMisspelledSuggestions(selection, isMisspelled, suggestions) {
	  const hasSelection = selection.length > 0;
	  const template = [];
	  if (hasSelection) {
	    if (suggestions.length > 0) {
	      // Map the first 3 suggestions to menu items that allows click
	      // to replace the text.
	      template.push(...suggestions.slice(0, 3).map(suggestion => {
	        return {
	          label: suggestion,
	          click: () => {
	            webviewActions.replace(suggestion);
	          }
	        };
	      }), CommonMenu.separatorMenuItem);
	    }
	    if (isMisspelled) {
	      template.push({
	        label: locale.translation('learnSpelling'),
	        click: () => {
	          appActions.addWord(selection, true);
	          // This is needed so the underline goes away
	          webviewActions.replace(selection);
	        }
	      }, {
	        label: locale.translation('ignoreSpelling'),
	        click: () => {
	          appActions.addWord(selection, false);
	          // This is needed so the underline goes away
	          webviewActions.replace(selection);
	        }
	      }, CommonMenu.separatorMenuItem);
	    }
	  }
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function getEditableItems(selection, editFlags, hasFormat) {
	  const hasSelection = selection.length > 0;
	  const hasClipboard = clipboard.readText().length > 0;
	  const template = [];
	
	  if (!editFlags || editFlags.canCut) {
	    template.push({
	      label: locale.translation('cut'),
	      enabled: hasSelection,
	      accelerator: 'CmdOrCtrl+X',
	      role: 'cut'
	    });
	  }
	  if (!editFlags || editFlags.canCopy) {
	    template.push({
	      label: locale.translation('copy'),
	      enabled: hasSelection,
	      accelerator: 'CmdOrCtrl+C',
	      role: 'copy'
	    });
	  }
	  if (!editFlags || editFlags.canPaste) {
	    template.push({
	      label: locale.translation('paste'),
	      accelerator: 'CmdOrCtrl+V',
	      enabled: hasClipboard,
	      role: 'paste'
	    });
	    if (hasFormat) {
	      template.push({
	        label: locale.translation('pasteWithoutFormatting'),
	        accelerator: 'Shift+CmdOrCtrl+V',
	        enabled: hasClipboard,
	        click: function (item, focusedWindow) {
	          focusedWindow.webContents.pasteAndMatchStyle();
	        }
	      });
	    }
	  }
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function hamburgerTemplateInit(location, e) {
	  const template = [CommonMenu.newTabMenuItem(), CommonMenu.newPrivateTabMenuItem(), CommonMenu.newPartitionedTabMenuItem(), CommonMenu.newWindowMenuItem(), CommonMenu.separatorMenuItem, {
	    l10nLabelId: 'zoom',
	    type: 'multi',
	    submenu: [{
	      label: '-',
	      click: () => {
	        ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_ZOOM_OUT);
	      }
	    }, {
	      labelDataBind: 'zoomLevel',
	      dataBindParam: location,
	      click: () => {
	        ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_ZOOM_RESET);
	      }
	    }, {
	      label: '+',
	      click: () => {
	        ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_ZOOM_IN);
	      }
	    }]
	  }, CommonMenu.separatorMenuItem, {
	    label: locale.translation('bookmarks'),
	    submenu: [CommonMenu.bookmarksManagerMenuItem(), CommonMenu.bookmarksToolbarMenuItem(), CommonMenu.separatorMenuItem, CommonMenu.importBrowserDataMenuItem()]
	  }, {
	    label: locale.translation('bravery'),
	    submenu: [
	    // CommonMenu.braveryGlobalMenuItem(),
	    CommonMenu.braverySiteMenuItem(), CommonMenu.braveryPaymentsMenuItem()]
	  }, CommonMenu.downloadsMenuItem(), CommonMenu.findOnPageMenuItem(), CommonMenu.printMenuItem(), CommonMenu.separatorMenuItem, CommonMenu.preferencesMenuItem(), CommonMenu.separatorMenuItem, {
	    label: locale.translation('help'),
	    submenu: [CommonMenu.aboutBraveMenuItem(), CommonMenu.separatorMenuItem, CommonMenu.checkForUpdateMenuItem(), CommonMenu.separatorMenuItem, CommonMenu.submitFeedbackMenuItem()]
	  }, CommonMenu.quitMenuItem()];
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	const openInNewTabMenuItem = (location, isPrivate, partitionNumber, parentFrameKey) => {
	  let openInForeground = getSetting(settings.SWITCH_TO_NEW_TABS) === true;
	  if (Array.isArray(location) && Array.isArray(partitionNumber)) {
	    return {
	      label: locale.translation('openInNewTabs'),
	      click: () => {
	        for (let i = 0; i < location.length; ++i) {
	          windowActions.newFrame({ location: location[i],
	            isPrivate,
	            partitionNumber: partitionNumber[i],
	            parentFrameKey }, openInForeground);
	        }
	      }
	    };
	  } else {
	    return {
	      label: locale.translation('openInNewTab'),
	      click: () => {
	        windowActions.newFrame({ location, isPrivate, partitionNumber, parentFrameKey }, openInForeground);
	      }
	    };
	  }
	};
	
	const openAllInNewTabsMenuItem = (allSites, folderDetail) => {
	  return {
	    label: locale.translation('openAllInTabs'),
	    click: () => {
	      bookmarkActions.openBookmarksInFolder(allSites, folderDetail);
	    }
	  };
	};
	
	const openInNewPrivateTabMenuItem = (location, parentFrameKey) => {
	  let openInForeground = getSetting(settings.SWITCH_TO_NEW_TABS) === true;
	  if (Array.isArray(location)) {
	    return {
	      label: locale.translation('openInNewPrivateTabs'),
	      click: () => {
	        for (let i = 0; i < location.length; ++i) {
	          windowActions.newFrame({
	            location: location[i],
	            isPrivate: true,
	            parentFrameKey
	          }, openInForeground);
	        }
	      }
	    };
	  } else {
	    return {
	      label: locale.translation('openInNewPrivateTab'),
	      click: () => {
	        windowActions.newFrame({
	          location,
	          isPrivate: true,
	          parentFrameKey
	        }, openInForeground);
	      }
	    };
	  }
	};
	
	const openInNewWindowMenuItem = (location, isPrivate, partitionNumber) => {
	  return {
	    label: locale.translation('openInNewWindow'),
	    click: () => {
	      appActions.newWindow({ location, isPrivate, partitionNumber });
	    }
	  };
	};
	
	const openInNewSessionTabMenuItem = (location, parentFrameKey) => {
	  let openInForeground = getSetting(settings.SWITCH_TO_NEW_TABS) === true;
	  if (Array.isArray(location)) {
	    return {
	      label: locale.translation('openInNewSessionTabs'),
	      click: (item, focusedWindow) => {
	        for (let i = 0; i < location.length; ++i) {
	          windowActions.newFrame({
	            location: location[i],
	            isPartitioned: true,
	            parentFrameKey
	          }, openInForeground);
	        }
	      }
	    };
	  } else {
	    return {
	      label: locale.translation('openInNewSessionTab'),
	      click: (item, focusedWindow) => {
	        windowActions.newFrame({
	          location,
	          isPartitioned: true,
	          parentFrameKey
	        }, openInForeground);
	      }
	    };
	  }
	};
	
	const saveAsMenuItem = (label, location) => {
	  return {
	    label: locale.translation(label),
	    click: (item, focusedWindow) => {
	      if (focusedWindow && location) {
	        focusedWindow.webContents.downloadURL(location);
	      }
	    }
	  };
	};
	
	const copyAddressMenuItem = (label, location) => {
	  return {
	    label: locale.translation(label),
	    click: (item, focusedWindow) => {
	      if (focusedWindow && location) {
	        appActions.clipboardTextCopied(location);
	      }
	    }
	  };
	};
	
	const copyEmailAddressMenuItem = location => {
	  return {
	    label: locale.translation('copyEmailAddress'),
	    click: () => {
	      appActions.clipboardTextCopied(location.substring('mailto:'.length, location.length));
	    }
	  };
	};
	
	const searchSelectionMenuItem = location => {
	  var searchText = textUtils.ellipse(location);
	  return {
	    label: locale.translation('openSearch').replace(/{{\s*selectedVariable\s*}}/, searchText),
	    click: (item, focusedWindow) => {
	      if (focusedWindow && location) {
	        let activeFrame = windowStore.getState().get('activeFrameKey');
	        let frame = windowStore.getFrame(activeFrame);
	        let searchUrl = windowStore.getState().getIn(['searchDetail', 'searchURL']).replace('{searchTerms}', encodeURIComponent(location));
	        windowActions.newFrame({ location: searchUrl,
	          isPrivate: frame.get('isPrivate'),
	          partitionNumber: frame.get('partitionNumber') }, true);
	      }
	    }
	  };
	};
	
	const showDefinitionMenuItem = selectionText => {
	  let lookupText = textUtils.ellipse(selectionText, 3);
	  return {
	    label: locale.translation('lookupSelection').replace(/{{\s*selectedVariable\s*}}/, lookupText),
	    click: (item, focusedWindow) => {
	      webviewActions.showDefinitionForSelection();
	    }
	  };
	};
	
	function addLinkMenu(link, frame) {
	  const template = [];
	  if (!frame.get('isPrivate')) {
	    template.push(openInNewTabMenuItem(link, frame.get('isPrivate'), frame.get('partitionNumber'), frame.get('key')));
	  }
	  template.push(openInNewPrivateTabMenuItem(link, frame.get('key')), openInNewWindowMenuItem(link, frame.get('isPrivate'), frame.get('partitionNumber')), CommonMenu.separatorMenuItem, openInNewSessionTabMenuItem(link, frame.get('key')), CommonMenu.separatorMenuItem);
	
	  if (link.toLowerCase().startsWith('mailto:')) {
	    template.push(copyEmailAddressMenuItem(link));
	  } else {
	    template.push(saveAsMenuItem('saveLinkAs', link), copyAddressMenuItem('copyLinkAddress', link), CommonMenu.separatorMenuItem);
	  }
	
	  return template;
	}
	
	function mainTemplateInit(nodeProps, frame, tab) {
	  let template = [];
	
	  const isLink = nodeProps.linkURL && nodeProps.linkURL !== '';
	  const isImage = nodeProps.mediaType === 'image';
	  const isVideo = nodeProps.mediaType === 'video';
	  const isAudio = nodeProps.mediaType === 'audio';
	  const isInputField = nodeProps.isEditable || nodeProps.inputFieldType !== 'none';
	  const isTextSelected = nodeProps.selectionText.length > 0;
	  const isAboutPage = aboutUrls.has(frame.get('location'));
	
	  if (isLink) {
	    template = addLinkMenu(nodeProps.linkURL, frame);
	  } else if (isTextSelected && urlUtil.isURL(nodeProps.selectionText)) {
	    template = addLinkMenu(nodeProps.selectionText, frame);
	  }
	
	  if (isImage) {
	    template.push({
	      label: locale.translation('openImageInNewTab'),
	      click: (item, focusedWindow) => {
	        if (focusedWindow && nodeProps.srcURL) {
	          // TODO: open this in the next tab instead of last tab
	          focusedWindow.webContents.send(messages.SHORTCUT_NEW_FRAME, nodeProps.srcURL, { isPrivate: frame.get('isPrivate'), partitionNumber: frame.get('partitionNumber') });
	        }
	      }
	    }, saveAsMenuItem('saveImage', nodeProps.srcURL), {
	      label: locale.translation('copyImage'),
	      click: item => {
	        if (nodeProps.srcURL) {
	          if (urlParse(nodeProps.srcURL).protocol === 'data:') {
	            appActions.dataURLCopied(nodeProps.srcURL, `<img src='${nodeProps.srcURL}>`, nodeProps.srcURL);
	          } else {
	            getBase64FromImageUrl(nodeProps.srcURL).then(dataURL => appActions.dataURLCopied(dataURL, `<img src='${nodeProps.srcURL}>`, nodeProps.srcURL));
	          }
	        }
	      }
	    }, copyAddressMenuItem('copyImageAddress', nodeProps.srcURL));
	    if (getSetting(settings.DEFAULT_SEARCH_ENGINE) === 'Google' && nodeProps.srcURL && urlParse(nodeProps.srcURL).protocol !== 'data:') {
	      template.push({
	        label: locale.translation('searchImage'),
	        click: item => {
	          let activeFrame = windowStore.getState().get('activeFrameKey');
	          let frame = windowStore.getFrame(activeFrame);
	          let searchUrl = windowStore.getState().getIn(['searchDetail', 'searchURL']).replace('{searchTerms}', encodeURIComponent(nodeProps.srcURL)).replace('?q', 'byimage?image_url');
	          windowActions.newFrame({ location: searchUrl,
	            isPrivate: frame.get('isPrivate'),
	            partitionNumber: frame.get('partitionNumber') }, true);
	        }
	      });
	    }
	    template.push(CommonMenu.separatorMenuItem);
	  }
	
	  if (isInputField) {
	    let misspelledSuggestions = [];
	    if (nodeProps.misspelledWord) {
	      const info = ipc.sendSync(messages.GET_MISSPELLING_INFO, nodeProps.selectionText);
	      if (info) {
	        misspelledSuggestions = getMisspelledSuggestions(nodeProps.selectionText, info.isMisspelled, info.suggestions);
	      }
	    }
	
	    const editableItems = getEditableItems(nodeProps.selectionText, nodeProps.editFlags, true);
	    template.push(...misspelledSuggestions, {
	      label: locale.translation('undo'),
	      accelerator: 'CmdOrCtrl+Z',
	      role: 'undo'
	    }, {
	      label: locale.translation('redo'),
	      accelerator: 'Shift+CmdOrCtrl+Z',
	      role: 'redo'
	    }, CommonMenu.separatorMenuItem);
	
	    if (editableItems.length > 0) {
	      template.push(...editableItems, CommonMenu.separatorMenuItem);
	    }
	
	    if (isTextSelected) {
	      if (isDarwin) {
	        template.push(showDefinitionMenuItem(nodeProps.selectionText), CommonMenu.separatorMenuItem);
	      }
	      template.push(searchSelectionMenuItem(nodeProps.selectionText), CommonMenu.separatorMenuItem);
	    }
	  } else if (isTextSelected) {
	    if (isDarwin) {
	      template.push(showDefinitionMenuItem(nodeProps.selectionText), CommonMenu.separatorMenuItem);
	      if (isLink) {
	        template.push(addBookmarkMenuItem('bookmarkLink', {
	          location: nodeProps.linkURL,
	          tags: [siteTags.BOOKMARK]
	        }, false));
	      }
	    }
	
	    template.push(searchSelectionMenuItem(nodeProps.selectionText), {
	      label: locale.translation('copy'),
	      accelerator: 'CmdOrCtrl+C',
	      role: 'copy'
	    }, CommonMenu.separatorMenuItem);
	  } else {
	    if (!isImage) {
	      if (isLink) {
	        template.push(addBookmarkMenuItem('bookmarkLink', {
	          location: nodeProps.linkURL,
	          tags: [siteTags.BOOKMARK]
	        }, false));
	      } else {
	        template.push({
	          label: locale.translation('back'),
	          enabled: tab.get('canGoBack'),
	          click: (item, focusedWindow) => {
	            if (focusedWindow) {
	              focusedWindow.webContents.send(messages.SHORTCUT_ACTIVE_FRAME_BACK);
	            }
	          }
	        }, {
	          label: locale.translation('forward'),
	          enabled: tab.get('canGoForward'),
	          click: (item, focusedWindow) => {
	            if (focusedWindow) {
	              focusedWindow.webContents.send(messages.SHORTCUT_ACTIVE_FRAME_FORWARD);
	            }
	          }
	        }, {
	          label: locale.translation('reloadPage'),
	          accelerator: 'CmdOrCtrl+R',
	          click: (item, focusedWindow) => {
	            if (focusedWindow) {
	              focusedWindow.webContents.send(messages.SHORTCUT_ACTIVE_FRAME_RELOAD);
	            }
	          }
	        }, CommonMenu.separatorMenuItem, addBookmarkMenuItem('bookmarkPage', siteUtil.getDetailFromFrame(frame, siteTags.BOOKMARK), false));
	
	        if (!isAboutPage) {
	          template.push({
	            label: locale.translation('savePageAs'),
	            accelerator: 'CmdOrCtrl+S',
	            click: function (item, focusedWindow) {
	              CommonMenu.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_SAVE]);
	            }
	          });
	        }
	
	        template.push({
	          label: locale.translation('find'),
	          accelerator: 'CmdOrCtrl+F',
	          click: function (item, focusedWindow) {
	            focusedWindow.webContents.send(messages.SHORTCUT_ACTIVE_FRAME_SHOW_FINDBAR);
	          }
	        });
	
	        if (!isAboutPage) {
	          template.push({
	            label: locale.translation('print'),
	            accelerator: 'CmdOrCtrl+P',
	            click: function (item, focusedWindow) {
	              focusedWindow.webContents.send(messages.SHORTCUT_ACTIVE_FRAME_PRINT);
	            }
	          });
	        }
	
	        // CommonMenu.separatorMenuItem
	        // TODO: bravery menu goes here
	      }
	
	      template.push(CommonMenu.separatorMenuItem);
	    }
	
	    if (!isLink && !isImage && !isAboutPage) {
	      template.push({
	        label: locale.translation('viewPageSource'),
	        accelerator: 'CmdOrCtrl+Alt+U',
	        click: (item, focusedWindow) => {
	          if (focusedWindow) {
	            focusedWindow.webContents.send(messages.SHORTCUT_ACTIVE_FRAME_VIEW_SOURCE);
	          }
	        }
	      });
	    }
	  }
	
	  if (!isAboutPage) {
	    template.push({
	      label: locale.translation('inspectElement'),
	      click: (item, focusedWindow) => {
	        webviewActions.inspectElement(nodeProps.x, nodeProps.y);
	      }
	    });
	  }
	
	  const extensionContextMenus = extensionState.getContextMenusProperties(appStore.state);
	  if (extensionContextMenus !== undefined && extensionContextMenus.length) {
	    template.push(CommonMenu.separatorMenuItem);
	    let templateMap = {};
	    extensionContextMenus.forEach(extensionContextMenu => {
	      let info = {};
	      let contextsPassed = false;
	      if (extensionContextMenu.properties.contexts !== undefined && extensionContextMenu.properties.contexts.length) {
	        extensionContextMenu.properties.contexts.forEach(context => {
	          if (isTextSelected && (context === 'selection' || context === 'all')) {
	            info['selectionText'] = nodeProps.selectionText;
	            contextsPassed = true;
	          } else if (isLink && (context === 'link' || context === 'all')) {
	            info['linkUrl'] = nodeProps.linkURL;
	            contextsPassed = true;
	          } else if (isImage && (context === 'image' || context === 'all')) {
	            info['mediaType'] = 'image';
	            contextsPassed = true;
	          } else if (isInputField && (context === 'editable' || context === 'all')) {
	            info['editable'] = true;
	            contextsPassed = true;
	          } else if (nodeProps.pageURL && (context === 'page' || context === 'all')) {
	            info['pageUrl'] = nodeProps.pageURL;
	            contextsPassed = true;
	          } else if (isVideo && (context === 'video' || context === 'all')) {
	            info['mediaType'] = 'video';
	            contextsPassed = true;
	          } else if (isAudio && (context === 'audio' || context === 'all')) {
	            info['mediaType'] = 'audio';
	            contextsPassed = true;
	          } else if (nodeProps.frameURL && (context === 'frame' || context === 'all')) {
	            info['frameURL'] = nodeProps.frameURL;
	            contextsPassed = true;
	          }
	        });
	      }
	      if (nodeProps.srcURL) {
	        info['srcURL'] = nodeProps.srcURL;
	      }
	      // TODO (Anthony): Browser Action context menu
	      if (extensionContextMenu.properties.contexts !== undefined && extensionContextMenu.properties.contexts.length === 1 && extensionContextMenu.properties.contexts[0] === 'browser_action') {
	        contextsPassed = false;
	      }
	      if (contextsPassed) {
	        info['menuItemId'] = extensionContextMenu.menuItemId;
	        if (extensionContextMenu.properties.parentId) {
	          if (templateMap[extensionContextMenu.properties.parentId].submenu === undefined) {
	            templateMap[extensionContextMenu.properties.parentId].submenu = [];
	          }
	          templateMap[extensionContextMenu.properties.parentId].submenu.push({
	            label: extensionContextMenu.properties.title,
	            click: (item, focusedWindow) => {
	              if (focusedWindow) {
	                extensionActions.contextMenuClicked(extensionContextMenu.extensionId, frame.get('tabId'), info);
	              }
	            }
	          });
	          const submenuLength = templateMap[extensionContextMenu.properties.parentId].submenu.length;
	          templateMap[extensionContextMenu.menuItemId] = templateMap[extensionContextMenu.properties.parentId].submenu[submenuLength - 1];
	        } else {
	          template.push({
	            label: extensionContextMenu.properties.title,
	            click: (item, focusedWindow) => {
	              if (focusedWindow) {
	                extensionActions.contextMenuClicked(extensionContextMenu.extensionId, frame.get('tabId'), info);
	              }
	            },
	            icon: extensionContextMenu.icon
	          });
	          templateMap[extensionContextMenu.menuItemId] = template[template.length - 1];
	        }
	      }
	    });
	  }
	
	  if (frame.get('location') === 'about:bookmarks') {
	    template.push(CommonMenu.separatorMenuItem, addBookmarkMenuItem('addBookmark', {
	      location: nodeProps.linkURL,
	      tags: [siteTags.BOOKMARK]
	    }), addFolderMenuItem());
	  }
	
	  return menuUtil.sanitizeTemplateItems(template);
	}
	
	function onHamburgerMenu(location, e) {
	  const menuTemplate = hamburgerTemplateInit(location, e);
	  const rect = e.target.parentNode.getBoundingClientRect();
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    right: 0,
	    top: rect.bottom,
	    template: menuTemplate,
	    type: 'hamburgerMenu'
	  }));
	}
	
	function onMainContextMenu(nodeProps, frame, tab, contextMenuType) {
	  if (contextMenuType === 'bookmark' || contextMenuType === 'bookmark-folder') {
	    const activeFrame = Immutable.fromJS({ location: '', title: '', partitionNumber: frame.get('partitionNumber') });
	    onSiteDetailContextMenu(Immutable.fromJS(nodeProps), activeFrame);
	  } else if (contextMenuType === 'history') {
	    onSiteDetailContextMenu(Immutable.fromJS(nodeProps));
	  } else if (contextMenuType === 'synopsis') {
	    onLedgerContextMenu(nodeProps.location, nodeProps.hostPattern);
	  } else if (contextMenuType === 'download') {
	    onDownloadsToolbarContextMenu(nodeProps.downloadId, Immutable.fromJS(nodeProps));
	  } else {
	    const mainMenu = Menu.buildFromTemplate(mainTemplateInit(nodeProps, frame, tab));
	    mainMenu.popup(currentWindow);
	    mainMenu.destroy();
	  }
	}
	
	function onFlashContextMenu(nodeProps, frameProps) {
	  const flashMenu = Menu.buildFromTemplate(flashTemplateInit(frameProps));
	  flashMenu.popup(currentWindow);
	  flashMenu.destroy();
	}
	
	function onTabContextMenu(frameProps, e) {
	  e.stopPropagation();
	  const tabMenu = Menu.buildFromTemplate(tabTemplateInit(frameProps));
	  tabMenu.popup(currentWindow);
	  tabMenu.destroy();
	}
	
	function onNewTabContextMenu(target) {
	  const rootElement = window.getComputedStyle(document.querySelector(':root'));
	  const contextMenuSize = Number.parseInt(rootElement.getPropertyValue('--context-menu-single-max-width'), 10);
	
	  const containerRect = target.parentNode.getBoundingClientRect();
	  const rect = target.getBoundingClientRect();
	
	  const contextMenuMaxVisibleWidth = rect.right + contextMenuSize / 2;
	  const contextMenuHasOverflow = contextMenuMaxVisibleWidth > containerRect.right;
	
	  const menuTemplate = [CommonMenu.newTabMenuItem(), CommonMenu.newPrivateTabMenuItem(), CommonMenu.newPartitionedTabMenuItem(), CommonMenu.newWindowMenuItem()];
	
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: contextMenuHasOverflow ? contextMenuMaxVisibleWidth - contextMenuSize - rect.width : rect.left,
	    top: rect.bottom + 2,
	    template: menuTemplate
	  }));
	}
	
	function onTabsToolbarContextMenu(activeFrame, closestDestinationDetail, isParent, e) {
	  e.stopPropagation();
	  const tabsToolbarMenu = Menu.buildFromTemplate(tabsToolbarTemplateInit(activeFrame, closestDestinationDetail, isParent));
	  tabsToolbarMenu.popup(currentWindow);
	  tabsToolbarMenu.destroy();
	}
	
	function onDownloadsToolbarContextMenu(downloadId, downloadItem, e) {
	  if (e) {
	    e.stopPropagation();
	  }
	  const downloadsToolbarMenu = Menu.buildFromTemplate(downloadsToolbarTemplateInit(downloadId, downloadItem));
	  downloadsToolbarMenu.popup(currentWindow);
	  downloadsToolbarMenu.destroy();
	}
	
	function onTabPageContextMenu(framePropsList, e) {
	  e.stopPropagation();
	  const tabPageMenu = Menu.buildFromTemplate(tabPageTemplateInit(framePropsList));
	  tabPageMenu.popup(currentWindow);
	  tabPageMenu.destroy();
	}
	
	function onUrlBarContextMenu(searchDetail, activeFrame, e) {
	  e.stopPropagation();
	  const inputMenu = Menu.buildFromTemplate(urlBarTemplateInit(searchDetail, activeFrame, e));
	  inputMenu.popup(currentWindow);
	  inputMenu.destroy();
	}
	
	function onFindBarContextMenu(e) {
	  e.stopPropagation();
	  const findBarMenu = Menu.buildFromTemplate(findBarTemplateInit(e));
	  findBarMenu.popup(currentWindow);
	  findBarMenu.destroy();
	}
	
	function onSiteDetailContextMenu(siteDetail, activeFrame, e) {
	  if (e) {
	    e.stopPropagation();
	  }
	  const menu = Menu.buildFromTemplate(siteDetailTemplateInit(siteDetail, activeFrame));
	  menu.popup(currentWindow);
	  menu.destroy();
	}
	
	function onLedgerContextMenu(location, hostPattern) {
	  const template = [openInNewTabMenuItem(location), openInNewPrivateTabMenuItem(location), openInNewSessionTabMenuItem(location), copyAddressMenuItem('copyLinkAddress', location), CommonMenu.separatorMenuItem, {
	    label: locale.translation('deleteLedgerEntry'),
	    click: () => appActions.changeSiteSetting(hostPattern, 'ledgerPaymentsShown', false)
	  }];
	  const menu = Menu.buildFromTemplate(template);
	  menu.popup(currentWindow);
	  menu.destroy();
	}
	
	function onShowBookmarkFolderMenu(bookmarks, bookmark, activeFrame, e) {
	  if (e && e.stopPropagation) {
	    e.stopPropagation();
	  }
	  const menuTemplate = showBookmarkFolderInit(bookmarks, bookmark, activeFrame);
	  const rectLeft = e.target.getBoundingClientRect();
	  const rectBottom = e.target.parentNode.getBoundingClientRect();
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: (rectLeft.left | 0) - 2,
	    top: (rectBottom.bottom | 0) - 1,
	    template: menuTemplate
	  }));
	}
	
	/**
	 * @param {Object} usernames - map of username to plaintext password
	 * @param {string} origin - origin of the form
	 * @param {string} action - action of the form
	 * @param {Object} boundingRect - bounding rectangle of username input field
	 * @param {number} topOffset - distance from webview to the top of window
	 */
	function onShowUsernameMenu(usernames, origin, action, boundingRect, topOffset) {
	  const downloadsBarOffset = windowStore.getState().getIn(['ui', 'downloadsToolbar', 'isVisible']) ? getDownloadsBarHeight() : 0;
	  const menuTemplate = usernameTemplateInit(usernames, origin, action);
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: boundingRect.left,
	    top: boundingRect.bottom + topOffset - downloadsBarOffset,
	    template: menuTemplate
	  }));
	}
	
	function onShowAutofillMenu(suggestions, boundingRect, frame) {
	  const menuTemplate = autofillTemplateInit(suggestions, frame);
	  const downloadsBarOffset = windowStore.getState().getIn(['ui', 'downloadsToolbar', 'isVisible']) ? getDownloadsBarHeight() : 0;
	  const offset = {
	    x: window.innerWidth - boundingRect.clientWidth,
	    y: window.innerHeight - boundingRect.clientHeight
	  };
	  const tabId = frame.get('tabId');
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    type: 'autofill',
	    tabId,
	    left: offset.x + boundingRect.x,
	    top: offset.y + (boundingRect.y + boundingRect.height) - downloadsBarOffset,
	    template: menuTemplate
	  }));
	}
	
	function onMoreBookmarksMenu(activeFrame, allBookmarkItems, overflowItems, e) {
	  const menuTemplate = moreBookmarksTemplateInit(allBookmarkItems, overflowItems, activeFrame);
	  const rect = e.target.getBoundingClientRect();
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    right: 0,
	    top: rect.bottom,
	    template: menuTemplate
	  }));
	}
	
	function onBackButtonHistoryMenu(activeFrame, history, target) {
	  const rect = target.parentNode.getBoundingClientRect();
	  const menuTemplate = [];
	
	  if (activeFrame && history && history.entries.length > 0) {
	    const stopIndex = Math.max(history.currentIndex - config.navigationBar.maxHistorySites - 1, -1);
	    for (let index = history.currentIndex - 1; index > stopIndex; index--) {
	      const url = history.entries[index].url;
	
	      menuTemplate.push({
	        label: history.entries[index].display,
	        icon: history.entries[index].icon,
	        click: (e, focusedWindow) => {
	          if (eventUtil.isForSecondaryAction(e)) {
	            windowActions.newFrame({
	              location: url,
	              partitionNumber: activeFrame.props.frame.get('partitionNumber')
	            }, !!e.shiftKey);
	          } else {
	            activeFrame.goToIndex(index);
	          }
	        }
	      });
	    }
	
	    // Always display "Show History" link
	    menuTemplate.push(CommonMenu.separatorMenuItem, {
	      label: locale.translation('showAllHistory'),
	      click: (e, focusedWindow) => {
	        windowActions.newFrame({ location: 'about:history' });
	        windowActions.setContextMenuDetail();
	      }
	    });
	  }
	
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: rect.left,
	    top: rect.bottom,
	    template: menuTemplate
	  }));
	}
	
	function onForwardButtonHistoryMenu(activeFrame, history, target) {
	  const rect = target.parentNode.getBoundingClientRect();
	  const menuTemplate = [];
	
	  if (activeFrame && history && history.entries.length > 0) {
	    const stopIndex = Math.min(history.currentIndex + config.navigationBar.maxHistorySites + 1, history.entries.length);
	    for (let index = history.currentIndex + 1; index < stopIndex; index++) {
	      const url = history.entries[index].url;
	
	      menuTemplate.push({
	        label: history.entries[index].display,
	        icon: history.entries[index].icon,
	        click: (e, focusedWindow) => {
	          if (eventUtil.isForSecondaryAction(e)) {
	            windowActions.newFrame({
	              location: url,
	              partitionNumber: activeFrame.props.frame.get('partitionNumber')
	            }, !!e.shiftKey);
	          } else {
	            activeFrame.goToIndex(index);
	          }
	        }
	      });
	    }
	
	    // Always display "Show History" link
	    menuTemplate.push(CommonMenu.separatorMenuItem, {
	      label: locale.translation('showAllHistory'),
	      click: (e, focusedWindow) => {
	        windowActions.newFrame({ location: 'about:history' });
	        windowActions.setContextMenuDetail();
	      }
	    });
	  }
	
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: rect.left,
	    top: rect.bottom,
	    template: menuTemplate
	  }));
	}
	
	function onReloadContextMenu(target) {
	  const rect = target.getBoundingClientRect();
	  const menuTemplate = [CommonMenu.reloadPageMenuItem(), CommonMenu.cleanReloadMenuItem()];
	
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: rect.left,
	    top: rect.bottom + 2,
	    template: menuTemplate
	  }));
	}
	
	module.exports = {
	  onHamburgerMenu,
	  onFlashContextMenu,
	  onMainContextMenu,
	  onTabContextMenu,
	  onNewTabContextMenu,
	  onTabsToolbarContextMenu,
	  onDownloadsToolbarContextMenu,
	  onTabPageContextMenu,
	  onUrlBarContextMenu,
	  onFindBarContextMenu,
	  onSiteDetailContextMenu,
	  onShowBookmarkFolderMenu,
	  onShowUsernameMenu,
	  onShowAutofillMenu,
	  onMoreBookmarksMenu,
	  onBackButtonHistoryMenu,
	  onForwardButtonHistoryMenu,
	  onReloadContextMenu
	};

/***/ },
/* 724 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const siteUtil = __webpack_require__(259);
	const windowActions = __webpack_require__(716);
	const eventUtil = __webpack_require__(250);
	const { SWITCH_TO_NEW_TABS } = __webpack_require__(204);
	const getSetting = __webpack_require__(202).getSetting;
	
	const bookmarkActions = {
	  openBookmarksInFolder: function (allBookmarkItems, folderDetail) {
	    // We have a middle clicked folder
	    const bookmarks = allBookmarkItems.filter(bookmark => (bookmark.get('parentFolderId') || 0) === (folderDetail.get('folderId') || 0) && siteUtil.isBookmark(bookmark));
	
	    // Only load the first 25 tabs as loaded
	    bookmarks.forEach((bookmark, i) => windowActions.newFrame(Object.assign(siteUtil.toFrameOpts(bookmark), { unloaded: i > 25 }), getSetting(SWITCH_TO_NEW_TABS)));
	  },
	
	  /**
	   * Performs an action based on the passed in event to the bookmark item
	   * @return true if an action was performed
	   */
	  clickBookmarkItem: function (allBookmarkItems, bookmarkItem, activeFrame, e) {
	    const isFolder = siteUtil.isFolder(bookmarkItem);
	    if (!isFolder) {
	      if (eventUtil.isForSecondaryAction(e)) {
	        windowActions.newFrame({
	          location: bookmarkItem.get('location'),
	          partitionNumber: bookmarkItem && bookmarkItem.get && bookmarkItem.get('partitionNumber') || undefined
	        }, !!e.shiftKey || getSetting(SWITCH_TO_NEW_TABS));
	      } else {
	        windowActions.loadUrl(activeFrame, bookmarkItem.get('location'));
	      }
	      windowActions.setContextMenuDetail();
	      return true;
	    } else if (eventUtil.isForSecondaryAction(e)) {
	      this.openBookmarksInFolder(allBookmarkItems, bookmarkItem);
	      windowActions.setContextMenuDetail();
	      return true;
	    }
	    return false;
	  }
	};
	
	module.exports = bookmarkActions;

/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const electronDownloadItemActions = {
	  PAUSE: _,
	  RESUME: _,
	  CANCEL: _
	};
	
	module.exports = mapValuesByKeys(electronDownloadItemActions);

/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const Immutable = __webpack_require__(188);
	const CommonMenu = __webpack_require__(727);
	const messages = __webpack_require__(211);
	const siteTags = __webpack_require__(256);
	const eventUtil = __webpack_require__(250);
	const siteUtil = __webpack_require__(259);
	const locale = __webpack_require__(729);
	
	/**
	 * Get the an electron MenuItem object from a Menu based on its label
	 *
	 * @param {Object} appMenu - the electron Menu object
	 * @param {string} label - text to search each menu item for
	 * NOTE: label is a localized string
	 */
	module.exports.getMenuItem = (appMenu, label) => {
	  if (appMenu && appMenu.items && appMenu.items.length > 0) {
	    for (let i = 0; i < appMenu.items.length; i++) {
	      const item = appMenu.items[i];
	      if (item && item.label === label) return item;
	      if (item.submenu) {
	        const nestedItem = module.exports.getMenuItem(item.submenu, label);
	        if (nestedItem) return nestedItem;
	      }
	    }
	  }
	  return null;
	};
	
	/**
	 * Similar to getMenuItem (above) but with a menu template. The menu template
	 * is used by our tests and also with the custom rendered Windows titlebar.
	 *
	 * @param {Object} template - object in the format which gets passed to Menu.buildFromTemplate()
	 * @param {string} label - text to search each menu item for
	 * NOTE: label is a localized string
	 */
	const getTemplateItem = (template, label) => {
	  if (template && template.length && template.length > 0) {
	    for (let i = 0; i < template.length; i++) {
	      const item = template[i];
	      if (item && item.label === label) return item;
	      if (item.submenu) {
	        const nestedItem = getTemplateItem(item.submenu, label);
	        if (nestedItem) return nestedItem;
	      }
	    }
	  }
	  return null;
	};
	
	/**
	 * Search a menu template and update the checked status
	 *
	 * @return the new template OR null if no change was made (no update needed)
	 */
	module.exports.setTemplateItemChecked = (template, label, checked) => {
	  const menu = template.toJS();
	  const menuItem = getTemplateItem(menu, label);
	  if (menuItem.checked !== checked) {
	    menuItem.checked = checked;
	    return Immutable.fromJS(menu);
	  }
	  return null;
	};
	
	const createBookmarkTemplateItems = (bookmarks, parentFolderId) => {
	  const filteredBookmarks = parentFolderId ? bookmarks.filter(bookmark => bookmark.get('parentFolderId') === parentFolderId) : bookmarks.filter(bookmark => !bookmark.get('parentFolderId'));
	
	  const payload = [];
	  filteredBookmarks.forEach(site => {
	    if (site.get('tags').includes(siteTags.BOOKMARK) && site.get('location')) {
	      payload.push({
	        // TODO include label made from favicon. It needs to be of type NativeImage
	        // which can be made using a Buffer / DataURL / local image
	        // the image will likely need to be included in the site data
	        // there was potentially concern about the size of the app state
	        // and as such there may need to be another mechanism or cache
	        //
	        // see: https://github.com/brave/browser-laptop/issues/3050
	        label: site.get('customTitle') || site.get('title') || site.get('location'),
	        click: (item, focusedWindow, e) => {
	          if (eventUtil.isForSecondaryAction(e)) {
	            CommonMenu.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, site.get('location'), { openInForeground: !!e.shiftKey }]);
	          } else {
	            CommonMenu.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL, site.get('location')]);
	          }
	        }
	      });
	    } else if (siteUtil.isFolder(site)) {
	      const folderId = site.get('folderId');
	      const submenuItems = bookmarks.filter(bookmark => bookmark.get('parentFolderId') === folderId);
	      payload.push({
	        label: site.get('customTitle') || site.get('title'),
	        submenu: submenuItems.count() > 0 ? createBookmarkTemplateItems(bookmarks, folderId) : null
	      });
	    }
	  });
	  return payload;
	};
	
	/**
	 * Used to create bookmarks and bookmark folder entries for the "Bookmarks" menu
	 *
	 * @param sites The application state's Immutable sites list
	 */
	module.exports.createBookmarkTemplateItems = sites => {
	  return createBookmarkTemplateItems(siteUtil.getBookmarks(sites));
	};
	
	/**
	 * Create "recently closed" history entries for the "History" menu
	 */
	module.exports.createRecentlyClosedTemplateItems = lastClosedFrames => {
	  const payload = [];
	  if (lastClosedFrames && lastClosedFrames.size > 0) {
	    payload.push(CommonMenu.separatorMenuItem, {
	      label: locale.translation('recentlyClosed'),
	      enabled: false
	    });
	
	    const lastTen = lastClosedFrames.size < 10 ? lastClosedFrames : lastClosedFrames.slice(-10);
	    lastTen.forEach(closedFrame => {
	      payload.push({
	        label: closedFrame.get('title') || closedFrame.get('location'),
	        click: (item, focusedWindow, e) => {
	          if (eventUtil.isForSecondaryAction(e)) {
	            CommonMenu.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, closedFrame.get('location'), { openInForeground: !!e.shiftKey }]);
	          } else {
	            CommonMenu.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL, closedFrame.get('location')]);
	          }
	        }
	      });
	    });
	  }
	  return payload;
	};
	
	const isItemValid = (currentItem, previousItem) => {
	  if (previousItem && previousItem === CommonMenu.separatorMenuItem) {
	    if (currentItem === CommonMenu.separatorMenuItem) {
	      return false;
	    }
	  }
	  return currentItem && (typeof currentItem.label === 'string' || typeof currentItem.type === 'string');
	};
	
	/**
	 * Remove invalid entries from a menu template:
	 * - null or falsey entries
	 * - extra menu separators
	 * - entries which don't have a label or type
	 */
	module.exports.sanitizeTemplateItems = template => {
	  const reduced = template.reduce((previousValue, currentValue, currentIndex, array) => {
	    const result = currentIndex === 1 ? [] : previousValue;
	    if (currentIndex === 1) {
	      if (isItemValid(previousValue)) {
	        result.push(previousValue);
	      }
	    }
	    const previousItem = result.length > 0 ? result[result.length - 1] : undefined;
	    if (isItemValid(currentValue, previousItem)) {
	      result.push(currentValue);
	    }
	    return result;
	  });
	
	  const result = Array.isArray(reduced) ? reduced : [reduced];
	
	  if (result.length > 0 && result[0] === CommonMenu.separatorMenuItem) {
	    result.shift();
	  }
	
	  if (result.length > 0 && result[result.length - 1] === CommonMenu.separatorMenuItem) {
	    result.pop();
	  }
	
	  return result;
	};

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const appActions = __webpack_require__(704);
	const messages = __webpack_require__(211);
	const Immutable = __webpack_require__(188);
	const locale = __webpack_require__(728);
	const settings = __webpack_require__(204);
	const getSetting = __webpack_require__(202).getSetting;
	const communityURL = 'https://community.brave.com/';
	const isDarwin = process.platform === 'darwin';
	const electron = __webpack_require__(703);
	
	let app;
	let BrowserWindow;
	if (process.type === 'browser') {
	  app = electron.app;
	  BrowserWindow = electron.BrowserWindow;
	} else {
	  app = electron.remote.app;
	  BrowserWindow = electron.remote.BrowserWindow;
	}
	
	const ensureAtLeastOneWindow = frameOpts => {
	  if (BrowserWindow.getAllWindows().length === 0) {
	    appActions.newWindow(frameOpts);
	  }
	};
	
	/**
	 * Sends a message to the web contents of the focused window.
	 * @param {Object} focusedWindow the focusedWindow if any
	 * @param {Array} message message and arguments to send
	 * @return {boolean} whether the message was sent
	 */
	module.exports.sendToFocusedWindow = (focusedWindow, message) => {
	  if (process.type === 'browser') {
	    if (focusedWindow) {
	      focusedWindow.webContents.send.apply(focusedWindow.webContents, message);
	      return true;
	    } else {
	      return false;
	    }
	  } else {
	    const ipcRenderer = __webpack_require__(703).ipcRenderer;
	    // The spliced in arg is the empty event arg
	    message.splice(1, 0, {});
	    ipcRenderer.emit.apply(ipcRenderer, message);
	    return true;
	  }
	};
	
	module.exports.quitMenuItem = () => ({
	  label: locale.translation('quitApp'),
	  accelerator: 'CmdOrCtrl+Q',
	  click: function () {
	    if (process.type === 'browser') {
	      app.quit();
	    } else {
	      electron.ipcRenderer.send(messages.QUIT_APPLICATION);
	    }
	  }
	});
	
	module.exports.newTabMenuItem = parentFrameKey => {
	  return {
	    label: locale.translation('newTab'),
	    accelerator: 'CmdOrCtrl+T',
	    click: function (item, focusedWindow) {
	      if (!module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, undefined, { parentFrameKey }])) {
	        // no active windows
	        appActions.newWindow();
	      }
	    }
	  };
	};
	
	module.exports.newPrivateTabMenuItem = () => {
	  return {
	    label: locale.translation('newPrivateTab'),
	    accelerator: 'Shift+CmdOrCtrl+P',
	    click: function (item, focusedWindow) {
	      ensureAtLeastOneWindow(Immutable.fromJS({ isPrivate: true }));
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, undefined, { isPrivate: true }]);
	    }
	  };
	};
	
	module.exports.newPartitionedTabMenuItem = () => {
	  return {
	    label: locale.translation('newSessionTab'),
	    accelerator: 'Shift+CmdOrCtrl+S',
	    click: function (item, focusedWindow) {
	      ensureAtLeastOneWindow(Immutable.fromJS({ isPartitioned: true }));
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, undefined, { isPartitioned: true }]);
	    }
	  };
	};
	
	module.exports.newWindowMenuItem = () => {
	  return {
	    label: locale.translation('newWindow'),
	    accelerator: 'CmdOrCtrl+N',
	    click: () => appActions.newWindow()
	  };
	};
	
	module.exports.reopenLastClosedTabItem = () => {
	  return {
	    label: locale.translation('reopenLastClosedTab'),
	    accelerator: 'Shift+CmdOrCtrl+T',
	    click: function (item, focusedWindow) {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_UNDO_CLOSED_FRAME]);
	    }
	  };
	};
	
	module.exports.separatorMenuItem = {
	  type: 'separator'
	};
	
	module.exports.printMenuItem = () => {
	  return {
	    label: locale.translation('print'),
	    accelerator: 'CmdOrCtrl+P',
	    click: function (item, focusedWindow) {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_PRINT]);
	    }
	  };
	};
	
	module.exports.findOnPageMenuItem = () => {
	  return {
	    label: locale.translation('findOnPage'),
	    accelerator: 'CmdOrCtrl+F',
	    click: function (item, focusedWindow) {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_SHOW_FINDBAR]);
	    }
	  };
	};
	
	module.exports.checkForUpdateMenuItem = () => {
	  return {
	    label: locale.translation('checkForUpdates'),
	    click: function (item, focusedWindow) {
	      if (process.type === 'browser') {
	        ensureAtLeastOneWindow();
	        process.emit(messages.CHECK_FOR_UPDATE);
	      } else {
	        electron.ipcRenderer.send(messages.CHECK_FOR_UPDATE);
	      }
	    }
	  };
	};
	
	module.exports.preferencesMenuItem = () => {
	  return {
	    label: locale.translation(isDarwin ? 'preferences' : 'settings'),
	    accelerator: 'CmdOrCtrl+,',
	    click: (item, focusedWindow) => {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:preferences'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:preferences', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.bookmarksManagerMenuItem = () => {
	  return {
	    label: locale.translation('bookmarksManager'),
	    accelerator: isDarwin ? 'CmdOrCtrl+Alt+B' : 'Ctrl+Shift+O',
	    click: (item, focusedWindow) => {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:bookmarks'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:bookmarks', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.historyMenuItem = () => {
	  return {
	    label: locale.translation('showAllHistory'),
	    accelerator: 'CmdOrCtrl+Y',
	    click: function (item, focusedWindow) {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:history'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:history', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.downloadsMenuItem = () => {
	  return {
	    label: locale.translation('downloadsManager'),
	    accelerator: isDarwin ? 'CmdOrCtrl+Shift+J' : 'Ctrl+J',
	    click: (item, focusedWindow) => {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:downloads'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.HIDE_DOWNLOADS_TOOLBAR]);
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:downloads', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.passwordsMenuItem = () => {
	  return {
	    label: locale.translation('passwordsManager'),
	    click: (item, focusedWindow) => {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:passwords'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:passwords', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.importBrowserDataMenuItem = () => {
	  return {
	    label: locale.translation('importBrowserData'),
	    click: function (item, focusedWindow) {
	      if (process.type === 'browser') {
	        process.emit(messages.IMPORT_BROWSER_DATA_NOW);
	      } else {
	        electron.ipcRenderer.send(messages.IMPORT_BROWSER_DATA_NOW);
	      }
	    }
	  };
	};
	
	module.exports.submitFeedbackMenuItem = () => {
	  return {
	    label: locale.translation('submitFeedback'),
	    click: function (item, focusedWindow) {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, communityURL]);
	    }
	  };
	};
	
	module.exports.bookmarksToolbarMenuItem = () => {
	  return {
	    label: locale.translation('bookmarksToolbar'),
	    type: 'checkbox',
	    checked: getSetting(settings.SHOW_BOOKMARKS_TOOLBAR),
	    click: (item, focusedWindow) => {
	      appActions.changeSetting(settings.SHOW_BOOKMARKS_TOOLBAR, !getSetting(settings.SHOW_BOOKMARKS_TOOLBAR));
	    }
	  };
	};
	
	module.exports.autoHideMenuBarMenuItem = () => {
	  const autoHideMenuBar = getSetting(settings.AUTO_HIDE_MENU);
	  return {
	    label: locale.translation('autoHideMenuBar'),
	    type: 'checkbox',
	    checked: !autoHideMenuBar,
	    click: (item, focusedWindow) => {
	      appActions.changeSetting(settings.AUTO_HIDE_MENU, !autoHideMenuBar);
	    }
	  };
	};
	
	module.exports.aboutBraveMenuItem = () => {
	  return {
	    label: locale.translation('aboutApp'),
	    click: (item, focusedWindow) => {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:brave', { singleFrame: true }]);
	    }
	  };
	};
	
	module.exports.braverySiteMenuItem = () => {
	  return {
	    label: locale.translation('braverySite'),
	    click: (item, focusedWindow) => {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.OPEN_BRAVERY_PANEL]);
	    }
	  };
	};
	
	module.exports.braveryGlobalMenuItem = () => {
	  return {
	    label: locale.translation('braveryGlobal'),
	    click: (item, focusedWindow) => {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:preferences#shields'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:preferences#shields', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.braveryPaymentsMenuItem = () => {
	  const label = getSetting(settings.PAYMENTS_ENABLED) ? locale.translation('braveryPayments') : locale.translation('braveryStartUsingPayments');
	  return {
	    label: label,
	    click: (item, focusedWindow) => {
	      if (BrowserWindow.getAllWindows().length === 0) {
	        appActions.newWindow(Immutable.fromJS({
	          location: 'about:preferences#payments'
	        }));
	      } else {
	        module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_NEW_FRAME, 'about:preferences#payments', { singleFrame: true }]);
	      }
	    }
	  };
	};
	
	module.exports.reloadPageMenuItem = () => {
	  return {
	    label: locale.translation('reloadPage'),
	    accelerator: 'CmdOrCtrl+R',
	    click: function (item, focusedWindow) {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_RELOAD]);
	    }
	  };
	};
	
	module.exports.cleanReloadMenuItem = () => {
	  return {
	    label: locale.translation('cleanReload'),
	    accelerator: 'CmdOrCtrl+Shift+R',
	    click: function (item, focusedWindow) {
	      module.exports.sendToFocusedWindow(focusedWindow, [messages.SHORTCUT_ACTIVE_FRAME_CLEAN_RELOAD]);
	    }
	  };
	};

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const ipcRenderer = __webpack_require__(703).ipcRenderer;
	const locale = __webpack_require__(729);
	const { LANGUAGE, REQUEST_LANGUAGE } = __webpack_require__(211);
	
	// rendererTranslationCache stores a hash containing the entire set of menu translations
	// for the currently selected language
	var rendererTranslationCache = {};
	
	// As for a translation for the current language
	exports.translation = token => {
	  // If we are in the renderer process
	  if (ipcRenderer) {
	    // If the token does not exist in the renderer translations cache
	    if (!rendererTranslationCache[token]) {
	      // Ask for all translations from the main process and cache (this will happen once
	      // per renderer process)
	      rendererTranslationCache = ipcRenderer.sendSync('translations');
	    }
	    // Return the translation
	    return rendererTranslationCache[token] || `[${token.toLowerCase()}]`;
	  } else {
	    // Otherwise retrieve translation directly
	    return locale.translation(token);
	  }
	};
	
	exports.init = () => {
	  ipcRenderer.on(LANGUAGE, (e, detail) => {
	    document.l10n.requestLanguages([detail.langCode]);
	    document.getElementsByName('availableLanguages')[0].content = detail.languageCodes.join(', ');
	  });
	  ipcRenderer.send(REQUEST_LANGUAGE);
	};

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const L20n = __webpack_require__(730);
	const path = __webpack_require__(189);
	const ipcMain = __webpack_require__(703).ipcMain;
	const electron = __webpack_require__(703);
	const app = electron.app;
	const { LANGUAGE, REQUEST_LANGUAGE } = __webpack_require__(211);
	
	// Exhaustive list of identifiers used by top and context menus
	var rendererIdentifiers = function () {
	  return ['downloadsManager', 'confirmClearPasswords', 'passwordCopied', 'flashInstalled', 'goToPrefs', 'goToAdobe', 'allowFlashPlayer', 'allowWidevine', 'about', 'aboutApp', 'quit', 'quitApp', 'addToReadingList', 'viewPageSource', 'copyImageAddress', 'openImageInNewTab', 'saveImage', 'copyImage', 'searchImage', 'copyLinkAddress', 'copyEmailAddress', 'saveLinkAs', 'allowFlashOnce', 'allowFlashAlways', 'openFlashPreferences', 'openInNewWindow', 'openInNewSessionTab', 'openInNewSessionTabs', 'openInNewPrivateTab', 'openInNewPrivateTabs', 'openInNewTab', 'openInNewTabs', 'openAllInTabs', 'disableAdBlock', 'disableTrackingProtection', 'muteTab', 'unmuteTab', 'pinTab', 'unpinTab', 'deleteFolder', 'deleteBookmark', 'deleteBookmarks', 'deleteHistoryEntry', 'deleteHistoryEntries', 'deleteLedgerEntry', 'ledgerBackupText1', 'ledgerBackupText2', 'ledgerBackupText3', 'ledgerBackupText4', 'ledgerBackupText5', 'editFolder', 'editBookmark', 'unmuteTabs', 'muteTabs', 'muteOtherTabs', 'addBookmark', 'addFolder', 'newTab', 'closeTab', 'closeOtherTabs', 'closeTabsToRight', 'closeTabsToLeft', 'bookmarkPage', 'bookmarkLink', 'openFile', 'openLocation', 'openSearch', 'importFrom', 'closeWindow', 'savePageAs', 'spreadTheWord', 'share', 'undo', 'redo', 'cut', 'copy', 'paste', 'pasteAndGo', 'pasteAndSearch', 'pasteWithoutFormatting', 'delete', 'selectAll', 'findNext', 'findPrevious', 'file', 'edit', 'view', 'actualSize', 'zoomIn', 'zoomOut', 'toolbars', 'stop', 'reloadPage', 'reloadTab', 'cleanReload', 'reload', 'clone', 'readingView', 'tabManager', 'textEncoding', 'inspectElement', 'toggleDeveloperTools', 'toggleBrowserConsole', 'toggleFullScreenView', 'home', 'back', 'forward', 'reopenLastClosedWindow', 'showAllHistory', 'clearCache', 'clearHistory', 'clearSiteData', 'clearBrowsingData', 'recentlyClosed', 'recentlyVisited', 'bookmarks', 'addToFavoritesBar', 'window', 'minimize', 'zoom', 'selectNextTab', 'selectPreviousTab', 'moveTabToNewWindow', 'mergeAllWindows', 'downloads', 'history', 'bringAllToFront', 'help', 'sendUsFeedback', 'services', 'hideBrave', 'hideOthers', 'showAll', 'newPrivateTab', 'newSessionTab', 'newWindow', 'reopenLastClosedTab', 'print', 'findOnPage', 'find', 'checkForUpdates', 'preferences', 'settings', 'bookmarksManager', 'importBrowserData', 'submitFeedback', 'bookmarksToolbar', 'bravery', 'braverySite', 'braveryGlobal', 'braveryPayments', 'braveryStartUsingPayments', 'blockPopups', 'learnSpelling', 'ignoreSpelling', 'lookupSelection',
	  // Other identifiers
	  'aboutBlankTitle', 'urlCopied', 'autoHideMenuBar', 'unexpectedErrorWindowReload', 'updateChannel', 'licenseText', 'allow', 'deny', 'permissionCameraMicrophone', 'permissionLocation', 'permissionNotifications', 'permissionWebMidi', 'permissionDisableCursor', 'permissionFullscreen', 'permissionExternal', 'permissionProtocolRegistration', 'permissionMessage', 'tabsSuggestionTitle', 'bookmarksSuggestionTitle', 'historySuggestionTitle', 'aboutPagesSuggestionTitle', 'searchSuggestionTitle', 'topSiteSuggestionTitle', 'addFundsNotification', 'reconciliationNotification', 'reviewSites', 'addFunds', 'turnOffNotifications', 'copyToClipboard', 'smartphoneTitle', 'displayQRCode', 'updateLater', 'updateHello', 'notificationPasswordWithUserName', 'notificationPassword', 'notificationPasswordSettings', 'notificationPaymentDone', 'notificationTryPayments', 'notificationTryPaymentsYes', 'prefsRestart', 'dismiss', 'yes', 'no', 'noThanks', 'neverForThisSite', 'passwordsManager', 'downloadItemPause', 'downloadItemResume', 'downloadItemCancel', 'downloadItemRedownload', 'downloadItemCopyLink', 'downloadItemPath', 'downloadItemDelete', 'downloadItemClear', 'downloadToolbarHide', 'downloadItemClearCompleted',
	  // Caption buttons in titlebar (min/max/close - Windows only)
	  'windowCaptionButtonMinimize', 'windowCaptionButtonMaximize', 'windowCaptionButtonRestore', 'windowCaptionButtonClose', 'closeFirefoxWarning', 'importSuccess', 'licenseTextOk', 'closeFirefoxWarningOk', 'importSuccessOk'];
	};
	
	var ctx = null;
	var translations = {};
	var lang = 'en-US';
	
	// todo: FSI/PDI stripping can probably be replaced once
	// https://github.com/l20n/l20n.js/commit/2fea50bf43c43a8e930a519a37f0f64f3626e885
	// is released
	const FSI = '\u2068';
	const PDI = '\u2069';
	
	// Return a translate token from cache or a placeholder
	// indicating that no translation is available
	exports.translation = function (token, replacements = {}) {
	  if (translations[token]) {
	    let returnVal = translations[token];
	    for (var key in replacements) {
	      returnVal = returnVal.replace(new RegExp(FSI + '{{\\s*' + key + '\\s*}}' + PDI), replacements[key]);
	    }
	    return returnVal;
	  } else {
	    // This will return an identifier in upper case useful for determining if a translation was not requested in the menu
	    // identifiers above.
	    return token.toUpperCase();
	  }
	};
	
	// Default language locale identifier
	const DEFAULT_LANGUAGE = 'en-US';
	
	const availableLanguages = ['eu', 'bn-BD', 'bn-IN', 'zh-CN', 'cs', 'nl-NL', 'en-US', 'fr-FR', 'de-DE', 'hi-IN', 'id-ID', 'it-IT', 'ja-JP', 'ko-KR', 'ms-MY', 'pl-PL', 'pt-BR', 'ru', 'sl', 'es', 'ta', 'te', 'tr-TR', 'uk'];
	
	// Currently configured languages
	const configuredLanguages = {};
	availableLanguages.forEach(function (lang) {
	  configuredLanguages[lang] = true;
	});
	
	// Return the default locale in xx-XX format I.e. pt-BR
	const defaultLocale = function () {
	  // If electron has the locale
	  if (app.getLocale()) {
	    // Retrieve the language and convert _ to -
	    var lang = app.getLocale().replace('_', '-');
	    // If there is no country code designated use the language code
	    if (!lang.match(/-/)) {
	      lang = lang + '-' + lang.toUpperCase();
	    }
	    // If we have the language configured
	    if (configuredLanguages[lang]) {
	      return lang;
	    } else {
	      return DEFAULT_LANGUAGE;
	    }
	  } else {
	    return DEFAULT_LANGUAGE;
	  }
	};
	
	// Initialize translations for a language
	exports.init = function (language) {
	  // If this is in the main process
	  if (ipcMain) {
	    // Respond to requests for translations from the renderer process
	    ipcMain.on('translations', function (event, arg) {
	      // Return the entire set of translations synchronously
	      event.returnValue = translations;
	    });
	
	    // TODO: There shouldn't need to be a REQUEST_LANGUAGE event at all
	    // Respond to requests for the currently configured language code
	    ipcMain.on(REQUEST_LANGUAGE, function (event) {
	      event.sender.send(LANGUAGE, {
	        langCode: lang,
	        languageCodes: availableLanguages
	      });
	    });
	  }
	
	  // Currently selected language identifier I.e. 'en-US'
	  lang = language || defaultLocale();
	
	  // Languages to support
	  const langs = availableLanguages.map(function (lang) {
	    return { code: lang };
	  });
	
	  const propertyFiles = [];
	  const appendLangProperties = function (lang) {
	    // Property files to parse (only ones containing menu specific identifiers)
	    propertyFiles.push(path.join(__dirname, 'extensions', 'brave', 'locales', lang, 'menu.properties'), path.join(__dirname, 'extensions', 'brave', 'locales', lang, 'app.properties'), path.join(__dirname, 'extensions', 'brave', 'locales', lang, 'error.properties'), path.join(__dirname, 'extensions', 'brave', 'locales', lang, 'passwords.properties'), path.join(__dirname, 'extensions', 'brave', 'locales', lang, 'common.properties'));
	  };
	
	  appendLangProperties(lang);
	  if (lang !== DEFAULT_LANGUAGE) {
	    // Pass in the default locale as well
	    appendLangProperties(DEFAULT_LANGUAGE);
	  }
	
	  // If langs change a new context must be created
	  const env = new L20n.Env(L20n.fetchResource);
	  ctx = env.createContext(langs, propertyFiles);
	
	  // Translate the renderer identifiers
	  var identifiers = rendererIdentifiers();
	  return ctx.formatValues.apply(ctx, identifiers).then(function (values) {
	    // Cache the translations for later retrieval
	    values.forEach(function (value, idx) {
	      translations[identifiers[idx]] = value;
	    });
	    return lang;
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, "app"))

/***/ },
/* 730 */
/***/ function(module, exports) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function L10nError(message, id, lang) {
	  this.name = 'L10nError';
	  this.message = message;
	  this.id = id;
	  this.lang = lang;
	}
	L10nError.prototype = Object.create(Error.prototype);
	L10nError.prototype.constructor = L10nError;
	
	var HTTP_STATUS_CODE_OK = 200;
	
	function load(type, url) {
	  return new Promise(function (resolve, reject) {
	    var xhr = new XMLHttpRequest();
	
	    if (xhr.overrideMimeType) {
	      xhr.overrideMimeType(type);
	    }
	
	    xhr.open('GET', url, true);
	
	    if (type === 'application/json') {
	      xhr.responseType = 'json';
	    }
	
	    xhr.addEventListener('load', function (e) {
	      if (e.target.status === HTTP_STATUS_CODE_OK || e.target.status === 0) {
	        resolve(e.target.response);
	      } else {
	        reject(new L10nError('Not found: ' + url));
	      }
	    });
	    xhr.addEventListener('error', reject);
	    xhr.addEventListener('timeout', reject);
	
	    try {
	      xhr.send(null);
	    } catch (e) {
	      if (e.name === 'NS_ERROR_FILE_NOT_FOUND') {
	        reject(new L10nError('Not found: ' + url));
	      } else {
	        throw e;
	      }
	    }
	  });
	}
	
	var io = {
	  extra: function (code, ver, path, type) {
	    return navigator.mozApps.getLocalizationResource(code, ver, path, type);
	  },
	  app: function (code, ver, path, type) {
	    switch (type) {
	      case 'text':
	        return load('text/plain', path);
	      case 'json':
	        return load('application/json', path);
	      default:
	        throw new L10nError('Unknown file type: ' + type);
	    }
	  }
	};
	
	function fetchResource$1(res, _ref) {
	  var code = _ref.code;
	  var src = _ref.src;
	  var ver = _ref.ver;
	
	  var url = res.replace('{locale}', code);
	  var type = res.endsWith('.json') ? 'json' : 'text';
	  return io[src](code, ver, url, type);
	}
	
	var KNOWN_MACROS = ['plural'];
	var MAX_PLACEABLE_LENGTH = 2500;
	
	var FSI = '⁨';
	var PDI = '⁩';
	
	var resolutionChain = new WeakSet();
	
	function format(ctx, lang, args, entity) {
	  if (typeof entity === 'string') {
	    return [{}, entity];
	  }
	
	  if (resolutionChain.has(entity)) {
	    throw new L10nError('Cyclic reference detected');
	  }
	
	  resolutionChain.add(entity);
	
	  var rv = undefined;
	
	  try {
	    rv = resolveValue({}, ctx, lang, args, entity.value, entity.index);
	  } finally {
	    resolutionChain.delete(entity);
	  }
	  return rv;
	}
	
	function resolveIdentifier(ctx, lang, args, id) {
	  if (KNOWN_MACROS.indexOf(id) > -1) {
	    return [{}, ctx._getMacro(lang, id)];
	  }
	
	  if (args && args.hasOwnProperty(id)) {
	    if (typeof args[id] === 'string' || typeof args[id] === 'number' && !isNaN(args[id])) {
	      return [{}, args[id]];
	    } else {
	      throw new L10nError('Arg must be a string or a number: ' + id);
	    }
	  }
	
	  if (id === '__proto__') {
	    throw new L10nError('Illegal id: ' + id);
	  }
	
	  var entity = ctx._getEntity(lang, id);
	
	  if (entity) {
	    return format(ctx, lang, args, entity);
	  }
	
	  throw new L10nError('Unknown reference: ' + id);
	}
	
	function subPlaceable(locals, ctx, lang, args, id) {
	  var newLocals = undefined,
	      value = undefined;
	
	  try {
	    var _resolveIdentifier = resolveIdentifier(ctx, lang, args, id);
	
	    newLocals = _resolveIdentifier[0];
	    value = _resolveIdentifier[1];
	  } catch (err) {
	    return [{ error: err }, FSI + '{{ ' + id + ' }}' + PDI];
	  }
	
	  if (typeof value === 'number') {
	    var formatter = ctx._getNumberFormatter(lang);
	    return [newLocals, formatter.format(value)];
	  }
	
	  if (typeof value === 'string') {
	    if (value.length >= MAX_PLACEABLE_LENGTH) {
	      throw new L10nError('Too many characters in placeable (' + value.length + ', max allowed is ' + MAX_PLACEABLE_LENGTH + ')');
	    }
	    return [newLocals, FSI + value + PDI];
	  }
	
	  return [{}, FSI + '{{ ' + id + ' }}' + PDI];
	}
	
	function interpolate(locals, ctx, lang, args, arr) {
	  return arr.reduce(function (_ref2, cur) {
	    var localsSeq = _ref2[0];
	    var valueSeq = _ref2[1];
	
	    if (typeof cur === 'string') {
	      return [localsSeq, valueSeq + cur];
	    } else {
	      var _subPlaceable = subPlaceable(locals, ctx, lang, args, cur.name);
	
	      var value = _subPlaceable[1];
	
	      return [localsSeq, valueSeq + value];
	    }
	  }, [locals, '']);
	}
	
	function resolveSelector(ctx, lang, args, expr, index) {
	  var selectorName = undefined;
	  if (index[0].type === 'call' && index[0].expr.type === 'prop' && index[0].expr.expr.name === 'cldr') {
	    selectorName = 'plural';
	  } else {
	    selectorName = index[0].name;
	  }
	  var selector = resolveIdentifier(ctx, lang, args, selectorName)[1];
	
	  if (typeof selector !== 'function') {
	    return selector;
	  }
	
	  var argValue = index[0].args ? resolveIdentifier(ctx, lang, args, index[0].args[0].name)[1] : undefined;
	
	  if (selectorName === 'plural') {
	    if (argValue === 0 && 'zero' in expr) {
	      return 'zero';
	    }
	    if (argValue === 1 && 'one' in expr) {
	      return 'one';
	    }
	    if (argValue === 2 && 'two' in expr) {
	      return 'two';
	    }
	  }
	
	  return selector(argValue);
	}
	
	function resolveValue(locals, ctx, lang, args, expr, index) {
	  if (!expr) {
	    return [locals, expr];
	  }
	
	  if (typeof expr === 'string' || typeof expr === 'boolean' || typeof expr === 'number') {
	    return [locals, expr];
	  }
	
	  if (Array.isArray(expr)) {
	    return interpolate(locals, ctx, lang, args, expr);
	  }
	
	  if (index) {
	    var selector = resolveSelector(ctx, lang, args, expr, index);
	    if (selector in expr) {
	      return resolveValue(locals, ctx, lang, args, expr[selector]);
	    }
	  }
	
	  var defaultKey = expr.__default || 'other';
	  if (defaultKey in expr) {
	    return resolveValue(locals, ctx, lang, args, expr[defaultKey]);
	  }
	
	  throw new L10nError('Unresolvable value');
	}
	
	var locales2rules = {
	  'af': 3,
	  'ak': 4,
	  'am': 4,
	  'ar': 1,
	  'asa': 3,
	  'az': 0,
	  'be': 11,
	  'bem': 3,
	  'bez': 3,
	  'bg': 3,
	  'bh': 4,
	  'bm': 0,
	  'bn': 3,
	  'bo': 0,
	  'br': 20,
	  'brx': 3,
	  'bs': 11,
	  'ca': 3,
	  'cgg': 3,
	  'chr': 3,
	  'cs': 12,
	  'cy': 17,
	  'da': 3,
	  'de': 3,
	  'dv': 3,
	  'dz': 0,
	  'ee': 3,
	  'el': 3,
	  'en': 3,
	  'eo': 3,
	  'es': 3,
	  'et': 3,
	  'eu': 3,
	  'fa': 0,
	  'ff': 5,
	  'fi': 3,
	  'fil': 4,
	  'fo': 3,
	  'fr': 5,
	  'fur': 3,
	  'fy': 3,
	  'ga': 8,
	  'gd': 24,
	  'gl': 3,
	  'gsw': 3,
	  'gu': 3,
	  'guw': 4,
	  'gv': 23,
	  'ha': 3,
	  'haw': 3,
	  'he': 2,
	  'hi': 4,
	  'hr': 11,
	  'hu': 0,
	  'id': 0,
	  'ig': 0,
	  'ii': 0,
	  'is': 3,
	  'it': 3,
	  'iu': 7,
	  'ja': 0,
	  'jmc': 3,
	  'jv': 0,
	  'ka': 0,
	  'kab': 5,
	  'kaj': 3,
	  'kcg': 3,
	  'kde': 0,
	  'kea': 0,
	  'kk': 3,
	  'kl': 3,
	  'km': 0,
	  'kn': 0,
	  'ko': 0,
	  'ksb': 3,
	  'ksh': 21,
	  'ku': 3,
	  'kw': 7,
	  'lag': 18,
	  'lb': 3,
	  'lg': 3,
	  'ln': 4,
	  'lo': 0,
	  'lt': 10,
	  'lv': 6,
	  'mas': 3,
	  'mg': 4,
	  'mk': 16,
	  'ml': 3,
	  'mn': 3,
	  'mo': 9,
	  'mr': 3,
	  'ms': 0,
	  'mt': 15,
	  'my': 0,
	  'nah': 3,
	  'naq': 7,
	  'nb': 3,
	  'nd': 3,
	  'ne': 3,
	  'nl': 3,
	  'nn': 3,
	  'no': 3,
	  'nr': 3,
	  'nso': 4,
	  'ny': 3,
	  'nyn': 3,
	  'om': 3,
	  'or': 3,
	  'pa': 3,
	  'pap': 3,
	  'pl': 13,
	  'ps': 3,
	  'pt': 3,
	  'rm': 3,
	  'ro': 9,
	  'rof': 3,
	  'ru': 11,
	  'rwk': 3,
	  'sah': 0,
	  'saq': 3,
	  'se': 7,
	  'seh': 3,
	  'ses': 0,
	  'sg': 0,
	  'sh': 11,
	  'shi': 19,
	  'sk': 12,
	  'sl': 14,
	  'sma': 7,
	  'smi': 7,
	  'smj': 7,
	  'smn': 7,
	  'sms': 7,
	  'sn': 3,
	  'so': 3,
	  'sq': 3,
	  'sr': 11,
	  'ss': 3,
	  'ssy': 3,
	  'st': 3,
	  'sv': 3,
	  'sw': 3,
	  'syr': 3,
	  'ta': 3,
	  'te': 3,
	  'teo': 3,
	  'th': 0,
	  'ti': 4,
	  'tig': 3,
	  'tk': 3,
	  'tl': 4,
	  'tn': 3,
	  'to': 0,
	  'tr': 0,
	  'ts': 3,
	  'tzm': 22,
	  'uk': 11,
	  'ur': 3,
	  've': 3,
	  'vi': 0,
	  'vun': 3,
	  'wa': 4,
	  'wae': 3,
	  'wo': 0,
	  'xh': 3,
	  'xog': 3,
	  'yo': 0,
	  'zh': 0,
	  'zu': 3
	};
	
	function isIn(n, list) {
	  return list.indexOf(n) !== -1;
	}
	function isBetween(n, start, end) {
	  return typeof n === typeof start && start <= n && n <= end;
	}
	
	var pluralRules = {
	  '0': function () {
	    return 'other';
	  },
	  '1': function (n) {
	    if (isBetween(n % 100, 3, 10)) {
	      return 'few';
	    }
	    if (n === 0) {
	      return 'zero';
	    }
	    if (isBetween(n % 100, 11, 99)) {
	      return 'many';
	    }
	    if (n === 2) {
	      return 'two';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '2': function (n) {
	    if (n !== 0 && n % 10 === 0) {
	      return 'many';
	    }
	    if (n === 2) {
	      return 'two';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '3': function (n) {
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '4': function (n) {
	    if (isBetween(n, 0, 1)) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '5': function (n) {
	    if (isBetween(n, 0, 2) && n !== 2) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '6': function (n) {
	    if (n === 0) {
	      return 'zero';
	    }
	    if (n % 10 === 1 && n % 100 !== 11) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '7': function (n) {
	    if (n === 2) {
	      return 'two';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '8': function (n) {
	    if (isBetween(n, 3, 6)) {
	      return 'few';
	    }
	    if (isBetween(n, 7, 10)) {
	      return 'many';
	    }
	    if (n === 2) {
	      return 'two';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '9': function (n) {
	    if (n === 0 || n !== 1 && isBetween(n % 100, 1, 19)) {
	      return 'few';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '10': function (n) {
	    if (isBetween(n % 10, 2, 9) && !isBetween(n % 100, 11, 19)) {
	      return 'few';
	    }
	    if (n % 10 === 1 && !isBetween(n % 100, 11, 19)) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '11': function (n) {
	    if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) {
	      return 'few';
	    }
	    if (n % 10 === 0 || isBetween(n % 10, 5, 9) || isBetween(n % 100, 11, 14)) {
	      return 'many';
	    }
	    if (n % 10 === 1 && n % 100 !== 11) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '12': function (n) {
	    if (isBetween(n, 2, 4)) {
	      return 'few';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '13': function (n) {
	    if (isBetween(n % 10, 2, 4) && !isBetween(n % 100, 12, 14)) {
	      return 'few';
	    }
	    if (n !== 1 && isBetween(n % 10, 0, 1) || isBetween(n % 10, 5, 9) || isBetween(n % 100, 12, 14)) {
	      return 'many';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '14': function (n) {
	    if (isBetween(n % 100, 3, 4)) {
	      return 'few';
	    }
	    if (n % 100 === 2) {
	      return 'two';
	    }
	    if (n % 100 === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '15': function (n) {
	    if (n === 0 || isBetween(n % 100, 2, 10)) {
	      return 'few';
	    }
	    if (isBetween(n % 100, 11, 19)) {
	      return 'many';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '16': function (n) {
	    if (n % 10 === 1 && n !== 11) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '17': function (n) {
	    if (n === 3) {
	      return 'few';
	    }
	    if (n === 0) {
	      return 'zero';
	    }
	    if (n === 6) {
	      return 'many';
	    }
	    if (n === 2) {
	      return 'two';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '18': function (n) {
	    if (n === 0) {
	      return 'zero';
	    }
	    if (isBetween(n, 0, 2) && n !== 0 && n !== 2) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '19': function (n) {
	    if (isBetween(n, 2, 10)) {
	      return 'few';
	    }
	    if (isBetween(n, 0, 1)) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '20': function (n) {
	    if ((isBetween(n % 10, 3, 4) || n % 10 === 9) && !(isBetween(n % 100, 10, 19) || isBetween(n % 100, 70, 79) || isBetween(n % 100, 90, 99))) {
	      return 'few';
	    }
	    if (n % 1000000 === 0 && n !== 0) {
	      return 'many';
	    }
	    if (n % 10 === 2 && !isIn(n % 100, [12, 72, 92])) {
	      return 'two';
	    }
	    if (n % 10 === 1 && !isIn(n % 100, [11, 71, 91])) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '21': function (n) {
	    if (n === 0) {
	      return 'zero';
	    }
	    if (n === 1) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '22': function (n) {
	    if (isBetween(n, 0, 1) || isBetween(n, 11, 99)) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '23': function (n) {
	    if (isBetween(n % 10, 1, 2) || n % 20 === 0) {
	      return 'one';
	    }
	    return 'other';
	  },
	  '24': function (n) {
	    if (isBetween(n, 3, 10) || isBetween(n, 13, 19)) {
	      return 'few';
	    }
	    if (isIn(n, [2, 12])) {
	      return 'two';
	    }
	    if (isIn(n, [1, 11])) {
	      return 'one';
	    }
	    return 'other';
	  }
	};
	
	function getPluralRule(code) {
	  var index = locales2rules[code.replace(/-.*$/, '')];
	  if (!(index in pluralRules)) {
	    return function () {
	      return 'other';
	    };
	  }
	  return pluralRules[index];
	}
	
	var L20nIntl = typeof Intl !== 'undefined' ? Intl : {
	  NumberFormat: function () {
	    return {
	      format: function (v) {
	        return v;
	      }
	    };
	  }
	};
	
	var Context = (function () {
	  function Context(env, langs, resIds) {
	    var _this = this;
	
	    _classCallCheck(this, Context);
	
	    this.langs = langs;
	    this.resIds = resIds;
	    this.env = env;
	    this.emit = function (type, evt) {
	      return env.emit(type, evt, _this);
	    };
	  }
	
	  Context.prototype._formatTuple = function _formatTuple(lang, args, entity, id, key) {
	    try {
	      return format(this, lang, args, entity);
	    } catch (err) {
	      err.id = key ? id + '::' + key : id;
	      err.lang = lang;
	      this.emit('resolveerror', err);
	      return [{ error: err }, err.id];
	    }
	  };
	
	  Context.prototype._formatEntity = function _formatEntity(lang, args, entity, id) {
	    var _formatTuple2 = this._formatTuple(lang, args, entity, id);
	
	    var value = _formatTuple2[1];
	
	    var formatted = {
	      value: value,
	      attrs: null
	    };
	
	    if (entity.attrs) {
	      formatted.attrs = Object.create(null);
	      for (var key in entity.attrs) {
	        var _formatTuple3 = this._formatTuple(lang, args, entity.attrs[key], id, key);
	
	        var attrValue = _formatTuple3[1];
	
	        formatted.attrs[key] = attrValue;
	      }
	    }
	
	    return formatted;
	  };
	
	  Context.prototype._formatValue = function _formatValue(lang, args, entity, id) {
	    return this._formatTuple(lang, args, entity, id)[1];
	  };
	
	  Context.prototype.fetch = function fetch() {
	    var _this2 = this;
	
	    var langs = arguments.length <= 0 || arguments[0] === undefined ? this.langs : arguments[0];
	
	    if (langs.length === 0) {
	      return Promise.resolve(langs);
	    }
	
	    return Promise.all(this.resIds.map(function (resId) {
	      return _this2.env._getResource(langs[0], resId);
	    })).then(function () {
	      return langs;
	    });
	  };
	
	  Context.prototype._resolve = function _resolve(langs, keys, formatter, prevResolved) {
	    var _this3 = this;
	
	    var lang = langs[0];
	
	    if (!lang) {
	      return reportMissing.call(this, keys, formatter, prevResolved);
	    }
	
	    var hasUnresolved = false;
	
	    var resolved = keys.map(function (key, i) {
	      if (prevResolved && prevResolved[i] !== undefined) {
	        return prevResolved[i];
	      }
	
	      var _ref3 = Array.isArray(key) ? key : [key, undefined];
	
	      var id = _ref3[0];
	      var args = _ref3[1];
	
	      var entity = _this3._getEntity(lang, id);
	
	      if (entity) {
	        return formatter.call(_this3, lang, args, entity, id);
	      }
	
	      _this3.emit('notfounderror', new L10nError('"' + id + '" not found in ' + lang.code, id, lang));
	      hasUnresolved = true;
	    });
	
	    if (!hasUnresolved) {
	      return resolved;
	    }
	
	    return this.fetch(langs.slice(1)).then(function (nextLangs) {
	      return _this3._resolve(nextLangs, keys, formatter, resolved);
	    });
	  };
	
	  Context.prototype.formatEntities = function formatEntities() {
	    var _this4 = this;
	
	    for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {
	      keys[_key] = arguments[_key];
	    }
	
	    return this.fetch().then(function (langs) {
	      return _this4._resolve(langs, keys, _this4._formatEntity);
	    });
	  };
	
	  Context.prototype.formatValues = function formatValues() {
	    var _this5 = this;
	
	    for (var _len2 = arguments.length, keys = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      keys[_key2] = arguments[_key2];
	    }
	
	    return this.fetch().then(function (langs) {
	      return _this5._resolve(langs, keys, _this5._formatValue);
	    });
	  };
	
	  Context.prototype._getEntity = function _getEntity(lang, id) {
	    var cache = this.env.resCache;
	
	    for (var i = 0, resId = undefined; resId = this.resIds[i]; i++) {
	      var resource = cache.get(resId + lang.code + lang.src);
	      if (resource instanceof L10nError) {
	        continue;
	      }
	      if (id in resource) {
	        return resource[id];
	      }
	    }
	    return undefined;
	  };
	
	  Context.prototype._getNumberFormatter = function _getNumberFormatter(lang) {
	    if (!this.env.numberFormatters) {
	      this.env.numberFormatters = new Map();
	    }
	    if (!this.env.numberFormatters.has(lang)) {
	      var formatter = L20nIntl.NumberFormat(lang);
	      this.env.numberFormatters.set(lang, formatter);
	      return formatter;
	    }
	    return this.env.numberFormatters.get(lang);
	  };
	
	  Context.prototype._getMacro = function _getMacro(lang, id) {
	    switch (id) {
	      case 'plural':
	        return getPluralRule(lang.code);
	      default:
	        return undefined;
	    }
	  };
	
	  return Context;
	})();
	
	function reportMissing(keys, formatter, resolved) {
	  var _this6 = this;
	
	  var missingIds = new Set();
	
	  keys.forEach(function (key, i) {
	    if (resolved && resolved[i] !== undefined) {
	      return;
	    }
	    var id = Array.isArray(key) ? key[0] : key;
	    missingIds.add(id);
	    resolved[i] = formatter === _this6._formatValue ? id : { value: id, attrs: null };
	  });
	
	  this.emit('notfounderror', new L10nError('"' + Array.from(missingIds).join(', ') + '"' + ' not found in any language', missingIds));
	
	  return resolved;
	}
	
	var MAX_PLACEABLES = 100;
	
	var PropertiesParser = {
	  patterns: null,
	  entryIds: null,
	  emit: null,
	
	  init: function () {
	    this.patterns = {
	      comment: /^\s*#|^\s*$/,
	      entity: /^([^=\s]+)\s*=\s*(.*)$/,
	      multiline: /[^\\]\\$/,
	      index: /\{\[\s*(\w+)(?:\(([^\)]*)\))?\s*\]\}/i,
	      unicode: /\\u([0-9a-fA-F]{1,4})/g,
	      entries: /[^\r\n]+/g,
	      controlChars: /\\([\\\n\r\t\b\f\{\}\"\'])/g,
	      placeables: /\{\{\s*([^\s]*?)\s*\}\}/
	    };
	  },
	
	  parse: function (emit, source) {
	    if (!this.patterns) {
	      this.init();
	    }
	    this.emit = emit;
	
	    var entries = {};
	
	    var lines = source.match(this.patterns.entries);
	    if (!lines) {
	      return entries;
	    }
	    for (var i = 0; i < lines.length; i++) {
	      var line = lines[i];
	
	      if (this.patterns.comment.test(line)) {
	        continue;
	      }
	
	      while (this.patterns.multiline.test(line) && i < lines.length) {
	        line = line.slice(0, -1) + lines[++i].trim();
	      }
	
	      var entityMatch = line.match(this.patterns.entity);
	      if (entityMatch) {
	        try {
	          this.parseEntity(entityMatch[1], entityMatch[2], entries);
	        } catch (e) {
	          if (!this.emit) {
	            throw e;
	          }
	        }
	      }
	    }
	    return entries;
	  },
	
	  parseEntity: function (id, value, entries) {
	    var name = undefined,
	        key = undefined;
	
	    var pos = id.indexOf('[');
	    if (pos !== -1) {
	      name = id.substr(0, pos);
	      key = id.substring(pos + 1, id.length - 1);
	    } else {
	      name = id;
	      key = null;
	    }
	
	    var nameElements = name.split('.');
	
	    if (nameElements.length > 2) {
	      throw this.error('Error in ID: "' + name + '".' + ' Nested attributes are not supported.');
	    }
	
	    var attr = undefined;
	    if (nameElements.length > 1) {
	      name = nameElements[0];
	      attr = nameElements[1];
	
	      if (attr[0] === '$') {
	        throw this.error('Attribute can\'t start with "$"');
	      }
	    } else {
	      attr = null;
	    }
	
	    this.setEntityValue(name, attr, key, this.unescapeString(value), entries);
	  },
	
	  setEntityValue: function (id, attr, key, rawValue, entries) {
	    var value = rawValue.indexOf('{{') > -1 ? this.parseString(rawValue) : rawValue;
	
	    var isSimpleValue = typeof value === 'string';
	    var root = entries;
	
	    var isSimpleNode = typeof entries[id] === 'string';
	
	    if (!entries[id] && (attr || key || !isSimpleValue)) {
	      entries[id] = Object.create(null);
	      isSimpleNode = false;
	    }
	
	    if (attr) {
	      if (isSimpleNode) {
	        var val = entries[id];
	        entries[id] = Object.create(null);
	        entries[id].value = val;
	      }
	      if (!entries[id].attrs) {
	        entries[id].attrs = Object.create(null);
	      }
	      if (!entries[id].attrs && !isSimpleValue) {
	        entries[id].attrs[attr] = Object.create(null);
	      }
	      root = entries[id].attrs;
	      id = attr;
	    }
	
	    if (key) {
	      isSimpleNode = false;
	      if (typeof root[id] === 'string') {
	        var val = root[id];
	        root[id] = Object.create(null);
	        root[id].index = this.parseIndex(val);
	        root[id].value = Object.create(null);
	      }
	      root = root[id].value;
	      id = key;
	      isSimpleValue = true;
	    }
	
	    if (isSimpleValue) {
	      if (id in root) {
	        throw this.error('Duplicated id: ' + id);
	      }
	      root[id] = value;
	    } else {
	      if (!root[id]) {
	        root[id] = Object.create(null);
	      }
	      root[id].value = value;
	    }
	  },
	
	  parseString: function (str) {
	    var chunks = str.split(this.patterns.placeables);
	    var complexStr = [];
	
	    var len = chunks.length;
	    var placeablesCount = (len - 1) / 2;
	
	    if (placeablesCount >= MAX_PLACEABLES) {
	      throw this.error('Too many placeables (' + placeablesCount + ', max allowed is ' + MAX_PLACEABLES + ')');
	    }
	
	    for (var i = 0; i < chunks.length; i++) {
	      if (chunks[i].length === 0) {
	        continue;
	      }
	      if (i % 2 === 1) {
	        complexStr.push({ type: 'idOrVar', name: chunks[i] });
	      } else {
	        complexStr.push(chunks[i]);
	      }
	    }
	    return complexStr;
	  },
	
	  unescapeString: function (str) {
	    if (str.lastIndexOf('\\') !== -1) {
	      str = str.replace(this.patterns.controlChars, '$1');
	    }
	    return str.replace(this.patterns.unicode, function (match, token) {
	      return String.fromCodePoint(parseInt(token, 16));
	    });
	  },
	
	  parseIndex: function (str) {
	    var match = str.match(this.patterns.index);
	    if (!match) {
	      throw new L10nError('Malformed index');
	    }
	    if (match[2]) {
	      return [{
	        type: 'call',
	        expr: {
	          type: 'prop',
	          expr: {
	            type: 'glob',
	            name: 'cldr'
	          },
	          prop: 'plural',
	          cmpt: false
	        }, args: [{
	          type: 'idOrVar',
	          name: match[2]
	        }]
	      }];
	    } else {
	      return [{ type: 'idOrVar', name: match[1] }];
	    }
	  },
	
	  error: function (msg) {
	    var type = arguments.length <= 1 || arguments[1] === undefined ? 'parsererror' : arguments[1];
	
	    var err = new L10nError(msg);
	    if (this.emit) {
	      this.emit(type, err);
	    }
	    return err;
	  }
	};
	
	var MAX_PLACEABLES$1 = 100;
	
	var L20nParser = {
	  parse: function (emit, string) {
	    this._source = string;
	    this._index = 0;
	    this._length = string.length;
	    this.entries = Object.create(null);
	    this.emit = emit;
	
	    return this.getResource();
	  },
	
	  getResource: function () {
	    this.getWS();
	    while (this._index < this._length) {
	      try {
	        this.getEntry();
	      } catch (e) {
	        if (e instanceof L10nError) {
	          this.getJunkEntry();
	          if (!this.emit) {
	            throw e;
	          }
	        } else {
	          throw e;
	        }
	      }
	
	      if (this._index < this._length) {
	        this.getWS();
	      }
	    }
	
	    return this.entries;
	  },
	
	  getEntry: function () {
	    if (this._source[this._index] === '<') {
	      ++this._index;
	      var id = this.getIdentifier();
	      if (this._source[this._index] === '[') {
	        ++this._index;
	        return this.getEntity(id, this.getItemList(this.getExpression, ']'));
	      }
	      return this.getEntity(id);
	    }
	
	    if (this._source.startsWith('/*', this._index)) {
	      return this.getComment();
	    }
	
	    throw this.error('Invalid entry');
	  },
	
	  getEntity: function (id, index) {
	    if (!this.getRequiredWS()) {
	      throw this.error('Expected white space');
	    }
	
	    var ch = this._source[this._index];
	    var hasIndex = index !== undefined;
	    var value = this.getValue(ch, hasIndex, hasIndex);
	    var attrs = undefined;
	
	    if (value === undefined) {
	      if (ch === '>') {
	        throw this.error('Expected ">"');
	      }
	      attrs = this.getAttributes();
	    } else {
	      var ws1 = this.getRequiredWS();
	      if (this._source[this._index] !== '>') {
	        if (!ws1) {
	          throw this.error('Expected ">"');
	        }
	        attrs = this.getAttributes();
	      }
	    }
	
	    ++this._index;
	
	    if (id in this.entries) {
	      throw this.error('Duplicate entry ID "' + id, 'duplicateerror');
	    }
	    if (!attrs && !index && typeof value === 'string') {
	      this.entries[id] = value;
	    } else {
	      this.entries[id] = {
	        value: value,
	        attrs: attrs,
	        index: index
	      };
	    }
	  },
	
	  getValue: function () {
	    var ch = arguments.length <= 0 || arguments[0] === undefined ? this._source[this._index] : arguments[0];
	    var index = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var required = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	    switch (ch) {
	      case '\'':
	      case '"':
	        return this.getString(ch, 1);
	      case '{':
	        return this.getHash(index);
	    }
	
	    if (required) {
	      throw this.error('Unknown value type');
	    }
	
	    return undefined;
	  },
	
	  getWS: function () {
	    var cc = this._source.charCodeAt(this._index);
	
	    while (cc === 32 || cc === 10 || cc === 9 || cc === 13) {
	      cc = this._source.charCodeAt(++this._index);
	    }
	  },
	
	  getRequiredWS: function () {
	    var pos = this._index;
	    var cc = this._source.charCodeAt(pos);
	
	    while (cc === 32 || cc === 10 || cc === 9 || cc === 13) {
	      cc = this._source.charCodeAt(++this._index);
	    }
	    return this._index !== pos;
	  },
	
	  getIdentifier: function () {
	    var start = this._index;
	    var cc = this._source.charCodeAt(this._index);
	
	    if (cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc === 95) {
	      cc = this._source.charCodeAt(++this._index);
	    } else {
	      throw this.error('Identifier has to start with [a-zA-Z_]');
	    }
	
	    while (cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95) {
	      cc = this._source.charCodeAt(++this._index);
	    }
	
	    return this._source.slice(start, this._index);
	  },
	
	  getUnicodeChar: function () {
	    for (var i = 0; i < 4; i++) {
	      var cc = this._source.charCodeAt(++this._index);
	      if (cc > 96 && cc < 103 || cc > 64 && cc < 71 || cc > 47 && cc < 58) {
	        continue;
	      }
	      throw this.error('Illegal unicode escape sequence');
	    }
	    this._index++;
	    return String.fromCharCode(parseInt(this._source.slice(this._index - 4, this._index), 16));
	  },
	
	  stringRe: /"|'|{{|\\/g,
	  getString: function (opchar, opcharLen) {
	    var body = [];
	    var placeables = 0;
	
	    this._index += opcharLen;
	    var start = this._index;
	
	    var bufStart = start;
	    var buf = '';
	
	    while (true) {
	      this.stringRe.lastIndex = this._index;
	      var match = this.stringRe.exec(this._source);
	
	      if (!match) {
	        throw this.error('Unclosed string literal');
	      }
	
	      if (match[0] === '"' || match[0] === '\'') {
	        if (match[0] !== opchar) {
	          this._index += opcharLen;
	          continue;
	        }
	        this._index = match.index + opcharLen;
	        break;
	      }
	
	      if (match[0] === '{{') {
	        if (placeables > MAX_PLACEABLES$1 - 1) {
	          throw this.error('Too many placeables, maximum allowed is ' + MAX_PLACEABLES$1);
	        }
	        placeables++;
	        if (match.index > bufStart || buf.length > 0) {
	          body.push(buf + this._source.slice(bufStart, match.index));
	          buf = '';
	        }
	        this._index = match.index + 2;
	        this.getWS();
	        body.push(this.getExpression());
	        this.getWS();
	        this._index += 2;
	        bufStart = this._index;
	        continue;
	      }
	
	      if (match[0] === '\\') {
	        this._index = match.index + 1;
	        var ch2 = this._source[this._index];
	        if (ch2 === 'u') {
	          buf += this._source.slice(bufStart, match.index) + this.getUnicodeChar();
	        } else if (ch2 === opchar || ch2 === '\\') {
	          buf += this._source.slice(bufStart, match.index) + ch2;
	          this._index++;
	        } else if (this._source.startsWith('{{', this._index)) {
	          buf += this._source.slice(bufStart, match.index) + '{{';
	          this._index += 2;
	        } else {
	          throw this.error('Illegal escape sequence');
	        }
	        bufStart = this._index;
	      }
	    }
	
	    if (body.length === 0) {
	      return buf + this._source.slice(bufStart, this._index - opcharLen);
	    }
	
	    if (this._index - opcharLen > bufStart || buf.length > 0) {
	      body.push(buf + this._source.slice(bufStart, this._index - opcharLen));
	    }
	
	    return body;
	  },
	
	  getAttributes: function () {
	    var attrs = Object.create(null);
	
	    while (true) {
	      this.getAttribute(attrs);
	      var ws1 = this.getRequiredWS();
	      var ch = this._source.charAt(this._index);
	      if (ch === '>') {
	        break;
	      } else if (!ws1) {
	        throw this.error('Expected ">"');
	      }
	    }
	    return attrs;
	  },
	
	  getAttribute: function (attrs) {
	    var key = this.getIdentifier();
	    var index = undefined;
	
	    if (this._source[this._index] === '[') {
	      ++this._index;
	      this.getWS();
	      index = this.getItemList(this.getExpression, ']');
	    }
	    this.getWS();
	    if (this._source[this._index] !== ':') {
	      throw this.error('Expected ":"');
	    }
	    ++this._index;
	    this.getWS();
	    var hasIndex = index !== undefined;
	    var value = this.getValue(undefined, hasIndex);
	
	    if (key in attrs) {
	      throw this.error('Duplicate attribute "' + key, 'duplicateerror');
	    }
	
	    if (!index && typeof value === 'string') {
	      attrs[key] = value;
	    } else {
	      attrs[key] = {
	        value: value,
	        index: index
	      };
	    }
	  },
	
	  getHash: function (index) {
	    var items = Object.create(null);
	
	    ++this._index;
	    this.getWS();
	
	    var defKey = undefined;
	
	    while (true) {
	      var _getHashItem = this.getHashItem();
	
	      var key = _getHashItem[0];
	      var value = _getHashItem[1];
	      var def = _getHashItem[2];
	
	      items[key] = value;
	
	      if (def) {
	        if (defKey) {
	          throw this.error('Default item redefinition forbidden');
	        }
	        defKey = key;
	      }
	      this.getWS();
	
	      var comma = this._source[this._index] === ',';
	      if (comma) {
	        ++this._index;
	        this.getWS();
	      }
	      if (this._source[this._index] === '}') {
	        ++this._index;
	        break;
	      }
	      if (!comma) {
	        throw this.error('Expected "}"');
	      }
	    }
	
	    if (defKey) {
	      items.__default = defKey;
	    } else if (!index) {
	      throw this.error('Unresolvable Hash Value');
	    }
	
	    return items;
	  },
	
	  getHashItem: function () {
	    var defItem = false;
	    if (this._source[this._index] === '*') {
	      ++this._index;
	      defItem = true;
	    }
	
	    var key = this.getIdentifier();
	    this.getWS();
	    if (this._source[this._index] !== ':') {
	      throw this.error('Expected ":"');
	    }
	    ++this._index;
	    this.getWS();
	
	    return [key, this.getValue(), defItem];
	  },
	
	  getComment: function () {
	    this._index += 2;
	    var start = this._index;
	    var end = this._source.indexOf('*/', start);
	
	    if (end === -1) {
	      throw this.error('Comment without a closing tag');
	    }
	
	    this._index = end + 2;
	  },
	
	  getExpression: function () {
	    var exp = this.getPrimaryExpression();
	
	    while (true) {
	      var ch = this._source[this._index];
	      if (ch === '.' || ch === '[') {
	        ++this._index;
	        exp = this.getPropertyExpression(exp, ch === '[');
	      } else if (ch === '(') {
	        ++this._index;
	        exp = this.getCallExpression(exp);
	      } else {
	        break;
	      }
	    }
	
	    return exp;
	  },
	
	  getPropertyExpression: function (idref, computed) {
	    var exp = undefined;
	
	    if (computed) {
	      this.getWS();
	      exp = this.getExpression();
	      this.getWS();
	      if (this._source[this._index] !== ']') {
	        throw this.error('Expected "]"');
	      }
	      ++this._index;
	    } else {
	      exp = this.getIdentifier();
	    }
	
	    return {
	      type: 'prop',
	      expr: idref,
	      prop: exp,
	      cmpt: computed
	    };
	  },
	
	  getCallExpression: function (callee) {
	    this.getWS();
	
	    return {
	      type: 'call',
	      expr: callee,
	      args: this.getItemList(this.getExpression, ')')
	    };
	  },
	
	  getPrimaryExpression: function () {
	    var ch = this._source[this._index];
	
	    switch (ch) {
	      case '$':
	        ++this._index;
	        return {
	          type: 'var',
	          name: this.getIdentifier()
	        };
	      case '@':
	        ++this._index;
	        return {
	          type: 'glob',
	          name: this.getIdentifier()
	        };
	      default:
	        return {
	          type: 'id',
	          name: this.getIdentifier()
	        };
	    }
	  },
	
	  getItemList: function (callback, closeChar) {
	    var items = [];
	    var closed = false;
	
	    this.getWS();
	
	    if (this._source[this._index] === closeChar) {
	      ++this._index;
	      closed = true;
	    }
	
	    while (!closed) {
	      items.push(callback.call(this));
	      this.getWS();
	      var ch = this._source.charAt(this._index);
	      switch (ch) {
	        case ',':
	          ++this._index;
	          this.getWS();
	          break;
	        case closeChar:
	          ++this._index;
	          closed = true;
	          break;
	        default:
	          throw this.error('Expected "," or "' + closeChar + '"');
	      }
	    }
	
	    return items;
	  },
	
	  getJunkEntry: function () {
	    var pos = this._index;
	    var nextEntity = this._source.indexOf('<', pos);
	    var nextComment = this._source.indexOf('/*', pos);
	
	    if (nextEntity === -1) {
	      nextEntity = this._length;
	    }
	    if (nextComment === -1) {
	      nextComment = this._length;
	    }
	
	    var nextEntry = Math.min(nextEntity, nextComment);
	
	    this._index = nextEntry;
	  },
	
	  error: function (message) {
	    var type = arguments.length <= 1 || arguments[1] === undefined ? 'parsererror' : arguments[1];
	
	    var pos = this._index;
	
	    var start = this._source.lastIndexOf('<', pos - 1);
	    var lastClose = this._source.lastIndexOf('>', pos - 1);
	    start = lastClose > start ? lastClose + 1 : start;
	    var context = this._source.slice(start, pos + 10);
	
	    var msg = message + ' at pos ' + pos + ': `' + context + '`';
	    var err = new L10nError(msg);
	    if (this.emit) {
	      this.emit(type, err);
	    }
	    return err;
	  }
	};
	
	function walkEntry(entry, fn) {
	  if (typeof entry === 'string') {
	    return fn(entry);
	  }
	
	  var newEntry = Object.create(null);
	
	  if (entry.value) {
	    newEntry.value = walkValue(entry.value, fn);
	  }
	
	  if (entry.index) {
	    newEntry.index = entry.index;
	  }
	
	  if (entry.attrs) {
	    newEntry.attrs = Object.create(null);
	    for (var key in entry.attrs) {
	      newEntry.attrs[key] = walkEntry(entry.attrs[key], fn);
	    }
	  }
	
	  return newEntry;
	}
	
	function walkValue(value, fn) {
	  if (typeof value === 'string') {
	    return fn(value);
	  }
	
	  if (value.type) {
	    return value;
	  }
	
	  var newValue = Array.isArray(value) ? [] : Object.create(null);
	  var keys = Object.keys(value);
	
	  for (var i = 0, key = undefined; key = keys[i]; i++) {
	    newValue[key] = walkValue(value[key], fn);
	  }
	
	  return newValue;
	}
	
	function createGetter(id, name) {
	  var _pseudo = null;
	
	  return function getPseudo() {
	    if (_pseudo) {
	      return _pseudo;
	    }
	
	    var reAlphas = /[a-zA-Z]/g;
	    var reVowels = /[aeiouAEIOU]/g;
	    var reWords = /[^\W0-9_]+/g;
	
	    var reExcluded = /(%[EO]?\w|\{\s*.+?\s*\}|&[#\w]+;|<\s*.+?\s*>)/;
	
	    var charMaps = {
	      'fr-x-psaccent': 'ȦƁƇḒḖƑƓĦĪĴĶĿḾȠǾƤɊŘŞŦŬṼẆẊẎẐ[\\]^_`ȧƀƈḓḗƒɠħīĵķŀḿƞǿƥɋřşŧŭṽẇẋẏẑ',
	      'ar-x-psbidi': '∀ԐↃpƎɟפHIſӼ˥WNOԀÒᴚS⊥∩ɅＭXʎZ[\\]ᵥ_,ɐqɔpǝɟƃɥıɾʞʅɯuodbɹsʇnʌʍxʎz'
	    };
	
	    var mods = {
	      'fr-x-psaccent': function (val) {
	        return val.replace(reVowels, function (match) {
	          return match + match.toLowerCase();
	        });
	      },
	
	      'ar-x-psbidi': function (val) {
	        return val.replace(reWords, function (match) {
	          return '‮' + match + '‬';
	        });
	      }
	    };
	
	    var ASCII_LETTER_A = 65;
	    var replaceChars = function (map, val) {
	      return val.replace(reAlphas, function (match) {
	        return map.charAt(match.charCodeAt(0) - ASCII_LETTER_A);
	      });
	    };
	
	    var transform = function (val) {
	      return replaceChars(charMaps[id], mods[id](val));
	    };
	
	    var apply = function (fn, val) {
	      if (!val) {
	        return val;
	      }
	
	      var parts = val.split(reExcluded);
	      var modified = parts.map(function (part) {
	        if (reExcluded.test(part)) {
	          return part;
	        }
	        return fn(part);
	      });
	      return modified.join('');
	    };
	
	    return _pseudo = {
	      name: transform(name),
	      process: function (str) {
	        return apply(transform, str);
	      }
	    };
	  };
	}
	
	var pseudo = Object.defineProperties(Object.create(null), {
	  'fr-x-psaccent': {
	    enumerable: true,
	    get: createGetter('fr-x-psaccent', 'Runtime Accented')
	  },
	  'ar-x-psbidi': {
	    enumerable: true,
	    get: createGetter('ar-x-psbidi', 'Runtime Bidi')
	  }
	});
	
	function emit(listeners) {
	  var _this7 = this;
	
	  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    args[_key3 - 1] = arguments[_key3];
	  }
	
	  var type = args.shift();
	
	  if (listeners['*']) {
	    listeners['*'].slice().forEach(function (listener) {
	      return listener.apply(_this7, args);
	    });
	  }
	
	  if (listeners[type]) {
	    listeners[type].slice().forEach(function (listener) {
	      return listener.apply(_this7, args);
	    });
	  }
	}
	
	function addEventListener(listeners, type, listener) {
	  if (!(type in listeners)) {
	    listeners[type] = [];
	  }
	  listeners[type].push(listener);
	}
	
	function removeEventListener(listeners, type, listener) {
	  var typeListeners = listeners[type];
	  var pos = typeListeners.indexOf(listener);
	  if (pos === -1) {
	    return;
	  }
	
	  typeListeners.splice(pos, 1);
	}
	
	var Env$1 = (function () {
	  function Env$1(fetchResource) {
	    _classCallCheck(this, Env$1);
	
	    this.fetchResource = fetchResource;
	
	    this.resCache = new Map();
	    this.resRefs = new Map();
	    this.numberFormatters = null;
	    this.parsers = {
	      properties: PropertiesParser,
	      l20n: L20nParser
	    };
	
	    var listeners = {};
	    this.emit = emit.bind(this, listeners);
	    this.addEventListener = addEventListener.bind(this, listeners);
	    this.removeEventListener = removeEventListener.bind(this, listeners);
	  }
	
	  Env$1.prototype.createContext = function createContext(langs, resIds) {
	    var _this8 = this;
	
	    var ctx = new Context(this, langs, resIds);
	    resIds.forEach(function (resId) {
	      var usedBy = _this8.resRefs.get(resId) || 0;
	      _this8.resRefs.set(resId, usedBy + 1);
	    });
	
	    return ctx;
	  };
	
	  Env$1.prototype.destroyContext = function destroyContext(ctx) {
	    var _this9 = this;
	
	    ctx.resIds.forEach(function (resId) {
	      var usedBy = _this9.resRefs.get(resId) || 0;
	
	      if (usedBy > 1) {
	        return _this9.resRefs.set(resId, usedBy - 1);
	      }
	
	      _this9.resRefs.delete(resId);
	      _this9.resCache.forEach(function (val, key) {
	        return key.startsWith(resId) ? _this9.resCache.delete(key) : null;
	      });
	    });
	  };
	
	  Env$1.prototype._parse = function _parse(syntax, lang, data) {
	    var _this10 = this;
	
	    var parser = this.parsers[syntax];
	    if (!parser) {
	      return data;
	    }
	
	    var emitAndAmend = function (type, err) {
	      return _this10.emit(type, amendError(lang, err));
	    };
	    return parser.parse(emitAndAmend, data);
	  };
	
	  Env$1.prototype._create = function _create(lang, entries) {
	    if (lang.src !== 'pseudo') {
	      return entries;
	    }
	
	    var pseudoentries = Object.create(null);
	    for (var key in entries) {
	      pseudoentries[key] = walkEntry(entries[key], pseudo[lang.code].process);
	    }
	    return pseudoentries;
	  };
	
	  Env$1.prototype._getResource = function _getResource(lang, res) {
	    var _this11 = this;
	
	    var cache = this.resCache;
	    var id = res + lang.code + lang.src;
	
	    if (cache.has(id)) {
	      return cache.get(id);
	    }
	
	    var syntax = res.substr(res.lastIndexOf('.') + 1);
	
	    var saveEntries = function (data) {
	      var entries = _this11._parse(syntax, lang, data);
	      cache.set(id, _this11._create(lang, entries));
	    };
	
	    var recover = function (err) {
	      err.lang = lang;
	      _this11.emit('fetcherror', err);
	      cache.set(id, err);
	    };
	
	    var langToFetch = lang.src === 'pseudo' ? { code: 'en-US', src: 'app', ver: lang.ver } : lang;
	
	    var resource = this.fetchResource(res, langToFetch).then(saveEntries, recover);
	
	    cache.set(id, resource);
	
	    return resource;
	  };
	
	  return Env$1;
	})();
	
	function amendError(lang, err) {
	  err.lang = lang;
	  return err;
	}
	
	exports.fetchResource = fetchResource$1;
	exports.Env = Env$1;

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const ReactDOM = __webpack_require__(12);
	const dndData = __webpack_require__(258);
	const dragTypes = __webpack_require__(257);
	const siteTags = __webpack_require__(256);
	const siteUtil = __webpack_require__(259);
	
	let inProcessDragData;
	let inProcessDragType;
	
	module.exports.getInProcessDragData = () => {
	  return inProcessDragData;
	};
	
	module.exports.getInProcessDragType = () => {
	  return inProcessDragType;
	};
	
	module.exports.onDragStart = (dragType, data, e) => {
	  e.dataTransfer.effectAllowed = 'all';
	  dndData.setupDataTransferBraveData(e.dataTransfer, dragType, data);
	  if (dragType === dragTypes.BOOKMARK) {
	    dndData.setupDataTransferURL(e.dataTransfer, data.get('location'), data.get('customTitle') || data.get('title'));
	  }
	  inProcessDragData = data;
	  inProcessDragType = dragType;
	};
	
	module.exports.onDragEnd = (dragType, key) => {
	  windowActions.setIsBeingDraggedOverDetail(dragType);
	  windowActions.setContextMenuDetail();
	  inProcessDragData = undefined;
	  inProcessDragType = undefined;
	};
	
	module.exports.onDragOver = (dragType, sourceBoundingRect, draggingOverKey, draggingOverDetail, e) => {
	  if (inProcessDragType !== dragType) {
	    return;
	  }
	
	  e.preventDefault();
	  e.dataTransfer.dropEffect = 'move';
	  // Otherwise, only accept it if we have some frameProps
	  if (!dndData.hasDragData(e.dataTransfer, dragType)) {
	    windowActions.setIsBeingDraggedOverDetail(dragType, draggingOverKey, {
	      draggingOverLeftHalf: false,
	      draggingOverRightHalf: false
	    });
	    return;
	  }
	
	  if (!sourceBoundingRect) {
	    return;
	  }
	
	  if (e.clientX > sourceBoundingRect.left && e.clientX < sourceBoundingRect.left + sourceBoundingRect.width / 5 && (!draggingOverDetail || !draggingOverDetail.get('draggingOverLeftHalf'))) {
	    windowActions.setIsBeingDraggedOverDetail(dragType, draggingOverKey, {
	      draggingOverLeftHalf: true,
	      draggingOverRightHalf: false
	    });
	    windowActions.setContextMenuDetail();
	  } else if (e.clientX < sourceBoundingRect.right && e.clientX >= sourceBoundingRect.left + sourceBoundingRect.width / 5 && (!draggingOverDetail || !draggingOverDetail.get('draggingOverRightHalf'))) {
	    windowActions.setIsBeingDraggedOverDetail(dragType, draggingOverKey, {
	      draggingOverLeftHalf: false,
	      draggingOverRightHalf: true
	    });
	    windowActions.setContextMenuDetail();
	  }
	};
	
	module.exports.closestFromXOffset = (refs, x) => {
	  let smallestValue = Number.MAX_VALUE;
	  let selectedRef;
	  for (let ref of refs) {
	    let refNode = ReactDOM.findDOMNode(ref);
	    let boundingRect = refNode.getBoundingClientRect();
	    if (x > boundingRect.left && x < boundingRect.right) {
	      return {
	        selectedRef: ref,
	        isDroppedOn: true
	      };
	    }
	    const rect = refNode.getBoundingClientRect();
	    let currentDistance = Math.abs(x - rect.left + (rect.right - rect.left) / 2);
	    if (currentDistance < smallestValue) {
	      smallestValue = currentDistance;
	      selectedRef = ref;
	    }
	  }
	  return {
	    selectedRef,
	    isDroppedOn: false
	  };
	};
	
	module.exports.isLeftSide = (domNode, clientX) => {
	  const boundingRect = domNode.getBoundingClientRect();
	  return clientX < boundingRect.left + (boundingRect.right - boundingRect.left) / 2;
	};
	
	module.exports.isMiddle = (domNode, clientX) => {
	  const boundingRect = domNode.getBoundingClientRect();
	  const isLeft = clientX < boundingRect.left + (boundingRect.right - boundingRect.left) / 3;
	  const isRight = clientX > boundingRect.right - (boundingRect.right - boundingRect.left) / 3;
	  return !isLeft && !isRight;
	};
	
	module.exports.prepareBookmarkDataFromCompatible = dataTransfer => {
	  let bookmark = dndData.getDragData(dataTransfer, dragTypes.BOOKMARK);
	  if (!bookmark) {
	    const frameProps = dndData.getDragData(dataTransfer, dragTypes.TAB);
	    if (frameProps) {
	      bookmark = siteUtil.getDetailFromFrame(frameProps, siteTags.BOOKMARK);
	      appActions.addSite(bookmark, siteTags.BOOKMARK);
	    }
	  }
	  return bookmark;
	};

/***/ },
/* 732 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	// Add an ellipse (...) character and limit length of a string to a specific size.
	// By testing against one length and slicing at a lower threshold, we prevent against unnecesary and early use of ellipses.
	//
	// If we just test and slice against one length, for example > 20 [...] text.slice(0, 20):
	//   [20] countersurveillances        countersurveillances
	//   [21] photolithographically       photolithographicall...
	//
	// If we test one length, and slice at a lower threshhold, for example > 25 [...] text.slice(0, 20)
	//   [25] immunoelectrophoretically   immunoelectrophoretically
	//   [26] zusammengehörigkeitsgefühl  zusammengehörigkeits...
	
	module.exports.ellipse = text => {
	  if (text.length > 25) {
	    return text.slice(0, 20) + '...';
	  } else {
	    return text;
	  }
	};

/***/ },
/* 733 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	module.exports.getBase64FromImageUrl = url => {
	  return new Promise((resolve, reject) => {
	    const img = new window.Image();
	    img.onerror = function () {
	      reject();
	    };
	    img.onload = function () {
	      const canvas = document.createElement('canvas');
	      canvas.width = this.naturalWidth;
	      canvas.height = this.naturalHeight;
	      canvas.getContext('2d').drawImage(this, 0, 0);
	      resolve(canvas.toDataURL('image/png'));
	    };
	    img.src = url;
	  });
	};
	
	module.exports.getWorkingImageUrl = (url, cb) => {
	  const img = new window.Image();
	  img.onload = () => cb(true);
	  img.onerror = () => cb(false);
	  img.src = url;
	};

/***/ },
/* 734 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const { makeImmutable } = __webpack_require__(267);
	const Immutable = __webpack_require__(188);
	const windowConstants = __webpack_require__(233);
	const platformUtil = __webpack_require__(251);
	
	const browserActionDefaults = Immutable.fromJS({
	  tabs: {}
	});
	
	const extensionState = {
	
	  getExtensions: state => {
	    return state.get('extensions');
	  },
	
	  getEnabledExtensions: state => {
	    return state.get('extensions').filter((installInfo, extensionId) => {
	      return installInfo.get('enabled') === true;
	    });
	  },
	
	  getExtensionById: (state, extensionId) => {
	    return state.getIn(['extensions', extensionId]);
	  },
	
	  getBrowserActionByTabId: (state, extensionId, tabId) => {
	    tabId = tabId ? tabId.toString() : '-1';
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension && extension.get('browserAction')) {
	      let tabBrowserAction = extension.getIn(['tabs', tabId]) || Immutable.Map();
	      return extension.get('browserAction').merge(tabBrowserAction).merge({ base_path: extension.get('base_path') });
	    }
	    return null;
	  },
	
	  browserActionRegistered: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    let extensionId = action.get('extensionId').toString();
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension) {
	      extension = extension.set('browserAction', browserActionDefaults.merge(action.get('browserAction')));
	      return state.setIn(['extensions', extensionId], extension);
	    } else {
	      return state;
	    }
	  },
	
	  browserActionUpdated: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    if (action.get('actionType') === windowConstants.WINDOW_SET_NAVIGATED && action.get('tabId')) {
	      let tabId = action.get('tabId');
	      let extensions = extensionState.getEnabledExtensions(state);
	      extensions && extensions.forEach(extension => {
	        let tabs = extension.getIn(['browserAction', 'tabs']);
	        if (tabs && tabs.get(tabId)) {
	          tabs = tabs.set(tabId, Immutable.Map());
	          extension = extension.setIn(['browserAction', 'tabs'], tabs);
	          state = state.setIn(['extensions', extension.get('id')], extension);
	        }
	      });
	      return state;
	    }
	    let extensionId = action.get('extensionId').toString();
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension && extension.get('browserAction')) {
	      let tabId = action.get('tabId');
	      if (tabId) {
	        let tabs = extension.getIn(['browserAction', 'tabs']);
	        let tab = tabs.get(tabId) || Immutable.Map();
	        tabs = tabs.set(tabId, tab.merge(action.get('browserAction')));
	        extension = extension.setIn(['browserAction', 'tabs'], tabs);
	      } else {
	        extension = extension.set('browserAction', extension.get('browserAction').merge(action.get('browserAction')));
	      }
	      return state.setIn(['extensions', extensionId], extension);
	    } else {
	      return state;
	    }
	  },
	
	  browserActionBackgroundImage: (browserAction, tabId) => {
	    tabId = tabId ? tabId.toString() : '-1';
	    if (browserAction.get('base_path')) {
	      if (browserAction.getIn(['tabs', tabId, 'path', '19']) && browserAction.getIn(['tabs', tabId, 'path', '38'])) {
	        return '-webkit-image-set(url(\'' + browserAction.get('base_path') + '/' + browserAction.getIn(['tabs', tabId, 'path', '19']) + '\') 1x, url(\'' + browserAction.get('base_path') + '/' + browserAction.getIn(['tabs', tabId, 'path', '38']) + '\') 2x';
	      }
	      if (browserAction.getIn(['path', '19']) && browserAction.getIn(['path', '38'])) {
	        return '-webkit-image-set(url(\'' + browserAction.get('base_path') + '/' + browserAction.getIn(['path', '19']) + '\') 1x, url(\'' + browserAction.get('base_path') + '/' + browserAction.getIn(['path', '38']) + '\') 2x';
	      }
	    }
	    return '';
	  },
	
	  extensionInstalled: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    let extensionId = action.get('extensionId').toString();
	    return state.setIn(['extensions', extensionId], action.get('installInfo'));
	  },
	
	  extensionEnabled: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    let extensionId = action.get('extensionId').toString();
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension) {
	      return state.setIn(['extensions', extensionId], extension.set('enabled', true));
	    } else {
	      return state;
	    }
	  },
	
	  extensionDisabled: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    let extensionId = action.get('extensionId').toString();
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension) {
	      return state.setIn(['extensions', action.get('extensionId')], extension.set('enabled', false));
	    } else {
	      return state;
	    }
	  },
	
	  getPersistentTabState: extension => {
	    extension = makeImmutable(extension);
	    extensionState.getTransientFields().forEach(field => {
	      extension = extension.delete(field);
	    });
	    return extension;
	  },
	
	  contextMenuCreated: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    let extensionId = action.get('extensionId').toString();
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension) {
	      if (state.getIn(['extensions', action.get('extensionId'), 'contextMenus']) === undefined) {
	        state = state.setIn(['extensions', action.get('extensionId'), 'contextMenus'], new Immutable.List());
	      }
	      let contextMenus = state.getIn(['extensions', action.get('extensionId'), 'contextMenus']);
	      const basePath = platformUtil.getPathFromFileURI(state.getIn(['extensions', action.get('extensionId'), 'base_path']));
	      const iconPath = action.get('icon');
	      if (!iconPath) {
	        contextMenus = contextMenus.push({
	          extensionId: action.get('extensionId'),
	          menuItemId: action.get('menuItemId'),
	          properties: action.get('properties').toJS()
	        });
	      } else {
	        contextMenus = contextMenus.push({
	          extensionId: action.get('extensionId'),
	          menuItemId: action.get('menuItemId'),
	          properties: action.get('properties').toJS(),
	          icon: basePath + '/' + iconPath
	        });
	      }
	      return state.setIn(['extensions', action.get('extensionId'), 'contextMenus'], contextMenus);
	    } else {
	      return state;
	    }
	  },
	
	  contextMenuAllRemoved: (state, action) => {
	    action = makeImmutable(action);
	    state = makeImmutable(state);
	    let extensionId = action.get('extensionId').toString();
	    let extension = extensionState.getExtensionById(state, extensionId);
	    if (extension) {
	      return state.deleteIn(['extensions', action.get('extensionId'), 'contextMenus']);
	    } else {
	      return state;
	    }
	  },
	
	  getContextMenusProperties: state => {
	    let allProperties = [];
	    let extensions = extensionState.getEnabledExtensions(state);
	    extensions && extensions.forEach(extension => {
	      let contextMenus = extension.get('contextMenus');
	      contextMenus && contextMenus.forEach(contextMenu => {
	        allProperties.push(contextMenu.toJS());
	      });
	    });
	    return allProperties;
	  }
	};
	
	module.exports = extensionState;

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	'use strict';
	
	const AppDispatcher = __webpack_require__(702);
	const ExtensionConstants = __webpack_require__(736);
	
	const extensionActions = {
	  /**
	   * Dispatched when an extension browser action is added
	   *
	   * @param {string} extensionId - the extension id
	   * @param {object} browserAction - browser action details
	   */
	  browserActionRegistered: function (extensionId, browserAction) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.BROWSER_ACTION_REGISTERED,
	      extensionId,
	      browserAction
	    });
	  },
	
	  browserActionUpdated: function (extensionId, browserAction, tabId) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.BROWSER_ACTION_UPDATED,
	      extensionId,
	      browserAction,
	      tabId
	    });
	  },
	
	  /**
	   * Dispatched when an extension has been installed
	   *
	   * @param {string} extensionId - the extension id
	   */
	  extensionInstalled: function (extensionId, installInfo) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.EXTENSION_INSTALLED,
	      extensionId,
	      installInfo
	    });
	  },
	
	  /**
	   * Dispatched when an extension has been uninstalled
	   *
	   * @param {string} extensionId - the extension id
	   */
	  extensionUninstalled: function (extensionId) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.EXTENSION_UNINSTALLED,
	      extensionId
	    });
	  },
	
	  /**
	   * Dispatched when an extension has been enabled
	   *
	   * @param {string} extensionId - the extension id
	   */
	  extensionEnabled: function (extensionId) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.EXTENSION_ENABLED,
	      extensionId
	    });
	  },
	
	  /**
	   * Dispatched when an extension has been disabled
	   *
	   * @param {string} extensionId - the extension id
	   */
	  extensionDisabled: function (extensionId) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.EXTENSION_DISABLED,
	      extensionId
	    });
	  },
	
	  /**
	   * Dispatched when an extension has created item in context menu
	   *
	   * @param {string} extensionId - the extension id
	   * @param {string} menuItemId - the id of the menu item that was clicked
	   * @param {object} properties - createProperties of chrome.contextMenus.create
	   * @param {string} icon - 16x16 extension icon
	   */
	  contextMenuCreated: function (extensionId, menuItemId, properties, icon) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.CONTEXT_MENU_CREATED,
	      extensionId,
	      menuItemId,
	      properties,
	      icon
	    });
	  },
	
	  /**
	   * Dispatched when an extension has removed all item in context menu
	   *
	   * @param {string} extensionId - the extension id
	   */
	  contextMenuAllRemoved: function (extensionId) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.CONTEXT_MENU_ALL_REMOVED,
	      extensionId
	    });
	  },
	
	  /**
	   * Dispatched when an menu item created by extension is clicked
	   *
	   * @param {string} extensionId - the extension id
	   * @param {string} tabId - the tab id
	   * @param {object} info - the arg of onclick callback
	   */
	  contextMenuClicked: function (extensionId, tabId, info) {
	    AppDispatcher.dispatch({
	      actionType: ExtensionConstants.CONTEXT_MENU_CLICKED,
	      extensionId,
	      tabId,
	      info
	    });
	  }
	};
	
	module.exports = extensionActions;

/***/ },
/* 736 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const ExtensionConstants = {
	  BROWSER_ACTION_REGISTERED: _,
	  BROWSER_ACTION_UPDATED: _,
	  EXTENSION_INSTALLED: _,
	  EXTENSION_UNINSTALLED: _,
	  EXTENSION_ENABLED: _,
	  EXTENSION_DISABLED: _,
	  CONTEXT_MENU_CREATED: _,
	  CONTEXT_MENU_ALL_REMOVED: _,
	  CONTEXT_MENU_CLICKED: _
	};
	
	module.exports = mapValuesByKeys(ExtensionConstants);

/***/ },
/* 737 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const Immutable = __webpack_require__(188);
	const ImmutableComponent = __webpack_require__(215);
	const tldjs = __webpack_require__(738);
	
	const cx = __webpack_require__(236);
	const Button = __webpack_require__(244);
	const UrlBar = __webpack_require__(742);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const siteTags = __webpack_require__(256);
	const messages = __webpack_require__(211);
	const settings = __webpack_require__(204);
	const ipc = __webpack_require__(703).ipcRenderer;
	const { isSourceAboutUrl } = __webpack_require__(187);
	const AddEditBookmarkHanger = __webpack_require__(746);
	const siteUtil = __webpack_require__(259);
	const eventUtil = __webpack_require__(250);
	const getSetting = __webpack_require__(202).getSetting;
	const windowStore = __webpack_require__(701);
	const contextMenus = __webpack_require__(723);
	const LongPressButton = __webpack_require__(747);
	const PublisherToggle = __webpack_require__(748);
	
	class NavigationBar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onToggleBookmark = this.onToggleBookmark.bind(this);
	    this.onStop = this.onStop.bind(this);
	    this.onReload = this.onReload.bind(this);
	    this.onReloadLongPress = this.onReloadLongPress.bind(this);
	    this.onNoScript = this.onNoScript.bind(this);
	  }
	
	  get activeFrame() {
	    return windowStore.getFrame(this.props.activeFrameKey);
	  }
	
	  get loading() {
	    return this.props.activeFrameKey !== undefined && this.props.loading;
	  }
	
	  onToggleBookmark() {
	    const editing = this.bookmarked;
	    // show the AddEditBookmarkHanger control; saving/deleting takes place there
	    let siteDetail = siteUtil.getDetailFromFrame(this.activeFrame, siteTags.BOOKMARK);
	    const key = siteUtil.getSiteKey(siteDetail);
	
	    if (key !== null) {
	      siteDetail = siteDetail.set('parentFolderId', this.props.sites.getIn([key]).get('parentFolderId'));
	    }
	    windowActions.setBookmarkDetail(siteDetail, siteDetail, null, editing, true);
	  }
	
	  onReload(e) {
	    if (eventUtil.isForSecondaryAction(e)) {
	      appActions.tabCloned(this.activeFrame.get('tabId'), { active: !!e.shiftKey });
	    } else {
	      ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_RELOAD);
	    }
	  }
	
	  onReloadLongPress(target) {
	    contextMenus.onReloadContextMenu(target);
	  }
	
	  onHome() {
	    getSetting(settings.HOMEPAGE).split('|').forEach((homepage, i) => {
	      ipc.emit(i === 0 ? messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL : messages.SHORTCUT_NEW_FRAME, {}, homepage);
	    });
	  }
	
	  onStop() {
	    if (this.props.navbar.getIn(['urlbar', 'focused'])) {
	      windowActions.setUrlBarActive(false);
	      const shouldRenderSuggestions = this.props.navbar.getIn(['urlbar', 'suggestions', 'shouldRender']) === true;
	      const suggestionList = this.props.navbar.getIn(['urlbar', 'suggestions', 'suggestionList']);
	      if (!shouldRenderSuggestions ||
	      // TODO: Once we take out suggestion generation from within URLBarSuggestions we can remove this check
	      // and put it in shouldRenderUrlBarSuggestions where it belongs.  See https://github.com/brave/browser-laptop/issues/3151
	      !suggestionList || suggestionList.size === 0) {
	        windowActions.setUrlBarSelected(true);
	      }
	    }
	  }
	
	  get bookmarked() {
	    return this.props.activeFrameKey !== undefined && siteUtil.isSiteBookmarked(this.props.sites, Immutable.fromJS({
	      location: this.props.location,
	      partitionNumber: this.props.partitionNumber,
	      title: this.props.title
	    }));
	  }
	
	  get titleMode() {
	    return this.props.mouseInTitlebar === false && !this.props.bookmarkDetail && this.props.title && !['about:blank', 'about:newtab'].includes(this.props.location) && !this.loading && !this.props.navbar.getIn(['urlbar', 'focused']) && !this.props.navbar.getIn(['urlbar', 'active']) && getSetting(settings.DISABLE_TITLE_MODE) === false;
	  }
	
	  get isPublisherButtonEnabled() {
	    const domain = tldjs.getDomain(this.props.location);
	    const hostSettings = this.props.siteSettings.get(`https?://${domain}`);
	    const visiblePublisher = hostSettings && hostSettings.get('ledgerPaymentsShown');
	    const validPublisherSynopsis = this.props.synopsis.map(entry => entry.get('site')).includes(domain);
	
	    if ((hostSettings || validPublisherSynopsis) && visiblePublisher !== false) {
	      return !getSetting(settings.AUTO_SUGGEST_SITES) && !isSourceAboutUrl(this.props.location);
	    }
	    return false;
	  }
	
	  componentDidMount() {
	    ipc.on(messages.SHORTCUT_ACTIVE_FRAME_BOOKMARK, () => this.onToggleBookmark());
	    ipc.on(messages.SHORTCUT_ACTIVE_FRAME_REMOVE_BOOKMARK, () => this.onToggleBookmark());
	  }
	
	  get showNoScriptInfo() {
	    return this.props.enableNoScript && this.props.scriptsBlocked && this.props.scriptsBlocked.size;
	  }
	
	  onNoScript() {
	    windowActions.setNoScriptVisible(!this.props.noScriptIsVisible);
	  }
	
	  componentDidUpdate(prevProps) {
	    if (this.props.noScriptIsVisible && !this.showNoScriptInfo) {
	      // There are no blocked scripts, so hide the noscript dialog.
	      windowActions.setNoScriptVisible(false);
	    }
	  }
	
	  render() {
	    if (this.props.activeFrameKey === undefined || this.props.siteSettings === undefined) {
	      return null;
	    }
	
	    return React.createElement(
	      'div',
	      { id: 'navigator',
	        ref: 'navigator',
	        'data-frame-key': this.props.activeFrameKey,
	        className: cx({
	          titleMode: this.titleMode
	        }) },
	      this.props.bookmarkDetail && this.props.bookmarkDetail.get('isBookmarkHanger') ? _jsx(AddEditBookmarkHanger, {
	        sites: this.props.sites,
	        currentDetail: this.props.bookmarkDetail.get('currentDetail'),
	        originalDetail: this.props.bookmarkDetail.get('originalDetail'),
	        destinationDetail: this.props.bookmarkDetail.get('destinationDetail'),
	        shouldShowLocation: this.props.bookmarkDetail.get('shouldShowLocation'),
	        withHomeButton: getSetting(settings.SHOW_HOME_BUTTON)
	      }) : null,
	      this.titleMode ? null : this.loading ? _jsx('span', {
	        className: 'navigationButtonContainer'
	      }, void 0, _jsx('button', {
	        'data-l10n-id': 'stopButton',
	        className: 'navigationButton stopButton',
	        onClick: this.onStop
	      })) : _jsx('span', {
	        className: 'navigationButtonContainer'
	      }, void 0, _jsx(LongPressButton, {
	        l10nId: 'reloadButton',
	        className: 'navigationButton reloadButton',
	        onClick: this.onReload,
	        onLongPress: this.onReloadLongPress
	      })),
	      !this.titleMode && getSetting(settings.SHOW_HOME_BUTTON) ? _jsx('span', {
	        className: 'navigationButtonContainer'
	      }, void 0, _jsx('button', {
	        'data-l10n-id': 'homeButton',
	        className: 'navigationButton homeButton',
	        onClick: this.onHome
	      })) : null,
	      _jsx('div', {
	        className: 'startButtons'
	      }, void 0, !this.titleMode ? _jsx('span', {
	        className: 'bookmarkButtonContainer'
	      }, void 0, _jsx('button', {
	        'data-l10n-id': this.bookmarked ? 'removeBookmarkButton' : 'addBookmarkButton',
	        className: cx({
	          navigationButton: true,
	          bookmarkButton: true,
	          removeBookmarkButton: this.bookmarked,
	          withHomeButton: getSetting(settings.SHOW_HOME_BUTTON)
	        }),
	        onClick: this.onToggleBookmark
	      })) : null),
	      React.createElement(UrlBar, { ref: 'urlBar',
	        activeFrameKey: this.props.activeFrameKey,
	        canGoForward: this.props.canGoForward,
	        searchDetail: this.props.searchDetail,
	        loading: this.loading,
	        location: this.props.location,
	        title: this.props.title,
	        history: this.props.history,
	        isSecure: this.props.isSecure,
	        hasLocationValueSuffix: this.props.hasLocationValueSuffix,
	        startLoadTime: this.props.startLoadTime,
	        endLoadTime: this.props.endLoadTime,
	        titleMode: this.titleMode,
	        urlbar: this.props.navbar.get('urlbar'),
	        onStop: this.onStop,
	        menubarVisible: this.props.menubarVisible,
	        noBorderRadius: this.isPublisherButtonEnabled
	      }),
	      isSourceAboutUrl(this.props.location) ? _jsx('div', {
	        className: 'endButtons'
	      }, void 0, _jsx('span', {
	        className: 'browserButton'
	      })) : _jsx('div', {
	        className: 'endButtons'
	      }, void 0, _jsx(PublisherToggle, {
	        url: this.props.location,
	        hostSettings: this.props.siteSettings,
	        synopsis: this.props.synopsis
	      }), !this.showNoScriptInfo ? null : _jsx('span', {
	        className: 'noScriptButtonContainer'
	      }, void 0, _jsx(Button, {
	        iconClass: 'fa-ban',
	        l10nId: 'noScriptButton',
	        className: cx({
	          'noScript': true
	        }),
	        onClick: this.onNoScript
	      })))
	    );
	  }
	}
	
	module.exports = NavigationBar;

/***/ },
/* 738 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var tld = __webpack_require__(739).init();
	tld.rules = __webpack_require__(741);
	
	module.exports = tld;


/***/ },
/* 739 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Rule = __webpack_require__(740);
	var URL = __webpack_require__(194);
	
	/**
	 * tld library
	 *
	 * Useable methods are those documented with an @api in JSDoc
	 * See README.md for more explanations on how to use this stuff.
	 */
	function tld () {
	  /* jshint validthis: true */
	  this.validHosts = [];
	  this.rules = [];
	}
	
	tld.init = function init () {
	  return new tld();
	};
	
	function trim(value) {
	  return String(value).replace(/(^\s+|\s+$)/g, '');
	}
	
	// Array.some() polyfill for IE8
	function _someFunction(value, fun /*, thisArg */) {
	    'use strict';
	
	    if (value === void 0 || value === null)
	      throw new TypeError();
	
	    var t = Object(value);
	    var len = t.length >>> 0;
	    if (typeof fun !== 'function') {
	      throw new TypeError();
	    }
	
	    var thisArg = arguments.length >= 3 ? arguments[2] : void 0;
	    for (var i = 0; i < len; i++)
	    {
	      if (i in t && fun.call(thisArg, t[i], i, t))
	        return true;
	    }
	
	    return false;
	}
	
	// Array.map polyfill for IE8
	function _mapFunction(thisVal, fun /*, thisArg */) {
	  "use strict";
	
	  if (thisVal === void 0 || thisVal === null)
	    throw new TypeError();
	
	  var t = Object(thisVal);
	  var len = t.length >>> 0;
	  if (typeof fun !== "function") {
	    throw new TypeError();
	  }
	
	  var res = new Array(len);
	  var thisArg = arguments.length >= 3 ? arguments[2] : void 0;
	
	  for (var i = 0; i < len; i++)
	  {
	    // NOTE: Absolute correctness would demand Object.defineProperty
	    //       be used.  But this method is fairly new, and failure is
	    //       possible only if Object.prototype or Array.prototype
	    //       has a property |i| (very unlikely), so use a lesscorrect
	    //       but more portable alternative.
	    if (i in t)
	      res[i] = fun.call(thisArg, t[i], i, t);
	  }
	
	  return res;
	};
	
	/**
	 * Returns the best rule for a given host based on candidates
	 *
	 * @static
	 * @param host {String} Hostname to check rules against
	 * @param rules {Array} List of rules used to work on
	 * @return {Object} Candidate object, with a normal and exception state
	 */
	tld.getCandidateRule = function getCandidateRule (host, rules, options) {
	  var rule = {'normal': null, 'exception': null};
	
	  options = options || { lazy: false };
	
	  _someFunction(rules, function (r) {
	    var pattern;
	
	    // sld matching or validHost? escape the loop immediately (except if it's an exception)
	    if ('.' + host === r.getNormalXld()) {
	      if (options.lazy || r.exception || r.isHost) {
	        rule.normal = r;
	      }
	
	      return true;
	    }
	
	    // otherwise check as a complete host
	    // if it's an exception, we want to loop a bit more to a normal rule
	    pattern = '.+' + r.getNormalPattern() + '$';
	
	    if ((new RegExp(pattern)).test(host)) {
	      rule[r.exception ? 'exception' : 'normal'] = r;
	      return !r.exception;
	    }
	
	    return false;
	  });
	
	  // favouring the exception if encountered
	  // previously we were copy-altering a rule, creating inconsistent results based on rule order order
	  // @see https://github.com/oncletom/tld.js/pull/35
	  if (rule.normal && rule.exception) {
	    return rule.exception;
	  }
	
	  return rule.normal;
	};
	
	/**
	 * Retrieve a subset of rules for a Top-Level-Domain string
	 *
	 * @param tld {String} Top-Level-Domain string
	 * @return {Array} Rules subset
	 */
	tld.prototype.getRulesForTld = function getRulesForTld (tld, default_rule) {
	  var exception = '!';
	  var wildcard = '*';
	  var append_tld_rule = true;
	  var rules = this.rules[tld];
	
	  // Already parsed
	  // Array.isArray polyfill for IE8
	  if (Object.prototype.toString.call(rules)  === '[object Array]') {
	    return rules;
	  }
	
	  // Nothing found, apply some default value
	  if (rules === void 0) {
	    return default_rule ? [ default_rule ] : [];
	  }
	
	  // Parsing needed
	  rules = _mapFunction(rules.split('|'), function transformAsRule (sld) {
	    var first_bit = sld[0];
	
	    if (first_bit === exception || first_bit === wildcard) {
	      sld = sld.slice(1);
	
	      if (!sld) {
	        append_tld_rule = false;
	      }
	    }
	
	    return new Rule({
	      "firstLevel":  tld,
	      "secondLevel": sld,
	      "exception":   first_bit === exception,
	      "wildcard":    first_bit === wildcard
	    });
	  });
	
	  // Always prepend to make it the latest rule to be applied
	  if (append_tld_rule) {
	    rules.unshift(new Rule({
	      "firstLevel": tld
	    }));
	  }
	
	  this.rules[tld] = rules.reverse();
	
	  return rules;
	};
	
	/**
	 * Checks if the TLD exists for a given host
	 *
	 * @api
	 * @param {string} host
	 * @return {boolean}
	 */
	tld.prototype.tldExists = function tldExists(host){
	  var hostTld;
	
	  host = tld.cleanHostValue(host);
	
	  // Easy case, it's a TLD
	  if (this.rules[host]){
	    return true;
	  }
	
	  // Popping only the TLD of the hostname
	  hostTld = tld.extractTldFromHost(host);
	
	  return this.rules[hostTld] !== undefined;
	};
	
	/**
	 * Returns the public suffix (including exact matches)
	 *
	 * @api
	 * @since 1.5
	 * @param {string} host
	 * @return {String}
	 */
	tld.prototype.getPublicSuffix = function getPublicSuffix(host) {
	  var hostTld, rules, rule;
	
	  if (host in this.rules){
		  return host;
	  }
	
	  host = tld.cleanHostValue(host);
	  hostTld = tld.extractTldFromHost(host);
	  rules = this.getRulesForTld(hostTld);
	  rule = tld.getCandidateRule(host, rules, { lazy: true });
	
	  if (rule === null) {
	    return null;
	  }
	
	  return rule.getNormalXld().slice(1);
	};
	
	/**
	 * Detects the domain based on rules and upon and a host string
	 *
	 * @api
	 * @param {string} host
	 * @return {String}
	 */
	tld.prototype.getDomain = function getDomain (host) {
	  var domain = null, hostTld, rules, rule;
	
	  if (this.isValid(host) === false) {
	    return null;
	  }
	
	  host = tld.cleanHostValue(host);
	  hostTld = tld.extractTldFromHost(host);
	  rules = this.getRulesForTld(hostTld, new Rule({"firstLevel": hostTld, "isHost": this.validHosts.indexOf(hostTld) !== -1}));
	  rule = tld.getCandidateRule(host, rules);
	
	  if (rule === null) {
	    return null;
	  }
	
	  host.replace(new RegExp(rule.getPattern()), function (m, d) {
	    domain = d;
	  });
	
	  return domain;
	};
	
	/**
	 * Returns the subdomain of a host string
	 *
	 * @api
	 * @param {string} host
	 * @return {string|null} a subdomain string if any, blank string if subdomain is empty, otherwise null
	 */
	tld.prototype.getSubdomain = function getSubdomain(host){
	  var domain, r, subdomain;
	
	  host = tld.cleanHostValue(host);
	  domain = this.getDomain(host);
	
	  // No domain found? Just abort, abort!
	  if (domain === null){
	    return null;
	  }
	
	  r = '\\.?'+ tld.escapeRegExp(domain)+'$';
	  subdomain = host.replace(new RegExp(r, 'i'), '');
	
	  return subdomain;
	};
	
	/**
	 * Checking if a host string is valid
	 * It's usually a preliminary check before trying to use getDomain or anything else
	 *
	 * Beware: it does not check if the TLD exists.
	 *
	 * @api
	 * @param host {String}
	 * @return {Boolean}
	 */
	tld.prototype.isValid = function isValid (host) {
	  return typeof host === 'string' && (this.validHosts.indexOf(host) !== -1 || (host.indexOf('.') !== -1 && host[0] !== '.'));
	};
	
	/**
	 * Utility to cleanup the base host value. Also removes url fragments.
	 *
	 * Works for:
	 * - hostname
	 * - //hostname
	 * - scheme://hostname
	 * - scheme+scheme://hostname
	 *
	 * @param {string} value
	 * @return {String}
	 */
	
	// scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
	var hasPrefixRE = /^(([a-z][a-z0-9+.-]*)?:)?\/\//;
	var invalidHostnameChars = /[^A-Za-z0-9.-]/;
	
	tld.cleanHostValue = function cleanHostValue(value){
	  value = trim(value).toLowerCase();
	
	  var parts = URL.parse(hasPrefixRE.test(value) ? value : '//' + value, null, true);
	
	  if (parts.hostname && !invalidHostnameChars.test(parts.hostname)) { return parts.hostname; }
	  if (!invalidHostnameChars.test(value)) { return value; }
	  return '';
	};
	
	/**
	 * Utility to extract the TLD from a host string
	 *
	 * @param {string} host
	 * @return {String}
	 */
	tld.extractTldFromHost = function extractTldFromHost(host){
	  return host.split('.').pop();
	};
	
	/**
	 * Escapes RegExp specific chars.
	 *
	 * @since 1.3.1
	 * @see https://github.com/oncletom/tld.js/pull/33
	 * @param {String|Mixed} s
	 * @returns {string} Escaped string for a safe use in a `new RegExp` expression
	 */
	tld.escapeRegExp = function escapeRegExp(s) {
	  return String(s).replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
	};
	
	module.exports = tld;


/***/ },
/* 740 */
/***/ function(module, exports) {

	"use strict";
	
	function Rule (data){
	  data = data || {};
	
	  this.exception = data.exception || false;
	  this.firstLevel = data.firstLevel || '';
	  this.secondLevel = data.secondLevel || null;
	  this.isHost = data.isHost || false;
	  this.source = data.source || '';
	  this.wildcard = data.wildcard || false;
	}
	
	/**
	 * Returns the TLD or SLD (Second Level Domain) pattern for a rule
	 *
	 * @return {String}
	 */
	Rule.prototype.getNormalXld = function getNormalXld(){
	  return (this.secondLevel ? '.' + this.secondLevel : '') + '.' + this.firstLevel;
	};
	
	/**
	 * Returns a pattern suitable for normal rule
	 * Mostly for internal use
	 *
	 * @return {String}
	 */
	Rule.prototype.getNormalPattern = function getNormalPattern(){
	  return (this.secondLevel ? '\\.' + this.secondLevel : '') + '\\.' + this.firstLevel;
	};
	
	/**
	 * Returns a pattern suitable for wildcard rule
	 * Mostly for internal use
	 *
	 * @return {String}
	 */
	Rule.prototype.getWildcardPattern = function getWildcardPattern(){
	  return '\\.[^\\.]+' + this.getNormalXld().replace(/\./g, '\\.');
	};
	
	/**
	 * Returns a pattern suitable for exception rule
	 * Mostly for internal use
	 *
	 * @return {String}
	 */
	Rule.prototype.getExceptionPattern = function getExceptionPattern(){
	  return (this.secondLevel || '') + '\\.' + this.firstLevel;
	};
	
	/**
	 * Returns the best pattern possible for a rule
	 * You just have to test a value against it to check or extract a hostname
	 *
	 * @api
	 * @param {string|undefined} before
	 * @param {string|undefined} after
	 * @return {String} A pattern to challenge some string against
	 */
	Rule.prototype.getPattern = function getPattern(before, after){
	  var pattern = '';
	
	  before = (before === undefined) ? '(': before+'';
	  after = (after === undefined) ? ')$': after+'';
	
	  if (this.exception === true){
	    pattern = this.getExceptionPattern();
	  }
	  else if (this.isHost === true) {
	    pattern = this.firstLevel;
	  }
	  else{
	    pattern = '[^\\.]+' + (this.wildcard ? this.getWildcardPattern() : this.getNormalPattern());
	  }
	
	  return before + pattern + after;
	};
	
	module.exports = Rule;


/***/ },
/* 741 */
/***/ function(module, exports) {

	module.exports = {
		"ac": "com|edu|gov|net|mil|org",
		"ad": "nom",
		"ae": "co|net|org|sch|ac|gov|mil|blogspot",
		"aero": "accident-investigation|accident-prevention|aerobatic|aeroclub|aerodrome|agents|aircraft|airline|airport|air-surveillance|airtraffic|air-traffic-control|ambulance|amusement|association|author|ballooning|broker|caa|cargo|catering|certification|championship|charter|civilaviation|club|conference|consultant|consulting|control|council|crew|design|dgca|educator|emergency|engine|engineer|entertainment|equipment|exchange|express|federation|flight|freight|fuel|gliding|government|groundhandling|group|hanggliding|homebuilt|insurance|journal|journalist|leasing|logistics|magazine|maintenance|marketplace|media|microlight|modelling|navigation|parachuting|paragliding|passenger-association|pilot|press|production|recreation|repbody|res|research|rotorcraft|safety|scientist|services|show|skydiving|software|student|taxi|trader|trading|trainer|union|workinggroup|works",
		"af": "gov|com|org|net|edu",
		"ag": "com|org|net|co|nom",
		"ai": "off|com|net|org",
		"al": "com|edu|gov|mil|net|org|blogspot",
		"am": "blogspot",
		"ao": "ed|gv|og|co|pb|it",
		"aq": "",
		"ar": "com|edu|gob|gov|int|mil|net|org|tur|blogspot.com",
		"arpa": "e164|in-addr|ip6|iris|uri|urn",
		"as": "gov",
		"asia": "",
		"at": "ac|co|gv|or|blogspot.co|biz|info|priv",
		"au": "com|net|org|edu|gov|asn|id|info|conf|oz|act|nsw|nt|qld|sa|tas|vic|wa|act.edu|nsw.edu|nt.edu|qld.edu|sa.edu|tas.edu|vic.edu|wa.edu|qld.gov|sa.gov|tas.gov|vic.gov|wa.gov|blogspot.com",
		"aw": "com",
		"ax": "",
		"az": "com|net|int|gov|org|edu|info|pp|mil|name|pro|biz",
		"ba": "org|net|edu|gov|mil|unsa|unbi|co|com|rs|blogspot",
		"bb": "biz|co|com|edu|gov|info|net|org|store|tv",
		"bd": "*",
		"be": "ac|blogspot",
		"bf": "gov",
		"bg": "a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|0|1|2|3|4|5|6|7|8|9|blogspot",
		"bh": "com|edu|net|org|gov",
		"bi": "co|com|edu|or|org",
		"biz": "dyndns|for-better|for-more|for-some|for-the|selfip|webhop",
		"bj": "asso|barreau|gouv|blogspot",
		"bm": "com|edu|gov|net|org",
		"bn": "*",
		"bo": "com|edu|gov|gob|int|org|net|mil|tv",
		"br": "adm|adv|agr|am|arq|art|ato|b|bio|blog|bmd|cim|cng|cnt|com|coop|ecn|eco|edu|emp|eng|esp|etc|eti|far|flog|fm|fnd|fot|fst|g12|ggf|gov|imb|ind|inf|jor|jus|leg|lel|mat|med|mil|mp|mus|net|*nom|not|ntr|odo|org|ppg|pro|psc|psi|qsl|radio|rec|slg|srv|taxi|teo|tmp|trd|tur|tv|vet|vlog|wiki|zlg|blogspot.com",
		"bs": "com|net|org|edu|gov",
		"bt": "com|edu|gov|net|org",
		"bv": "",
		"bw": "co|org",
		"by": "gov|mil|com|of|blogspot.com",
		"bz": "com|net|org|edu|gov|za",
		"ca": "ab|bc|mb|nb|nf|nl|ns|nt|nu|on|pe|qc|sk|yk|gc|co|blogspot",
		"cat": "",
		"cc": "ftpaccess|game-server|myphotos|scrapping",
		"cd": "gov",
		"cf": "blogspot",
		"cg": "",
		"ch": "blogspot",
		"ci": "org|or|com|co|edu|ed|ac|net|go|asso|xn--aroport-bya|int|presse|md|gouv",
		"ck": "*|!www",
		"cl": "gov|gob|co|mil|blogspot",
		"cm": "co|com|gov|net",
		"cn": "ac|com|edu|gov|net|org|mil|xn--55qx5d|xn--io0a7i|xn--od0alg|ah|bj|cq|fj|gd|gs|gz|gx|ha|hb|he|hi|hl|hn|jl|js|jx|ln|nm|nx|qh|sc|sd|sh|sn|sx|tj|xj|xz|yn|zj|hk|mo|tw|cn-north-1.compute.amazonaws|compute.amazonaws|s3.cn-north-1.amazonaws.com",
		"co": "arts|com|edu|firm|gov|info|int|mil|net|nom|org|rec|web|blogspot.com",
		"com": "ap-northeast-1.compute.amazonaws|ap-southeast-1.compute.amazonaws|ap-southeast-2.compute.amazonaws|compute.amazonaws|compute-1.amazonaws|eu-west-1.compute.amazonaws|eu-central-1.compute.amazonaws|sa-east-1.compute.amazonaws|us-east-1.amazonaws|us-gov-west-1.compute.amazonaws|us-west-1.compute.amazonaws|us-west-2.compute.amazonaws|z-1.compute-1.amazonaws|z-2.compute-1.amazonaws|elasticbeanstalk|elb.amazonaws|s3.amazonaws|s3-ap-northeast-1.amazonaws|s3-ap-southeast-1.amazonaws|s3-ap-southeast-2.amazonaws|s3-external-1.amazonaws|s3-external-2.amazonaws|s3-fips-us-gov-west-1.amazonaws|s3-eu-central-1.amazonaws|s3-eu-west-1.amazonaws|s3-sa-east-1.amazonaws|s3-us-gov-west-1.amazonaws|s3-us-west-1.amazonaws|s3-us-west-2.amazonaws|s3.eu-central-1.amazonaws|betainabox|ar|br|cn|de|eu|gb|hu|jpn|kr|mex|no|qc|ru|sa|se|uk|us|uy|za|africa|gr|co|cloudcontrolled|cloudcontrolapp|dreamhosters|dyndns-at-home|dyndns-at-work|dyndns-blog|dyndns-free|dyndns-home|dyndns-ip|dyndns-mail|dyndns-office|dyndns-pics|dyndns-remote|dyndns-server|dyndns-web|dyndns-wiki|dyndns-work|blogdns|cechire|dnsalias|dnsdojo|doesntexist|dontexist|doomdns|dyn-o-saur|dynalias|est-a-la-maison|est-a-la-masion|est-le-patron|est-mon-blogueur|from-ak|from-al|from-ar|from-ca|from-ct|from-dc|from-de|from-fl|from-ga|from-hi|from-ia|from-id|from-il|from-in|from-ks|from-ky|from-ma|from-md|from-mi|from-mn|from-mo|from-ms|from-mt|from-nc|from-nd|from-ne|from-nh|from-nj|from-nm|from-nv|from-oh|from-ok|from-or|from-pa|from-pr|from-ri|from-sc|from-sd|from-tn|from-tx|from-ut|from-va|from-vt|from-wa|from-wi|from-wv|from-wy|getmyip|gotdns|hobby-site|homelinux|homeunix|iamallama|is-a-anarchist|is-a-blogger|is-a-bookkeeper|is-a-bulls-fan|is-a-caterer|is-a-chef|is-a-conservative|is-a-cpa|is-a-cubicle-slave|is-a-democrat|is-a-designer|is-a-doctor|is-a-financialadvisor|is-a-geek|is-a-green|is-a-guru|is-a-hard-worker|is-a-hunter|is-a-landscaper|is-a-lawyer|is-a-liberal|is-a-libertarian|is-a-llama|is-a-musician|is-a-nascarfan|is-a-nurse|is-a-painter|is-a-personaltrainer|is-a-photographer|is-a-player|is-a-republican|is-a-rockstar|is-a-socialist|is-a-student|is-a-teacher|is-a-techie|is-a-therapist|is-an-accountant|is-an-actor|is-an-actress|is-an-anarchist|is-an-artist|is-an-engineer|is-an-entertainer|is-certified|is-gone|is-into-anime|is-into-cars|is-into-cartoons|is-into-games|is-leet|is-not-certified|is-slick|is-uberleet|is-with-theband|isa-geek|isa-hockeynut|issmarterthanyou|likes-pie|likescandy|neat-url|saves-the-whales|selfip|sells-for-less|sells-for-u|servebbs|simple-url|space-to-rent|teaches-yoga|writesthisblog|firebaseapp|flynnhub|githubusercontent|ro|appspot|blogspot|codespot|googleapis|googlecode|pagespeedmobilizer|withgoogle|withyoutube|herokuapp|herokussl|4u|nfshost|operaunite|outsystemscloud|gotpantheon|qa2|rhcloud|sinaapp|vipsinaapp|1kapp|hk|yolasite",
		"coop": "",
		"cr": "ac|co|ed|fi|go|or|sa",
		"cu": "com|edu|org|net|gov|inf",
		"cv": "blogspot",
		"cw": "com|edu|net|org",
		"cx": "gov|ath",
		"cy": "ac|biz|com|ekloges|gov|ltd|name|net|org|parliament|press|pro|tm|blogspot.com",
		"cz": "blogspot",
		"de": "com|fuettertdasnetz|isteingeek|istmein|lebtimnetz|leitungsen|traeumtgerade|blogspot",
		"dj": "",
		"dk": "blogspot",
		"dm": "com|net|org|edu|gov",
		"do": "art|com|edu|gob|gov|mil|net|org|sld|web",
		"dz": "com|org|net|gov|edu|asso|pol|art",
		"ec": "com|info|net|fin|k12|med|pro|org|edu|gov|gob|mil",
		"edu": "",
		"ee": "edu|gov|riik|lib|med|com|pri|aip|org|fie|blogspot.com",
		"eg": "com|edu|eun|gov|mil|name|net|org|sci|blogspot.com",
		"er": "*",
		"es": "com|nom|org|gob|edu|blogspot.com",
		"et": "com|gov|org|edu|biz|name|info|net",
		"eu": "",
		"fi": "aland|blogspot|iki",
		"fj": "*",
		"fk": "*",
		"fm": "",
		"fo": "",
		"fr": "com|asso|nom|prd|presse|tm|aeroport|assedic|avocat|avoues|cci|chambagri|chirurgiens-dentistes|experts-comptables|geometre-expert|gouv|greta|huissier-justice|medecin|notaires|pharmacien|port|veterinaire|blogspot",
		"ga": "",
		"gb": "",
		"gd": "",
		"ge": "com|edu|gov|org|mil|net|pvt",
		"gf": "",
		"gg": "co|net|org",
		"gh": "com|edu|gov|org|mil",
		"gi": "com|ltd|gov|mod|edu|org",
		"gl": "co|com|edu|net|org",
		"gm": "",
		"gn": "ac|com|edu|gov|org|net",
		"gov": "",
		"gp": "com|net|mobi|edu|org|asso",
		"gq": "",
		"gr": "com|edu|net|org|gov|blogspot",
		"gs": "",
		"gt": "com|edu|gob|ind|mil|net|org",
		"gu": "*",
		"gw": "",
		"gy": "co|com|net",
		"hk": "com|edu|gov|idv|net|org|xn--55qx5d|xn--wcvs22d|xn--lcvr32d|xn--mxtq1m|xn--gmqw5a|xn--ciqpn|xn--gmq050i|xn--zf0avx|xn--io0a7i|xn--mk0axi|xn--od0alg|xn--od0aq3b|xn--tn0ag|xn--uc0atv|xn--uc0ay4a|blogspot|ltd|inc",
		"hm": "",
		"hn": "com|edu|org|net|mil|gob",
		"hr": "iz|from|name|com|blogspot",
		"ht": "com|shop|firm|info|adult|net|pro|org|med|art|coop|pol|asso|edu|rel|gouv|perso",
		"hu": "co|info|org|priv|sport|tm|2000|agrar|bolt|casino|city|erotica|erotika|film|forum|games|hotel|ingatlan|jogasz|konyvelo|lakas|media|news|reklam|sex|shop|suli|szex|tozsde|utazas|video|blogspot",
		"id": "ac|biz|co|desa|go|mil|my|net|or|sch|web|blogspot.co",
		"ie": "gov|blogspot",
		"il": "ac|co|gov|idf|k12|muni|net|org|blogspot.co",
		"im": "ac|co|com|ltd.co|net|org|plc.co|tt|tv",
		"in": "co|firm|net|org|gen|ind|nic|ac|edu|res|gov|mil|blogspot",
		"info": "dyndns|barrel-of-knowledge|barrell-of-knowledge|for-our|groks-the|groks-this|here-for-more|knowsitall|selfip|webhop",
		"int": "eu",
		"io": "com|github|ngrok|nid|pantheon|sandcats",
		"iq": "gov|edu|mil|com|org|net",
		"ir": "ac|co|gov|id|net|org|sch|xn--mgba3a4f16a|xn--mgba3a4fra",
		"is": "net|com|edu|gov|org|int|cupcake|blogspot",
		"it": "gov|edu|abr|abruzzo|aosta-valley|aostavalley|bas|basilicata|cal|calabria|cam|campania|emilia-romagna|emiliaromagna|emr|friuli-v-giulia|friuli-ve-giulia|friuli-vegiulia|friuli-venezia-giulia|friuli-veneziagiulia|friuli-vgiulia|friuliv-giulia|friulive-giulia|friulivegiulia|friulivenezia-giulia|friuliveneziagiulia|friulivgiulia|fvg|laz|lazio|lig|liguria|lom|lombardia|lombardy|lucania|mar|marche|mol|molise|piedmont|piemonte|pmn|pug|puglia|sar|sardegna|sardinia|sic|sicilia|sicily|taa|tos|toscana|trentino-a-adige|trentino-aadige|trentino-alto-adige|trentino-altoadige|trentino-s-tirol|trentino-stirol|trentino-sud-tirol|trentino-sudtirol|trentino-sued-tirol|trentino-suedtirol|trentinoa-adige|trentinoaadige|trentinoalto-adige|trentinoaltoadige|trentinos-tirol|trentinostirol|trentinosud-tirol|trentinosudtirol|trentinosued-tirol|trentinosuedtirol|tuscany|umb|umbria|val-d-aosta|val-daosta|vald-aosta|valdaosta|valle-aosta|valle-d-aosta|valle-daosta|valleaosta|valled-aosta|valledaosta|vallee-aoste|valleeaoste|vao|vda|ven|veneto|ag|agrigento|al|alessandria|alto-adige|altoadige|an|ancona|andria-barletta-trani|andria-trani-barletta|andriabarlettatrani|andriatranibarletta|ao|aosta|aoste|ap|aq|aquila|ar|arezzo|ascoli-piceno|ascolipiceno|asti|at|av|avellino|ba|balsan|bari|barletta-trani-andria|barlettatraniandria|belluno|benevento|bergamo|bg|bi|biella|bl|bn|bo|bologna|bolzano|bozen|br|brescia|brindisi|bs|bt|bz|ca|cagliari|caltanissetta|campidano-medio|campidanomedio|campobasso|carbonia-iglesias|carboniaiglesias|carrara-massa|carraramassa|caserta|catania|catanzaro|cb|ce|cesena-forli|cesenaforli|ch|chieti|ci|cl|cn|co|como|cosenza|cr|cremona|crotone|cs|ct|cuneo|cz|dell-ogliastra|dellogliastra|en|enna|fc|fe|fermo|ferrara|fg|fi|firenze|florence|fm|foggia|forli-cesena|forlicesena|fr|frosinone|ge|genoa|genova|go|gorizia|gr|grosseto|iglesias-carbonia|iglesiascarbonia|im|imperia|is|isernia|kr|la-spezia|laquila|laspezia|latina|lc|le|lecce|lecco|li|livorno|lo|lodi|lt|lu|lucca|macerata|mantova|massa-carrara|massacarrara|matera|mb|mc|me|medio-campidano|mediocampidano|messina|mi|milan|milano|mn|mo|modena|monza-brianza|monza-e-della-brianza|monza|monzabrianza|monzaebrianza|monzaedellabrianza|ms|mt|na|naples|napoli|no|novara|nu|nuoro|og|ogliastra|olbia-tempio|olbiatempio|or|oristano|ot|pa|padova|padua|palermo|parma|pavia|pc|pd|pe|perugia|pesaro-urbino|pesarourbino|pescara|pg|pi|piacenza|pisa|pistoia|pn|po|pordenone|potenza|pr|prato|pt|pu|pv|pz|ra|ragusa|ravenna|rc|re|reggio-calabria|reggio-emilia|reggiocalabria|reggioemilia|rg|ri|rieti|rimini|rm|rn|ro|roma|rome|rovigo|sa|salerno|sassari|savona|si|siena|siracusa|so|sondrio|sp|sr|ss|suedtirol|sv|ta|taranto|te|tempio-olbia|tempioolbia|teramo|terni|tn|to|torino|tp|tr|trani-andria-barletta|trani-barletta-andria|traniandriabarletta|tranibarlettaandria|trapani|trentino|trento|treviso|trieste|ts|turin|tv|ud|udine|urbino-pesaro|urbinopesaro|va|varese|vb|vc|ve|venezia|venice|verbania|vercelli|verona|vi|vibo-valentia|vibovalentia|vicenza|viterbo|vr|vs|vt|vv|blogspot",
		"je": "co|net|org",
		"jm": "*",
		"jo": "com|org|net|edu|sch|gov|mil|name",
		"jobs": "",
		"jp": "ac|ad|co|ed|go|gr|lg|ne|or|aichi|akita|aomori|chiba|ehime|fukui|fukuoka|fukushima|gifu|gunma|hiroshima|hokkaido|hyogo|ibaraki|ishikawa|iwate|kagawa|kagoshima|kanagawa|kochi|kumamoto|kyoto|mie|miyagi|miyazaki|nagano|nagasaki|nara|niigata|oita|okayama|okinawa|osaka|saga|saitama|shiga|shimane|shizuoka|tochigi|tokushima|tokyo|tottori|toyama|wakayama|yamagata|yamaguchi|yamanashi|xn--4pvxs|xn--vgu402c|xn--c3s14m|xn--f6qx53a|xn--8pvr4u|xn--uist22h|xn--djrs72d6uy|xn--mkru45i|xn--0trq7p7nn|xn--8ltr62k|xn--2m4a15e|xn--efvn9s|xn--32vp30h|xn--4it797k|xn--1lqs71d|xn--5rtp49c|xn--5js045d|xn--ehqz56n|xn--1lqs03n|xn--qqqt11m|xn--kbrq7o|xn--pssu33l|xn--ntsq17g|xn--uisz3g|xn--6btw5a|xn--1ctwo|xn--6orx2r|xn--rht61e|xn--rht27z|xn--djty4k|xn--nit225k|xn--rht3d|xn--klty5x|xn--kltx9a|xn--kltp7d|xn--uuwu58a|xn--zbx025d|xn--ntso0iqx3a|xn--elqq16h|xn--4it168d|xn--klt787d|xn--rny31h|xn--7t0a264c|xn--5rtq34k|xn--k7yn95e|xn--tor131o|xn--d5qv7z876c|*kawasaki|*kitakyushu|*kobe|*nagoya|*sapporo|*sendai|*yokohama|!city.kawasaki|!city.kitakyushu|!city.kobe|!city.nagoya|!city.sapporo|!city.sendai|!city.yokohama|aisai.aichi|ama.aichi|anjo.aichi|asuke.aichi|chiryu.aichi|chita.aichi|fuso.aichi|gamagori.aichi|handa.aichi|hazu.aichi|hekinan.aichi|higashiura.aichi|ichinomiya.aichi|inazawa.aichi|inuyama.aichi|isshiki.aichi|iwakura.aichi|kanie.aichi|kariya.aichi|kasugai.aichi|kira.aichi|kiyosu.aichi|komaki.aichi|konan.aichi|kota.aichi|mihama.aichi|miyoshi.aichi|nishio.aichi|nisshin.aichi|obu.aichi|oguchi.aichi|oharu.aichi|okazaki.aichi|owariasahi.aichi|seto.aichi|shikatsu.aichi|shinshiro.aichi|shitara.aichi|tahara.aichi|takahama.aichi|tobishima.aichi|toei.aichi|togo.aichi|tokai.aichi|tokoname.aichi|toyoake.aichi|toyohashi.aichi|toyokawa.aichi|toyone.aichi|toyota.aichi|tsushima.aichi|yatomi.aichi|akita.akita|daisen.akita|fujisato.akita|gojome.akita|hachirogata.akita|happou.akita|higashinaruse.akita|honjo.akita|honjyo.akita|ikawa.akita|kamikoani.akita|kamioka.akita|katagami.akita|kazuno.akita|kitaakita.akita|kosaka.akita|kyowa.akita|misato.akita|mitane.akita|moriyoshi.akita|nikaho.akita|noshiro.akita|odate.akita|oga.akita|ogata.akita|semboku.akita|yokote.akita|yurihonjo.akita|aomori.aomori|gonohe.aomori|hachinohe.aomori|hashikami.aomori|hiranai.aomori|hirosaki.aomori|itayanagi.aomori|kuroishi.aomori|misawa.aomori|mutsu.aomori|nakadomari.aomori|noheji.aomori|oirase.aomori|owani.aomori|rokunohe.aomori|sannohe.aomori|shichinohe.aomori|shingo.aomori|takko.aomori|towada.aomori|tsugaru.aomori|tsuruta.aomori|abiko.chiba|asahi.chiba|chonan.chiba|chosei.chiba|choshi.chiba|chuo.chiba|funabashi.chiba|futtsu.chiba|hanamigawa.chiba|ichihara.chiba|ichikawa.chiba|ichinomiya.chiba|inzai.chiba|isumi.chiba|kamagaya.chiba|kamogawa.chiba|kashiwa.chiba|katori.chiba|katsuura.chiba|kimitsu.chiba|kisarazu.chiba|kozaki.chiba|kujukuri.chiba|kyonan.chiba|matsudo.chiba|midori.chiba|mihama.chiba|minamiboso.chiba|mobara.chiba|mutsuzawa.chiba|nagara.chiba|nagareyama.chiba|narashino.chiba|narita.chiba|noda.chiba|oamishirasato.chiba|omigawa.chiba|onjuku.chiba|otaki.chiba|sakae.chiba|sakura.chiba|shimofusa.chiba|shirako.chiba|shiroi.chiba|shisui.chiba|sodegaura.chiba|sosa.chiba|tako.chiba|tateyama.chiba|togane.chiba|tohnosho.chiba|tomisato.chiba|urayasu.chiba|yachimata.chiba|yachiyo.chiba|yokaichiba.chiba|yokoshibahikari.chiba|yotsukaido.chiba|ainan.ehime|honai.ehime|ikata.ehime|imabari.ehime|iyo.ehime|kamijima.ehime|kihoku.ehime|kumakogen.ehime|masaki.ehime|matsuno.ehime|matsuyama.ehime|namikata.ehime|niihama.ehime|ozu.ehime|saijo.ehime|seiyo.ehime|shikokuchuo.ehime|tobe.ehime|toon.ehime|uchiko.ehime|uwajima.ehime|yawatahama.ehime|echizen.fukui|eiheiji.fukui|fukui.fukui|ikeda.fukui|katsuyama.fukui|mihama.fukui|minamiechizen.fukui|obama.fukui|ohi.fukui|ono.fukui|sabae.fukui|sakai.fukui|takahama.fukui|tsuruga.fukui|wakasa.fukui|ashiya.fukuoka|buzen.fukuoka|chikugo.fukuoka|chikuho.fukuoka|chikujo.fukuoka|chikushino.fukuoka|chikuzen.fukuoka|chuo.fukuoka|dazaifu.fukuoka|fukuchi.fukuoka|hakata.fukuoka|higashi.fukuoka|hirokawa.fukuoka|hisayama.fukuoka|iizuka.fukuoka|inatsuki.fukuoka|kaho.fukuoka|kasuga.fukuoka|kasuya.fukuoka|kawara.fukuoka|keisen.fukuoka|koga.fukuoka|kurate.fukuoka|kurogi.fukuoka|kurume.fukuoka|minami.fukuoka|miyako.fukuoka|miyama.fukuoka|miyawaka.fukuoka|mizumaki.fukuoka|munakata.fukuoka|nakagawa.fukuoka|nakama.fukuoka|nishi.fukuoka|nogata.fukuoka|ogori.fukuoka|okagaki.fukuoka|okawa.fukuoka|oki.fukuoka|omuta.fukuoka|onga.fukuoka|onojo.fukuoka|oto.fukuoka|saigawa.fukuoka|sasaguri.fukuoka|shingu.fukuoka|shinyoshitomi.fukuoka|shonai.fukuoka|soeda.fukuoka|sue.fukuoka|tachiarai.fukuoka|tagawa.fukuoka|takata.fukuoka|toho.fukuoka|toyotsu.fukuoka|tsuiki.fukuoka|ukiha.fukuoka|umi.fukuoka|usui.fukuoka|yamada.fukuoka|yame.fukuoka|yanagawa.fukuoka|yukuhashi.fukuoka|aizubange.fukushima|aizumisato.fukushima|aizuwakamatsu.fukushima|asakawa.fukushima|bandai.fukushima|date.fukushima|fukushima.fukushima|furudono.fukushima|futaba.fukushima|hanawa.fukushima|higashi.fukushima|hirata.fukushima|hirono.fukushima|iitate.fukushima|inawashiro.fukushima|ishikawa.fukushima|iwaki.fukushima|izumizaki.fukushima|kagamiishi.fukushima|kaneyama.fukushima|kawamata.fukushima|kitakata.fukushima|kitashiobara.fukushima|koori.fukushima|koriyama.fukushima|kunimi.fukushima|miharu.fukushima|mishima.fukushima|namie.fukushima|nango.fukushima|nishiaizu.fukushima|nishigo.fukushima|okuma.fukushima|omotego.fukushima|ono.fukushima|otama.fukushima|samegawa.fukushima|shimogo.fukushima|shirakawa.fukushima|showa.fukushima|soma.fukushima|sukagawa.fukushima|taishin.fukushima|tamakawa.fukushima|tanagura.fukushima|tenei.fukushima|yabuki.fukushima|yamato.fukushima|yamatsuri.fukushima|yanaizu.fukushima|yugawa.fukushima|anpachi.gifu|ena.gifu|gifu.gifu|ginan.gifu|godo.gifu|gujo.gifu|hashima.gifu|hichiso.gifu|hida.gifu|higashishirakawa.gifu|ibigawa.gifu|ikeda.gifu|kakamigahara.gifu|kani.gifu|kasahara.gifu|kasamatsu.gifu|kawaue.gifu|kitagata.gifu|mino.gifu|minokamo.gifu|mitake.gifu|mizunami.gifu|motosu.gifu|nakatsugawa.gifu|ogaki.gifu|sakahogi.gifu|seki.gifu|sekigahara.gifu|shirakawa.gifu|tajimi.gifu|takayama.gifu|tarui.gifu|toki.gifu|tomika.gifu|wanouchi.gifu|yamagata.gifu|yaotsu.gifu|yoro.gifu|annaka.gunma|chiyoda.gunma|fujioka.gunma|higashiagatsuma.gunma|isesaki.gunma|itakura.gunma|kanna.gunma|kanra.gunma|katashina.gunma|kawaba.gunma|kiryu.gunma|kusatsu.gunma|maebashi.gunma|meiwa.gunma|midori.gunma|minakami.gunma|naganohara.gunma|nakanojo.gunma|nanmoku.gunma|numata.gunma|oizumi.gunma|ora.gunma|ota.gunma|shibukawa.gunma|shimonita.gunma|shinto.gunma|showa.gunma|takasaki.gunma|takayama.gunma|tamamura.gunma|tatebayashi.gunma|tomioka.gunma|tsukiyono.gunma|tsumagoi.gunma|ueno.gunma|yoshioka.gunma|asaminami.hiroshima|daiwa.hiroshima|etajima.hiroshima|fuchu.hiroshima|fukuyama.hiroshima|hatsukaichi.hiroshima|higashihiroshima.hiroshima|hongo.hiroshima|jinsekikogen.hiroshima|kaita.hiroshima|kui.hiroshima|kumano.hiroshima|kure.hiroshima|mihara.hiroshima|miyoshi.hiroshima|naka.hiroshima|onomichi.hiroshima|osakikamijima.hiroshima|otake.hiroshima|saka.hiroshima|sera.hiroshima|seranishi.hiroshima|shinichi.hiroshima|shobara.hiroshima|takehara.hiroshima|abashiri.hokkaido|abira.hokkaido|aibetsu.hokkaido|akabira.hokkaido|akkeshi.hokkaido|asahikawa.hokkaido|ashibetsu.hokkaido|ashoro.hokkaido|assabu.hokkaido|atsuma.hokkaido|bibai.hokkaido|biei.hokkaido|bifuka.hokkaido|bihoro.hokkaido|biratori.hokkaido|chippubetsu.hokkaido|chitose.hokkaido|date.hokkaido|ebetsu.hokkaido|embetsu.hokkaido|eniwa.hokkaido|erimo.hokkaido|esan.hokkaido|esashi.hokkaido|fukagawa.hokkaido|fukushima.hokkaido|furano.hokkaido|furubira.hokkaido|haboro.hokkaido|hakodate.hokkaido|hamatonbetsu.hokkaido|hidaka.hokkaido|higashikagura.hokkaido|higashikawa.hokkaido|hiroo.hokkaido|hokuryu.hokkaido|hokuto.hokkaido|honbetsu.hokkaido|horokanai.hokkaido|horonobe.hokkaido|ikeda.hokkaido|imakane.hokkaido|ishikari.hokkaido|iwamizawa.hokkaido|iwanai.hokkaido|kamifurano.hokkaido|kamikawa.hokkaido|kamishihoro.hokkaido|kamisunagawa.hokkaido|kamoenai.hokkaido|kayabe.hokkaido|kembuchi.hokkaido|kikonai.hokkaido|kimobetsu.hokkaido|kitahiroshima.hokkaido|kitami.hokkaido|kiyosato.hokkaido|koshimizu.hokkaido|kunneppu.hokkaido|kuriyama.hokkaido|kuromatsunai.hokkaido|kushiro.hokkaido|kutchan.hokkaido|kyowa.hokkaido|mashike.hokkaido|matsumae.hokkaido|mikasa.hokkaido|minamifurano.hokkaido|mombetsu.hokkaido|moseushi.hokkaido|mukawa.hokkaido|muroran.hokkaido|naie.hokkaido|nakagawa.hokkaido|nakasatsunai.hokkaido|nakatombetsu.hokkaido|nanae.hokkaido|nanporo.hokkaido|nayoro.hokkaido|nemuro.hokkaido|niikappu.hokkaido|niki.hokkaido|nishiokoppe.hokkaido|noboribetsu.hokkaido|numata.hokkaido|obihiro.hokkaido|obira.hokkaido|oketo.hokkaido|okoppe.hokkaido|otaru.hokkaido|otobe.hokkaido|otofuke.hokkaido|otoineppu.hokkaido|oumu.hokkaido|ozora.hokkaido|pippu.hokkaido|rankoshi.hokkaido|rebun.hokkaido|rikubetsu.hokkaido|rishiri.hokkaido|rishirifuji.hokkaido|saroma.hokkaido|sarufutsu.hokkaido|shakotan.hokkaido|shari.hokkaido|shibecha.hokkaido|shibetsu.hokkaido|shikabe.hokkaido|shikaoi.hokkaido|shimamaki.hokkaido|shimizu.hokkaido|shimokawa.hokkaido|shinshinotsu.hokkaido|shintoku.hokkaido|shiranuka.hokkaido|shiraoi.hokkaido|shiriuchi.hokkaido|sobetsu.hokkaido|sunagawa.hokkaido|taiki.hokkaido|takasu.hokkaido|takikawa.hokkaido|takinoue.hokkaido|teshikaga.hokkaido|tobetsu.hokkaido|tohma.hokkaido|tomakomai.hokkaido|tomari.hokkaido|toya.hokkaido|toyako.hokkaido|toyotomi.hokkaido|toyoura.hokkaido|tsubetsu.hokkaido|tsukigata.hokkaido|urakawa.hokkaido|urausu.hokkaido|uryu.hokkaido|utashinai.hokkaido|wakkanai.hokkaido|wassamu.hokkaido|yakumo.hokkaido|yoichi.hokkaido|aioi.hyogo|akashi.hyogo|ako.hyogo|amagasaki.hyogo|aogaki.hyogo|asago.hyogo|ashiya.hyogo|awaji.hyogo|fukusaki.hyogo|goshiki.hyogo|harima.hyogo|himeji.hyogo|ichikawa.hyogo|inagawa.hyogo|itami.hyogo|kakogawa.hyogo|kamigori.hyogo|kamikawa.hyogo|kasai.hyogo|kasuga.hyogo|kawanishi.hyogo|miki.hyogo|minamiawaji.hyogo|nishinomiya.hyogo|nishiwaki.hyogo|ono.hyogo|sanda.hyogo|sannan.hyogo|sasayama.hyogo|sayo.hyogo|shingu.hyogo|shinonsen.hyogo|shiso.hyogo|sumoto.hyogo|taishi.hyogo|taka.hyogo|takarazuka.hyogo|takasago.hyogo|takino.hyogo|tamba.hyogo|tatsuno.hyogo|toyooka.hyogo|yabu.hyogo|yashiro.hyogo|yoka.hyogo|yokawa.hyogo|ami.ibaraki|asahi.ibaraki|bando.ibaraki|chikusei.ibaraki|daigo.ibaraki|fujishiro.ibaraki|hitachi.ibaraki|hitachinaka.ibaraki|hitachiomiya.ibaraki|hitachiota.ibaraki|ibaraki.ibaraki|ina.ibaraki|inashiki.ibaraki|itako.ibaraki|iwama.ibaraki|joso.ibaraki|kamisu.ibaraki|kasama.ibaraki|kashima.ibaraki|kasumigaura.ibaraki|koga.ibaraki|miho.ibaraki|mito.ibaraki|moriya.ibaraki|naka.ibaraki|namegata.ibaraki|oarai.ibaraki|ogawa.ibaraki|omitama.ibaraki|ryugasaki.ibaraki|sakai.ibaraki|sakuragawa.ibaraki|shimodate.ibaraki|shimotsuma.ibaraki|shirosato.ibaraki|sowa.ibaraki|suifu.ibaraki|takahagi.ibaraki|tamatsukuri.ibaraki|tokai.ibaraki|tomobe.ibaraki|tone.ibaraki|toride.ibaraki|tsuchiura.ibaraki|tsukuba.ibaraki|uchihara.ibaraki|ushiku.ibaraki|yachiyo.ibaraki|yamagata.ibaraki|yawara.ibaraki|yuki.ibaraki|anamizu.ishikawa|hakui.ishikawa|hakusan.ishikawa|kaga.ishikawa|kahoku.ishikawa|kanazawa.ishikawa|kawakita.ishikawa|komatsu.ishikawa|nakanoto.ishikawa|nanao.ishikawa|nomi.ishikawa|nonoichi.ishikawa|noto.ishikawa|shika.ishikawa|suzu.ishikawa|tsubata.ishikawa|tsurugi.ishikawa|uchinada.ishikawa|wajima.ishikawa|fudai.iwate|fujisawa.iwate|hanamaki.iwate|hiraizumi.iwate|hirono.iwate|ichinohe.iwate|ichinoseki.iwate|iwaizumi.iwate|iwate.iwate|joboji.iwate|kamaishi.iwate|kanegasaki.iwate|karumai.iwate|kawai.iwate|kitakami.iwate|kuji.iwate|kunohe.iwate|kuzumaki.iwate|miyako.iwate|mizusawa.iwate|morioka.iwate|ninohe.iwate|noda.iwate|ofunato.iwate|oshu.iwate|otsuchi.iwate|rikuzentakata.iwate|shiwa.iwate|shizukuishi.iwate|sumita.iwate|tanohata.iwate|tono.iwate|yahaba.iwate|yamada.iwate|ayagawa.kagawa|higashikagawa.kagawa|kanonji.kagawa|kotohira.kagawa|manno.kagawa|marugame.kagawa|mitoyo.kagawa|naoshima.kagawa|sanuki.kagawa|tadotsu.kagawa|takamatsu.kagawa|tonosho.kagawa|uchinomi.kagawa|utazu.kagawa|zentsuji.kagawa|akune.kagoshima|amami.kagoshima|hioki.kagoshima|isa.kagoshima|isen.kagoshima|izumi.kagoshima|kagoshima.kagoshima|kanoya.kagoshima|kawanabe.kagoshima|kinko.kagoshima|kouyama.kagoshima|makurazaki.kagoshima|matsumoto.kagoshima|minamitane.kagoshima|nakatane.kagoshima|nishinoomote.kagoshima|satsumasendai.kagoshima|soo.kagoshima|tarumizu.kagoshima|yusui.kagoshima|aikawa.kanagawa|atsugi.kanagawa|ayase.kanagawa|chigasaki.kanagawa|ebina.kanagawa|fujisawa.kanagawa|hadano.kanagawa|hakone.kanagawa|hiratsuka.kanagawa|isehara.kanagawa|kaisei.kanagawa|kamakura.kanagawa|kiyokawa.kanagawa|matsuda.kanagawa|minamiashigara.kanagawa|miura.kanagawa|nakai.kanagawa|ninomiya.kanagawa|odawara.kanagawa|oi.kanagawa|oiso.kanagawa|sagamihara.kanagawa|samukawa.kanagawa|tsukui.kanagawa|yamakita.kanagawa|yamato.kanagawa|yokosuka.kanagawa|yugawara.kanagawa|zama.kanagawa|zushi.kanagawa|aki.kochi|geisei.kochi|hidaka.kochi|higashitsuno.kochi|ino.kochi|kagami.kochi|kami.kochi|kitagawa.kochi|kochi.kochi|mihara.kochi|motoyama.kochi|muroto.kochi|nahari.kochi|nakamura.kochi|nankoku.kochi|nishitosa.kochi|niyodogawa.kochi|ochi.kochi|okawa.kochi|otoyo.kochi|otsuki.kochi|sakawa.kochi|sukumo.kochi|susaki.kochi|tosa.kochi|tosashimizu.kochi|toyo.kochi|tsuno.kochi|umaji.kochi|yasuda.kochi|yusuhara.kochi|amakusa.kumamoto|arao.kumamoto|aso.kumamoto|choyo.kumamoto|gyokuto.kumamoto|hitoyoshi.kumamoto|kamiamakusa.kumamoto|kashima.kumamoto|kikuchi.kumamoto|kosa.kumamoto|kumamoto.kumamoto|mashiki.kumamoto|mifune.kumamoto|minamata.kumamoto|minamioguni.kumamoto|nagasu.kumamoto|nishihara.kumamoto|oguni.kumamoto|ozu.kumamoto|sumoto.kumamoto|takamori.kumamoto|uki.kumamoto|uto.kumamoto|yamaga.kumamoto|yamato.kumamoto|yatsushiro.kumamoto|ayabe.kyoto|fukuchiyama.kyoto|higashiyama.kyoto|ide.kyoto|ine.kyoto|joyo.kyoto|kameoka.kyoto|kamo.kyoto|kita.kyoto|kizu.kyoto|kumiyama.kyoto|kyotamba.kyoto|kyotanabe.kyoto|kyotango.kyoto|maizuru.kyoto|minami.kyoto|minamiyamashiro.kyoto|miyazu.kyoto|muko.kyoto|nagaokakyo.kyoto|nakagyo.kyoto|nantan.kyoto|oyamazaki.kyoto|sakyo.kyoto|seika.kyoto|tanabe.kyoto|uji.kyoto|ujitawara.kyoto|wazuka.kyoto|yamashina.kyoto|yawata.kyoto|asahi.mie|inabe.mie|ise.mie|kameyama.mie|kawagoe.mie|kiho.mie|kisosaki.mie|kiwa.mie|komono.mie|kumano.mie|kuwana.mie|matsusaka.mie|meiwa.mie|mihama.mie|minamiise.mie|misugi.mie|miyama.mie|nabari.mie|shima.mie|suzuka.mie|tado.mie|taiki.mie|taki.mie|tamaki.mie|toba.mie|tsu.mie|udono.mie|ureshino.mie|watarai.mie|yokkaichi.mie|furukawa.miyagi|higashimatsushima.miyagi|ishinomaki.miyagi|iwanuma.miyagi|kakuda.miyagi|kami.miyagi|kawasaki.miyagi|kesennuma.miyagi|marumori.miyagi|matsushima.miyagi|minamisanriku.miyagi|misato.miyagi|murata.miyagi|natori.miyagi|ogawara.miyagi|ohira.miyagi|onagawa.miyagi|osaki.miyagi|rifu.miyagi|semine.miyagi|shibata.miyagi|shichikashuku.miyagi|shikama.miyagi|shiogama.miyagi|shiroishi.miyagi|tagajo.miyagi|taiwa.miyagi|tome.miyagi|tomiya.miyagi|wakuya.miyagi|watari.miyagi|yamamoto.miyagi|zao.miyagi|aya.miyazaki|ebino.miyazaki|gokase.miyazaki|hyuga.miyazaki|kadogawa.miyazaki|kawaminami.miyazaki|kijo.miyazaki|kitagawa.miyazaki|kitakata.miyazaki|kitaura.miyazaki|kobayashi.miyazaki|kunitomi.miyazaki|kushima.miyazaki|mimata.miyazaki|miyakonojo.miyazaki|miyazaki.miyazaki|morotsuka.miyazaki|nichinan.miyazaki|nishimera.miyazaki|nobeoka.miyazaki|saito.miyazaki|shiiba.miyazaki|shintomi.miyazaki|takaharu.miyazaki|takanabe.miyazaki|takazaki.miyazaki|tsuno.miyazaki|achi.nagano|agematsu.nagano|anan.nagano|aoki.nagano|asahi.nagano|azumino.nagano|chikuhoku.nagano|chikuma.nagano|chino.nagano|fujimi.nagano|hakuba.nagano|hara.nagano|hiraya.nagano|iida.nagano|iijima.nagano|iiyama.nagano|iizuna.nagano|ikeda.nagano|ikusaka.nagano|ina.nagano|karuizawa.nagano|kawakami.nagano|kiso.nagano|kisofukushima.nagano|kitaaiki.nagano|komagane.nagano|komoro.nagano|matsukawa.nagano|matsumoto.nagano|miasa.nagano|minamiaiki.nagano|minamimaki.nagano|minamiminowa.nagano|minowa.nagano|miyada.nagano|miyota.nagano|mochizuki.nagano|nagano.nagano|nagawa.nagano|nagiso.nagano|nakagawa.nagano|nakano.nagano|nozawaonsen.nagano|obuse.nagano|ogawa.nagano|okaya.nagano|omachi.nagano|omi.nagano|ookuwa.nagano|ooshika.nagano|otaki.nagano|otari.nagano|sakae.nagano|sakaki.nagano|saku.nagano|sakuho.nagano|shimosuwa.nagano|shinanomachi.nagano|shiojiri.nagano|suwa.nagano|suzaka.nagano|takagi.nagano|takamori.nagano|takayama.nagano|tateshina.nagano|tatsuno.nagano|togakushi.nagano|togura.nagano|tomi.nagano|ueda.nagano|wada.nagano|yamagata.nagano|yamanouchi.nagano|yasaka.nagano|yasuoka.nagano|chijiwa.nagasaki|futsu.nagasaki|goto.nagasaki|hasami.nagasaki|hirado.nagasaki|iki.nagasaki|isahaya.nagasaki|kawatana.nagasaki|kuchinotsu.nagasaki|matsuura.nagasaki|nagasaki.nagasaki|obama.nagasaki|omura.nagasaki|oseto.nagasaki|saikai.nagasaki|sasebo.nagasaki|seihi.nagasaki|shimabara.nagasaki|shinkamigoto.nagasaki|togitsu.nagasaki|tsushima.nagasaki|unzen.nagasaki|ando.nara|gose.nara|heguri.nara|higashiyoshino.nara|ikaruga.nara|ikoma.nara|kamikitayama.nara|kanmaki.nara|kashiba.nara|kashihara.nara|katsuragi.nara|kawai.nara|kawakami.nara|kawanishi.nara|koryo.nara|kurotaki.nara|mitsue.nara|miyake.nara|nara.nara|nosegawa.nara|oji.nara|ouda.nara|oyodo.nara|sakurai.nara|sango.nara|shimoichi.nara|shimokitayama.nara|shinjo.nara|soni.nara|takatori.nara|tawaramoto.nara|tenkawa.nara|tenri.nara|uda.nara|yamatokoriyama.nara|yamatotakada.nara|yamazoe.nara|yoshino.nara|aga.niigata|agano.niigata|gosen.niigata|itoigawa.niigata|izumozaki.niigata|joetsu.niigata|kamo.niigata|kariwa.niigata|kashiwazaki.niigata|minamiuonuma.niigata|mitsuke.niigata|muika.niigata|murakami.niigata|myoko.niigata|nagaoka.niigata|niigata.niigata|ojiya.niigata|omi.niigata|sado.niigata|sanjo.niigata|seiro.niigata|seirou.niigata|sekikawa.niigata|shibata.niigata|tagami.niigata|tainai.niigata|tochio.niigata|tokamachi.niigata|tsubame.niigata|tsunan.niigata|uonuma.niigata|yahiko.niigata|yoita.niigata|yuzawa.niigata|beppu.oita|bungoono.oita|bungotakada.oita|hasama.oita|hiji.oita|himeshima.oita|hita.oita|kamitsue.oita|kokonoe.oita|kuju.oita|kunisaki.oita|kusu.oita|oita.oita|saiki.oita|taketa.oita|tsukumi.oita|usa.oita|usuki.oita|yufu.oita|akaiwa.okayama|asakuchi.okayama|bizen.okayama|hayashima.okayama|ibara.okayama|kagamino.okayama|kasaoka.okayama|kibichuo.okayama|kumenan.okayama|kurashiki.okayama|maniwa.okayama|misaki.okayama|nagi.okayama|niimi.okayama|nishiawakura.okayama|okayama.okayama|satosho.okayama|setouchi.okayama|shinjo.okayama|shoo.okayama|soja.okayama|takahashi.okayama|tamano.okayama|tsuyama.okayama|wake.okayama|yakage.okayama|aguni.okinawa|ginowan.okinawa|ginoza.okinawa|gushikami.okinawa|haebaru.okinawa|higashi.okinawa|hirara.okinawa|iheya.okinawa|ishigaki.okinawa|ishikawa.okinawa|itoman.okinawa|izena.okinawa|kadena.okinawa|kin.okinawa|kitadaito.okinawa|kitanakagusuku.okinawa|kumejima.okinawa|kunigami.okinawa|minamidaito.okinawa|motobu.okinawa|nago.okinawa|naha.okinawa|nakagusuku.okinawa|nakijin.okinawa|nanjo.okinawa|nishihara.okinawa|ogimi.okinawa|okinawa.okinawa|onna.okinawa|shimoji.okinawa|taketomi.okinawa|tarama.okinawa|tokashiki.okinawa|tomigusuku.okinawa|tonaki.okinawa|urasoe.okinawa|uruma.okinawa|yaese.okinawa|yomitan.okinawa|yonabaru.okinawa|yonaguni.okinawa|zamami.okinawa|abeno.osaka|chihayaakasaka.osaka|chuo.osaka|daito.osaka|fujiidera.osaka|habikino.osaka|hannan.osaka|higashiosaka.osaka|higashisumiyoshi.osaka|higashiyodogawa.osaka|hirakata.osaka|ibaraki.osaka|ikeda.osaka|izumi.osaka|izumiotsu.osaka|izumisano.osaka|kadoma.osaka|kaizuka.osaka|kanan.osaka|kashiwara.osaka|katano.osaka|kawachinagano.osaka|kishiwada.osaka|kita.osaka|kumatori.osaka|matsubara.osaka|minato.osaka|minoh.osaka|misaki.osaka|moriguchi.osaka|neyagawa.osaka|nishi.osaka|nose.osaka|osakasayama.osaka|sakai.osaka|sayama.osaka|sennan.osaka|settsu.osaka|shijonawate.osaka|shimamoto.osaka|suita.osaka|tadaoka.osaka|taishi.osaka|tajiri.osaka|takaishi.osaka|takatsuki.osaka|tondabayashi.osaka|toyonaka.osaka|toyono.osaka|yao.osaka|ariake.saga|arita.saga|fukudomi.saga|genkai.saga|hamatama.saga|hizen.saga|imari.saga|kamimine.saga|kanzaki.saga|karatsu.saga|kashima.saga|kitagata.saga|kitahata.saga|kiyama.saga|kouhoku.saga|kyuragi.saga|nishiarita.saga|ogi.saga|omachi.saga|ouchi.saga|saga.saga|shiroishi.saga|taku.saga|tara.saga|tosu.saga|yoshinogari.saga|arakawa.saitama|asaka.saitama|chichibu.saitama|fujimi.saitama|fujimino.saitama|fukaya.saitama|hanno.saitama|hanyu.saitama|hasuda.saitama|hatogaya.saitama|hatoyama.saitama|hidaka.saitama|higashichichibu.saitama|higashimatsuyama.saitama|honjo.saitama|ina.saitama|iruma.saitama|iwatsuki.saitama|kamiizumi.saitama|kamikawa.saitama|kamisato.saitama|kasukabe.saitama|kawagoe.saitama|kawaguchi.saitama|kawajima.saitama|kazo.saitama|kitamoto.saitama|koshigaya.saitama|kounosu.saitama|kuki.saitama|kumagaya.saitama|matsubushi.saitama|minano.saitama|misato.saitama|miyashiro.saitama|miyoshi.saitama|moroyama.saitama|nagatoro.saitama|namegawa.saitama|niiza.saitama|ogano.saitama|ogawa.saitama|ogose.saitama|okegawa.saitama|omiya.saitama|otaki.saitama|ranzan.saitama|ryokami.saitama|saitama.saitama|sakado.saitama|satte.saitama|sayama.saitama|shiki.saitama|shiraoka.saitama|soka.saitama|sugito.saitama|toda.saitama|tokigawa.saitama|tokorozawa.saitama|tsurugashima.saitama|urawa.saitama|warabi.saitama|yashio.saitama|yokoze.saitama|yono.saitama|yorii.saitama|yoshida.saitama|yoshikawa.saitama|yoshimi.saitama|aisho.shiga|gamo.shiga|higashiomi.shiga|hikone.shiga|koka.shiga|konan.shiga|kosei.shiga|koto.shiga|kusatsu.shiga|maibara.shiga|moriyama.shiga|nagahama.shiga|nishiazai.shiga|notogawa.shiga|omihachiman.shiga|otsu.shiga|ritto.shiga|ryuoh.shiga|takashima.shiga|takatsuki.shiga|torahime.shiga|toyosato.shiga|yasu.shiga|akagi.shimane|ama.shimane|gotsu.shimane|hamada.shimane|higashiizumo.shimane|hikawa.shimane|hikimi.shimane|izumo.shimane|kakinoki.shimane|masuda.shimane|matsue.shimane|misato.shimane|nishinoshima.shimane|ohda.shimane|okinoshima.shimane|okuizumo.shimane|shimane.shimane|tamayu.shimane|tsuwano.shimane|unnan.shimane|yakumo.shimane|yasugi.shimane|yatsuka.shimane|arai.shizuoka|atami.shizuoka|fuji.shizuoka|fujieda.shizuoka|fujikawa.shizuoka|fujinomiya.shizuoka|fukuroi.shizuoka|gotemba.shizuoka|haibara.shizuoka|hamamatsu.shizuoka|higashiizu.shizuoka|ito.shizuoka|iwata.shizuoka|izu.shizuoka|izunokuni.shizuoka|kakegawa.shizuoka|kannami.shizuoka|kawanehon.shizuoka|kawazu.shizuoka|kikugawa.shizuoka|kosai.shizuoka|makinohara.shizuoka|matsuzaki.shizuoka|minamiizu.shizuoka|mishima.shizuoka|morimachi.shizuoka|nishiizu.shizuoka|numazu.shizuoka|omaezaki.shizuoka|shimada.shizuoka|shimizu.shizuoka|shimoda.shizuoka|shizuoka.shizuoka|susono.shizuoka|yaizu.shizuoka|yoshida.shizuoka|ashikaga.tochigi|bato.tochigi|haga.tochigi|ichikai.tochigi|iwafune.tochigi|kaminokawa.tochigi|kanuma.tochigi|karasuyama.tochigi|kuroiso.tochigi|mashiko.tochigi|mibu.tochigi|moka.tochigi|motegi.tochigi|nasu.tochigi|nasushiobara.tochigi|nikko.tochigi|nishikata.tochigi|nogi.tochigi|ohira.tochigi|ohtawara.tochigi|oyama.tochigi|sakura.tochigi|sano.tochigi|shimotsuke.tochigi|shioya.tochigi|takanezawa.tochigi|tochigi.tochigi|tsuga.tochigi|ujiie.tochigi|utsunomiya.tochigi|yaita.tochigi|aizumi.tokushima|anan.tokushima|ichiba.tokushima|itano.tokushima|kainan.tokushima|komatsushima.tokushima|matsushige.tokushima|mima.tokushima|minami.tokushima|miyoshi.tokushima|mugi.tokushima|nakagawa.tokushima|naruto.tokushima|sanagochi.tokushima|shishikui.tokushima|tokushima.tokushima|wajiki.tokushima|adachi.tokyo|akiruno.tokyo|akishima.tokyo|aogashima.tokyo|arakawa.tokyo|bunkyo.tokyo|chiyoda.tokyo|chofu.tokyo|chuo.tokyo|edogawa.tokyo|fuchu.tokyo|fussa.tokyo|hachijo.tokyo|hachioji.tokyo|hamura.tokyo|higashikurume.tokyo|higashimurayama.tokyo|higashiyamato.tokyo|hino.tokyo|hinode.tokyo|hinohara.tokyo|inagi.tokyo|itabashi.tokyo|katsushika.tokyo|kita.tokyo|kiyose.tokyo|kodaira.tokyo|koganei.tokyo|kokubunji.tokyo|komae.tokyo|koto.tokyo|kouzushima.tokyo|kunitachi.tokyo|machida.tokyo|meguro.tokyo|minato.tokyo|mitaka.tokyo|mizuho.tokyo|musashimurayama.tokyo|musashino.tokyo|nakano.tokyo|nerima.tokyo|ogasawara.tokyo|okutama.tokyo|ome.tokyo|oshima.tokyo|ota.tokyo|setagaya.tokyo|shibuya.tokyo|shinagawa.tokyo|shinjuku.tokyo|suginami.tokyo|sumida.tokyo|tachikawa.tokyo|taito.tokyo|tama.tokyo|toshima.tokyo|chizu.tottori|hino.tottori|kawahara.tottori|koge.tottori|kotoura.tottori|misasa.tottori|nanbu.tottori|nichinan.tottori|sakaiminato.tottori|tottori.tottori|wakasa.tottori|yazu.tottori|yonago.tottori|asahi.toyama|fuchu.toyama|fukumitsu.toyama|funahashi.toyama|himi.toyama|imizu.toyama|inami.toyama|johana.toyama|kamiichi.toyama|kurobe.toyama|nakaniikawa.toyama|namerikawa.toyama|nanto.toyama|nyuzen.toyama|oyabe.toyama|taira.toyama|takaoka.toyama|tateyama.toyama|toga.toyama|tonami.toyama|toyama.toyama|unazuki.toyama|uozu.toyama|yamada.toyama|arida.wakayama|aridagawa.wakayama|gobo.wakayama|hashimoto.wakayama|hidaka.wakayama|hirogawa.wakayama|inami.wakayama|iwade.wakayama|kainan.wakayama|kamitonda.wakayama|katsuragi.wakayama|kimino.wakayama|kinokawa.wakayama|kitayama.wakayama|koya.wakayama|koza.wakayama|kozagawa.wakayama|kudoyama.wakayama|kushimoto.wakayama|mihama.wakayama|misato.wakayama|nachikatsuura.wakayama|shingu.wakayama|shirahama.wakayama|taiji.wakayama|tanabe.wakayama|wakayama.wakayama|yuasa.wakayama|yura.wakayama|asahi.yamagata|funagata.yamagata|higashine.yamagata|iide.yamagata|kahoku.yamagata|kaminoyama.yamagata|kaneyama.yamagata|kawanishi.yamagata|mamurogawa.yamagata|mikawa.yamagata|murayama.yamagata|nagai.yamagata|nakayama.yamagata|nanyo.yamagata|nishikawa.yamagata|obanazawa.yamagata|oe.yamagata|oguni.yamagata|ohkura.yamagata|oishida.yamagata|sagae.yamagata|sakata.yamagata|sakegawa.yamagata|shinjo.yamagata|shirataka.yamagata|shonai.yamagata|takahata.yamagata|tendo.yamagata|tozawa.yamagata|tsuruoka.yamagata|yamagata.yamagata|yamanobe.yamagata|yonezawa.yamagata|yuza.yamagata|abu.yamaguchi|hagi.yamaguchi|hikari.yamaguchi|hofu.yamaguchi|iwakuni.yamaguchi|kudamatsu.yamaguchi|mitou.yamaguchi|nagato.yamaguchi|oshima.yamaguchi|shimonoseki.yamaguchi|shunan.yamaguchi|tabuse.yamaguchi|tokuyama.yamaguchi|toyota.yamaguchi|ube.yamaguchi|yuu.yamaguchi|chuo.yamanashi|doshi.yamanashi|fuefuki.yamanashi|fujikawa.yamanashi|fujikawaguchiko.yamanashi|fujiyoshida.yamanashi|hayakawa.yamanashi|hokuto.yamanashi|ichikawamisato.yamanashi|kai.yamanashi|kofu.yamanashi|koshu.yamanashi|kosuge.yamanashi|minami-alps.yamanashi|minobu.yamanashi|nakamichi.yamanashi|nanbu.yamanashi|narusawa.yamanashi|nirasaki.yamanashi|nishikatsura.yamanashi|oshino.yamanashi|otsuki.yamanashi|showa.yamanashi|tabayama.yamanashi|tsuru.yamanashi|uenohara.yamanashi|yamanakako.yamanashi|yamanashi.yamanashi|blogspot",
		"ke": "*|blogspot.co",
		"kg": "org|net|com|edu|gov|mil",
		"kh": "*",
		"ki": "edu|biz|net|org|gov|info|com",
		"km": "org|nom|gov|prd|tm|edu|mil|ass|com|coop|asso|presse|medecin|notaires|pharmaciens|veterinaire|gouv",
		"kn": "net|org|edu|gov",
		"kp": "com|edu|gov|org|rep|tra",
		"kr": "ac|co|es|go|hs|kg|mil|ms|ne|or|pe|re|sc|busan|chungbuk|chungnam|daegu|daejeon|gangwon|gwangju|gyeongbuk|gyeonggi|gyeongnam|incheon|jeju|jeonbuk|jeonnam|seoul|ulsan|blogspot",
		"kw": "*",
		"ky": "edu|gov|com|org|net",
		"kz": "org|edu|net|gov|mil|com",
		"la": "int|net|info|edu|gov|per|com|org|c",
		"lb": "com|edu|gov|net|org",
		"lc": "com|net|co|org|edu|gov",
		"li": "blogspot",
		"lk": "gov|sch|net|int|com|org|edu|ngo|soc|web|ltd|assn|grp|hotel|ac",
		"lr": "com|edu|gov|org|net",
		"ls": "co|org",
		"lt": "gov|blogspot",
		"lu": "blogspot",
		"lv": "com|edu|gov|org|mil|id|net|asn|conf",
		"ly": "com|net|gov|plc|edu|sch|med|org|id",
		"ma": "co|net|gov|org|ac|press",
		"mc": "tm|asso",
		"md": "blogspot",
		"me": "co|net|org|edu|ac|gov|its|priv",
		"mg": "org|nom|gov|prd|tm|edu|mil|com|co",
		"mh": "",
		"mil": "",
		"mk": "com|org|net|edu|gov|inf|name|blogspot",
		"ml": "com|edu|gouv|gov|net|org|presse",
		"mm": "*",
		"mn": "gov|edu|org|nyc",
		"mo": "com|net|org|edu|gov",
		"mobi": "",
		"mp": "",
		"mq": "",
		"mr": "gov|blogspot",
		"ms": "com|edu|gov|net|org",
		"mt": "com|edu|net|org|blogspot.com",
		"mu": "com|net|org|gov|ac|co|or",
		"museum": "academy|agriculture|air|airguard|alabama|alaska|amber|ambulance|american|americana|americanantiques|americanart|amsterdam|and|annefrank|anthro|anthropology|antiques|aquarium|arboretum|archaeological|archaeology|architecture|art|artanddesign|artcenter|artdeco|arteducation|artgallery|arts|artsandcrafts|asmatart|assassination|assisi|association|astronomy|atlanta|austin|australia|automotive|aviation|axis|badajoz|baghdad|bahn|bale|baltimore|barcelona|baseball|basel|baths|bauern|beauxarts|beeldengeluid|bellevue|bergbau|berkeley|berlin|bern|bible|bilbao|bill|birdart|birthplace|bonn|boston|botanical|botanicalgarden|botanicgarden|botany|brandywinevalley|brasil|bristol|british|britishcolumbia|broadcast|brunel|brussel|brussels|bruxelles|building|burghof|bus|bushey|cadaques|california|cambridge|can|canada|capebreton|carrier|cartoonart|casadelamoneda|castle|castres|celtic|center|chattanooga|cheltenham|chesapeakebay|chicago|children|childrens|childrensgarden|chiropractic|chocolate|christiansburg|cincinnati|cinema|circus|civilisation|civilization|civilwar|clinton|clock|coal|coastaldefence|cody|coldwar|collection|colonialwilliamsburg|coloradoplateau|columbia|columbus|communication|communications|community|computer|computerhistory|xn--comunicaes-v6a2o|contemporary|contemporaryart|convent|copenhagen|corporation|xn--correios-e-telecomunicaes-ghc29a|corvette|costume|countryestate|county|crafts|cranbrook|creation|cultural|culturalcenter|culture|cyber|cymru|dali|dallas|database|ddr|decorativearts|delaware|delmenhorst|denmark|depot|design|detroit|dinosaur|discovery|dolls|donostia|durham|eastafrica|eastcoast|education|educational|egyptian|eisenbahn|elburg|elvendrell|embroidery|encyclopedic|england|entomology|environment|environmentalconservation|epilepsy|essex|estate|ethnology|exeter|exhibition|family|farm|farmequipment|farmers|farmstead|field|figueres|filatelia|film|fineart|finearts|finland|flanders|florida|force|fortmissoula|fortworth|foundation|francaise|frankfurt|franziskaner|freemasonry|freiburg|fribourg|frog|fundacio|furniture|gallery|garden|gateway|geelvinck|gemological|geology|georgia|giessen|glas|glass|gorge|grandrapids|graz|guernsey|halloffame|hamburg|handson|harvestcelebration|hawaii|health|heimatunduhren|hellas|helsinki|hembygdsforbund|heritage|histoire|historical|historicalsociety|historichouses|historisch|historisches|history|historyofscience|horology|house|humanities|illustration|imageandsound|indian|indiana|indianapolis|indianmarket|intelligence|interactive|iraq|iron|isleofman|jamison|jefferson|jerusalem|jewelry|jewish|jewishart|jfk|journalism|judaica|judygarland|juedisches|juif|karate|karikatur|kids|koebenhavn|koeln|kunst|kunstsammlung|kunstunddesign|labor|labour|lajolla|lancashire|landes|lans|xn--lns-qla|larsson|lewismiller|lincoln|linz|living|livinghistory|localhistory|london|losangeles|louvre|loyalist|lucerne|luxembourg|luzern|mad|madrid|mallorca|manchester|mansion|mansions|manx|marburg|maritime|maritimo|maryland|marylhurst|media|medical|medizinhistorisches|meeres|memorial|mesaverde|michigan|midatlantic|military|mill|miners|mining|minnesota|missile|missoula|modern|moma|money|monmouth|monticello|montreal|moscow|motorcycle|muenchen|muenster|mulhouse|muncie|museet|museumcenter|museumvereniging|music|national|nationalfirearms|nationalheritage|nativeamerican|naturalhistory|naturalhistorymuseum|naturalsciences|nature|naturhistorisches|natuurwetenschappen|naumburg|naval|nebraska|neues|newhampshire|newjersey|newmexico|newport|newspaper|newyork|niepce|norfolk|north|nrw|nuernberg|nuremberg|nyc|nyny|oceanographic|oceanographique|omaha|online|ontario|openair|oregon|oregontrail|otago|oxford|pacific|paderborn|palace|paleo|palmsprings|panama|paris|pasadena|pharmacy|philadelphia|philadelphiaarea|philately|phoenix|photography|pilots|pittsburgh|planetarium|plantation|plants|plaza|portal|portland|portlligat|posts-and-telecommunications|preservation|presidio|press|project|public|pubol|quebec|railroad|railway|research|resistance|riodejaneiro|rochester|rockart|roma|russia|saintlouis|salem|salvadordali|salzburg|sandiego|sanfrancisco|santabarbara|santacruz|santafe|saskatchewan|satx|savannahga|schlesisches|schoenbrunn|schokoladen|school|schweiz|science|scienceandhistory|scienceandindustry|sciencecenter|sciencecenters|science-fiction|sciencehistory|sciences|sciencesnaturelles|scotland|seaport|settlement|settlers|shell|sherbrooke|sibenik|silk|ski|skole|society|sologne|soundandvision|southcarolina|southwest|space|spy|square|stadt|stalbans|starnberg|state|stateofdelaware|station|steam|steiermark|stjohn|stockholm|stpetersburg|stuttgart|suisse|surgeonshall|surrey|svizzera|sweden|sydney|tank|tcm|technology|telekommunikation|television|texas|textile|theater|time|timekeeping|topology|torino|touch|town|transport|tree|trolley|trust|trustee|uhren|ulm|undersea|university|usa|usantiques|usarts|uscountryestate|usculture|usdecorativearts|usgarden|ushistory|ushuaia|uslivinghistory|utah|uvic|valley|vantaa|versailles|viking|village|virginia|virtual|virtuel|vlaanderen|volkenkunde|wales|wallonie|war|washingtondc|watchandclock|watch-and-clock|western|westfalen|whaling|wildlife|williamsburg|windmill|workshop|york|yorkshire|yosemite|youth|zoological|zoology|xn--9dbhblg6di|xn--h1aegh",
		"mv": "aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro",
		"mw": "ac|biz|co|com|coop|edu|gov|int|museum|net|org",
		"mx": "com|org|gob|edu|net|blogspot",
		"my": "com|net|org|gov|edu|mil|name|blogspot",
		"mz": "*|!teledata",
		"na": "info|pro|name|school|or|dr|us|mx|ca|in|cc|tv|ws|mobi|co|com|org",
		"name": "forgot.her|forgot.his",
		"nc": "asso",
		"ne": "",
		"net": "cloudfront|gb|hu|jp|se|uk|in|cdn77-ssl|r.cdn77|at-band-camp|blogdns|broke-it|buyshouses|dnsalias|dnsdojo|does-it|dontexist|dynalias|dynathome|endofinternet|from-az|from-co|from-la|from-ny|gets-it|ham-radio-op|homeftp|homeip|homelinux|homeunix|in-the-band|is-a-chef|is-a-geek|isa-geek|kicks-ass|office-on-the|podzone|scrapper-site|selfip|sells-it|servebbs|serveftp|thruhere|webhop|a.ssl.fastly|b.ssl.fastly|global.ssl.fastly|a.prod.fastly|global.prod.fastly|azurewebsites|azure-mobile|cloudapp|za",
		"nf": "com|net|per|rec|web|arts|firm|info|other|store",
		"ng": "com|edu|name|net|org|sch|gov|mil|mobi|blogspot.com",
		"ni": "*",
		"nl": "bv|co|blogspot",
		"no": "fhs|vgs|fylkesbibl|folkebibl|museum|idrett|priv|mil|stat|dep|kommune|herad|aa|ah|bu|fm|hl|hm|jan-mayen|mr|nl|nt|of|ol|oslo|rl|sf|st|svalbard|tm|tr|va|vf|gs.aa|gs.ah|gs.bu|gs.fm|gs.hl|gs.hm|gs.jan-mayen|gs.mr|gs.nl|gs.nt|gs.of|gs.ol|gs.oslo|gs.rl|gs.sf|gs.st|gs.svalbard|gs.tm|gs.tr|gs.va|gs.vf|akrehamn|xn--krehamn-dxa|algard|xn--lgrd-poac|arna|brumunddal|bryne|bronnoysund|xn--brnnysund-m8ac|drobak|xn--drbak-wua|egersund|fetsund|floro|xn--flor-jra|fredrikstad|hokksund|honefoss|xn--hnefoss-q1a|jessheim|jorpeland|xn--jrpeland-54a|kirkenes|kopervik|krokstadelva|langevag|xn--langevg-jxa|leirvik|mjondalen|xn--mjndalen-64a|mo-i-rana|mosjoen|xn--mosjen-eya|nesoddtangen|orkanger|osoyro|xn--osyro-wua|raholt|xn--rholt-mra|sandnessjoen|xn--sandnessjen-ogb|skedsmokorset|slattum|spjelkavik|stathelle|stavern|stjordalshalsen|xn--stjrdalshalsen-sqb|tananger|tranby|vossevangen|afjord|xn--fjord-lra|agdenes|al|xn--l-1fa|alesund|xn--lesund-hua|alstahaug|alta|xn--lt-liac|alaheadju|xn--laheadju-7ya|alvdal|amli|xn--mli-tla|amot|xn--mot-tla|andebu|andoy|xn--andy-ira|andasuolo|ardal|xn--rdal-poa|aremark|arendal|xn--s-1fa|aseral|xn--seral-lra|asker|askim|askvoll|askoy|xn--asky-ira|asnes|xn--snes-poa|audnedaln|aukra|aure|aurland|aurskog-holand|xn--aurskog-hland-jnb|austevoll|austrheim|averoy|xn--avery-yua|balestrand|ballangen|balat|xn--blt-elab|balsfjord|bahccavuotna|xn--bhccavuotna-k7a|bamble|bardu|beardu|beiarn|bajddar|xn--bjddar-pta|baidar|xn--bidr-5nac|berg|bergen|berlevag|xn--berlevg-jxa|bearalvahki|xn--bearalvhki-y4a|bindal|birkenes|bjarkoy|xn--bjarky-fya|bjerkreim|bjugn|bodo|xn--bod-2na|badaddja|xn--bdddj-mrabd|budejju|bokn|bremanger|bronnoy|xn--brnny-wuac|bygland|bykle|barum|xn--brum-voa|bo.telemark|xn--b-5ga.telemark|bo.nordland|xn--b-5ga.nordland|bievat|xn--bievt-0qa|bomlo|xn--bmlo-gra|batsfjord|xn--btsfjord-9za|bahcavuotna|xn--bhcavuotna-s4a|dovre|drammen|drangedal|dyroy|xn--dyry-ira|donna|xn--dnna-gra|eid|eidfjord|eidsberg|eidskog|eidsvoll|eigersund|elverum|enebakk|engerdal|etne|etnedal|evenes|evenassi|xn--eveni-0qa01ga|evje-og-hornnes|farsund|fauske|fuossko|fuoisku|fedje|fet|finnoy|xn--finny-yua|fitjar|fjaler|fjell|flakstad|flatanger|flekkefjord|flesberg|flora|fla|xn--fl-zia|folldal|forsand|fosnes|frei|frogn|froland|frosta|frana|xn--frna-woa|froya|xn--frya-hra|fusa|fyresdal|forde|xn--frde-gra|gamvik|gangaviika|xn--ggaviika-8ya47h|gaular|gausdal|gildeskal|xn--gildeskl-g0a|giske|gjemnes|gjerdrum|gjerstad|gjesdal|gjovik|xn--gjvik-wua|gloppen|gol|gran|grane|granvin|gratangen|grimstad|grong|kraanghke|xn--kranghke-b0a|grue|gulen|hadsel|halden|halsa|hamar|hamaroy|habmer|xn--hbmer-xqa|hapmir|xn--hpmir-xqa|hammerfest|hammarfeasta|xn--hmmrfeasta-s4ac|haram|hareid|harstad|hasvik|aknoluokta|xn--koluokta-7ya57h|hattfjelldal|aarborte|haugesund|hemne|hemnes|hemsedal|heroy.more-og-romsdal|xn--hery-ira.xn--mre-og-romsdal-qqb|heroy.nordland|xn--hery-ira.nordland|hitra|hjartdal|hjelmeland|hobol|xn--hobl-ira|hof|hol|hole|holmestrand|holtalen|xn--holtlen-hxa|hornindal|horten|hurdal|hurum|hvaler|hyllestad|hagebostad|xn--hgebostad-g3a|hoyanger|xn--hyanger-q1a|hoylandet|xn--hylandet-54a|ha|xn--h-2fa|ibestad|inderoy|xn--indery-fya|iveland|jevnaker|jondal|jolster|xn--jlster-bya|karasjok|karasjohka|xn--krjohka-hwab49j|karlsoy|galsa|xn--gls-elac|karmoy|xn--karmy-yua|kautokeino|guovdageaidnu|klepp|klabu|xn--klbu-woa|kongsberg|kongsvinger|kragero|xn--krager-gya|kristiansand|kristiansund|krodsherad|xn--krdsherad-m8a|kvalsund|rahkkeravju|xn--rhkkervju-01af|kvam|kvinesdal|kvinnherad|kviteseid|kvitsoy|xn--kvitsy-fya|kvafjord|xn--kvfjord-nxa|giehtavuoatna|kvanangen|xn--kvnangen-k0a|navuotna|xn--nvuotna-hwa|kafjord|xn--kfjord-iua|gaivuotna|xn--givuotna-8ya|larvik|lavangen|lavagis|loabat|xn--loabt-0qa|lebesby|davvesiida|leikanger|leirfjord|leka|leksvik|lenvik|leangaviika|xn--leagaviika-52b|lesja|levanger|lier|lierne|lillehammer|lillesand|lindesnes|lindas|xn--linds-pra|lom|loppa|lahppi|xn--lhppi-xqa|lund|lunner|luroy|xn--lury-ira|luster|lyngdal|lyngen|ivgu|lardal|lerdal|xn--lrdal-sra|lodingen|xn--ldingen-q1a|lorenskog|xn--lrenskog-54a|loten|xn--lten-gra|malvik|masoy|xn--msy-ula0h|muosat|xn--muost-0qa|mandal|marker|marnardal|masfjorden|meland|meldal|melhus|meloy|xn--mely-ira|meraker|xn--merker-kua|moareke|xn--moreke-jua|midsund|midtre-gauldal|modalen|modum|molde|moskenes|moss|mosvik|malselv|xn--mlselv-iua|malatvuopmi|xn--mlatvuopmi-s4a|namdalseid|aejrie|namsos|namsskogan|naamesjevuemie|xn--nmesjevuemie-tcba|laakesvuemie|nannestad|narvik|narviika|naustdal|nedre-eiker|nes.akershus|nes.buskerud|nesna|nesodden|nesseby|unjarga|xn--unjrga-rta|nesset|nissedal|nittedal|nord-aurdal|nord-fron|nord-odal|norddal|nordkapp|davvenjarga|xn--davvenjrga-y4a|nordre-land|nordreisa|raisa|xn--risa-5na|nore-og-uvdal|notodden|naroy|xn--nry-yla5g|notteroy|xn--nttery-byae|odda|oksnes|xn--ksnes-uua|oppdal|oppegard|xn--oppegrd-ixa|orkdal|orland|xn--rland-uua|orskog|xn--rskog-uua|orsta|xn--rsta-fra|os.hedmark|os.hordaland|osen|osteroy|xn--ostery-fya|ostre-toten|xn--stre-toten-zcb|overhalla|ovre-eiker|xn--vre-eiker-k8a|oyer|xn--yer-zna|oygarden|xn--ygarden-p1a|oystre-slidre|xn--ystre-slidre-ujb|porsanger|porsangu|xn--porsgu-sta26f|porsgrunn|radoy|xn--rady-ira|rakkestad|rana|ruovat|randaberg|rauma|rendalen|rennebu|rennesoy|xn--rennesy-v1a|rindal|ringebu|ringerike|ringsaker|rissa|risor|xn--risr-ira|roan|rollag|rygge|ralingen|xn--rlingen-mxa|rodoy|xn--rdy-0nab|romskog|xn--rmskog-bya|roros|xn--rros-gra|rost|xn--rst-0na|royken|xn--ryken-vua|royrvik|xn--ryrvik-bya|rade|xn--rde-ula|salangen|siellak|saltdal|salat|xn--slt-elab|xn--slat-5na|samnanger|sande.more-og-romsdal|sande.xn--mre-og-romsdal-qqb|sande.vestfold|sandefjord|sandnes|sandoy|xn--sandy-yua|sarpsborg|sauda|sauherad|sel|selbu|selje|seljord|sigdal|siljan|sirdal|skaun|skedsmo|ski|skien|skiptvet|skjervoy|xn--skjervy-v1a|skierva|xn--skierv-uta|skjak|xn--skjk-soa|skodje|skanland|xn--sknland-fxa|skanit|xn--sknit-yqa|smola|xn--smla-hra|snillfjord|snasa|xn--snsa-roa|snoasa|snaase|xn--snase-nra|sogndal|sokndal|sola|solund|songdalen|sortland|spydeberg|stange|stavanger|steigen|steinkjer|stjordal|xn--stjrdal-s1a|stokke|stor-elvdal|stord|stordal|storfjord|omasvuotna|strand|stranda|stryn|sula|suldal|sund|sunndal|surnadal|sveio|svelvik|sykkylven|sogne|xn--sgne-gra|somna|xn--smna-gra|sondre-land|xn--sndre-land-0cb|sor-aurdal|xn--sr-aurdal-l8a|sor-fron|xn--sr-fron-q1a|sor-odal|xn--sr-odal-q1a|sor-varanger|xn--sr-varanger-ggb|matta-varjjat|xn--mtta-vrjjat-k7af|sorfold|xn--srfold-bya|sorreisa|xn--srreisa-q1a|sorum|xn--srum-gra|tana|deatnu|time|tingvoll|tinn|tjeldsund|dielddanuorri|tjome|xn--tjme-hra|tokke|tolga|torsken|tranoy|xn--trany-yua|tromso|xn--troms-zua|tromsa|romsa|trondheim|troandin|trysil|trana|xn--trna-woa|trogstad|xn--trgstad-r1a|tvedestrand|tydal|tynset|tysfjord|divtasvuodna|divttasvuotna|tysnes|tysvar|xn--tysvr-vra|tonsberg|xn--tnsberg-q1a|ullensaker|ullensvang|ulvik|utsira|vadso|xn--vads-jra|cahcesuolo|xn--hcesuolo-7ya35b|vaksdal|valle|vang|vanylven|vardo|xn--vard-jra|varggat|xn--vrggt-xqad|vefsn|vaapste|vega|vegarshei|xn--vegrshei-c0a|vennesla|verdal|verran|vestby|vestnes|vestre-slidre|vestre-toten|vestvagoy|xn--vestvgy-ixa6o|vevelstad|vik|vikna|vindafjord|volda|voss|varoy|xn--vry-yla5g|vagan|xn--vgan-qoa|voagat|vagsoy|xn--vgsy-qoa0j|vaga|xn--vg-yiab|valer.ostfold|xn--vler-qoa.xn--stfold-9xa|valer.hedmark|xn--vler-qoa.hedmark|co|blogspot",
		"np": "*",
		"nr": "biz|info|gov|edu|org|net|com",
		"nu": "merseine|mine|shacknet",
		"nz": "ac|co|cri|geek|gen|govt|health|iwi|kiwi|maori|mil|xn--mori-qsa|net|org|parliament|school|blogspot.co",
		"om": "co|com|edu|gov|med|museum|net|org|pro",
		"org": "ae|us|c.cdn77|rsc.cdn77|ssl.origin.cdn77-secure|duckdns|dyndns|blogdns|blogsite|boldlygoingnowhere|dnsalias|dnsdojo|doesntexist|dontexist|doomdns|dvrdns|dynalias|endofinternet|endoftheinternet|from-me|game-host|go.dyndns|gotdns|hobby-site|home.dyndns|homedns|homeftp|homelinux|homeunix|is-a-bruinsfan|is-a-candidate|is-a-celticsfan|is-a-chef|is-a-geek|is-a-knight|is-a-linux-user|is-a-patsfan|is-a-soxfan|is-found|is-lost|is-saved|is-very-bad|is-very-evil|is-very-good|is-very-nice|is-very-sweet|isa-geek|kicks-ass|misconfused|podzone|readmyblog|selfip|sellsyourhome|servebbs|serveftp|servegame|stuff-4-sale|webhop|eu|al.eu|asso.eu|at.eu|au.eu|be.eu|bg.eu|ca.eu|cd.eu|ch.eu|cn.eu|cy.eu|cz.eu|de.eu|dk.eu|edu.eu|ee.eu|es.eu|fi.eu|fr.eu|gr.eu|hr.eu|hu.eu|ie.eu|il.eu|in.eu|int.eu|is.eu|it.eu|jp.eu|kr.eu|lt.eu|lu.eu|lv.eu|mc.eu|me.eu|mk.eu|mt.eu|my.eu|net.eu|ng.eu|nl.eu|no.eu|nz.eu|paris.eu|pl.eu|pt.eu|q-a.eu|ro.eu|ru.eu|se.eu|si.eu|sk.eu|tr.eu|uk.eu|us.eu|bmoattachments|hk|za",
		"pa": "ac|gob|com|org|sld|edu|net|ing|abo|med|nom",
		"pe": "edu|gob|nom|mil|org|com|net|blogspot",
		"pf": "com|org|edu",
		"pg": "*",
		"ph": "com|net|org|gov|edu|ngo|mil|i",
		"pk": "com|net|edu|org|fam|biz|web|gov|gob|gok|gon|gop|gos|info",
		"pl": "com|net|org|aid|agro|atm|auto|biz|edu|gmina|gsm|info|mail|miasta|media|mil|nieruchomosci|nom|pc|powiat|priv|realestate|rel|sex|shop|sklep|sos|szkola|targi|tm|tourism|travel|turystyka|gov|ap.gov|ic.gov|is.gov|us.gov|kmpsp.gov|kppsp.gov|kwpsp.gov|psp.gov|wskr.gov|kwp.gov|mw.gov|ug.gov|um.gov|umig.gov|ugim.gov|upow.gov|uw.gov|starostwo.gov|pa.gov|po.gov|psse.gov|pup.gov|rzgw.gov|sa.gov|so.gov|sr.gov|wsa.gov|sko.gov|uzs.gov|wiih.gov|winb.gov|pinb.gov|wios.gov|witd.gov|wzmiuw.gov|piw.gov|wiw.gov|griw.gov|wif.gov|oum.gov|sdn.gov|zp.gov|uppo.gov|mup.gov|wuoz.gov|konsulat.gov|oirm.gov|augustow|babia-gora|bedzin|beskidy|bialowieza|bialystok|bielawa|bieszczady|boleslawiec|bydgoszcz|bytom|cieszyn|czeladz|czest|dlugoleka|elblag|elk|glogow|gniezno|gorlice|grajewo|ilawa|jaworzno|jelenia-gora|jgora|kalisz|kazimierz-dolny|karpacz|kartuzy|kaszuby|katowice|kepno|ketrzyn|klodzko|kobierzyce|kolobrzeg|konin|konskowola|kutno|lapy|lebork|legnica|lezajsk|limanowa|lomza|lowicz|lubin|lukow|malbork|malopolska|mazowsze|mazury|mielec|mielno|mragowo|naklo|nowaruda|nysa|olawa|olecko|olkusz|olsztyn|opoczno|opole|ostroda|ostroleka|ostrowiec|ostrowwlkp|pila|pisz|podhale|podlasie|polkowice|pomorze|pomorskie|prochowice|pruszkow|przeworsk|pulawy|radom|rawa-maz|rybnik|rzeszow|sanok|sejny|slask|slupsk|sosnowiec|stalowa-wola|skoczow|starachowice|stargard|suwalki|swidnica|swiebodzin|swinoujscie|szczecin|szczytno|tarnobrzeg|tgory|turek|tychy|ustka|walbrzych|warmia|warszawa|waw|wegrow|wielun|wlocl|wloclawek|wodzislaw|wolomin|wroclaw|zachpomor|zagan|zarow|zgora|zgorzelec|co|art|gliwice|krakow|poznan|wroc|zakopane|gda|gdansk|gdynia|med|sopot",
		"pm": "",
		"pn": "gov|co|org|edu|net",
		"post": "",
		"pr": "com|net|org|gov|edu|isla|pro|biz|info|name|est|prof|ac",
		"pro": "aca|bar|cpa|jur|law|med|eng",
		"ps": "edu|gov|sec|plo|com|org|net",
		"pt": "net|gov|org|edu|int|publ|com|nome|blogspot",
		"pw": "co|ne|or|ed|go|belau",
		"py": "com|coop|edu|gov|mil|net|org",
		"qa": "com|edu|gov|mil|name|net|org|sch|blogspot",
		"re": "com|asso|nom|blogspot",
		"ro": "com|org|tm|nt|nom|info|rec|arts|firm|store|www|blogspot",
		"rs": "co|org|edu|ac|gov|in|blogspot",
		"ru": "ac|com|edu|int|net|org|pp|adygeya|altai|amur|arkhangelsk|astrakhan|bashkiria|belgorod|bir|bryansk|buryatia|cbg|chel|chelyabinsk|chita|chukotka|chuvashia|dagestan|dudinka|e-burg|grozny|irkutsk|ivanovo|izhevsk|jar|joshkar-ola|kalmykia|kaluga|kamchatka|karelia|kazan|kchr|kemerovo|khabarovsk|khakassia|khv|kirov|koenig|komi|kostroma|krasnoyarsk|kuban|kurgan|kursk|lipetsk|magadan|mari|mari-el|marine|mordovia|msk|murmansk|nalchik|nnov|nov|novosibirsk|nsk|omsk|orenburg|oryol|palana|penza|perm|ptz|rnd|ryazan|sakhalin|samara|saratov|simbirsk|smolensk|spb|stavropol|stv|surgut|tambov|tatarstan|tom|tomsk|tsaritsyn|tsk|tula|tuva|tver|tyumen|udm|udmurtia|ulan-ude|vladikavkaz|vladimir|vladivostok|volgograd|vologda|voronezh|vrn|vyatka|yakutia|yamal|yaroslavl|yekaterinburg|yuzhno-sakhalinsk|amursk|baikal|cmw|fareast|jamal|kms|k-uralsk|kustanai|kuzbass|magnitka|mytis|nakhodka|nkz|norilsk|oskol|pyatigorsk|rubtsovsk|snz|syzran|vdonsk|zgrad|gov|mil|test|blogspot",
		"rw": "gov|net|edu|ac|com|co|int|mil|gouv",
		"sa": "com|net|org|gov|med|pub|edu|sch",
		"sb": "com|edu|gov|net|org",
		"sc": "com|gov|net|org|edu",
		"sd": "com|net|org|edu|med|tv|gov|info",
		"se": "a|ac|b|bd|brand|c|d|e|f|fh|fhsk|fhv|g|h|i|k|komforb|kommunalforbund|komvux|l|lanbib|m|n|naturbruksgymn|o|org|p|parti|pp|press|r|s|t|tm|u|w|x|y|z|com|blogspot",
		"sg": "com|net|org|gov|edu|per|blogspot",
		"sh": "com|net|gov|org|mil|*platform",
		"si": "blogspot",
		"sj": "",
		"sk": "blogspot",
		"sl": "com|net|edu|gov|org",
		"sm": "",
		"sn": "art|com|edu|gouv|org|perso|univ|blogspot",
		"so": "com|net|org",
		"sr": "",
		"st": "co|com|consulado|edu|embaixada|gov|mil|net|org|principe|saotome|store",
		"su": "adygeya|arkhangelsk|balashov|bashkiria|bryansk|dagestan|grozny|ivanovo|kalmykia|kaluga|karelia|khakassia|krasnodar|kurgan|lenug|mordovia|msk|murmansk|nalchik|nov|obninsk|penza|pokrovsk|sochi|spb|togliatti|troitsk|tula|tuva|vladikavkaz|vladimir|vologda",
		"sv": "com|edu|gob|org|red",
		"sx": "gov",
		"sy": "edu|gov|net|mil|com|org",
		"sz": "co|ac|org",
		"tc": "",
		"td": "blogspot",
		"tel": "",
		"tf": "",
		"tg": "",
		"th": "ac|co|go|in|mi|net|or",
		"tj": "ac|biz|co|com|edu|go|gov|int|mil|name|net|nic|org|test|web",
		"tk": "",
		"tl": "gov",
		"tm": "com|co|org|net|nom|gov|mil|edu",
		"tn": "com|ens|fin|gov|ind|intl|nat|net|org|info|perso|tourism|edunet|rnrt|rns|rnu|mincom|agrinet|defense|turen",
		"to": "com|gov|net|org|edu|mil",
		"tp": "",
		"tr": "com|info|biz|net|org|web|gen|tv|av|dr|bbs|name|tel|gov|bel|pol|mil|k12|edu|kep|nc|gov.nc|blogspot.com",
		"travel": "",
		"tt": "co|com|org|net|biz|info|pro|int|coop|jobs|mobi|travel|museum|aero|name|gov|edu",
		"tv": "dyndns|better-than|on-the-web|worse-than",
		"tw": "edu|gov|mil|com|net|org|idv|game|ebiz|club|xn--zf0ao64a|xn--uc0atv|xn--czrw28b|blogspot",
		"tz": "ac|co|go|hotel|info|me|mil|mobi|ne|or|sc|tv",
		"ua": "com|edu|gov|in|net|org|cherkassy|cherkasy|chernigov|chernihiv|chernivtsi|chernovtsy|ck|cn|cr|crimea|cv|dn|dnepropetrovsk|dnipropetrovsk|dominic|donetsk|dp|if|ivano-frankivsk|kh|kharkiv|kharkov|kherson|khmelnitskiy|khmelnytskyi|kiev|kirovograd|km|kr|krym|ks|kv|kyiv|lg|lt|lugansk|lutsk|lv|lviv|mk|mykolaiv|nikolaev|od|odesa|odessa|pl|poltava|rivne|rovno|rv|sb|sebastopol|sevastopol|sm|sumy|te|ternopil|uz|uzhgorod|vinnica|vinnytsia|vn|volyn|yalta|zaporizhzhe|zaporizhzhia|zhitomir|zhytomyr|zp|zt|biz|co|pp",
		"ug": "co|or|ac|sc|go|ne|com|org|blogspot",
		"uk": "ac|co|gov|ltd|me|net|nhs|org|plc|police|*sch|service.gov|blogspot.co",
		"us": "dni|fed|isa|kids|nsn|ak|al|ar|as|az|ca|co|ct|dc|de|fl|ga|gu|hi|ia|id|il|in|ks|ky|la|ma|md|me|mi|mn|mo|ms|mt|nc|nd|ne|nh|nj|nm|nv|ny|oh|ok|or|pa|pr|ri|sc|sd|tn|tx|ut|vi|vt|va|wa|wi|wv|wy|k12.ak|k12.al|k12.ar|k12.as|k12.az|k12.ca|k12.co|k12.ct|k12.dc|k12.de|k12.fl|k12.ga|k12.gu|k12.ia|k12.id|k12.il|k12.in|k12.ks|k12.ky|k12.la|k12.ma|k12.md|k12.me|k12.mi|k12.mn|k12.mo|k12.ms|k12.mt|k12.nc|k12.ne|k12.nh|k12.nj|k12.nm|k12.nv|k12.ny|k12.oh|k12.ok|k12.or|k12.pa|k12.pr|k12.ri|k12.sc|k12.tn|k12.tx|k12.ut|k12.vi|k12.vt|k12.va|k12.wa|k12.wi|k12.wy|cc.ak|cc.al|cc.ar|cc.as|cc.az|cc.ca|cc.co|cc.ct|cc.dc|cc.de|cc.fl|cc.ga|cc.gu|cc.hi|cc.ia|cc.id|cc.il|cc.in|cc.ks|cc.ky|cc.la|cc.ma|cc.md|cc.me|cc.mi|cc.mn|cc.mo|cc.ms|cc.mt|cc.nc|cc.nd|cc.ne|cc.nh|cc.nj|cc.nm|cc.nv|cc.ny|cc.oh|cc.ok|cc.or|cc.pa|cc.pr|cc.ri|cc.sc|cc.sd|cc.tn|cc.tx|cc.ut|cc.vi|cc.vt|cc.va|cc.wa|cc.wi|cc.wv|cc.wy|lib.ak|lib.al|lib.ar|lib.as|lib.az|lib.ca|lib.co|lib.ct|lib.dc|lib.de|lib.fl|lib.ga|lib.gu|lib.hi|lib.ia|lib.id|lib.il|lib.in|lib.ks|lib.ky|lib.la|lib.ma|lib.md|lib.me|lib.mi|lib.mn|lib.mo|lib.ms|lib.mt|lib.nc|lib.nd|lib.ne|lib.nh|lib.nj|lib.nm|lib.nv|lib.ny|lib.oh|lib.ok|lib.or|lib.pa|lib.pr|lib.ri|lib.sc|lib.sd|lib.tn|lib.tx|lib.ut|lib.vi|lib.vt|lib.va|lib.wa|lib.wi|lib.wy|pvt.k12.ma|chtr.k12.ma|paroch.k12.ma|is-by|land-4-sale|stuff-4-sale",
		"uy": "com|edu|gub|mil|net|org|blogspot.com",
		"uz": "co|com|net|org",
		"va": "",
		"vc": "com|net|org|gov|mil|edu",
		"ve": "arts|co|com|e12|edu|firm|gob|gov|info|int|mil|net|org|rec|store|tec|web",
		"vg": "",
		"vi": "co|com|k12|net|org",
		"vn": "com|net|org|edu|gov|int|ac|biz|info|name|pro|health|blogspot",
		"vu": "com|edu|net|org",
		"wf": "",
		"ws": "com|net|org|gov|edu|dyndns|mypets",
		"yt": "",
		"xn--mgbaam7a8h": "",
		"xn--y9a3aq": "",
		"xn--54b7fta0cc": "",
		"xn--90ais": "",
		"xn--fiqs8s": "",
		"xn--fiqz9s": "",
		"xn--lgbbat1ad8j": "",
		"xn--wgbh1c": "",
		"xn--node": "",
		"xn--qxam": "",
		"xn--j6w193g": "",
		"xn--h2brj9c": "",
		"xn--mgbbh1a71e": "",
		"xn--fpcrj9c3d": "",
		"xn--gecrj9c": "",
		"xn--s9brj9c": "",
		"xn--45brj9c": "",
		"xn--xkc2dl3a5ee0h": "",
		"xn--mgba3a4f16a": "",
		"xn--mgba3a4fra": "",
		"xn--mgbtx2b": "",
		"xn--mgbayh7gpa": "",
		"xn--3e0b707e": "",
		"xn--80ao21a": "",
		"xn--fzc2c9e2c": "",
		"xn--xkc2al3hye2a": "",
		"xn--mgbc0a9azcg": "",
		"xn--d1alf": "",
		"xn--l1acc": "",
		"xn--mix891f": "",
		"xn--mix082f": "",
		"xn--mgbx4cd0ab": "",
		"xn--mgb9awbf": "",
		"xn--mgbai9azgqp6j": "",
		"xn--mgbai9a5eva00b": "",
		"xn--ygbi2ammx": "",
		"xn--90a3ac": "xn--o1ac|xn--c1avg|xn--90azh|xn--d1at|xn--o1ach|xn--80au",
		"xn--p1ai": "",
		"xn--wgbl6a": "",
		"xn--mgberp4a5d4ar": "",
		"xn--mgberp4a5d4a87g": "",
		"xn--mgbqly7c0a67fbc": "",
		"xn--mgbqly7cvafr": "",
		"xn--mgbpl2fh": "",
		"xn--yfro4i67o": "",
		"xn--clchc0ea0b2g2a9gcd": "",
		"xn--ogbpf8fl": "",
		"xn--mgbtf8fl": "",
		"xn--o3cw4h": "",
		"xn--pgbs0dh": "",
		"xn--kpry57d": "",
		"xn--kprw13d": "",
		"xn--nnx388a": "",
		"xn--j1amh": "",
		"xn--mgb2ddes": "",
		"xxx": "",
		"ye": "*",
		"za": "ac|agrica|alt|co|edu|gov|grondar|law|mil|net|ngo|nis|nom|org|school|tm|web|blogspot.co",
		"zm": "*",
		"zw": "*",
		"aaa": "",
		"aarp": "",
		"abarth": "",
		"abb": "",
		"abbott": "",
		"abbvie": "",
		"abc": "",
		"able": "",
		"abogado": "",
		"abudhabi": "",
		"academy": "",
		"accenture": "",
		"accountant": "",
		"accountants": "",
		"aco": "",
		"active": "",
		"actor": "",
		"adac": "",
		"ads": "",
		"adult": "",
		"aeg": "",
		"aetna": "",
		"afamilycompany": "",
		"afl": "",
		"africa": "",
		"africamagic": "",
		"agakhan": "",
		"agency": "",
		"aig": "",
		"aigo": "",
		"airbus": "",
		"airforce": "",
		"airtel": "",
		"akdn": "",
		"alfaromeo": "",
		"alibaba": "",
		"alipay": "",
		"allfinanz": "",
		"allstate": "",
		"ally": "",
		"alsace": "",
		"alstom": "",
		"americanexpress": "",
		"americanfamily": "",
		"amex": "",
		"amfam": "",
		"amica": "",
		"amsterdam": "",
		"analytics": "",
		"android": "",
		"anquan": "",
		"anz": "",
		"aol": "",
		"apartments": "",
		"app": "",
		"apple": "",
		"aquarelle": "",
		"aramco": "",
		"archi": "",
		"army": "",
		"arte": "",
		"asda": "",
		"associates": "",
		"athleta": "",
		"attorney": "",
		"auction": "",
		"audi": "",
		"audible": "",
		"audio": "",
		"auspost": "",
		"author": "",
		"auto": "",
		"autos": "",
		"avianca": "",
		"aws": "",
		"axa": "",
		"azure": "",
		"baby": "",
		"baidu": "",
		"banamex": "",
		"bananarepublic": "",
		"band": "",
		"bank": "",
		"bar": "",
		"barcelona": "",
		"barclaycard": "",
		"barclays": "",
		"barefoot": "",
		"bargains": "",
		"baseball": "",
		"basketball": "",
		"bauhaus": "",
		"bayern": "",
		"bbc": "",
		"bbt": "",
		"bbva": "",
		"bcg": "",
		"bcn": "",
		"beats": "",
		"beer": "",
		"bentley": "",
		"berlin": "",
		"best": "",
		"bestbuy": "",
		"bet": "",
		"bharti": "",
		"bible": "",
		"bid": "",
		"bike": "",
		"bing": "",
		"bingo": "",
		"bio": "",
		"black": "",
		"blackfriday": "",
		"blanco": "",
		"blockbuster": "",
		"blog": "",
		"bloomberg": "",
		"blue": "",
		"bms": "",
		"bmw": "",
		"bnl": "",
		"bnpparibas": "",
		"boats": "",
		"boehringer": "",
		"bofa": "",
		"bom": "",
		"bond": "",
		"boo": "",
		"book": "",
		"booking": "",
		"boots": "",
		"bosch": "",
		"bostik": "",
		"bot": "",
		"boutique": "",
		"bradesco": "",
		"bridgestone": "",
		"broadway": "",
		"broker": "",
		"brother": "",
		"brussels": "",
		"budapest": "",
		"bugatti": "",
		"build": "",
		"builders": "",
		"business": "",
		"buy": "",
		"buzz": "",
		"bzh": "",
		"cab": "",
		"cafe": "",
		"cal": "",
		"call": "",
		"calvinklein": "",
		"camera": "",
		"camp": "",
		"cancerresearch": "",
		"canon": "",
		"capetown": "",
		"capital": "",
		"capitalone": "",
		"car": "",
		"caravan": "",
		"cards": "",
		"care": "",
		"career": "",
		"careers": "",
		"cars": "",
		"cartier": "",
		"casa": "",
		"case": "",
		"caseih": "",
		"cash": "",
		"casino": "",
		"catering": "",
		"catholic": "",
		"cba": "",
		"cbn": "",
		"cbre": "",
		"cbs": "",
		"ceb": "",
		"center": "",
		"ceo": "",
		"cern": "",
		"cfa": "",
		"cfd": "",
		"chanel": "",
		"channel": "",
		"chase": "",
		"chat": "",
		"cheap": "",
		"chintai": "",
		"chloe": "",
		"christmas": "",
		"chrome": "",
		"chrysler": "",
		"church": "",
		"cipriani": "",
		"circle": "",
		"cisco": "",
		"citadel": "",
		"citi": "",
		"citic": "",
		"city": "",
		"cityeats": "",
		"claims": "",
		"cleaning": "",
		"click": "",
		"clinic": "",
		"clinique": "",
		"clothing": "",
		"cloud": "",
		"club": "",
		"clubmed": "",
		"coach": "",
		"codes": "",
		"coffee": "",
		"college": "",
		"cologne": "",
		"comcast": "",
		"commbank": "",
		"community": "",
		"company": "",
		"compare": "",
		"computer": "",
		"comsec": "",
		"condos": "",
		"construction": "",
		"consulting": "",
		"contact": "",
		"contractors": "",
		"cooking": "",
		"cookingchannel": "",
		"cool": "",
		"corsica": "",
		"country": "",
		"coupon": "",
		"coupons": "",
		"courses": "",
		"credit": "",
		"creditcard": "",
		"creditunion": "",
		"cricket": "",
		"crown": "",
		"crs": "",
		"cruises": "",
		"csc": "",
		"cuisinella": "",
		"cymru": "",
		"cyou": "",
		"dabur": "",
		"dad": "",
		"dance": "",
		"date": "",
		"dating": "",
		"datsun": "",
		"day": "",
		"dclk": "",
		"dds": "",
		"deal": "",
		"dealer": "",
		"deals": "",
		"degree": "",
		"delivery": "",
		"dell": "",
		"deloitte": "",
		"delta": "",
		"democrat": "",
		"dental": "",
		"dentist": "",
		"desi": "",
		"design": "",
		"dev": "",
		"dhl": "",
		"diamonds": "",
		"diet": "",
		"digital": "",
		"direct": "",
		"directory": "",
		"discount": "",
		"discover": "",
		"dish": "",
		"diy": "",
		"dnp": "",
		"docs": "",
		"dodge": "",
		"dog": "",
		"doha": "",
		"domains": "",
		"doosan": "",
		"dot": "",
		"download": "",
		"drive": "",
		"dstv": "",
		"dtv": "",
		"dubai": "",
		"duck": "",
		"dunlop": "",
		"duns": "",
		"dupont": "",
		"durban": "",
		"dvag": "",
		"dwg": "",
		"earth": "",
		"eat": "",
		"edeka": "",
		"education": "",
		"email": "",
		"emerck": "",
		"emerson": "",
		"energy": "",
		"engineer": "",
		"engineering": "",
		"enterprises": "",
		"epost": "",
		"epson": "",
		"equipment": "",
		"ericsson": "",
		"erni": "",
		"esq": "",
		"estate": "",
		"esurance": "",
		"etisalat": "",
		"eurovision": "",
		"eus": "",
		"events": "",
		"everbank": "",
		"exchange": "",
		"expert": "",
		"exposed": "",
		"express": "",
		"extraspace": "",
		"fage": "",
		"fail": "",
		"fairwinds": "",
		"faith": "",
		"family": "",
		"fan": "",
		"fans": "",
		"farm": "",
		"farmers": "",
		"fashion": "",
		"fast": "",
		"fedex": "",
		"feedback": "",
		"ferrari": "",
		"ferrero": "",
		"fiat": "",
		"fidelity": "",
		"fido": "",
		"film": "",
		"final": "",
		"finance": "",
		"financial": "",
		"fire": "",
		"firestone": "",
		"firmdale": "",
		"fish": "",
		"fishing": "",
		"fit": "",
		"fitness": "",
		"flickr": "",
		"flights": "",
		"flir": "",
		"florist": "",
		"flowers": "",
		"flsmidth": "",
		"fly": "",
		"foo": "",
		"foodnetwork": "",
		"football": "",
		"ford": "",
		"forex": "",
		"forsale": "",
		"forum": "",
		"foundation": "",
		"fox": "",
		"fresenius": "",
		"frl": "",
		"frogans": "",
		"frontdoor": "",
		"frontier": "",
		"ftr": "",
		"fujitsu": "",
		"fujixerox": "",
		"fund": "",
		"furniture": "",
		"futbol": "",
		"fyi": "",
		"gal": "",
		"gallery": "",
		"gallo": "",
		"gallup": "",
		"game": "",
		"games": "",
		"gap": "",
		"garden": "",
		"gbiz": "",
		"gdn": "",
		"gea": "",
		"gent": "",
		"genting": "",
		"george": "",
		"ggee": "",
		"gift": "",
		"gifts": "",
		"gives": "",
		"giving": "",
		"glade": "",
		"glass": "",
		"gle": "",
		"global": "",
		"globo": "",
		"gmail": "",
		"gmo": "",
		"gmx": "",
		"godaddy": "",
		"gold": "",
		"goldpoint": "",
		"golf": "",
		"goo": "",
		"goodhands": "",
		"goodyear": "",
		"goog": "",
		"google": "",
		"gop": "",
		"got": "",
		"gotv": "",
		"grainger": "",
		"graphics": "",
		"gratis": "",
		"green": "",
		"gripe": "",
		"group": "",
		"guardian": "",
		"gucci": "",
		"guge": "",
		"guide": "",
		"guitars": "",
		"guru": "",
		"hamburg": "",
		"hangout": "",
		"haus": "",
		"hbo": "",
		"hdfc": "",
		"hdfcbank": "",
		"health": "",
		"healthcare": "",
		"help": "",
		"helsinki": "",
		"here": "",
		"hermes": "",
		"hgtv": "",
		"hiphop": "",
		"hisamitsu": "",
		"hitachi": "",
		"hiv": "",
		"hkt": "",
		"hockey": "",
		"holdings": "",
		"holiday": "",
		"homedepot": "",
		"homegoods": "",
		"homes": "",
		"homesense": "",
		"honda": "",
		"honeywell": "",
		"horse": "",
		"host": "",
		"hosting": "",
		"hot": "",
		"hoteles": "",
		"hotmail": "",
		"house": "",
		"how": "",
		"hsbc": "",
		"htc": "",
		"hughes": "",
		"hyatt": "",
		"hyundai": "",
		"ibm": "",
		"icbc": "",
		"ice": "",
		"icu": "",
		"ieee": "",
		"ifm": "",
		"iinet": "",
		"ikano": "",
		"imamat": "",
		"imdb": "",
		"immo": "",
		"immobilien": "",
		"industries": "",
		"infiniti": "",
		"ing": "",
		"ink": "",
		"institute": "",
		"insurance": "",
		"insure": "",
		"intel": "",
		"international": "",
		"intuit": "",
		"investments": "",
		"ipiranga": "",
		"irish": "",
		"iselect": "",
		"ismaili": "",
		"ist": "",
		"istanbul": "",
		"itau": "",
		"itv": "",
		"iveco": "",
		"iwc": "",
		"jaguar": "",
		"java": "",
		"jcb": "",
		"jcp": "",
		"jeep": "",
		"jetzt": "",
		"jewelry": "",
		"jio": "",
		"jlc": "",
		"jll": "",
		"jmp": "",
		"jnj": "",
		"joburg": "",
		"jot": "",
		"joy": "",
		"jpmorgan": "",
		"jprs": "",
		"juegos": "",
		"juniper": "",
		"kaufen": "",
		"kddi": "",
		"kerryhotels": "",
		"kerrylogistics": "",
		"kerryproperties": "",
		"kfh": "",
		"kia": "",
		"kim": "",
		"kinder": "",
		"kindle": "",
		"kitchen": "",
		"kiwi": "",
		"koeln": "",
		"komatsu": "",
		"kosher": "",
		"kpmg": "",
		"kpn": "",
		"krd": "",
		"kred": "",
		"kuokgroup": "",
		"kyknet": "",
		"kyoto": "",
		"lacaixa": "",
		"ladbrokes": "",
		"lamborghini": "",
		"lamer": "",
		"lancaster": "",
		"lancia": "",
		"lancome": "",
		"land": "",
		"landrover": "",
		"lanxess": "",
		"lasalle": "",
		"lat": "",
		"latino": "",
		"latrobe": "",
		"law": "",
		"lawyer": "",
		"lds": "",
		"lease": "",
		"leclerc": "",
		"lefrak": "",
		"legal": "",
		"lego": "",
		"lexus": "",
		"lgbt": "",
		"liaison": "",
		"lidl": "",
		"life": "",
		"lifeinsurance": "",
		"lifestyle": "",
		"lighting": "",
		"like": "",
		"lilly": "",
		"limited": "",
		"limo": "",
		"lincoln": "",
		"linde": "",
		"link": "",
		"lipsy": "",
		"live": "",
		"living": "",
		"lixil": "",
		"loan": "",
		"loans": "",
		"locker": "",
		"locus": "",
		"loft": "",
		"lol": "",
		"london": "",
		"lotte": "",
		"lotto": "",
		"love": "",
		"lpl": "",
		"lplfinancial": "",
		"ltd": "",
		"ltda": "",
		"lundbeck": "",
		"lupin": "",
		"luxe": "",
		"luxury": "",
		"macys": "",
		"madrid": "",
		"maif": "",
		"maison": "",
		"makeup": "",
		"man": "",
		"management": "",
		"mango": "",
		"market": "",
		"marketing": "",
		"markets": "",
		"marriott": "",
		"marshalls": "",
		"maserati": "",
		"mattel": "",
		"mba": "",
		"mcd": "",
		"mcdonalds": "",
		"mckinsey": "",
		"med": "",
		"media": "",
		"meet": "",
		"melbourne": "",
		"meme": "",
		"memorial": "",
		"men": "",
		"menu": "",
		"meo": "",
		"metlife": "",
		"miami": "",
		"microsoft": "",
		"mini": "",
		"mint": "",
		"mit": "",
		"mitsubishi": "",
		"mlb": "",
		"mls": "",
		"mma": "",
		"mnet": "",
		"mobily": "",
		"moda": "",
		"moe": "",
		"moi": "",
		"mom": "",
		"monash": "",
		"money": "",
		"monster": "",
		"montblanc": "",
		"mopar": "",
		"mormon": "",
		"mortgage": "",
		"moscow": "",
		"moto": "",
		"motorcycles": "",
		"mov": "",
		"movie": "",
		"movistar": "",
		"msd": "",
		"mtn": "",
		"mtpc": "",
		"mtr": "",
		"multichoice": "",
		"mutual": "",
		"mutuelle": "",
		"mzansimagic": "",
		"nab": "",
		"nadex": "",
		"nagoya": "",
		"naspers": "",
		"nationwide": "",
		"natura": "",
		"navy": "",
		"nba": "",
		"nec": "",
		"netbank": "",
		"netflix": "",
		"network": "",
		"neustar": "",
		"new": "",
		"newholland": "",
		"news": "",
		"next": "",
		"nextdirect": "",
		"nexus": "",
		"nfl": "",
		"ngo": "",
		"nhk": "",
		"nico": "",
		"nike": "",
		"nikon": "",
		"ninja": "",
		"nissan": "",
		"nissay": "",
		"nokia": "",
		"northwesternmutual": "",
		"norton": "",
		"now": "",
		"nowruz": "",
		"nowtv": "",
		"nra": "",
		"nrw": "",
		"ntt": "",
		"nyc": "",
		"obi": "",
		"observer": "",
		"off": "",
		"office": "",
		"okinawa": "",
		"olayan": "",
		"olayangroup": "",
		"oldnavy": "",
		"ollo": "",
		"omega": "",
		"one": "",
		"ong": "",
		"onl": "",
		"online": "",
		"onyourside": "",
		"ooo": "",
		"open": "",
		"oracle": "",
		"orange": "",
		"organic": "",
		"orientexpress": "",
		"origins": "",
		"osaka": "",
		"otsuka": "",
		"ott": "",
		"ovh": "",
		"page": "",
		"pamperedchef": "",
		"panasonic": "",
		"panerai": "",
		"paris": "",
		"pars": "",
		"partners": "",
		"parts": "",
		"party": "",
		"passagens": "",
		"pay": "",
		"payu": "",
		"pccw": "",
		"pet": "",
		"pfizer": "",
		"pharmacy": "",
		"philips": "",
		"photo": "",
		"photography": "",
		"photos": "",
		"physio": "",
		"piaget": "",
		"pics": "",
		"pictet": "",
		"pictures": "",
		"pid": "",
		"pin": "",
		"ping": "",
		"pink": "",
		"pioneer": "",
		"pizza": "",
		"place": "",
		"play": "",
		"playstation": "",
		"plumbing": "",
		"plus": "",
		"pnc": "",
		"pohl": "",
		"poker": "",
		"politie": "",
		"porn": "",
		"pramerica": "",
		"praxi": "",
		"press": "",
		"prime": "",
		"prod": "",
		"productions": "",
		"prof": "",
		"progressive": "",
		"promo": "",
		"properties": "",
		"property": "",
		"protection": "",
		"pru": "",
		"prudential": "",
		"pub": "",
		"pwc": "",
		"qpon": "",
		"quebec": "",
		"quest": "",
		"qvc": "",
		"racing": "",
		"raid": "",
		"read": "",
		"realestate": "",
		"realtor": "",
		"realty": "",
		"recipes": "",
		"red": "",
		"redstone": "",
		"redumbrella": "",
		"rehab": "",
		"reise": "",
		"reisen": "",
		"reit": "",
		"reliance": "",
		"ren": "",
		"rent": "",
		"rentals": "",
		"repair": "",
		"report": "",
		"republican": "",
		"rest": "",
		"restaurant": "",
		"review": "",
		"reviews": "",
		"rexroth": "",
		"rich": "",
		"richardli": "",
		"ricoh": "",
		"rightathome": "",
		"ril": "",
		"rio": "",
		"rip": "",
		"rocher": "",
		"rocks": "",
		"rodeo": "",
		"rogers": "",
		"room": "",
		"rsvp": "",
		"ruhr": "",
		"run": "",
		"rwe": "",
		"ryukyu": "",
		"saarland": "",
		"safe": "",
		"safety": "",
		"sakura": "",
		"sale": "",
		"salon": "",
		"samsclub": "",
		"samsung": "",
		"sandvik": "",
		"sandvikcoromant": "",
		"sanofi": "",
		"sap": "",
		"sapo": "",
		"sarl": "",
		"sas": "",
		"save": "",
		"saxo": "",
		"sbi": "",
		"sbs": "",
		"sca": "",
		"scb": "",
		"schaeffler": "",
		"schmidt": "",
		"scholarships": "",
		"school": "",
		"schule": "",
		"schwarz": "",
		"science": "",
		"scjohnson": "",
		"scor": "",
		"scot": "",
		"seat": "",
		"secure": "",
		"security": "",
		"seek": "",
		"select": "",
		"sener": "",
		"services": "",
		"ses": "",
		"seven": "",
		"sew": "",
		"sex": "",
		"sexy": "",
		"sfr": "",
		"shangrila": "",
		"sharp": "",
		"shaw": "",
		"shell": "",
		"shia": "",
		"shiksha": "",
		"shoes": "",
		"shouji": "",
		"show": "",
		"showtime": "",
		"shriram": "",
		"silk": "",
		"sina": "",
		"singles": "",
		"site": "",
		"ski": "",
		"skin": "",
		"sky": "",
		"skype": "",
		"sling": "",
		"smart": "",
		"smile": "",
		"sncf": "",
		"soccer": "",
		"social": "",
		"softbank": "",
		"software": "",
		"sohu": "",
		"solar": "",
		"solutions": "",
		"song": "",
		"sony": "",
		"soy": "",
		"space": "",
		"spiegel": "",
		"spot": "",
		"spreadbetting": "",
		"srl": "",
		"srt": "",
		"stada": "",
		"staples": "",
		"star": "",
		"starhub": "",
		"statebank": "",
		"statefarm": "",
		"statoil": "",
		"stc": "",
		"stcgroup": "",
		"stockholm": "",
		"storage": "",
		"store": "",
		"studio": "",
		"study": "",
		"style": "",
		"sucks": "",
		"supersport": "",
		"supplies": "",
		"supply": "",
		"support": "",
		"surf": "",
		"surgery": "",
		"suzuki": "",
		"swatch": "",
		"swiftcover": "",
		"swiss": "",
		"sydney": "",
		"symantec": "",
		"systems": "",
		"tab": "",
		"taipei": "",
		"talk": "",
		"taobao": "",
		"target": "",
		"tatamotors": "",
		"tatar": "",
		"tattoo": "",
		"tax": "",
		"taxi": "",
		"tci": "",
		"tdk": "",
		"team": "",
		"tech": "",
		"technology": "",
		"telecity": "",
		"telefonica": "",
		"temasek": "",
		"tennis": "",
		"teva": "",
		"thd": "",
		"theater": "",
		"theatre": "",
		"theguardian": "",
		"tiaa": "",
		"tickets": "",
		"tienda": "",
		"tiffany": "",
		"tips": "",
		"tires": "",
		"tirol": "",
		"tjmaxx": "",
		"tjx": "",
		"tkmaxx": "",
		"tmall": "",
		"today": "",
		"tokyo": "",
		"tools": "",
		"top": "",
		"toray": "",
		"toshiba": "",
		"total": "",
		"tours": "",
		"town": "",
		"toyota": "",
		"toys": "",
		"trade": "",
		"trading": "",
		"training": "",
		"travelchannel": "",
		"travelers": "",
		"travelersinsurance": "",
		"trust": "",
		"trv": "",
		"tube": "",
		"tui": "",
		"tunes": "",
		"tushu": "",
		"tvs": "",
		"ubank": "",
		"ubs": "",
		"uconnect": "",
		"unicom": "",
		"university": "",
		"uno": "",
		"uol": "",
		"ups": "",
		"vacations": "",
		"vana": "",
		"vanguard": "",
		"vegas": "",
		"ventures": "",
		"verisign": "",
		"versicherung": "",
		"vet": "",
		"viajes": "",
		"video": "",
		"vig": "",
		"viking": "",
		"villas": "",
		"vin": "",
		"vip": "",
		"virgin": "",
		"visa": "",
		"vision": "",
		"vista": "",
		"vistaprint": "",
		"viva": "",
		"vivo": "",
		"vlaanderen": "",
		"vodka": "",
		"volkswagen": "",
		"vote": "",
		"voting": "",
		"voto": "",
		"voyage": "",
		"vuelos": "",
		"wales": "",
		"walmart": "",
		"walter": "",
		"wang": "",
		"wanggou": "",
		"warman": "",
		"watch": "",
		"watches": "",
		"weather": "",
		"weatherchannel": "",
		"webcam": "",
		"weber": "",
		"website": "",
		"wed": "",
		"wedding": "",
		"weibo": "",
		"weir": "",
		"whoswho": "",
		"wien": "",
		"wiki": "",
		"williamhill": "",
		"win": "",
		"windows": "",
		"wine": "",
		"winners": "",
		"wme": "",
		"wolterskluwer": "",
		"woodside": "",
		"work": "",
		"works": "",
		"world": "",
		"wow": "",
		"wtc": "",
		"wtf": "",
		"xbox": "",
		"xerox": "",
		"xfinity": "",
		"xihuan": "",
		"xin": "",
		"xn--11b4c3d": "",
		"xn--1ck2e1b": "",
		"xn--1qqw23a": "",
		"xn--30rr7y": "",
		"xn--3bst00m": "",
		"xn--3ds443g": "",
		"xn--3oq18vl8pn36a": "",
		"xn--3pxu8k": "",
		"xn--42c2d9a": "",
		"xn--45q11c": "",
		"xn--4gbrim": "",
		"xn--4gq48lf9j": "",
		"xn--55qw42g": "",
		"xn--55qx5d": "",
		"xn--5su34j936bgsg": "",
		"xn--5tzm5g": "",
		"xn--6frz82g": "",
		"xn--6qq986b3xl": "",
		"xn--80adxhks": "",
		"xn--80aqecdr1a": "",
		"xn--80asehdb": "",
		"xn--80aswg": "",
		"xn--8y0a063a": "",
		"xn--9dbq2a": "",
		"xn--9et52u": "",
		"xn--9krt00a": "",
		"xn--b4w605ferd": "",
		"xn--bck1b9a5dre4c": "",
		"xn--c1avg": "",
		"xn--c2br7g": "",
		"xn--cck2b3b": "",
		"xn--cg4bki": "",
		"xn--czr694b": "",
		"xn--czrs0t": "",
		"xn--czru2d": "",
		"xn--d1acj3b": "",
		"xn--eckvdtc9d": "",
		"xn--efvy88h": "",
		"xn--estv75g": "",
		"xn--fct429k": "",
		"xn--fhbei": "",
		"xn--fiq228c5hs": "",
		"xn--fiq64b": "",
		"xn--fjq720a": "",
		"xn--flw351e": "",
		"xn--fzys8d69uvgm": "",
		"xn--g2xx48c": "",
		"xn--gckr3f0f": "",
		"xn--gk3at1e": "",
		"xn--hxt814e": "",
		"xn--i1b6b1a6a2e": "",
		"xn--imr513n": "",
		"xn--io0a7i": "",
		"xn--j1aef": "",
		"xn--jlq61u9w7b": "",
		"xn--jvr189m": "",
		"xn--kcrx77d1x4a": "",
		"xn--kpu716f": "",
		"xn--kput3i": "",
		"xn--mgba3a3ejt": "",
		"xn--mgba7c0bbn0a": "",
		"xn--mgbaakc7dvf": "",
		"xn--mgbab2bd": "",
		"xn--mgbb9fbpob": "",
		"xn--mgbca7dzdo": "",
		"xn--mgbi4ecexp": "",
		"xn--mgbt3dhd": "",
		"xn--mk1bu44c": "",
		"xn--mxtq1m": "",
		"xn--ngbc5azd": "",
		"xn--ngbe9e0a": "",
		"xn--nqv7f": "",
		"xn--nqv7fs00ema": "",
		"xn--nyqy26a": "",
		"xn--p1acf": "",
		"xn--pbt977c": "",
		"xn--pssy2u": "",
		"xn--q9jyb4c": "",
		"xn--qcka1pmc": "",
		"xn--rhqv96g": "",
		"xn--rovu88b": "",
		"xn--ses554g": "",
		"xn--t60b56a": "",
		"xn--tckwe": "",
		"xn--tiq49xqyj": "",
		"xn--unup4y": "",
		"xn--vermgensberater-ctb": "",
		"xn--vermgensberatung-pwb": "",
		"xn--vhquv": "",
		"xn--vuq861b": "",
		"xn--w4r85el8fhu5dnra": "",
		"xn--w4rs40l": "",
		"xn--xhq521b": "",
		"xn--zfr164b": "",
		"xperia": "",
		"xyz": "",
		"yachts": "",
		"yahoo": "",
		"yamaxun": "",
		"yandex": "",
		"yodobashi": "",
		"yoga": "",
		"yokohama": "",
		"you": "",
		"youtube": "",
		"yun": "",
		"zappos": "",
		"zara": "",
		"zero": "",
		"zip": "",
		"zippo": "",
		"zone": "",
		"zuerich": ""
	};

/***/ },
/* 742 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const urlParse = __webpack_require__(192);
	
	const ImmutableComponent = __webpack_require__(215);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const KeyCodes = __webpack_require__(743);
	const cx = __webpack_require__(236);
	const debounce = __webpack_require__(209);
	const ipc = __webpack_require__(703).ipcRenderer;
	
	const UrlBarSuggestions = __webpack_require__(744);
	const UrlBarIcon = __webpack_require__(745);
	const messages = __webpack_require__(211);
	const { getSetting } = __webpack_require__(202);
	const settings = __webpack_require__(204);
	const contextMenus = __webpack_require__(723);
	const windowStore = __webpack_require__(701);
	const UrlUtil = __webpack_require__(190);
	const { eventElHasAncestorWithClasses, isForSecondaryAction } = __webpack_require__(250);
	const { isUrl, isIntermediateAboutPage } = __webpack_require__(187);
	
	class UrlBar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onFocus = this.onFocus.bind(this);
	    this.onBlur = this.onBlur.bind(this);
	    this.onKeyDown = this.onKeyDown.bind(this);
	    this.onKeyUp = this.onKeyUp.bind(this);
	    this.onChange = this.onChange.bind(this);
	    this.onKeyPress = this.onKeyPress.bind(this);
	    this.onClick = this.onClick.bind(this);
	    this.onContextMenu = this.onContextMenu.bind(this);
	    this.keyPressed = false;
	    this.showAutocompleteResult = debounce(() => {
	      if (!this.urlInput || this.keyPressed || this.locationValue.length === 0) {
	        return;
	      }
	      const suffixLen = this.locationValueSuffix.length;
	      if (suffixLen > 0 && this.urlInput.value !== this.locationValue + this.locationValueSuffix) {
	        this.setValue(this.locationValue, this.locationValueSuffix);
	        const len = this.locationValue.length;
	        this.urlInput.setSelectionRange(len, len + suffixLen);
	      }
	    }, 10);
	  }
	
	  get locationValueSuffix() {
	    return this.activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'urlSuffix']);
	  }
	
	  get activeFrame() {
	    return windowStore.getFrame(this.props.activeFrameKey);
	  }
	
	  get isActive() {
	    return this.props.urlbar.get('active');
	  }
	
	  isSelected() {
	    return this.props.urlbar.get('selected');
	  }
	
	  isFocused() {
	    return this.props.urlbar.get('focused');
	  }
	
	  get activateSearchEngine() {
	    return this.props.urlbar.getIn(['searchDetail', 'activateSearchEngine']);
	  }
	
	  get searchSelectEntry() {
	    return this.props.urlbar.get('searchDetail');
	  }
	
	  // restores the url bar to the current location
	  restore() {
	    const location = UrlUtil.getDisplayLocation(this.props.location, getSetting(settings.PDFJS_ENABLED));
	    if (this.urlInput) {
	      this.setValue(location);
	    }
	    windowActions.setNavBarUserInput(location);
	  }
	
	  // Temporarily disable the autocomplete when a user is pressing backspace.
	  // Otherwise, they'd have to hit backspace twice for each character they wanted
	  // to delete.
	  hideAutoComplete() {
	    if (this.autocompleteEnabled) {
	      windowActions.urlBarAutocompleteEnabled(false);
	    }
	    windowActions.setUrlBarSuggestions(undefined, null);
	    windowActions.setRenderUrlBarSuggestions(false);
	  }
	
	  /**
	   * Assign client ID based on user's os/platform.
	   * `platformClientId` must be populated for this entry in `searchProviders.js`.
	   */
	  getPlatformClientId(provider) {
	    try {
	      if (provider.get('platformClientId')) {
	        const platformUtil = __webpack_require__(251);
	        if (platformUtil.isWindows()) {
	          return provider.getIn(['platformClientId', 'win32']) || '';
	        } else if (platformUtil.isDarwin()) {
	          return provider.getIn(['platformClientId', 'darwin']) || '';
	        }
	        return provider.getIn(['platformClientId', 'linux']) || '';
	      }
	    } catch (e) {}
	    return '';
	  }
	
	  /**
	   * Build a search URL considering:
	   * - user's default search engine provider
	   * - search engine shortcut keywords
	   *
	   * Future considerations could include criteria such as:
	   * - user's country / locale (amazon.com vs amazon.ca)
	   * - http verb
	   */
	  buildSearchUrl(searchTerms) {
	    let provider = this.props.searchDetail.toJS();
	    let url = provider.searchURL;
	
	    // remove shortcut from the search terms
	    if (this.activateSearchEngine && this.searchSelectEntry !== null) {
	      provider = this.searchSelectEntry;
	      const shortcut = new RegExp('^' + provider.get('shortcut') + ' ', 'g');
	      searchTerms = searchTerms.replace(shortcut, '');
	      url = provider.get('search');
	    }
	
	    // required: populate the search terms (URL encoded)
	    url = url.replace('{searchTerms}', encodeURIComponent(searchTerms));
	
	    // optional: populate the client id
	    // some search engines have a different clientId depending on the platform
	    if (url.indexOf('{platformClientId}') > -1) {
	      url = url.replace('{platformClientId}', this.getPlatformClientId(provider));
	    }
	    return url;
	  }
	
	  get suggestionList() {
	    return this.props.urlbar.getIn(['suggestions', 'suggestionList']);
	  }
	
	  get selectedIndex() {
	    return this.props.urlbar.getIn(['suggestions', 'selectedIndex']);
	  }
	
	  get activeIndex() {
	    if (this.suggestionList === null) {
	      return -1;
	    }
	    return this.selectedIndex;
	  }
	
	  onKeyDown(e) {
	    if (!this.isActive) {
	      windowActions.setUrlBarActive(true);
	    }
	    switch (e.keyCode) {
	      case KeyCodes.ENTER:
	        e.preventDefault();
	        let location = this.urlInput ? this.urlInput.value : this.props.urlbar.get('location');
	
	        if (location === null || location.length === 0) {
	          windowActions.setUrlBarSelected(true);
	        } else {
	          // Filter javascript URLs to prevent self-XSS
	          location = location.replace(/^(\s*javascript:)+/i, '');
	          const isLocationUrl = isUrl(location);
	          if (!isLocationUrl && e.ctrlKey) {
	            windowActions.loadUrl(this.activeFrame, `www.${location}.com`);
	          } else if (this.shouldRenderUrlBarSuggestions && (typeof this.activeIndex === 'number' && this.activeIndex >= 0 || this.locationValueSuffix && this.autocompleteEnabled)) {
	            // Hack to make alt enter open a new tab for url bar suggestions when hitting enter on them.
	            const isDarwin = process.platform === 'darwin';
	            if (e.altKey) {
	              if (isDarwin) {
	                e.metaKey = true;
	              } else {
	                e.ctrlKey = true;
	              }
	            }
	            windowActions.activeSuggestionClicked(isForSecondaryAction(e), e.shiftKey);
	          } else {
	            location = isLocationUrl ? location : this.buildSearchUrl(location);
	            // do search.
	            if (e.altKey) {
	              windowActions.newFrame({ location }, true);
	            } else if (e.metaKey) {
	              windowActions.newFrame({ location }, !!e.shiftKey);
	            } else {
	              windowActions.loadUrl(this.activeFrame, location);
	            }
	          }
	        }
	        windowActions.setUrlBarActive(false);
	        windowActions.setRenderUrlBarSuggestions(false);
	        break;
	      case KeyCodes.UP:
	        if (this.shouldRenderUrlBarSuggestions) {
	          windowActions.previousUrlBarSuggestionSelected();
	          e.preventDefault();
	        }
	        break;
	      case KeyCodes.DOWN:
	        if (this.shouldRenderUrlBarSuggestions) {
	          windowActions.nextUrlBarSuggestionSelected();
	          e.preventDefault();
	        }
	        break;
	      case KeyCodes.ESC:
	        e.preventDefault();
	        this.props.onStop();
	        this.restore();
	        this.select();
	        break;
	      case KeyCodes.DELETE:
	        if (e.shiftKey) {
	          const selectedIndex = this.locationValueSuffix.length > 0 ? 1 : this.activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'selectedIndex']);
	          if (selectedIndex !== undefined) {
	            const suggestionLocation = this.activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'suggestionList', selectedIndex - 1]).location;
	            appActions.removeSite({ location: suggestionLocation });
	          }
	        } else {
	          this.hideAutoComplete();
	        }
	        break;
	      case KeyCodes.BACKSPACE:
	        this.hideAutoComplete();
	        break;
	      case KeyCodes.TAB:
	        this.hideAutoComplete();
	        break;
	      // Do not trigger rendering of suggestions if you are pressing alt or shift
	      case KeyCodes.ALT:
	      case KeyCodes.SHIFT:
	      case KeyCodes.CMD1:
	      case KeyCodes.CMD2:
	      case KeyCodes.CTRL:
	        break;
	      default:
	        this.keyPressed = true;
	        windowActions.setRenderUrlBarSuggestions(true);
	        // Any other keydown is fair game for autocomplete to be enabled.
	        if (!this.autocompleteEnabled) {
	          windowActions.urlBarAutocompleteEnabled(true);
	        }
	    }
	  }
	
	  onClick(e) {
	    if (this.isSelected()) {
	      windowActions.setUrlBarActive(true);
	    }
	  }
	
	  onBlur(e) {
	    // We intentionally do not setUrlBarFocused(false) here because
	    // that state is for managing when it should be set if it is active.
	    if (!this.isActive) {
	      windowActions.setNavBarUserInput(e.target.value);
	    }
	
	    if (!eventElHasAncestorWithClasses(e, ['urlBarSuggestions', 'urlbarForm'])) {
	      this.updateLocationToSuggestion();
	    }
	  }
	
	  updateLocationToSuggestion() {
	    if (this.locationValueSuffix.length > 0) {
	      windowActions.setNavBarUserInput(this.locationValue + this.locationValueSuffix);
	    }
	  }
	
	  get suggestionLocation() {
	    const selectedIndex = this.activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'selectedIndex']);
	    if (typeof selectedIndex === 'number') {
	      const suggestion = this.activeFrame.getIn(['navbar', 'urlbar', 'suggestions', 'suggestionList', selectedIndex - 1]);
	      if (suggestion) {
	        return suggestion.location;
	      }
	    }
	  }
	
	  onKeyPress(e) {
	    // If we're just continuing an autocomplete then prevent a change event
	    const last = this.lastVal + this.lastSuffix;
	    const newValue = this.lastVal + String.fromCharCode(e.which);
	    if (last.startsWith(newValue)) {
	      const newSuffix = last.substring(newValue.length);
	      this.setValue(newValue, newSuffix);
	      windowActions.setNavBarUserInput(newValue);
	      this.urlInput.setSelectionRange(newValue.length, newValue.length + newSuffix.length + 1);
	      if (this.suggestionLocation) {
	        windowActions.setUrlBarSuggestions(undefined, null);
	      }
	      e.preventDefault();
	    }
	  }
	
	  onChange(e) {
	    this.setValue(e.target.value);
	    if (this.suggestionLocation) {
	      windowActions.setUrlBarSuggestions(undefined, null);
	    }
	  }
	
	  // Keeps track of which part was set for the url suffix and which
	  // part was set for the value.
	  setValue(val, suffix) {
	    val = val || '';
	    suffix = suffix || '';
	    this.lastVal = val;
	    this.lastSuffix = suffix;
	    const newValue = val + suffix;
	    if (this.urlInput.value !== newValue) {
	      this.urlInput.value = newValue;
	    }
	  }
	
	  onKeyUp(e) {
	    switch (e.keyCode) {
	      case KeyCodes.UP:
	      case KeyCodes.DOWN:
	      case KeyCodes.ESC:
	        return;
	    }
	    if (this.isSelected()) {
	      windowActions.setUrlBarSelected(false);
	    }
	    // We never want to set the full navbar user input to include the suffix
	    if (this.locationValue + this.locationValueSuffix !== e.target.value) {
	      windowActions.setNavBarUserInput(this.lastVal);
	    }
	    this.keyPressed = false;
	  }
	
	  select() {
	    if (this.urlInput) {
	      this.urlInput.select();
	    }
	  }
	
	  focus() {
	    if (this.urlInput) {
	      this.urlInput.focus();
	    }
	  }
	
	  onFocus(e) {
	    this.select();
	    windowActions.setUrlBarFocused(true);
	    windowActions.setUrlBarSelected(true);
	  }
	
	  componentWillMount() {
	    this.lastVal = '';
	    this.lastSuffix = '';
	    ipc.on(messages.SHORTCUT_FOCUS_URL, e => {
	      this.focus();
	      this.select();
	      windowActions.setRenderUrlBarSuggestions(false);
	      windowActions.setUrlBarFocused(true);
	      windowActions.setUrlBarSelected(true);
	      windowActions.setUrlBarActive(true);
	    });
	  }
	
	  componentDidMount() {
	    if (this.urlInput) {
	      this.setValue(UrlUtil.getDisplayLocation(this.props.location, getSetting(settings.PDFJS_ENABLED)));
	      this.focus();
	    }
	  }
	
	  componentDidUpdate(prevProps) {
	    // this.urlInput is not initialized in titleMode
	    if (this.urlInput) {
	      if (this.props.activeFrameKey !== prevProps.activeFrameKey) {
	        // The user just changed tabs
	        this.setValue(UrlUtil.getDisplayLocation(this.props.urlbar.get('location'), getSetting(settings.PDFJS_ENABLED)));
	        // Each tab has a focused state stored separately
	        if (this.isFocused()) {
	          this.focus();
	        }
	        windowActions.setUrlBarSuggestions(undefined, null);
	        windowActions.setRenderUrlBarSuggestions(false);
	      } else if (this.props.location !== prevProps.location) {
	        // This is a url nav change
	        this.setValue(UrlUtil.getDisplayLocation(this.props.location, getSetting(settings.PDFJS_ENABLED)));
	      } else if (this.props.hasLocationValueSuffix && this.isActive && (this.props.hasLocationValueSuffix !== prevProps.hasLocationValueSuffix || this.props.urlbar.get('location') !== prevProps.urlbar.get('location'))) {
	        this.showAutocompleteResult();
	      } else if (this.props.titleMode !== prevProps.titleMode || !this.isActive && !this.isFocused) {
	        this.setValue(this.locationValue);
	      } else if (this.props.urlbar.get('location') !== prevProps.urlbar.get('location') && this.urlInput.value !== this.props.urlbar.get('location')) {
	        this.setValue(this.locationValue);
	      }
	    }
	    if (this.isSelected() && !prevProps.urlbar.get('selected')) {
	      this.select();
	      windowActions.setUrlBarSelected(false);
	    }
	  }
	
	  get hostValue() {
	    const parsed = urlParse(this.props.location);
	    return parsed.host && parsed.protocol !== 'about:' && parsed.protocol !== 'chrome-extension:' ? parsed.host : '';
	  }
	
	  get titleValue() {
	    // For about:newtab we don't want the top of the browser saying New Tab
	    // Instead just show "Brave"
	    return ['about:blank', 'about:newtab'].includes(this.props.urlbar.get('location')) ? '' : this.props.title;
	  }
	
	  get autocompleteEnabled() {
	    return this.props.urlbar.getIn(['suggestions', 'autocompleteEnabled']);
	  }
	
	  get locationValue() {
	    const location = this.props.urlbar.get('location');
	    const history = this.props.history;
	    if (isIntermediateAboutPage(location) && history.size > 0 && !this.props.canGoForward) {
	      return history.last();
	    }
	
	    return UrlUtil.getDisplayLocation(location, getSetting(settings.PDFJS_ENABLED));
	  }
	
	  get loadTime() {
	    if (this.props.startLoadTime && this.props.endLoadTime) {
	      const loadMilliseconds = this.props.endLoadTime - this.props.startLoadTime;
	      return (loadMilliseconds / 1000).toFixed(2) + 's';
	    }
	    return '';
	  }
	
	  get aboutPage() {
	    const protocol = urlParse(this.props.location).protocol;
	    return ['about:', 'file:', 'chrome:', 'view-source:'].includes(protocol);
	  }
	
	  get isHTTPPage() {
	    // Whether this page is HTTP or HTTPS. We don't show security indicators
	    // for other protocols like mailto: and about:.
	    const protocol = urlParse(UrlUtil.getLocationIfPDF(this.props.location)).protocol;
	    return protocol === 'http:' || protocol === 'https:';
	  }
	
	  get shouldRenderUrlBarSuggestions() {
	    return this.props.urlbar.getIn(['suggestions', 'shouldRender']) === true && this.suggestionList && this.suggestionList.size > 0;
	  }
	
	  onContextMenu(e) {
	    contextMenus.onUrlBarContextMenu(this.props.searchDetail, this.activeFrame, e);
	  }
	
	  render() {
	    return React.createElement(
	      'form',
	      {
	        className: cx({
	          urlbarForm: true,
	          noBorderRadius: this.props.noBorderRadius
	        }),
	        action: '#',
	        id: 'urlbar',
	        ref: 'urlbar' },
	      _jsx('div', {
	        className: 'urlbarIconContainer'
	      }, void 0, _jsx(UrlBarIcon, {
	        activateSearchEngine: this.activateSearchEngine,
	        active: this.props.urlbar.get('active'),
	        isSecure: this.props.isSecure,
	        isHTTPPage: this.isHTTPPage,
	        loading: this.props.loading,
	        location: this.props.location,
	        searchSelectEntry: this.searchSelectEntry,
	        title: this.props.title,
	        titleMode: this.props.titleMode,
	        isSearching: this.props.location !== this.props.urlbar.get('location')
	      })),
	      this.props.titleMode ? _jsx('div', {
	        id: 'titleBar'
	      }, void 0, _jsx('span', {}, void 0, _jsx('strong', {}, void 0, this.hostValue)), _jsx('span', {}, void 0, this.hostValue && this.titleValue ? ' | ' : ''), _jsx('span', {}, void 0, this.titleValue)) : React.createElement('input', { type: 'text',
	        spellCheck: 'false',
	        disabled: this.props.location === undefined && this.loadTime === '',
	        onFocus: this.onFocus,
	        onBlur: this.onBlur,
	        onKeyDown: this.onKeyDown,
	        onKeyUp: this.onKeyUp,
	        onChange: this.onChange,
	        onKeyPress: this.onKeyPress,
	        onClick: this.onClick,
	        onContextMenu: this.onContextMenu,
	        'data-l10n-id': 'urlbar',
	        className: cx({
	          private: this.private,
	          testHookLoadDone: !this.props.loading
	        }),
	        id: 'urlInput',
	        readOnly: this.props.titleMode,
	        ref: node => {
	          this.urlInput = node;
	        } }),
	      _jsx('legend', {}),
	      this.props.titleMode || this.aboutPage ? null : _jsx('span', {
	        className: cx({
	          'loadTime': true,
	          'onFocus': this.props.urlbar.get('active')
	        })
	      }, void 0, this.loadTime),
	      this.shouldRenderUrlBarSuggestions ? _jsx(UrlBarSuggestions, {
	        selectedIndex: this.props.urlbar.getIn(['suggestions', 'selectedIndex']),
	        suggestionList: this.props.urlbar.getIn(['suggestions', 'suggestionList']),
	        hasLocationValueSuffix: this.props.hasLocationValueSuffix,
	        menubarVisible: this.props.menubarVisible
	      }) : null
	    );
	  }
	}
	
	module.exports = UrlBar;

/***/ },
/* 743 */
/***/ function(module, exports) {

	"use strict";
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const KeyCodes = {
	  ENTER: 13,
	  ESC: 27,
	  UP: 38,
	  DOWN: 40,
	  SHIFT: 16,
	  BACKSPACE: 8,
	  CTRL: 17,
	  ALT: 18,
	  DELETE: 46,
	  CMD1: 91,
	  CMD2: 93,
	  LEFT: 37,
	  RIGHT: 39,
	  F12: 123,
	  NUMPAD_PLUS: 107,
	  NUMPAD_MINUS: 109,
	  TAB: 9
	};
	
	module.exports = KeyCodes;

/***/ },
/* 744 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	
	const windowActions = __webpack_require__(716);
	const ImmutableComponent = __webpack_require__(215);
	
	const suggestionTypes = __webpack_require__(719);
	const cx = __webpack_require__(236);
	const locale = __webpack_require__(728);
	const { isForSecondaryAction } = __webpack_require__(250);
	
	class UrlBarSuggestions extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onSuggestionClicked = this.onSuggestionClicked.bind(this);
	  }
	
	  get activeIndex() {
	    if (this.props.suggestionList === null) {
	      return -1;
	    }
	    return this.props.selectedIndex;
	  }
	
	  blur() {
	    windowActions.setUrlBarSuggestions(null, null);
	  }
	
	  onSuggestionClicked(e) {
	    windowActions.activeSuggestionClicked(isForSecondaryAction(e), e.shiftKey);
	  }
	
	  render() {
	    const suggestions = this.props.suggestionList;
	    const bookmarkSuggestions = suggestions.filter(s => s.type === suggestionTypes.BOOKMARK);
	    const historySuggestions = suggestions.filter(s => s.type === suggestionTypes.HISTORY);
	    const aboutPagesSuggestions = suggestions.filter(s => s.type === suggestionTypes.ABOUT_PAGES);
	    const tabSuggestions = suggestions.filter(s => s.type === suggestionTypes.TAB);
	    const searchSuggestions = suggestions.filter(s => s.type === suggestionTypes.SEARCH);
	    const topSiteSuggestions = suggestions.filter(s => s.type === suggestionTypes.TOP_SITE);
	
	    let items = [];
	    let index = 0;
	    const addToItems = (suggestions, sectionKey, title, icon) => {
	      if (suggestions.size > 0) {
	        items.push(_jsx('li', {
	          className: 'suggestionSection'
	        }, void 0, icon ? _jsx('span', {
	          className: cx({
	            suggestionSectionIcon: true,
	            [sectionKey]: true,
	            fa: true,
	            [icon]: true
	          })
	        }) : null, _jsx('span', {
	          className: 'suggestionSectionTitle'
	        }, void 0, title)));
	      }
	      items = items.concat(suggestions.map((suggestion, i) => {
	        const currentIndex = index + i;
	        const selected = this.activeIndex === currentIndex || !this.activeIndex && currentIndex === 0 && this.props.hasLocationValueSuffix;
	        return React.createElement(
	          'li',
	          { 'data-index': currentIndex,
	            onMouseOver: this.onMouseOver.bind(this),
	            onClick: this.onSuggestionClicked,
	            key: `${suggestion.location}|${index + i}`,
	            ref: node => {
	              selected && (this.selectedElement = node);
	            },
	            className: cx({
	              selected,
	              suggestionItem: true,
	              [suggestion.type]: true
	            }) },
	          suggestion.type !== suggestionTypes.TOP_SITE && suggestion.title ? _jsx('div', {
	            className: 'suggestionTitle'
	          }, void 0, suggestion.title) : null,
	          suggestion.type !== suggestionTypes.SEARCH && suggestion.type !== suggestionTypes.ABOUT_PAGES ? _jsx('div', {
	            className: 'suggestionLocation'
	          }, void 0, suggestion.location) : null
	        );
	      }));
	      index += suggestions.size;
	    };
	    addToItems(historySuggestions, 'historyTitle', locale.translation('historySuggestionTitle'), 'fa-clock-o');
	    addToItems(bookmarkSuggestions, 'bookmarksTitle', locale.translation('bookmarksSuggestionTitle'), 'fa-star-o');
	    addToItems(aboutPagesSuggestions, 'aboutPagesTitle', locale.translation('aboutPagesSuggestionTitle'), null);
	    addToItems(tabSuggestions, 'tabsTitle', locale.translation('tabsSuggestionTitle'), 'fa-external-link');
	    addToItems(searchSuggestions, 'searchTitle', locale.translation('searchSuggestionTitle'), 'fa-search');
	    addToItems(topSiteSuggestions, 'topSiteTitle', locale.translation('topSiteSuggestionTitle'), 'fa-link');
	    const documentHeight = Number.parseInt(window.getComputedStyle(document.querySelector(':root')).getPropertyValue('--navbar-height'), 10);
	    const menuHeight = this.props.menubarVisible ? 30 : 0;
	    return _jsx('ul', {
	      className: 'urlBarSuggestions',
	      style: {
	        maxHeight: document.documentElement.offsetHeight - documentHeight - 2 - menuHeight
	      }
	    }, void 0, items);
	  }
	
	  onMouseOver(e) {
	    this.updateSuggestions(parseInt(e.target.dataset.index, 10));
	  }
	
	  componentDidMount() {}
	
	  componentWillUpdate(nextProps) {
	    if (this.selectedElement) {
	      this.selectedElement.scrollIntoView();
	    }
	  }
	
	  updateSuggestions(newIndex) {
	    const suggestions = this.suggestionList || this.props.suggestionList;
	    if (!suggestions) {
	      return;
	    }
	    // Update the urlbar preview content
	    if (newIndex === 0 || newIndex > suggestions.size) {
	      newIndex = null;
	    }
	    windowActions.setUrlBarSuggestions(suggestions, newIndex);
	  }
	}
	
	module.exports = UrlBarSuggestions;

/***/ },
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const windowActions = __webpack_require__(716);
	const cx = __webpack_require__(236);
	const dragTypes = __webpack_require__(257);
	const dndData = __webpack_require__(258);
	const { isSourceAboutUrl } = __webpack_require__(187);
	const searchIconSize = 16;
	
	const getIconCssClass = ctx => {
	  if (ctx.isSearch) {
	    return 'fa-search';
	  } else if (ctx.isAboutPage && !ctx.props.titleMode) {
	    return 'fa-list';
	  } else if (ctx.isSecure) {
	    // NOTE: EV style not approved yet; see discussion at https://github.com/brave/browser-laptop/issues/791
	    return 'fa-lock';
	  } else if (ctx.isInsecure) {
	    return 'fa-unlock';
	  }
	};
	
	class UrlBarIcon extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onClick = this.onClick.bind(this);
	    this.onDragStart = this.onDragStart.bind(this);
	  }
	  get isSecure() {
	    return this.props.isHTTPPage && this.props.isSecure && !this.props.active;
	  }
	  /**
	   * insecure icon does not show when:
	   * - loading
	   * - in title mode
	   * - urlbar is active (ex: you can type)
	   */
	  get isInsecure() {
	    return this.props.isHTTPPage && this.props.isSecure === false && !this.props.active;
	  }
	  /**
	   * search icon:
	   * - does not show when in title mode
	   * - shows when urlbar is active (ex: you can type)
	   * - is a catch-all for: about pages, files, etc
	   */
	  get isSearch() {
	    const showSearch = this.props.isSearching && !this.props.titleMode;
	
	    const defaultToSearch = !this.isSecure && !this.isInsecure && !showSearch && !this.props.titleMode && !this.isAboutPage;
	
	    return showSearch || defaultToSearch;
	  }
	  get isAboutPage() {
	    return isSourceAboutUrl(this.props.location) && this.props.location !== 'about:newtab';
	  }
	  get iconClasses() {
	    if (this.props.activateSearchEngine) {
	      return cx({ urlbarIcon: true });
	    }
	
	    return cx({
	      urlbarIcon: true,
	      'fa': true,
	      [getIconCssClass(this)]: true
	    });
	  }
	  get iconStyles() {
	    if (!this.props.activateSearchEngine) {
	      return {};
	    }
	
	    return {
	      backgroundImage: `url(${this.props.searchSelectEntry.get('image')})`,
	      backgroundSize: searchIconSize,
	      width: searchIconSize,
	      height: searchIconSize
	    };
	  }
	  onClick() {
	    if (isSourceAboutUrl(this.props.location)) {
	      return;
	    }
	    windowActions.setSiteInfoVisible(true);
	  }
	  onDragStart(e) {
	    dndData.setupDataTransferURL(e.dataTransfer, this.props.location, this.props.title);
	    dndData.setupDataTransferBraveData(e.dataTransfer, dragTypes.TAB, this.activeFrame);
	  }
	  render() {
	    return _jsx('span', {
	      onDragStart: this.onDragStart,
	      draggable: true,
	      onClick: this.onClick,
	      className: this.iconClasses,
	      style: this.iconStyles
	    });
	  }
	}
	
	module.exports = UrlBarIcon;

/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Button = __webpack_require__(244);
	const cx = __webpack_require__(236);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const KeyCodes = __webpack_require__(743);
	const siteTags = __webpack_require__(256);
	const settings = __webpack_require__(204);
	const siteUtil = __webpack_require__(259);
	const getSetting = __webpack_require__(202).getSetting;
	
	class AddEditBookmarkHanger extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onNameChange = this.onNameChange.bind(this);
	    this.onLocationChange = this.onLocationChange.bind(this);
	    this.onParentFolderChange = this.onParentFolderChange.bind(this);
	    this.onKeyDown = this.onKeyDown.bind(this);
	    this.onClose = this.onClose.bind(this);
	    this.onClick = this.onClick.bind(this);
	    this.onSave = this.onSave.bind(this);
	    this.onViewBookmarks = this.onViewBookmarks.bind(this);
	    this.onRemoveBookmark = this.onRemoveBookmark.bind(this);
	  }
	  get bookmarkNameValid() {
	    const title = this.props.currentDetail.get('title') || this.props.currentDetail.get('customTitle');
	    const location = this.props.currentDetail.get('location');
	    return this.isFolder ? typeof title === 'string' && title.trim().length > 0 : typeof location === 'string' && location.trim().length > 0;
	  }
	  get displayBookmarkName() {
	    if (this.props.currentDetail.get('customTitle') !== undefined) {
	      return this.props.currentDetail.get('customTitle');
	    }
	    return this.props.currentDetail.get('title') || '';
	  }
	  get heading() {
	    if (this.isFolder) {
	      return this.props.shouldShowLocation ? 'bookmarkFolderEditing' : 'bookmarkFolderAdding';
	    }
	    return this.props.shouldShowLocation ? !this.props.originalDetail || !this.props.originalDetail.has('location') ? 'bookmarkCreateNew' : 'bookmarkEdit' : 'bookmarkAdded';
	  }
	  get isFolder() {
	    return siteUtil.isFolder(this.props.currentDetail);
	  }
	  setDefaultFocus() {
	    this.bookmarkName.select();
	    this.bookmarkName.focus();
	  }
	  updateFolders(props) {
	    this.folders = siteUtil.getFolders(this.props.sites, props.currentDetail.get('folderId'));
	  }
	  componentWillMount() {
	    this.updateFolders(this.props);
	  }
	  componentWillUpdate(nextProps) {
	    if (this.props.sites !== nextProps.sites) {
	      this.updateFolders(nextProps);
	    }
	  }
	  componentDidMount() {
	    // Automatically save if this is triggered by the url star
	    if (!this.props.isModal && !this.props.shouldShowLocation) {
	      this.onSave(false);
	    }
	    this.setDefaultFocus();
	  }
	  onKeyDown(e) {
	    switch (e.keyCode) {
	      case KeyCodes.ENTER:
	        this.onSave();
	        break;
	      case KeyCodes.ESC:
	        this.onClose();
	        break;
	    }
	  }
	  onClose() {
	    windowActions.setBookmarkDetail();
	  }
	  onClick(e) {
	    e.stopPropagation();
	  }
	  onNameChange(e) {
	    let currentDetail = this.props.currentDetail;
	    if (currentDetail.get('title') === e.target.value && e.target.value) {
	      currentDetail = currentDetail.delete('customTitle');
	    } else {
	      currentDetail = currentDetail.set('customTitle', e.target.value);
	    }
	    windowActions.setBookmarkDetail(currentDetail, this.props.originalDetail, this.props.destinationDetail, this.props.shouldShowLocation, !this.props.isModal);
	  }
	  onLocationChange(e) {
	    const currentDetail = this.props.currentDetail.set('location', e.target.value);
	    windowActions.setBookmarkDetail(currentDetail, this.props.originalDetail, this.props.destinationDetail, this.props.shouldShowLocation, !this.props.isModal);
	  }
	  onParentFolderChange(e) {
	    const currentDetail = this.props.currentDetail.set('parentFolderId', Number(e.target.value));
	    windowActions.setBookmarkDetail(currentDetail, this.props.originalDetail, this.props.destinationDetail, undefined, !this.props.isModal);
	  }
	  showToolbarOnFirstBookmark() {
	    const hasBookmarks = this.props.sites.find(site => siteUtil.isBookmark(site) || siteUtil.isFolder(site));
	    if (!hasBookmarks && !getSetting(settings.SHOW_BOOKMARKS_TOOLBAR)) {
	      appActions.changeSetting(settings.SHOW_BOOKMARKS_TOOLBAR, true);
	    }
	  }
	  onSave(closeDialog = true) {
	    // First check if the title of the currentDetail is set
	    if (!this.bookmarkNameValid) {
	      return false;
	    }
	    this.showToolbarOnFirstBookmark();
	    const tag = this.isFolder ? siteTags.BOOKMARK_FOLDER : siteTags.BOOKMARK;
	    appActions.addSite(this.props.currentDetail, tag, this.props.originalDetail, this.props.destinationDetail);
	    if (closeDialog) {
	      this.onClose();
	    }
	  }
	  onRemoveBookmark() {
	    const tag = this.isFolder ? siteTags.BOOKMARK_FOLDER : siteTags.BOOKMARK;
	    appActions.removeSite(this.props.currentDetail, tag);
	    this.onClose();
	  }
	  onViewBookmarks() {
	    this.onClose();
	    windowActions.newFrame({ location: 'about:bookmarks' }, true);
	  }
	  render() {
	    const props = this.props.isModal ? {
	      className: 'fa fa-close',
	      onClick: this.onClose
	    } : {
	      className: cx({
	        arrowUp: true,
	        withStopButton: this.props.withStopButton,
	        withHomeButton: this.props.withHomeButton,
	        withoutButtons: this.props.withoutButtons
	      })
	    };
	    return _jsx('div', {
	      className: cx({
	        bookmarkDialog: this.props.isModal,
	        bookmarkHanger: !this.props.isModal
	      })
	    }, void 0, _jsx('div', {
	      className: 'bookmarkForm',
	      onClick: this.onClick
	    }, void 0, React.createElement('div', props), _jsx('div', {
	      className: 'bookmarkFormInner'
	    }, void 0, _jsx('h2', {
	      'data-l10n-id': this.heading
	    }), _jsx('div', {
	      className: 'bookmarkFormTable'
	    }, void 0, _jsx('div', {
	      id: 'bookmarkName',
	      className: 'bookmarkFormRow'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'nameField',
	      htmlFor: 'bookmarkName'
	    }), React.createElement('input', { spellCheck: 'false', onKeyDown: this.onKeyDown, onChange: this.onNameChange, value: this.displayBookmarkName, ref: bookmarkName => {
	        this.bookmarkName = bookmarkName;
	      } })), !this.isFolder && this.props.shouldShowLocation ? _jsx('div', {
	      id: 'bookmarkLocation',
	      className: 'bookmarkFormRow'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'locationField',
	      htmlFor: 'bookmarkLocation'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onLocationChange,
	      value: this.props.currentDetail.get('location')
	    })) : null, _jsx('div', {
	      id: 'bookmarkParentFolder',
	      className: 'bookmarkFormRow'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'parentFolderField',
	      htmlFor: 'bookmarkParentFolder'
	    }), _jsx('select', {
	      value: this.props.currentDetail.get('parentFolderId'),
	      onChange: this.onParentFolderChange
	    }, void 0, _jsx('option', {
	      value: '0',
	      'data-l10n-id': 'bookmarksToolbar'
	    }), this.folders.map(folder => _jsx('option', {
	      value: folder.folderId
	    }, void 0, folder.label)))), _jsx('div', {
	      className: 'bookmarkButtons'
	    }, void 0, this.props.originalDetail ? _jsx(Button, {
	      l10nId: 'remove',
	      className: 'whiteButton wideButton',
	      onClick: this.onRemoveBookmark
	    }) : null, _jsx(Button, {
	      l10nId: 'done',
	      disabled: !this.bookmarkNameValid,
	      className: 'primaryButton wideButton',
	      onClick: this.onSave
	    })))), !this.props.isModal ? _jsx('div', {
	      className: 'bookmarkFormFooter'
	    }, void 0, _jsx(Button, {
	      l10nId: 'viewBookmarks',
	      onClick: this.onViewBookmarks
	    })) : null));
	  }
	}
	
	module.exports = AddEditBookmarkHanger;

/***/ },
/* 747 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	
	class LongPressButton extends ImmutableComponent {
	  constructor() {
	    super();
	    this.isLocked = false;
	    this.onClick = this.onClick.bind(this);
	    this.onMouseDown = this.onMouseDown.bind(this);
	    this.onMouseUp = this.onMouseUp.bind(this);
	    this.onMouseLeave = this.onMouseLeave.bind(this);
	  }
	
	  onMouseDown(e) {
	    if (e.target.attributes.getNamedItem('disabled')) {
	      return;
	    }
	    if (e && e.preventDefault) {
	      e.preventDefault();
	    }
	    if (e && e.stopPropagation) {
	      e.stopPropagation();
	    }
	
	    const self = this;
	    const target = e.target;
	    const LONG_PRESS_MILLISECONDS = 300;
	
	    // Right click should immediately trigger the action
	    if (e.button === 2) {
	      self.props.onLongPress(target);
	      return;
	    }
	
	    // Otherwise, it should wait before triggering
	    this.longPressTimer = setTimeout(function () {
	      self.isLocked = true;
	      self.props.onLongPress(target);
	    }, LONG_PRESS_MILLISECONDS);
	  }
	
	  onMouseUp(e) {
	    if (this.longPressTimer) {
	      clearTimeout(this.longPressTimer);
	      this.longPressTimer = null;
	    }
	  }
	
	  onMouseLeave(e) {
	    this.onMouseUp(e);
	    if (this.isLocked) {
	      this.isLocked = false;
	    }
	  }
	
	  onClick(e) {
	    if (this.isLocked) {
	      this.isLocked = false;
	      return;
	    }
	    if (this.props.onClick) {
	      this.props.onClick(e);
	    }
	  }
	
	  render() {
	    return _jsx('button', {
	      'data-l10n-id': this.props.l10nId,
	      className: this.props.className,
	      disabled: this.props.disabled,
	      onClick: this.onClick,
	      onMouseDown: this.onMouseDown,
	      onMouseUp: this.onMouseUp,
	      onMouseLeave: this.onMouseLeave
	    });
	  }
	}
	
	module.exports = LongPressButton;

/***/ },
/* 748 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const tldjs = __webpack_require__(738);
	const ImmutableComponent = __webpack_require__(215);
	const appActions = __webpack_require__(704);
	const settings = __webpack_require__(204);
	const getSetting = __webpack_require__(202).getSetting;
	const { StyleSheet, css } = __webpack_require__(475);
	
	const noFundVerifiedPublisherImage = __webpack_require__(749);
	const fundVerifiedPublisherImage = __webpack_require__(750);
	const noFundUnverifiedPublisherImage = __webpack_require__(751);
	const fundUnverifiedPublisherImage = __webpack_require__(752);
	
	class PublisherToggle extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onAuthorizePublisher = this.onAuthorizePublisher.bind(this);
	  }
	
	  get domain() {
	    return tldjs.getDomain(this.props.url);
	  }
	
	  get hostPattern() {
	    return `https?://${this.domain}`;
	  }
	
	  get hostSettings() {
	    // hostPattern defines it's own identifier for authorized publishers
	    // sites that do not match criteria would populate siteSettings
	    // with their default protocol, not hostPattern
	    return this.props.hostSettings.get(this.hostPattern);
	  }
	
	  get validPublisherSynopsis() {
	    // If session is clear then siteSettings is undefined and icon will never be shown,
	    // but synopsis may not be empty. In such cases let's check if synopsis matches current domain
	    return this.props.synopsis.map(entry => entry.get('site')).includes(this.domain);
	  }
	
	  get authorizedPublisher() {
	    // If we can't get ledgerPayments, then it's likely that we are
	    // on a clean session. Let's then check for publisher's synopsis
	    return this.hostSettings ? this.hostSettings.get('ledgerPayments') !== false : this.validPublisherSynopsis;
	  }
	
	  get verifiedPublisher() {
	    let verifiedPublisher;
	    this.props.synopsis.map(publisher => {
	      if (publisher.get('site') === this.domain && publisher.get('verified') === true) {
	        verifiedPublisher = !!publisher;
	        return false;
	      }
	      return true;
	    });
	    return verifiedPublisher;
	  }
	
	  get visiblePublisher() {
	    // ledgerPaymentsShown is undefined by default until user decide to permanently hide the publisher
	    // so for icon to be shown it can be everything but false
	    const ledgerPaymentsShown = this.hostSettings && this.hostSettings.get('ledgerPaymentsShown');
	    return ledgerPaymentsShown !== false;
	  }
	
	  get shouldShowAddPublisherButton() {
	    if ((!!this.hostSettings || !!this.validPublisherSynopsis) && this.visiblePublisher) {
	      // Only show publisher icon if autoSuggest option is OFF
	      return !getSetting(settings.AUTO_SUGGEST_SITES);
	    }
	    return false;
	  }
	
	  get l10nString() {
	    if (this.verifiedPublisher && !this.authorizedPublisher) {
	      return 'verifiedPublisher';
	    } else if (this.authorizedPublisher) {
	      return 'enabledPublisher';
	    }
	    return 'disabledPublisher';
	  }
	
	  onAuthorizePublisher() {
	    // if payments disabled, enable it
	    if (!getSetting(settings.AUTO_SUGGEST_SITES)) {
	      appActions.changeSetting(settings.PAYMENTS_ENABLED, true);
	    }
	
	    this.authorizedPublisher ? appActions.changeSiteSetting(this.hostPattern, 'ledgerPayments', false) : appActions.changeSiteSetting(this.hostPattern, 'ledgerPayments', true);
	  }
	
	  render() {
	    return this.shouldShowAddPublisherButton ? _jsx('span', {
	      'data-test-id': 'publisherButton',
	      'data-test-authorized': this.authorizedPublisher,
	      'data-test-verified': this.verifiedPublisher,
	      className: css(styles.addPublisherButtonContainer)
	    }, void 0, _jsx('button', {
	      className: css(styles.browserButton, !this.authorizedPublisher && this.verifiedPublisher && styles.noFundVerified, this.authorizedPublisher && this.verifiedPublisher && styles.fundVerified, !this.authorizedPublisher && !this.verifiedPublisher && styles.noFundUnverified, this.authorizedPublisher && !this.verifiedPublisher && styles.fundUnverified),
	      'data-l10n-id': this.l10nString,
	      onClick: this.onAuthorizePublisher
	    })) : null;
	  }
	}
	
	const styles = StyleSheet.create({
	  addPublisherButtonContainer: {
	    boxSizing: 'border-box',
	    display: 'flex',
	    alignItems: 'center',
	    height: '25px',
	    width: '25px',
	    minHeight: '25px',
	    minWidth: '25px',
	    WebkitAppRegion: 'no-drag',
	    borderWidth: '1px 1px 1px 0px',
	    borderStyle: 'solid',
	    borderColor: '#CBCBCB',
	    borderRadius: '0 4px 4px 0',
	    borderTopLeftRadius: '0',
	    borderBottomLeftRadius: '0',
	    borderBottomColor: 'rgba(0, 0, 0, 0.1)'
	  },
	
	  browserButton: {
	    border: 'none',
	    margin: '0',
	    whiteSpace: 'nowrap',
	    outline: 'none',
	    cursor: 'default',
	    display: 'inline-block',
	    lineHeight: '25px',
	    width: '25px',
	    height: '25px',
	    fontSize: '13px',
	    color: '#5a5a5a',
	    borderRadius: '4px',
	    textAlign: 'center',
	    transition: '.1s opacity, .1s background',
	    WebkitUserSelect: 'none',
	    backgroundSize: '16px',
	    backgroundPosition: 'center center',
	    backgroundRepeat: 'no-repeat'
	  },
	
	  noFundVerified: {
	    backgroundImage: `url(${noFundVerifiedPublisherImage})`
	  },
	
	  fundVerified: {
	    backgroundImage: `url(${fundVerifiedPublisherImage})`
	  },
	
	  noFundUnverified: {
	    backgroundImage: `url(${noFundUnverifiedPublisherImage})`
	  },
	
	  fundUnverified: {
	    backgroundImage: `url(${fundUnverifiedPublisherImage})`
	  }
	});
	
	module.exports = PublisherToggle;

/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "ab2bcce747e420e3d89297ee9f4813e9.svg";

/***/ },
/* 750 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "eab11bfc55f1f5607096112db8e5a814.svg";

/***/ },
/* 751 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "6603ef75cf9b441d90694a0a6b5e26f5.svg";

/***/ },
/* 752 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "01a41a0ba873679f7f1f527083e8a4b3.svg";

/***/ },
/* 753 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const urlParse = __webpack_require__(192);
	const windowActions = __webpack_require__(716);
	const webviewActions = __webpack_require__(722);
	const appActions = __webpack_require__(704);
	const ImmutableComponent = __webpack_require__(215);
	const Immutable = __webpack_require__(188);
	const cx = __webpack_require__(236);
	const siteUtil = __webpack_require__(259);
	const FrameStateUtil = __webpack_require__(705);
	const UrlUtil = __webpack_require__(190);
	const messages = __webpack_require__(211);
	const contextMenus = __webpack_require__(723);
	const ipc = __webpack_require__(703).ipcRenderer;
	const FullScreenWarning = __webpack_require__(754);
	const debounce = __webpack_require__(209);
	const getSetting = __webpack_require__(202).getSetting;
	const config = __webpack_require__(201);
	const settings = __webpack_require__(204);
	const { aboutUrls, isSourceMagnetUrl, isSourceAboutUrl, isTargetAboutUrl, getTargetAboutUrl, getBaseUrl, isIntermediateAboutPage } = __webpack_require__(187);
	const { isFrameError } = __webpack_require__(503);
	const locale = __webpack_require__(728);
	const appConfig = __webpack_require__(203);
	const { getSiteSettingsForHostPattern } = __webpack_require__(755);
	const { currentWindowWebContents, isFocused } = __webpack_require__(706);
	const windowStore = __webpack_require__(701);
	const appStoreRenderer = __webpack_require__(207);
	const siteSettings = __webpack_require__(755);
	const { newTabMode } = __webpack_require__(206);
	const imageUtil = __webpack_require__(733);
	
	const WEBRTC_DEFAULT = 'default';
	const WEBRTC_DISABLE_NON_PROXY = 'disable_non_proxied_udp';
	// Looks like Brave leaks true public IP from behind system proxy when this option
	// is on.
	// const WEBRTC_PUBLIC_ONLY = 'default_public_interface_only'
	
	const pdfjsOrigin = `chrome-extension://${config.PDFJSExtensionId}/`;
	
	function isTorrentViewerURL(url) {
	  const isEnabled = getSetting(settings.TORRENT_VIEWER_ENABLED);
	  return isEnabled && isSourceMagnetUrl(url);
	}
	
	class Frame extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onUpdateWheelZoom = debounce(this.onUpdateWheelZoom.bind(this), 20);
	    this.onFocus = this.onFocus.bind(this);
	    // Maps notification message to its callback
	    this.notificationCallbacks = {};
	    // Counter for detecting PDF URL redirect loops
	    this.reloadCounter = {};
	  }
	
	  get frame() {
	    return windowStore.getFrame(this.props.frameKey) || Immutable.fromJS({});
	  }
	
	  get tab() {
	    const frame = this.frame;
	    return appStoreRenderer.state.get('tabs').find(tab => tab.get('tabId') === frame.get('tabId'));
	  }
	
	  getFrameBraverySettings(props) {
	    props = props || this.props;
	    const frameSiteSettings = siteSettings.getSiteSettingsForURL(props.allSiteSettings, props.location);
	    return Immutable.fromJS(siteSettings.activeSettings(frameSiteSettings, appStoreRenderer.state, appConfig));
	  }
	
	  isAboutPage() {
	    return aboutUrls.get(getBaseUrl(this.props.location));
	  }
	
	  isIntermediateAboutPage() {
	    return isIntermediateAboutPage(getBaseUrl(this.props.location));
	  }
	
	  /**
	   * Send data critical for the given about page via IPC.
	   * The page receiving the data typically uses it in component state.
	   */
	  updateAboutDetails(prevProps) {
	    let location = getBaseUrl(this.props.location);
	    if (location === 'about:preferences' || location === 'about:contributions' || location === aboutUrls.get('about:contributions')) {
	      if (prevProps.partition !== this.props.partition) {
	        ipc.send(messages.CHECK_BITCOIN_HANDLER, this.props.partition);
	      }
	      if (!Immutable.is(prevProps.ledgerInfo, this.props.ledgerInfo) || !Immutable.is(prevProps.publisherInfo, this.props.publisherInfo) || !Immutable.is(prevProps.preferencesData, this.props.preferencesData)) {
	        const ledgerData = this.props.ledgerInfo.merge(this.props.publisherInfo).merge(this.props.preferencesData);
	        this.webview.send(messages.LEDGER_UPDATED, ledgerData.toJS());
	      }
	      if (!Immutable.is(prevProps.settings, this.props.settings)) {
	        this.webview.send(messages.SETTINGS_UPDATED, this.props.settings ? this.props.settings.toJS() : null);
	      }
	      if (!Immutable.is(prevProps.allSiteSettings, this.props.allSiteSettings)) {
	        this.webview.send(messages.SITE_SETTINGS_UPDATED, this.props.allSiteSettings ? this.props.allSiteSettings.toJS() : null);
	      }
	      if (!Immutable.is(prevProps.braveryDefaults, this.props.braveryDefaults)) {
	        this.webview.send(messages.BRAVERY_DEFAULTS_UPDATED, this.props.braveryDefaults.toJS());
	      }
	    } else if (location === 'about:bookmarks') {
	      if (!Immutable.is(prevProps.bookmarks, this.props.bookmarks) || !Immutable.is(prevProps.bookmarkFolders, this.props.bookmarkFolders)) {
	        this.webview.send(messages.BOOKMARKS_UPDATED, {
	          bookmarks: this.props.bookmarks.toList().sort(siteUtil.siteSort).toJS(),
	          bookmarkFolders: this.props.bookmarkFolders.toJS()
	        });
	      }
	    } else if (location === 'about:history') {
	      if (!Immutable.is(prevProps.history, this.props.history)) {
	        const aboutHistoryState = this.props.history && this.props.history.toJS ? this.props.history.toJS() : {};
	        this.webview.send(messages.HISTORY_UPDATED, aboutHistoryState);
	      }
	      if (!Immutable.is(prevProps.settings, this.props.settings)) {
	        this.webview.send(messages.SETTINGS_UPDATED, this.props.settings ? this.props.settings.toJS() : null);
	      }
	    } else if (location === 'about:extensions') {
	      if (!Immutable.is(prevProps.extensions, this.props.extensions)) {
	        this.webview.send(messages.EXTENSIONS_UPDATED, {
	          extensions: this.props.extensions.toJS()
	        });
	      }
	    } else if (location === 'about:adblock') {
	      if (!Immutable.is(prevProps.adblock, this.props.adblock) || !Immutable.is(prevProps.settings, this.props.settings)) {
	        this.webview.send(messages.ADBLOCK_UPDATED, {
	          adblock: this.props.adblock.toJS(),
	          settings: this.props.settings ? this.props.settings.toJS() : null,
	          resources: __webpack_require__(756)
	        });
	      }
	    } else if (location === 'about:downloads') {
	      if (!Immutable.is(prevProps.downloads, this.props.downloads)) {
	        this.webview.send(messages.DOWNLOADS_UPDATED, {
	          downloads: this.props.downloads.toJS()
	        });
	      }
	    } else if (location === 'about:passwords') {
	      if (this.props.passwords && !Immutable.is(prevProps.passwords, this.props.passwords)) {
	        this.webview.send(messages.PASSWORD_DETAILS_UPDATED, this.props.passwords.toJS());
	      }
	      if (this.props.allSiteSettings && !Immutable.is(prevProps.allSiteSettings, this.props.allSiteSettings)) {
	        this.webview.send(messages.PASSWORD_SITE_DETAILS_UPDATED, this.props.allSiteSettings.filter(setting => setting.get('savePasswords') === false).toJS());
	      }
	    } else if (location === 'about:flash') {
	      if (!Immutable.is(prevProps.braveryDefaults, this.props.braveryDefaults)) {
	        this.webview.send(messages.BRAVERY_DEFAULTS_UPDATED, this.props.braveryDefaults.toJS());
	      }
	    } else if (location === 'about:newtab') {
	      if (!Immutable.is(prevProps.settings, this.props.settings) || prevProps.trackedBlockersCount !== this.props.trackedBlockersCount || prevProps.adblockCount !== this.props.adblockCount || prevProps.httpsUpgradedCount !== this.props.httpsUpgradedCount || !Immutable.is(prevProps.newTabDetail, this.props.newTabDetail)) {
	        this.webview.send(messages.NEWTAB_DATA_UPDATED, {
	          showEmptyPage: getSetting(settings.NEWTAB_MODE) === newTabMode.EMPTY_NEW_TAB,
	          trackedBlockersCount: this.props.trackedBlockersCount,
	          adblockCount: this.props.adblockCount,
	          httpsUpgradedCount: this.props.httpsUpgradedCount,
	          newTabDetail: this.props.newTabDetail ? this.props.newTabDetail.toJS() : null
	        });
	      }
	    } else if (location === 'about:autofill') {
	      if (this.props.autofillAddresses && !Immutable.is(prevProps.autofillAddresses, this.props.autofillAddresses)) {
	        const defaultSession = __webpack_require__(703).remote.session.defaultSession;
	        const guids = this.props.autofillAddresses.get('guid');
	        let list = [];
	        guids.forEach(entry => {
	          const address = defaultSession.autofill.getProfile(entry);
	          let addressDetail = {
	            name: address.full_name,
	            organization: address.company_name,
	            streetAddress: address.street_address,
	            city: address.city,
	            state: address.state,
	            postalCode: address.postal_code,
	            country: address.country_code,
	            phone: address.phone,
	            email: address.email,
	            guid: entry
	          };
	          list.push(addressDetail);
	        });
	        this.webview.send(messages.AUTOFILL_ADDRESSES_UPDATED, list);
	      }
	      if (this.props.autofillCreditCards && !Immutable.is(prevProps.autofillCreditCards, this.props.autofillCreditCards)) {
	        const defaultSession = __webpack_require__(703).remote.session.defaultSession;
	        const guids = this.props.autofillCreditCards.get('guid');
	        let list = [];
	        guids.forEach(entry => {
	          const creditCard = defaultSession.autofill.getCreditCard(entry);
	          let creditCardDetail = {
	            name: creditCard.name,
	            card: creditCard.card_number,
	            month: creditCard.expiration_month,
	            year: creditCard.expiration_year,
	            guid: entry
	          };
	          list.push(creditCardDetail);
	        });
	        this.webview.send(messages.AUTOFILL_CREDIT_CARDS_UPDATED, list);
	      }
	    } else if (location === 'about:brave') {
	      if (this.props.versionInformation && this.props.versionInformation.toJS && !Immutable.is(prevProps.versionInformation, this.props.versionInformation)) {
	        this.webview.send(messages.VERSION_INFORMATION_UPDATED, this.props.versionInformation.toJS());
	      }
	    }
	
	    // send state to about pages
	    if (this.isAboutPage() && this.props.aboutDetails) {
	      if (!Immutable.is(prevProps.aboutDetails, this.props.aboutDetails)) {
	        this.webview.send(messages.STATE_UPDATED, this.props.aboutDetails.toJS());
	      }
	    }
	  }
	
	  shouldCreateWebview() {
	    return !this.webview;
	  }
	
	  runInsecureContent() {
	    const activeSiteSettings = getSiteSettingsForHostPattern(this.props.allSiteSettings, this.origin);
	    return activeSiteSettings === undefined ? false : activeSiteSettings.get('runInsecureContent');
	  }
	
	  allowRunningWidevinePlugin(url) {
	    if (!this.props.widevine || !this.props.widevine.get('enabled')) {
	      return false;
	    }
	    const origin = url ? siteUtil.getOrigin(url) : this.origin;
	    if (!origin) {
	      return false;
	    }
	    // Check for at least one CtP allowed on this origin
	    if (!this.props.allSiteSettings) {
	      return false;
	    }
	    const activeSiteSettings = getSiteSettingsForHostPattern(this.props.allSiteSettings, origin);
	    if (activeSiteSettings && typeof activeSiteSettings.get('widevine') === 'number') {
	      return true;
	    }
	    return false;
	  }
	
	  expireContentSettings(origin) {
	    // Expired Flash settings should be deleted when the webview is
	    // navigated or closed. Same for NoScript's allow-once option.
	    const activeSiteSettings = getSiteSettingsForHostPattern(this.props.allSiteSettings, origin);
	    if (!activeSiteSettings) {
	      return;
	    }
	    if (typeof activeSiteSettings.get('flash') === 'number') {
	      if (activeSiteSettings.get('flash') < Date.now()) {
	        appActions.removeSiteSetting(origin, 'flash', this.props.isPrivate);
	      }
	    }
	    if (activeSiteSettings.get('widevine') === 0) {
	      appActions.removeSiteSetting(origin, 'widevine', this.props.isPrivate);
	    }
	    if (activeSiteSettings.get('noScript') === 0) {
	      appActions.removeSiteSetting(origin, 'noScript', this.props.isPrivate);
	    }
	  }
	
	  componentWillUnmount() {
	    this.expireContentSettings(this.origin);
	  }
	
	  updateWebview(cb, newSrc) {
	    // lazy load webview
	    if (!this.webview && !this.props.isActive && !this.props.isPreview &&
	    // allow force loading of new frames
	    this.props.unloaded === true &&
	    // don't lazy load about pages
	    !aboutUrls.get(getBaseUrl(this.props.src)) &&
	    // pinned tabs don't serialize their state so the icon is lost for lazy loading
	    !this.props.pinnedLocation) {
	      return;
	    }
	
	    newSrc = newSrc || this.props.src;
	
	    if (isSourceAboutUrl(newSrc)) {
	      newSrc = getTargetAboutUrl(newSrc);
	    }
	
	    let guestInstanceId = null;
	
	    // Create the webview dynamically because React doesn't whitelist all
	    // of the attributes we need
	    let webviewAdded = false;
	    if (this.shouldCreateWebview()) {
	      guestInstanceId = this.props.guestInstanceId;
	      this.webview = document.createElement('webview');
	      if (guestInstanceId) {
	        if (!this.webview.setGuestInstanceId(guestInstanceId)) {
	          console.error('could not set guestInstanceId ' + guestInstanceId);
	          guestInstanceId = null;
	        }
	      } else {
	        let partition = FrameStateUtil.getPartition(this.frame);
	        ipc.sendSync(messages.INITIALIZE_PARTITION, partition);
	        this.webview.setAttribute('partition', partition);
	      }
	
	      this.addEventListeners();
	      if (cb) {
	        this.runOnDomReady = cb;
	        let eventCallback = e => {
	          this.webview.removeEventListener(e.type, eventCallback);
	          this.runOnDomReady();
	          delete this.runOnDomReady;
	        };
	        this.webview.addEventListener('did-attach', eventCallback);
	      }
	
	      webviewAdded = true;
	    }
	
	    if (!guestInstanceId || newSrc !== getTargetAboutUrl('about:blank')) {
	      this.webview.setAttribute('src', newSrc);
	    }
	
	    this.webview.setAttribute('data-frame-key', this.props.frameKey);
	
	    if (webviewAdded) {
	      this.webviewContainer.appendChild(this.webview);
	    } else {
	      cb && cb();
	    }
	  }
	
	  componentDidMount() {
	    const cb = () => {
	      this.webview.setActive(this.props.isActive);
	      this.webview.setTabIndex(this.props.tabIndex);
	      this.updateAboutDetails({});
	    };
	    this.updateWebview(cb);
	  }
	
	  get zoomLevel() {
	    const zoom = this.props.frameSiteSettings && this.props.frameSiteSettings.get('zoomLevel');
	    appActions.removeSiteSetting(this.origin, 'zoomLevel', this.props.isPrivate);
	    return zoom;
	  }
	
	  zoomIn() {
	    if (this.webview) {
	      this.webview.zoomIn();
	      windowActions.setLastZoomPercentage(this.frame, this.webview.getZoomPercent());
	    }
	  }
	
	  zoomOut() {
	    if (this.webview) {
	      this.webview.zoomOut();
	      windowActions.setLastZoomPercentage(this.frame, this.webview.getZoomPercent());
	    }
	  }
	
	  zoomReset() {
	    if (this.webview) {
	      this.webview.zoomReset();
	      windowActions.setLastZoomPercentage(this.frame, this.webview.getZoomPercent());
	    }
	  }
	
	  enterHtmlFullScreen() {
	    if (this.webview) {
	      this.webview.executeScriptInTab(config.braveExtensionId, 'document.documentElement.webkitRequestFullScreen()', {});
	      this.webview.focus();
	    }
	  }
	
	  exitHtmlFullScreen() {
	    if (this.webview) {
	      this.webview.executeScriptInTab(config.braveExtensionId, 'document.webkitExitFullscreen()', {});
	    }
	  }
	
	  setTitle(title) {
	    if (this.frame.isEmpty()) {
	      return;
	    }
	    windowActions.setFrameTitle(this.frame, title);
	  }
	
	  componentDidUpdate(prevProps, prevState) {
	    if (this.props.tabData) {
	      if (!prevProps.tabData || prevProps.tabData.get('title') !== this.props.tabData.get('title')) {
	        this.setTitle(this.props.tabData.get('title'));
	      }
	    }
	
	    const cb = () => {
	      if (this.getWebRTCPolicy(prevProps) !== this.getWebRTCPolicy(this.props)) {
	        this.webview.setWebRTCIPHandlingPolicy(this.getWebRTCPolicy(this.props));
	      }
	      this.webview.setActive(this.props.isActive);
	      this.webview.setTabIndex(this.props.tabIndex);
	      if (prevProps.activeShortcut !== this.props.activeShortcut) {
	        this.handleShortcut();
	      }
	
	      if (this.props.isActive && !prevProps.isActive && !this.props.urlBarFocused) {
	        this.webview.focus();
	      }
	
	      // make sure the webview content updates to
	      // match the fullscreen state of the frame
	      if (prevProps.isFullScreen !== this.props.isFullScreen || this.props.isFullScreen && !this.props.isActive) {
	        if (this.props.isFullScreen && this.props.isActive) {
	          this.enterHtmlFullScreen();
	        } else {
	          this.exitHtmlFullScreen();
	        }
	      }
	      this.updateAboutDetails(prevProps);
	    };
	
	    // For cross-origin navigation, clear temp approvals
	    const prevOrigin = siteUtil.getOrigin(prevProps.location);
	    if (this.origin !== prevOrigin) {
	      this.expireContentSettings(prevOrigin);
	    }
	
	    if (this.props.src !== prevProps.src) {
	      this.updateWebview(cb);
	    } else if (this.shouldCreateWebview()) {
	      // plugin/insecure-content allow state has changed. recreate with the current
	      // location, not the src.
	      this.updateWebview(cb, this.props.location);
	    } else {
	      if (this.runOnDomReady) {
	        // there is already a callback waiting for did-attach
	        // so replace it with this callback because it might be a
	        // mount callback which is a subset of the update callback
	        this.runOnDomReady = cb;
	      } else {
	        cb();
	      }
	    }
	  }
	
	  handleShortcut() {
	    switch (this.props.activeShortcut) {
	      case 'stop':
	        this.webview.stop();
	        break;
	      case 'reload':
	        // Ensure that the webview thinks we're on the same location as the browser does.
	        // This can happen for pages which don't load properly.
	        // Some examples are basic http auth and bookmarklets.
	        // In this case both the user display and the user think they're on this.props.location.
	        if (this.tab.get('url') !== this.props.location && !this.isAboutPage() && !isTorrentViewerURL(this.props.location)) {
	          this.webview.loadURL(this.props.location);
	        } else if (this.isIntermediateAboutPage() && this.tab.get('url') !== this.props.location && this.tab.get('url') !== this.props.aboutDetails.get('url')) {
	          windowActions.setUrl(this.props.aboutDetails.get('url'), this.props.aboutDetails.get('frameKey'));
	        } else {
	          this.webview.reload();
	        }
	        break;
	      case 'clean-reload':
	        this.webview.reloadIgnoringCache();
	        break;
	      case 'explicitLoadURL':
	        this.webview.loadURL(this.props.location);
	        break;
	      case 'zoom-in':
	        this.zoomIn();
	        break;
	      case 'zoom-out':
	        this.zoomOut();
	        break;
	      case 'zoom-reset':
	        this.zoomReset();
	        break;
	      case 'view-source':
	        const sourceLocation = UrlUtil.getViewSourceUrlFromUrl(this.tab.get('url'));
	        if (sourceLocation !== null) {
	          windowActions.newFrame({
	            location: sourceLocation,
	            isPrivate: this.frame.get('isPrivate'),
	            partitionNumber: this.frame.get('partitionNumber'),
	            parentFrameKey: this.frame.get('key')
	          }, true);
	        }
	        // TODO: Make the URL bar show the view-source: prefix
	        break;
	      case 'save':
	        const downloadLocation = getSetting(settings.PDFJS_ENABLED) ? UrlUtil.getLocationIfPDF(this.tab.get('url')) : this.tab.get('url');
	        // TODO: Sometimes this tries to save in a non-existent directory
	        this.webview.downloadURL(downloadLocation);
	        break;
	      case 'print':
	        this.webview.print();
	        break;
	      case 'show-findbar':
	        windowActions.setFindbarShown(this.frame, true);
	        break;
	      case 'fill-password':
	        let currentUrl = urlParse(this.tab.get('url'));
	        if (currentUrl && [currentUrl.protocol, currentUrl.host].join('//') === this.props.activeShortcutDetails.get('origin')) {
	          this.webview.send(messages.GOT_PASSWORD, this.props.activeShortcutDetails.get('username'), this.props.activeShortcutDetails.get('password'), this.props.activeShortcutDetails.get('origin'), this.props.activeShortcutDetails.get('action'), true);
	        }
	        break;
	      case 'focus-webview':
	        setImmediate(() => this.webview.focus());
	        break;
	      case 'load-non-navigatable-url':
	        this.webview.loadURL(this.props.activeShortcutDetails);
	        break;
	      case 'copy':
	        let selection = window.getSelection();
	        if (selection && selection.toString()) {
	          appActions.clipboardTextCopied(selection.toString());
	        } else {
	          this.webview.copy();
	        }
	        break;
	      case 'find-next':
	        this.onFindAgain(true);
	        break;
	      case 'find-prev':
	        this.onFindAgain(false);
	        break;
	    }
	    if (this.props.activeShortcut) {
	      windowActions.setActiveFrameShortcut(this.frame, null, null);
	    }
	  }
	
	  /**
	   * Shows a Widevine CtP notification if Widevine is installed and enabled.
	   * If not enabled, alert user that Widevine is installed.
	   * @param {string} origin - frame origin that is requesting to run widevine.
	   *   can either be main frame or subframe.
	   * @param {function=} noWidevineCallback - Optional callback to run if Widevine is not
	   *   installed
	   * @param {function=} widevineCallback - Optional callback to run if Widevine is
	   *   accepted
	   */
	  showWidevineNotification(location, origin, noWidevineCallback, widevineCallback) {
	    // https://www.nfl.com is said to be a widevine site but it actually uses Flash for me Oct 10, 2016
	    const widevineSites = ['https://www.netflix.com', 'http://bitmovin.com', 'https://shaka-player-demo.appspot.com'];
	    const isForWidevineTest = ("development") === 'test' && location.endsWith('/drm.html');
	    if (!isForWidevineTest && (!origin || !widevineSites.includes(origin))) {
	      noWidevineCallback();
	      return;
	    }
	
	    // Generate a random string that is unlikely to collide. Not
	    // cryptographically random.
	    const nonce = Math.random().toString();
	
	    if (this.props.widevine && this.props.widevine.get('enabled')) {
	      const message = locale.translation('allowWidevine').replace(/{{\s*origin\s*}}/, this.origin);
	      // Show Widevine notification bar
	      appActions.showMessageBox({
	        buttons: [{ text: locale.translation('deny') }, { text: locale.translation('allow') }],
	        message,
	        frameOrigin: this.origin,
	        options: {
	          nonce,
	          persist: true
	        }
	      });
	      this.notificationCallbacks[message] = (buttonIndex, persist) => {
	        if (buttonIndex === 1) {
	          if (persist) {
	            appActions.changeSiteSetting(this.origin, 'widevine', 1);
	          } else {
	            appActions.changeSiteSetting(this.origin, 'widevine', 0);
	          }
	          if (widevineCallback) {
	            widevineCallback();
	          }
	        } else {
	          if (persist) {
	            appActions.changeSiteSetting(this.origin, 'widevine', false);
	          }
	        }
	        appActions.hideMessageBox(message);
	      };
	    } else {
	      windowActions.widevineSiteAccessedWithoutInstall();
	    }
	
	    ipc.once(messages.NOTIFICATION_RESPONSE + nonce, (e, msg, buttonIndex, persist) => {
	      const cb = this.notificationCallbacks[msg];
	      if (cb) {
	        cb(buttonIndex, persist);
	      }
	    });
	  }
	
	  addEventListeners() {
	    this.webview.addEventListener('content-blocked', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (e.details[0] === 'javascript' && e.details[1]) {
	        windowActions.setBlockedBy(this.frame, 'noScript', e.details[1]);
	      }
	    });
	    this.webview.addEventListener('did-block-run-insecure-content', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.setBlockedRunInsecureContent(this.frame, e.details[0]);
	    });
	    this.webview.addEventListener('enable-pepper-menu', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      contextMenus.onFlashContextMenu(e.params, this.frame);
	      e.preventDefault();
	      e.stopPropagation();
	    });
	    this.webview.addEventListener('context-menu', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      contextMenus.onMainContextMenu(e.params, this.frame, this.tab);
	      e.preventDefault();
	      e.stopPropagation();
	    });
	    this.webview.addEventListener('update-target-url', e => {
	      if (!this.root) {
	        this.root = window.getComputedStyle(document.querySelector(':root'));
	        this.downloadsBarHeight = Number.parseInt(this.root.getPropertyValue('--downloads-bar-height'), 10);
	      }
	      let nearBottom = e.y > window.innerHeight - 150 - this.downloadsBarHeight;
	      let mouseOnLeft = e.x < window.innerWidth / 2;
	      let showOnRight = nearBottom && mouseOnLeft;
	      windowActions.setLinkHoverPreview(e.url, showOnRight);
	    });
	    this.webview.addEventListener('set-active', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (e.active && isFocused()) {
	        windowActions.setFocusedFrame(this.frame);
	      }
	      if (e.active && !this.props.isActive) {
	        windowActions.setActiveFrame(this.frame);
	      }
	    });
	    this.webview.addEventListener('focus', this.onFocus);
	    this.webview.addEventListener('mouseenter', e => {
	      currentWindowWebContents.send(messages.ENABLE_SWIPE_GESTURE);
	    });
	    this.webview.addEventListener('mouseleave', e => {
	      currentWindowWebContents.send(messages.DISABLE_SWIPE_GESTURE);
	    });
	    this.webview.addEventListener('did-attach', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      // TODO: Remove webview.getId() part below when everyone is on a newer electron
	      let tabId = e.tabId !== undefined ? e.tabId : this.webview.getId();
	      if (this.props.tabId !== tabId) {
	        windowActions.setFrameTabId(this.frame, tabId);
	      }
	    });
	    this.webview.addEventListener('destroyed', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      this.props.onCloseFrame(this.frame);
	    });
	    this.webview.addEventListener('close', () => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      this.props.onCloseFrame(this.frame);
	    });
	    this.webview.addEventListener('page-favicon-updated', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (e.favicons && e.favicons.length > 0) {
	        imageUtil.getWorkingImageUrl(e.favicons[0], imageFound => {
	          windowActions.setFavicon(this.frame, imageFound ? e.favicons[0] : null);
	        });
	      }
	    });
	    this.webview.addEventListener('show-autofill-settings', e => {
	      windowActions.newFrame({ location: 'about:autofill' }, true);
	    });
	    this.webview.addEventListener('show-autofill-popup', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      contextMenus.onShowAutofillMenu(e.suggestions, e.rect, this.frame);
	    });
	    this.webview.addEventListener('hide-autofill-popup', e => {
	      if (this.props.contextMenuDetail && this.props.contextMenuDetail.get('type') === 'autofill' && (this.props.contextMenuDetail.get('tabId') !== this.props.tabId || this.webview.isFocused())) {
	        windowActions.autofillPopupHidden(this.props.tabId);
	      }
	    });
	    this.webview.addEventListener('ipc-message', e => {
	      let method = () => {};
	      switch (e.channel) {
	        case messages.ABOUT_COMPONENT_INITIALIZED:
	          this.updateAboutDetails({});
	          break;
	        case messages.GOT_CANVAS_FINGERPRINTING:
	          if (this.frame.isEmpty()) {
	            return;
	          }
	          method = detail => {
	            const description = [detail.type, detail.scriptUrl || this.props.provisionalLocation].join(': ');
	            windowActions.setBlockedBy(this.frame, 'fingerprintingProtection', description);
	          };
	          break;
	        case messages.THEME_COLOR_COMPUTED:
	          if (this.frame.isEmpty()) {
	            return;
	          }
	          method = computedThemeColor => windowActions.setThemeColor(this.frame, undefined, computedThemeColor || null);
	          break;
	        case messages.CONTEXT_MENU_OPENED:
	          if (this.frame.isEmpty()) {
	            return;
	          }
	          method = (nodeProps, contextMenuType) => {
	            contextMenus.onMainContextMenu(nodeProps, this.frame, this.tab, contextMenuType);
	          };
	          break;
	        case messages.STOP_LOAD:
	          method = () => this.webview.stop();
	          break;
	        case messages.GO_BACK:
	          method = () => this.webview.goBack();
	          break;
	        case messages.GO_FORWARD:
	          method = () => this.webview.goForward();
	          break;
	        case messages.RELOAD:
	          method = () => {
	            this.reloadCounter[this.props.location] = this.reloadCounter[this.props.location] || 0;
	            if (this.reloadCounter[this.props.location] < 2) {
	              this.webview.reload();
	              this.reloadCounter[this.props.location] = this.reloadCounter[this.props.location] + 1;
	            }
	          };
	          break;
	        case messages.CLEAR_BROWSING_DATA_NOW:
	          method = () => windowActions.setClearBrowsingDataPanelVisible(true);
	          break;
	        case messages.AUTOFILL_SET_ADDRESS:
	          method = (currentDetail, originalDetail) => windowActions.setAutofillAddressDetail(currentDetail, originalDetail);
	          break;
	        case messages.AUTOFILL_SET_CREDIT_CARD:
	          method = (currentDetail, originalDetail) => windowActions.setAutofillCreditCardDetail(currentDetail, originalDetail);
	          break;
	      }
	      method.apply(this, e.args);
	    });
	
	    const loadStart = e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (e.isMainFrame && !e.isErrorPage && !e.isFrameSrcDoc) {
	        windowActions.onWebviewLoadStart(this.frame, e.url);
	        // Clear security state
	        windowActions.setBlockedRunInsecureContent(this.frame);
	        windowActions.setSecurityState(this.frame, {
	          secure: null,
	          runInsecureContent: false
	        });
	      }
	    };
	
	    const loadEnd = (savePage, url) => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.onWebviewLoadEnd(this.frame, url);
	      const parsedUrl = urlParse(url);
	      if (!this.allowRunningWidevinePlugin()) {
	        this.showWidevineNotification(this.props.location, this.origin, () => {}, () => {
	          windowActions.loadUrl(this.frame, this.props.provisionalLocation);
	        });
	      }
	
	      const protocol = parsedUrl.protocol;
	      const isError = this.props.aboutDetails && this.props.aboutDetails.get('errorCode');
	      if (!this.props.isPrivate && (protocol === 'http:' || protocol === 'https:') && !isError && savePage) {
	        // Register the site for recent history for navigation bar
	        // calling with setTimeout is an ugly hack for a race condition
	        // with setTitle. We either need to delay this call until the title is
	        // or add a way to update it
	        setTimeout(() => {
	          appActions.addSite(siteUtil.getDetailFromFrame(this.frame));
	        }, 250);
	      }
	
	      if (url.startsWith(pdfjsOrigin)) {
	        let displayLocation = UrlUtil.getLocationIfPDF(url);
	        windowActions.setSecurityState(this.frame, {
	          secure: urlParse(displayLocation).protocol === 'https:',
	          runInsecureContent: false
	        });
	      }
	    };
	
	    const loadFail = (e, provisionLoadFailure, url) => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (isFrameError(e.errorCode)) {
	        // temporary workaround for https://github.com/brave/browser-laptop/issues/1817
	        if (e.validatedURL === aboutUrls.get('about:newtab') || e.validatedURL === aboutUrls.get('about:blank') || e.validatedURL === aboutUrls.get('about:certerror') || e.validatedURL === aboutUrls.get('about:error') || e.validatedURL === aboutUrls.get('about:safebrowsing')) {
	          // this will just display a blank page for errors
	          // but we don't want to take the user out of the private tab
	          return;
	        } else if (isTargetAboutUrl(e.validatedURL)) {
	          // open a new tab for other about urls
	          // and send this tab back to wherever it came from
	          this.goBack();
	          windowActions.newFrame({ location: e.validatedURL }, true);
	          return;
	        }
	
	        windowActions.setFrameError(this.frame, {
	          event_type: 'did-fail-load',
	          errorCode: e.errorCode,
	          url: e.validatedURL
	        });
	        windowActions.loadUrl(this.frame, 'about:error');
	        appActions.removeSite(siteUtil.getDetailFromFrame(this.frame));
	      } else if (provisionLoadFailure) {
	        windowActions.setNavigated(url, this.props.frameKey, true, this.frame.get('tabId'));
	      }
	    };
	    this.webview.addEventListener('security-style-changed', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      let isSecure = null;
	      let runInsecureContent = this.runInsecureContent();
	      // 'warning' and 'passive mixed content' should never upgrade the
	      // security state from insecure to secure
	      if (e.securityState === 'secure' || this.props.isSecure !== false && runInsecureContent !== true && ['warning', 'passive-mixed-content'].includes(e.securityState)) {
	        isSecure = true;
	      } else if (['broken', 'insecure'].includes(e.securityState)) {
	        isSecure = false;
	      }
	      // TODO: show intermediate UI for 'warning' and 'passive-mixed-content'
	      windowActions.setSecurityState(this.frame, {
	        secure: isSecure,
	        runInsecureContent
	      });
	      if (isSecure) {
	        // Check that there isn't a cert error.
	        const parsedUrl = urlParse(this.props.location);
	        ipc.send(messages.CHECK_CERT_ERROR_ACCEPTED, parsedUrl.host, this.props.frameKey);
	      }
	    });
	    this.webview.addEventListener('load-start', e => {
	      loadStart(e);
	    });
	    this.webview.addEventListener('did-navigate', e => {
	      if (this.props.findbarShown) {
	        this.props.onFindHide();
	      }
	
	      for (let message in this.notificationCallbacks) {
	        appActions.hideMessageBox(message);
	      }
	      this.notificationCallbacks = {};
	      const isNewTabPage = getBaseUrl(e.url) === getTargetAboutUrl('about:newtab');
	      // Only take focus away from the urlBar if:
	      // The tab is active, it's not the new tab page, and the webview isn't already active.
	      if (this.props.isActive && !isNewTabPage && document.activeElement !== this.webview) {
	        this.webview.focus();
	      }
	      if (!this.frame.isEmpty()) {
	        windowActions.setNavigated(e.url, this.props.frameKey, false, this.frame.get('tabId'));
	      }
	      // force temporary url display for tabnapping protection
	      windowActions.setMouseInTitlebar(true);
	    });
	    this.webview.addEventListener('crashed', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.setFrameError(this.frame, {
	        event_type: 'crashed',
	        title: 'unexpectedError',
	        url: this.props.location
	      });
	      windowActions.loadUrl(this.frame, 'about:error');
	      this.webview = false;
	    });
	    this.webview.addEventListener('did-fail-provisional-load', e => {
	      if (e.isMainFrame) {
	        loadEnd(false, e.validatedURL);
	        loadFail(e, true, e.currentURL);
	      }
	    });
	    this.webview.addEventListener('did-fail-load', e => {
	      if (e.isMainFrame) {
	        loadEnd(false, e.validatedURL);
	        loadFail(e, false, e.validatedURL);
	      }
	    });
	    this.webview.addEventListener('did-finish-load', e => {
	      loadEnd(true, e.validatedURL);
	      if (this.runInsecureContent()) {
	        appActions.removeSiteSetting(this.origin, 'runInsecureContent', this.props.isPrivate);
	      }
	    });
	    this.webview.addEventListener('did-navigate-in-page', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (e.isMainFrame) {
	        windowActions.setNavigated(e.url, this.props.frameKey, true, this.frame.get('tabId'));
	        loadEnd(true, e.url);
	      }
	    });
	    this.webview.addEventListener('enter-html-full-screen', () => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.setFullScreen(this.frame, true, true);
	      // disable the fullscreen warning after 5 seconds
	      setTimeout(windowActions.setFullScreen.bind(this, this.frame, undefined, false), 5000);
	    });
	    this.webview.addEventListener('leave-html-full-screen', () => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.setFullScreen(this.frame, false);
	    });
	    this.webview.addEventListener('media-started-playing', ({ title }) => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.setAudioPlaybackActive(this.frame, true);
	    });
	    this.webview.addEventListener('media-paused', ({ title }) => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.setAudioPlaybackActive(this.frame, false);
	    });
	    this.webview.addEventListener('did-change-theme-color', ({ themeColor }) => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      // Due to a bug in Electron, after navigating to a page with a theme color
	      // to a page without a theme color, the background is sent to us as black
	      // even know there is no background. To work around this we just ignore
	      // the theme color in that case and let the computed theme color take over.
	      windowActions.setThemeColor(this.frame, themeColor !== '#000000' ? themeColor : null);
	    });
	    this.webview.addEventListener('found-in-page', e => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      if (e.result !== undefined && (e.result.matches !== undefined || e.result.activeMatchOrdinal !== undefined)) {
	        if (e.result.matches === 0) {
	          windowActions.setFindDetail(this.frame, Immutable.fromJS({
	            numberOfMatches: 0,
	            activeMatchOrdinal: 0
	          }));
	          return;
	        }
	        windowActions.setFindDetail(this.frame, Immutable.fromJS({
	          numberOfMatches: e.result.matches || this.props.findDetail && this.props.findDetail.get('numberOfMatches') || 0,
	          activeMatchOrdinal: e.result.activeMatchOrdinal || this.props.findDetail && this.props.findDetail.get('activeMatchOrdinal')
	        }));
	      }
	    });
	    this.webview.addEventListener('did-get-response-details', details => {
	      if (this.frame.isEmpty()) {
	        return;
	      }
	      windowActions.gotResponseDetails(this.frame.get('tabId'), details);
	    });
	    // Handle zoom using Ctrl/Cmd and the mouse wheel.
	    this.webview.addEventListener('mousewheel', this.onMouseWheel.bind(this));
	  }
	
	  goBack() {
	    this.webview.goBack();
	  }
	
	  getHistoryEntry(sites, index) {
	    const url = this.webview.getURLAtIndex(index);
	    const title = this.webview.getTitleAtIndex(index);
	
	    let entry = {
	      index: index,
	      url: url,
	      display: title || url,
	      icon: null
	    };
	
	    if (url.startsWith('chrome-extension://')) {
	      // TODO: return brave lion (or better: get icon from extension if possible as data URI)
	    } else {
	      if (sites) {
	        const site = sites.find(function (element) {
	          return element.get('location') === url;
	        });
	        if (site) {
	          entry.icon = site.get('favicon');
	        }
	      }
	
	      if (!entry.icon) {
	        entry.icon = UrlUtil.getDefaultFaviconUrl(url);
	      }
	    }
	
	    return entry;
	  }
	
	  getHistory(appState) {
	    const historyCount = this.webview.getEntryCount();
	    const currentIndex = this.webview.getCurrentEntryIndex();
	    const sites = appState ? appState.get('sites') : null;
	
	    let history = {
	      count: historyCount,
	      currentIndex,
	      entries: []
	    };
	
	    for (let index = 0; index < historyCount; index++) {
	      history.entries.push(this.getHistoryEntry(sites, index));
	    }
	
	    return history;
	  }
	
	  goToIndex(index) {
	    this.webview.goToIndex(index);
	  }
	
	  goForward() {
	    this.webview.goForward();
	  }
	
	  get origin() {
	    return siteUtil.getOrigin(this.props.location);
	  }
	
	  onFocus() {
	    if (!this.frame.isEmpty()) {
	      windowActions.setTabPageIndexByFrame(this.frame);
	    }
	
	    // Make sure urlBar focused state is updated so that on tab
	    // changes the focus state doesn't go back to the urlBar
	    windowActions.setUrlBarFocused(false);
	    windowActions.setUrlBarActive(false);
	
	    windowActions.setContextMenuDetail();
	    windowActions.setPopupWindowDetail();
	  }
	
	  onFindAgain(forward) {
	    if (!this.props.findbarShown) {
	      windowActions.setFindbarShown(this.frame, true);
	    }
	    const searchString = this.props.findDetail && this.props.findDetail.get('searchString');
	    if (searchString) {
	      webviewActions.findInPage(searchString, this.props.findDetail && this.props.findDetail.get('caseSensitivity') || undefined, forward, this.props.findDetail.get('internalFindStatePresent'), this.webview);
	    }
	  }
	
	  onUpdateWheelZoom() {
	    if (this.wheelDeltaY > 0) {
	      this.zoomIn();
	    } else if (this.wheelDeltaY < 0) {
	      this.zoomOut();
	    }
	    this.wheelDeltaY = 0;
	  }
	
	  onMouseWheel(e) {
	    if (e.ctrlKey) {
	      e.preventDefault();
	      this.wheelDeltaY = (this.wheelDeltaY || 0) + e.wheelDeltaY;
	      this.onUpdateWheelZoom();
	    } else {
	      this.wheelDeltaY = 0;
	    }
	  }
	
	  getWebRTCPolicy(props) {
	    const braverySettings = this.getFrameBraverySettings(props);
	    if (!braverySettings || braverySettings.get('fingerprintingProtection') !== true) {
	      return WEBRTC_DEFAULT;
	    } else {
	      return WEBRTC_DISABLE_NON_PROXY;
	    }
	  }
	
	  render() {
	    return _jsx('div', {
	      className: cx({
	        frameWrapper: true,
	        isPreview: this.props.isPreview,
	        isActive: this.props.isActive
	      })
	    }, void 0, this.props.isFullScreen && this.props.showFullScreenWarning ? _jsx(FullScreenWarning, {
	      location: this.props.location
	    }) : null, React.createElement('div', { ref: node => {
	        this.webviewContainer = node;
	      },
	      className: cx({
	        webviewContainer: true,
	        isPreview: this.props.isPreview
	      }) }), this.props.hrefPreview ? _jsx('div', {
	      className: cx({
	        hrefPreview: true,
	        right: this.props.showOnRight
	      })
	    }, void 0, this.props.hrefPreview) : null);
	  }
	}
	
	module.exports = Frame;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(713).setImmediate))

/***/ },
/* 754 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const urlResolve = __webpack_require__(194).resolve;
	
	class FullScreenWarning extends ImmutableComponent {
	  render() {
	    const l10nArgs = {
	      host: urlResolve(this.props.location, '/')
	    };
	    return _jsx('div', {
	      className: 'fullScreenModeWarning',
	      'data-l10n-id': 'fullScreenModeWarning',
	      'data-l10n-args': JSON.stringify(l10nArgs)
	    });
	  }
	}
	
	module.exports = FullScreenWarning;

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const Immutable = __webpack_require__(188);
	const urlParse = __webpack_require__(192);
	
	module.exports.braveryDefaults = (appState, appConfig) => {
	  let defaults = {};
	  Object.keys(appConfig.resourceNames).forEach(name => {
	    let value = appConfig.resourceNames[name];
	    let enabled = appState.getIn([value, 'enabled']);
	    defaults[value] = enabled === undefined ? appConfig[value].enabled : enabled;
	  });
	  let replaceAds = defaults[appConfig.resourceNames.AD_INSERTION] || false;
	  let blockAds = defaults[appConfig.resourceNames.ADBLOCK] || false;
	  let blockTracking = defaults[appConfig.resourceNames.TRACKING_PROTECTION] || false;
	  let blockCookies = defaults[appConfig.resourceNames.COOKIEBLOCK] || false;
	  defaults.adControl = 'allowAdsAndTracking';
	  if (blockAds && replaceAds && blockTracking) {
	    defaults.adControl = 'showBraveAds';
	  } else if (blockAds && !replaceAds && blockTracking) {
	    defaults.adControl = 'blockAds';
	  }
	  defaults.cookieControl = blockCookies ? 'block3rdPartyCookie' : 'allowAllCookies';
	
	  // TODO(bridiver) this should work just like the other bravery settings
	  let fingerprintingProtection = appState.get('settings').get('privacy.block-canvas-fingerprinting');
	  if (typeof fingerprintingProtection !== 'boolean') {
	    fingerprintingProtection = appConfig.defaultSettings['privacy.block-canvas-fingerprinting'];
	  }
	  defaults.fingerprintingProtection = fingerprintingProtection;
	  return defaults;
	};
	
	module.exports.activeSettings = (siteSettings, appState, appConfig) => {
	  let defaults = module.exports.braveryDefaults(appState, appConfig);
	  let settings = {};
	
	  settings.shieldsUp = (() => {
	    if (siteSettings) {
	      if (typeof siteSettings.get('shieldsUp') === 'boolean') {
	        return siteSettings.get('shieldsUp');
	      }
	    }
	
	    return true;
	  })();
	
	  Object.keys(appConfig.resourceNames).forEach(resourceName => {
	    let name = appConfig.resourceNames[resourceName];
	    settings[name] = (() => {
	      if (settings.shieldsUp === false && appConfig[name].shields !== false) {
	        return false;
	      }
	
	      if (siteSettings) {
	        if (typeof siteSettings.get(name) === 'boolean') {
	          return siteSettings.get(name);
	        }
	      }
	
	      return defaults[name];
	    })();
	  });
	
	  settings.adControl = (() => {
	    if (settings.shieldsUp === false) {
	      return 'allowAdsAndTracking';
	    }
	    if (siteSettings) {
	      if (typeof siteSettings.get('adControl') === 'string') {
	        return siteSettings.get('adControl');
	      }
	    }
	
	    return defaults.adControl;
	  })();
	
	  settings.cookieControl = (() => {
	    if (settings.shieldsUp === false) {
	      return 'allowAllCookies';
	    }
	    if (siteSettings) {
	      if (typeof siteSettings.get('cookieControl') === 'string') {
	        return siteSettings.get('cookieControl');
	      }
	    }
	
	    return defaults.cookieControl;
	  })();
	
	  settings.fingerprintingProtection = (() => {
	    if (settings.shieldsUp === false) {
	      return false;
	    }
	    if (siteSettings) {
	      if (typeof siteSettings.get('fingerprintingProtection') === 'boolean') {
	        return siteSettings.get('fingerprintingProtection');
	      }
	    }
	
	    return defaults.fingerprintingProtection;
	  })();
	
	  settings.adInsertion = {
	    enabled: settings.adControl === 'showBraveAds',
	    url: appConfig.adInsertion.url
	  };
	
	  return Object.assign(defaults, settings);
	};
	
	/**
	  * Obtains a squashed settings object of all matching host patterns with more exact matches taking precedence
	  * @param {Object} siteSettings - The top level app state site settings indexed by hostPattern.
	  * @param {string} location - The current page location to get settings for.
	  * @return {Object} A merged settings object for the specified site setting or undefined
	  */
	module.exports.getSiteSettingsForURL = (siteSettings, location) => {
	  if (!location || !siteSettings) {
	    return undefined;
	  }
	  // Example: https://www.brianbondy.com:8080/projects
	  //   parsedUrl.host: www.brianbondy.com:8080
	  //   parsedUrl.hostname: www.brianbondy.com
	  //   parsedUrl.protocol: https:
	
	  // Stores all related settingObjs with the most specific ones first
	  // They will be reduced to a single setting object.
	  let settingObjs = [];
	
	  const parsedUrl = urlParse(location);
	  if (!parsedUrl.host || !parsedUrl.hostname || !parsedUrl.protocol) {
	    return undefined;
	  }
	
	  settingObjs.push(`${parsedUrl.protocol}//${parsedUrl.host}`, `${parsedUrl.protocol}//${parsedUrl.hostname}:*`, `${parsedUrl.protocol}//*`);
	  if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {
	    settingObjs.push(`https?://${parsedUrl.host}`, `https?://${parsedUrl.hostname}:*`);
	  }
	
	  let host = parsedUrl.host;
	  while (host.length > 0) {
	    const parsedUrl = urlParse(location);
	    host = host.split('.').slice(1).join('.');
	    location = `${parsedUrl.protocol}//${host}`;
	    settingObjs.push(`${parsedUrl.protocol}//*.${parsedUrl.host}`, `${parsedUrl.protocol}//*.${parsedUrl.hostname}:*`);
	    if (parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:') {
	      settingObjs.push(`https?://*.${parsedUrl.host}`, `https?://*.${parsedUrl.hostname}:*`);
	    }
	  }
	  settingObjs.push('*');
	  settingObjs = settingObjs.map(hostPattern => siteSettings.get(hostPattern));
	
	  // Merge all the settingObj with the more specific first rules taking precedence
	  const settingObj = settingObjs.reduce((mergedSettingObj, settingObj) => (settingObj || Immutable.Map()).merge(mergedSettingObj), Immutable.Map());
	  if (settingObj.size === 0) {
	    return undefined;
	  }
	  return Immutable.fromJS(settingObj);
	};
	
	/**
	  * Obtains the site settings stored for a specific pattern.
	  * @param {Object} siteSettings - The top level app state site settings indexed by hostPattern.
	  * @param {string} hostPattern - The host pattern to lookup.
	  *   Supported hostPattern values are of the form: protocol|(https[?])://[*.]<hostname>[:*]
	  * @return {Object} The exact setting object for the specified host pattern or undefined.
	  */
	module.exports.getSiteSettingsForHostPattern = (siteSettings, hostPattern) => siteSettings.get(hostPattern);
	
	/**
	  * Merges the settings for the specified host pattern.
	  * @param {Object} siteSettings - The top level app state site settings indexed by hostPattern.
	  * @param {string} hostPattern - The host pattern to merge into
	  * @param {string} key - A setting key
	  * @param {string|number} value - A setting value
	  */
	module.exports.mergeSiteSetting = (siteSettings, hostPattern, key, value) => (siteSettings || Immutable.Map()).mergeIn([hostPattern], {
	  [key]: value
	});
	
	/**
	  * Remove all site settings for the specified hostPattern.
	  * @param {Object} siteSettings - The top level app state site settings indexed by hostPattern.
	  * @param {string} hostPattern - The host pattern to remove all settings for.
	  */
	module.exports.removeSiteSettings = (siteSettings, hostPattern) => siteSettings.delete(hostPattern);
	
	/**
	  * Removes one site setting for the specified hostPattern.
	  * @param {Object} siteSettings - The top level app state site settings indexed by hostPattern.
	  * @param {string} hostPattern - The host pattern to remove all settings for.
	  * @param {string} key - The site setting name
	  */
	module.exports.removeSiteSetting = (siteSettings, hostPattern, key) => {
	  if (siteSettings.get(hostPattern)) {
	    return siteSettings.set(hostPattern, siteSettings.get(hostPattern).delete(key));
	  } else {
	    return siteSettings;
	  }
	};

/***/ },
/* 756 */
/***/ function(module, exports) {

	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	module.exports = [
	  {
	    uuid: '48796273-E783-431E-B864-44D3DCEA66DC',
	    listURL: 'http://adblock.gardar.net/is.abp.txt',
	    title: 'ISL: Icelandic ABP List',
	    lang: 'is',
	    supportURL: 'http://adblock.gardar.net/'
	  }, {
	    uuid: '9EF6A21C-5014-4199-95A2-A82491274203',
	    listURL: 'https://adblock.dk/block.csv',
	    title: 'DNK: Schacks Adblock Plus liste',
	    lang: 'da',
	    supportURL: 'https://henrik.schack.dk/adblock/'
	  }, {
	    uuid: 'A0E9F361-A01F-4C0E-A52D-2977A1AD4BFB',
	    listURL: 'https://dl.dropboxusercontent.com/u/1289327/abpxfiles/filtri.txt',
	    title: 'ITA: ABP X Files',
	    supportURL: 'http://noads.it/'
	  }, {
	    uuid: '1088D292-2369-4D40-9BDF-C7DC03C05966',
	    listURL: 'https://adguard.com/en/filter-rules.html?id=1',
	    title: 'RUS: Adguard Russian Filter',
	    supportURL: 'http://forum.adguard.com/forumdisplay.php?69-%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B-Adguard'
	  }, {
	    uuid: '80470EEC-970F-4F2C-BF6B-4810520C72E6',
	    listURL: 'https://easylist-downloads.adblockplus.org/advblock.txt',
	    title: 'RUS: RU AdList (Дополнительная региональная подписка)',
	    lang: ['ru', 'uk', 'be'],
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=102'
	  }, {
	    uuid: 'DABC6490-70E5-46DD-8BE2-358FB9A37C85',
	    listURL: 'https://easylist-downloads.adblockplus.org/bitblock.txt',
	    title: 'RUS: BitBlock List (Дополнительная подписка фильтров)',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=102'
	  }, {
	    uuid: '11F62B02-9D1F-4263-A7F8-77D2B55D4594',
	    listURL: 'https://easylist-downloads.adblockplus.org/easylistchina.txt',
	    title: 'CHN: EasyList China (中文)',
	    lang: 'zh',
	    supportURL: 'http://abpchina.org/forum/forum.php'
	  }, {
	    uuid: '92AA0D3B-34AC-4657-9A5C-DBAD339AF8E2',
	    listURL: 'https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjxlist.txt',
	    title: 'CHN: CJX\'s EasyList Lite (main focus on Chinese sites)',
	    supportURL: 'https://github.com/cjx82630/cjxlist'
	  }, {
	    uuid: 'CC98E4BA-9257-4386-A1BC-1BBF6980324F',
	    listURL: 'https://raw.githubusercontent.com/cjx82630/cjxlist/master/cjx-annoyance.txt',
	    title: 'CHN: CJX\'s Annoyance List',
	    supportURL: 'https://github.com/cjx82630/cjxlist'
	  }, {
	    uuid: '9D644676-4784-4982-B94D-C9AB19098D2A',
	    listURL: 'https://easylist-downloads.adblockplus.org/easylistdutch.txt',
	    title: 'NLD: EasyList Dutch',
	    lang: 'nl',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=100'
	  }, {
	    uuid: 'E71426E7-E898-401C-A195-177945415F38',
	    listURL: 'https://easylist-downloads.adblockplus.org/easylistgermany.txt',
	    title: 'DEU: EasyList Germany',
	    lang: 'de',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=90'
	  }, {
	    uuid: 'AB1A661D-E946-4F29-B47F-CA3885F6A9F7',
	    listURL: 'https://easylist-downloads.adblockplus.org/easylistitaly.txt',
	    title: 'ITA: EasyList Italy',
	    lang: 'it',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=96'
	  }, {
	    uuid: '9852EFC4-99E4-4F2D-A915-9C3196C7A1DE',
	    listURL: 'https://easylist-downloads.adblockplus.org/liste_fr.txt',
	    title: 'FRA: EasyList Liste FR',
	    lang: 'fr',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=91'
	  }, {
	    uuid: '15B64333-BAF9-4B77-ADC8-935433CD6F4C',
	    listURL: 'https://notabug.org/latvian-list/adblock-latvian/raw/master/lists/latvian-list.txt',
	    title: 'LVA: Latvian List',
	    lang: 'lv',
	    supportURL: 'https://notabug.org/latvian-list/adblock-latvian'
	  }, {
	    uuid: '0783DBFD-B5E0-4982-9B4A-711BDDB925B7',
	    listURL: 'http://adblock.ee/list.php',
	    title: 'EST: Eesti saitidele kohandatud filter',
	    lang: 'et',
	    supportURL: 'http://adblock.ee/'
	  }, {
	    uuid: 'BF9234EB-4CB7-4CED-9FCB-F1FD31B0666C',
	    listURL: 'https://www.certyficate.it/adblock/adblock.txt',
	    title: 'POL: polskie filtry do Adblocka i uBlocka',
	    lang: 'pl',
	    supportURL: 'http://www.certyficate.it/adblock-ublock-polish-filters/'
	  }, {
	    uuid: '1C6D8556-3400-4358-B9AD-72689D7B2C46',
	    listURL: 'http://adb.juvander.net/Finland_adb.txt',
	    title: 'FIN: Finnish Addition to Easylist',
	    lang: 'fi',
	    supportURL: 'http://www.juvander.fi/AdblockFinland'
	  }, {
	    uuid: '1E6CF01B-AFC4-47D2-AE59-3E32A1ED094F',
	    listURL: 'https://raw.githubusercontent.com/gfmaster/adblock-korea-contrib/master/filter.txt',
	    title: 'KOR: Korean Adblock List',
	    lang: 'ko',
	    supportURL: 'https://github.com/gfmaster/adblock-korea-contrib'
	  }, {
	    uuid: '93123971-5AE6-47BA-93EA-BE1E4682E2B6',
	    listURL: 'https://raw.githubusercontent.com/heradhis/indonesianadblockrules/master/subscriptions/abpindo.txt',
	    title: 'IDN: ABPindo',
	    lang: 'id',
	    supportURL: 'https://github.com/heradhis/indonesianadblockrules'
	  }, {
	    uuid: '03F91310-9244-40FA-BCF6-DA31B832F34D',
	    listURL: 'https://raw.githubusercontent.com/k2jp/abp-japanese-filters/master/abpjf.txt',
	    title: 'JPN: ABP Japanese filters (日本用フィルタ)',
	    lang: 'ja',
	    supportURL: 'https://github.com/k2jp/abp-japanese-filters/wiki/Support_Policy'
	  }, {
	    uuid: '5E5C9C94-0516-45F2-9AFB-800F0EC74FCA',
	    listURL: 'https://raw.githubusercontent.com/liamja/Prebake/master/obtrusive.txt',
	    title: 'EU: Prebake - Filter Obtrusive Cookie Notices',
	    supportURL: 'https://github.com/liamja/Prebake'
	  }, {
	    uuid: '45B3ED40-C607-454F-A623-195FDD084637',
	    listURL: 'https://raw.githubusercontent.com/yous/YousList/master/youslist.txt',
	    title: 'KOR: YousList',
	    lang: 'ko',
	    supportURL: 'https://github.com/yous/YousList'
	  }, {
	    uuid: '9FCEECEC-52B4-4487-8E57-8781E82C91D0',
	    listURL: 'https://easylist-downloads.adblockplus.org/Liste_AR.txt',
	    title: 'ara: Liste AR',
	    lang: 'ar',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=98'
	  }, {
	    uuid: '4E8B1A63-DEBE-4B8B-AD78-3811C632B353',
	    listURL: 'http://margevicius.lt/easylistlithuania.txt',
	    title: 'LTU: Adblock Plus Lithuania',
	    lang: 'lt',
	    supportURL: 'http://margevicius.lt/easylist_lithuania/'
	  }, {
	    uuid: '85F65E06-D7DA-4144-B6A5-E1AA965D1E47',
	    listURL: 'https://raw.githubusercontent.com/easylist/EasyListHebrew/master/EasyListHebrew.txt',
	    title: 'ISR: EasyList Hebrew',
	    lang: 'he',
	    supportURL: 'https://github.com/easylist/EasyListHebrew'
	  }, {
	    uuid: 'EDEEE15A-6FA9-4FAC-8CA8-3565508EAAC3',
	    listURL: 'https://raw.githubusercontent.com/szpeter80/hufilter/master/hufilter.txt',
	    title: 'HUN: hufilter',
	    lang: 'hu',
	    supportURL: 'https://github.com/szpeter80/hufilter'
	  }, {
	    uuid: '7CCB6921-7FDA-4A9B-B70A-12DD0A8F08EA',
	    listURL: 'https://raw.githubusercontent.com/tomasko126/easylistczechandslovak/master/filters.txt',
	    title: 'CZE, SVK: EasyList Czech and Slovak',
	    lang: 'cs',
	    supportURL: 'https://github.com/tomasko126/easylistczechandslovak'
	  }, {
	    uuid: 'FD176DD1-F9A0-4469-B43E-B1764893DD5C',
	    listURL: 'http://stanev.org/abp/adblock_bg.txt',
	    title: 'BGR: Bulgarian Adblock list',
	    lang: 'bg',
	    supportURL: 'http://stanev.org/abp/'
	  }, {
	    uuid: '51260D6E-28F8-4EEC-B76D-3046DADC27C9',
	    listURL: 'https://www.fanboy.co.nz/fanboy-korean.txt',
	    title: 'KOR: Fanboy\'s Korean',
	    supportURL: 'https://forums.lanik.us/'
	  }, {
	    uuid: 'AE657374-1851-4DC4-892B-9212B13B15A7',
	    listURL: 'https://easylist-downloads.adblockplus.org/easylistspanish.txt',
	    title: 'spa: EasyList Spanish',
	    lang: 'es',
	    supportURL: 'https://forums.lanik.us/viewforum.php?f=103'
	  }, {
	    uuid: '7DC2AC80-5BBC-49B8-B473-A31A1145CAC1',
	    listURL: 'https://www.fanboy.co.nz/fanboy-swedish.txt',
	    title: 'SWE: Fanboy\'s Swedish',
	    lang: 'sv',
	    supportURL: 'https://forums.lanik.us/'
	  }, {
	    uuid: '1BE19EFD-9191-4560-878E-30ECA72B5B3C',
	    listURL: 'https://adguard.com/filter-rules.html?id=13',
	    title: 'TUR: Adguard Turkish Filter',
	    lang: 'tr',
	    supportURL: 'http://forum.adguard.com/forumdisplay.php?51-Filter-Rules'
	  }, {
	    uuid: '6A0209AC-9869-4FD6-A9DF-039B4200D52C',
	    listURL: 'https://www.fanboy.co.nz/fanboy-vietnam.txt',
	    title: 'VIE: Fanboy\'s Vietnamese',
	    lang: 'vi',
	    supportURL: 'https://forums.lanik.us/'
	  }, {
	    uuid: '6C0F4C7F-969B-48A0-897A-14583015A587',
	    listURL: 'https://www.void.gr/kargig/void-gr-filters.txt',
	    title: 'GRC: Greek AdBlock Filter',
	    lang: 'el',
	    supportURL: 'https://github.com/kargig/greek-adblockplus-filter'
	  }, {
	    uuid: '418D293D-72A8-4A28-8718-A1EE40A45AAF',
	    listURL: 'https://raw.githubusercontent.com/betterwebleon/slovenian-list/master/filters.txt',
	    title: 'SVN: Slovenian List',
	    lang: 'sl',
	    supportURL: 'https://github.com/betterwebleon/slovenian-list'
	  }, {
	    uuid: '4C07DB6B-6377-4347-836D-68702CF1494A',
	    listURL: 'https://secure.fanboy.co.nz/fanboy-indian.txt',
	    title: 'IN: Fanboy\'s India Filters',
	    lang: 'hi',
	    supportURL: 'https://www.fanboy.co.nz/filters.html'
	  }
	]


/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const cx = __webpack_require__(236);
	const windowActions = __webpack_require__(716);
	const dragTypes = __webpack_require__(257);
	const { onTabPageContextMenu } = __webpack_require__(723);
	const dnd = __webpack_require__(731);
	const dndData = __webpack_require__(258);
	
	class TabPage extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onMouseEnter = this.onMouseEnter.bind(this);
	    this.onMouseLeave = this.onMouseLeave.bind(this);
	  }
	  onMouseLeave() {
	    window.clearTimeout(this.hoverTimeout);
	    windowActions.setPreviewTabPageIndex();
	  }
	
	  onMouseEnter(e) {
	    // relatedTarget inside mouseenter checks which element before this event was the pointer on
	    // if this element has a tab-like class, then it's likely that the user was previewing
	    // a sequency of tabs. Called here as previewMode.
	    const previewMode = /tab(?!pages)/i.test(e.relatedTarget.classList);
	
	    // If user isn't in previewMode, we add a bit of delay to avoid tab from flashing out
	    // as reported here: https://github.com/brave/browser-laptop/issues/1434
	    this.hoverTimeout = window.setTimeout(windowActions.setPreviewTabPageIndex.bind(null, this.props.index), previewMode ? 0 : 200);
	  }
	
	  onDrop(e) {
	    if (this.props.frames.size === 0) {
	      return;
	    }
	    const moveToFrame = this.props.frames.get(0);
	    const sourceDragData = dndData.getDragData(e.dataTransfer, dragTypes.TAB);
	    const sourceDragFromPageIndex = this.props.sourceDragFromPageIndex;
	    // This must be executed async because the state change that this causes
	    // will cause the onDragEnd to never run
	    setTimeout(() => {
	      // If we're moving to a right page, then we're already shifting everything to the left by one, so we want
	      // to drop it on the right.
	      windowActions.moveTab(sourceDragData, moveToFrame,
	      // Has -1 value for pinned tabs
	      sourceDragFromPageIndex === -1 || sourceDragFromPageIndex >= this.props.index);
	      if (sourceDragData.get('pinnedLocation')) {
	        windowActions.setPinned(sourceDragData, false);
	      }
	      windowActions.setIsBeingDraggedOverDetail();
	    }, 0);
	  }
	
	  onDragOver(e) {
	    e.dataTransfer.dropEffect = 'move';
	    e.preventDefault();
	  }
	
	  render() {
	    const audioPlaybackActive = this.props.frames.find(frame => frame.get('audioPlaybackActive') && !frame.get('audioMuted'));
	    return _jsx('span', {
	      'data-tab-page': this.props.index,
	      onDragOver: this.onDragOver.bind(this),
	      onMouseEnter: this.props.previewTabPage ? this.onMouseEnter : null,
	      onMouseLeave: this.props.previewTabPage ? this.onMouseLeave : null,
	      onDrop: this.onDrop.bind(this),
	      className: cx({
	        tabPage: true,
	        audioPlaybackActive,
	        active: this.props.active }),
	      onContextMenu: onTabPageContextMenu.bind(this, this.props.frames),
	      onClick: windowActions.setTabPageIndex.bind(this, this.props.index)
	    });
	  }
	}
	
	class TabPages extends ImmutableComponent {
	  render() {
	    const tabPageCount = Math.ceil(this.props.frames.size / this.props.tabsPerTabPage);
	    let sourceDragFromPageIndex;
	    const sourceDragData = dnd.getInProcessDragData();
	    if (sourceDragData) {
	      sourceDragFromPageIndex = this.props.frames.findIndex(frame => frame.get('key') === sourceDragData.get('key'));
	      if (sourceDragFromPageIndex !== -1) {
	        sourceDragFromPageIndex /= this.props.tabsPerTabPage;
	      }
	    }
	    return _jsx('div', {
	      className: 'tabPageWrap'
	    }, void 0, tabPageCount > 1 && Array.from(new Array(tabPageCount)).map((x, i) => _jsx(TabPage, {
	      frames: this.props.frames.slice(i * this.props.tabsPerTabPage, i * this.props.tabsPerTabPage + this.props.tabsPerTabPage),
	      previewTabPage: this.props.previewTabPage,
	      index: i,
	      sourceDragFromPageIndex: sourceDragFromPageIndex,
	      active: this.props.tabPageIndex === i
	    }, `tabPage-${i}`)));
	  }
	}
	
	module.exports = TabPages;

/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Tabs = __webpack_require__(759);
	const PinnedTabs = __webpack_require__(763);
	const contextMenus = __webpack_require__(723);
	const windowStore = __webpack_require__(701);
	
	class TabsToolbarButtons extends ImmutableComponent {
	  render() {
	    return _jsx('div', {
	      className: 'tabsToolbarButtons'
	    }, void 0, _jsx('span', {
	      'data-l10n-id': 'menuButton',
	      className: 'navbutton menuButton',
	      onClick: this.props.onMenu
	    }));
	  }
	}
	
	class TabsToolbar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onContextMenu = this.onContextMenu.bind(this);
	  }
	
	  onContextMenu(e) {
	    if (this.refs.tabs.wasNewTabClicked(e.target)) {
	      // Don't show the tabs menu if the new tab "+"" was clicked
	      return;
	    }
	    contextMenus.onTabsToolbarContextMenu(windowStore.getFrame(this.props.activeFrameKey), undefined, undefined, e);
	  }
	
	  render() {
	    const index = this.props.previewTabPageIndex !== undefined ? this.props.previewTabPageIndex : this.props.tabPageIndex;
	    const startingFrameIndex = index * this.props.tabsPerTabPage;
	    const pinnedTabs = this.props.tabs.filter(tab => tab.get('pinnedLocation'));
	    const unpinnedTabs = this.props.tabs.filter(tab => !tab.get('pinnedLocation'));
	    const currentTabs = unpinnedTabs.slice(startingFrameIndex, startingFrameIndex + this.props.tabsPerTabPage);
	    return _jsx('div', {
	      className: 'tabsToolbar',
	      onContextMenu: this.onContextMenu
	    }, void 0, pinnedTabs.size > 0 ? _jsx(PinnedTabs, {
	      sites: this.props.sites,
	      activeFrameKey: this.props.activeFrameKey,
	      paintTabs: this.props.paintTabs,
	      previewTabs: this.props.previewTabs,
	      draggingOverData: this.props.draggingOverData,
	      tabPageIndex: this.props.tabPageIndex,
	      pinnedTabs: pinnedTabs
	    }) : null, React.createElement(Tabs, {
	      ref: 'tabs',
	      tabs: unpinnedTabs,
	      shouldAllowWindowDrag: this.props.shouldAllowWindowDrag,
	      draggingOverData: this.props.draggingOverData,
	      paintTabs: this.props.paintTabs,
	      previewTabs: this.props.previewTabs,
	      tabsPerTabPage: this.props.tabsPerTabPage,
	      activeFrameKey: this.props.activeFrameKey,
	      tabPageIndex: this.props.tabPageIndex,
	      currentTabs: currentTabs,
	      previewTabPageIndex: this.props.previewTabPageIndex,
	      startingFrameIndex: startingFrameIndex,
	      partOfFullPageSet: currentTabs.size === this.props.tabsPerTabPage,
	      fixTabWidth: this.props.fixTabWidth
	    }), _jsx(TabsToolbarButtons, {
	      noFrames: currentTabs.size === 0,
	      onMenu: this.props.onMenu
	    }));
	  }
	}
	
	module.exports = TabsToolbar;

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ReactDOM = __webpack_require__(12);
	
	const ImmutableComponent = __webpack_require__(215);
	
	const windowActions = __webpack_require__(716);
	const windowStore = __webpack_require__(701);
	const dragTypes = __webpack_require__(257);
	const cx = __webpack_require__(236);
	const contextMenus = __webpack_require__(723);
	
	const LongPressButton = __webpack_require__(747);
	const Tab = __webpack_require__(760);
	const dnd = __webpack_require__(731);
	const dndData = __webpack_require__(258);
	
	class Tabs extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onDragOver = this.onDragOver.bind(this);
	    this.onDrop = this.onDrop.bind(this);
	    this.onPrevPage = this.onPrevPage.bind(this);
	    this.onNextPage = this.onNextPage.bind(this);
	    this.onNewTabLongPress = this.onNewTabLongPress.bind(this);
	    this.wasNewTabClicked = this.wasNewTabClicked.bind(this);
	    this.onMouseLeave = this.onMouseLeave.bind(this);
	    this.onTabClosedWithMouse = this.onTabClosedWithMouse.bind(this);
	  }
	
	  onMouseLeave() {
	    windowActions.onTabMouseLeave({
	      fixTabWidth: null
	    });
	  }
	
	  onTabClosedWithMouse(rect) {
	    windowActions.onTabClosedWithMouse({
	      fixTabWidth: rect.width
	    });
	  }
	
	  onPrevPage() {
	    if (this.props.tabPageIndex === 0) {
	      return;
	    }
	    windowActions.setTabPageIndex(this.props.tabPageIndex - 1);
	  }
	
	  onNextPage() {
	    if (this.props.tabPageIndex + 1 === this.totalPages) {
	      return;
	    }
	    windowActions.setTabPageIndex(this.props.tabPageIndex + 1);
	  }
	
	  get totalPages() {
	    return Math.ceil(this.props.tabs.size / this.props.tabsPerTabPage);
	  }
	
	  onDrop(e) {
	    const clientX = e.clientX;
	    const sourceDragData = dndData.getDragData(e.dataTransfer, dragTypes.TAB);
	    if (sourceDragData) {
	      // This must be executed async because the state change that this causes
	      // will cause the onDragEnd to never run
	      setTimeout(() => {
	        const key = sourceDragData.get('key');
	        let droppedOnTab = dnd.closestFromXOffset(this.tabRefs.filter(node => node && node.props.tab.get('frameKey') !== key), clientX).selectedRef;
	        if (droppedOnTab) {
	          const isLeftSide = dnd.isLeftSide(ReactDOM.findDOMNode(droppedOnTab), clientX);
	          const droppedOnFrameProps = windowStore.getFrame(droppedOnTab.props.tab.get('frameKey'));
	          windowActions.moveTab(sourceDragData, droppedOnFrameProps, isLeftSide);
	          if (sourceDragData.get('pinnedLocation')) {
	            windowActions.setPinned(sourceDragData, false);
	          }
	        }
	      }, 0);
	      return;
	    }
	    if (e.dataTransfer.files) {
	      Array.from(e.dataTransfer.files).forEach(file => {
	        const path = encodeURI(file.path);
	        return windowActions.newFrame({ location: path, title: file.name });
	      });
	    }
	  }
	
	  onDragOver(e) {
	    if (dndData.hasDragData(e.dataTransfer, dragTypes.TAB)) {
	      e.dataTransfer.dropEffect = 'move';
	      e.preventDefault();
	      return;
	    }
	    let intersection = e.dataTransfer.types.filter(x => ['Files'].includes(x));
	    if (intersection.length > 0) {
	      e.dataTransfer.dropEffect = 'copy';
	      e.preventDefault();
	    }
	  }
	  wasNewTabClicked(target) {
	    return target.className === this.refs.newTabButton.props.className;
	  }
	  newTab() {
	    windowActions.newFrame();
	  }
	  onNewTabLongPress(target) {
	    contextMenus.onNewTabContextMenu(target);
	  }
	  render() {
	    this.tabRefs = [];
	    const index = this.props.previewTabPageIndex !== undefined ? this.props.previewTabPageIndex : this.props.tabPageIndex;
	    return _jsx('div', {
	      className: 'tabs',
	      onMouseLeave: this.props.fixTabWidth ? this.onMouseLeave : null
	    }, void 0, _jsx('span', {
	      className: cx({
	        tabStripContainer: true,
	        isPreview: this.props.previewTabPageIndex !== undefined,
	        allowDragging: this.props.shouldAllowWindowDrag
	      }),
	      onDragOver: this.onDragOver,
	      onDrop: this.onDrop
	    }, void 0, (() => {
	      if (index > 0) {
	        return _jsx('span', {
	          className: 'prevTab fa fa-caret-left',
	          onClick: this.onPrevPage
	        });
	      }
	    })(), this.props.currentTabs.map(tab => React.createElement(Tab, { ref: node => this.tabRefs.push(node),
	      draggingOverData: this.props.draggingOverData,
	      tab: tab,
	      key: 'tab-' + tab.get('frameKey'),
	      paintTabs: this.props.paintTabs,
	      previewTabs: this.props.previewTabs,
	      isActive: this.props.activeFrameKey === tab.get('frameKey'),
	      onTabClosedWithMouse: this.onTabClosedWithMouse,
	      tabWidth: this.props.fixTabWidth,
	      partOfFullPageSet: this.props.partOfFullPageSet })), (() => {
	      if (this.props.currentTabs.size >= this.props.tabsPerTabPage && this.totalPages > index + 1) {
	        return _jsx('span', {
	          className: 'nextTab fa fa-caret-right',
	          onClick: this.onNextPage
	        });
	      }
	    })(), React.createElement(LongPressButton, {
	      ref: 'newTabButton',
	      label: '+',
	      l10nId: 'newTabButton',
	      className: 'browserButton navbutton newFrameButton',
	      disabled: false,
	      onClick: this.newTab,
	      onLongPress: this.onNewTabLongPress
	    })));
	  }
	}
	
	module.exports = Tabs;

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	
	const ImmutableComponent = __webpack_require__(215);
	
	const windowActions = __webpack_require__(716);
	const locale = __webpack_require__(728);
	const dragTypes = __webpack_require__(257);
	const messages = __webpack_require__(211);
	const cx = __webpack_require__(236);
	const { getTextColorForBackground } = __webpack_require__(761);
	const { isIntermediateAboutPage } = __webpack_require__(187);
	
	const contextMenus = __webpack_require__(723);
	const dnd = __webpack_require__(731);
	const windowStore = __webpack_require__(701);
	const ipc = __webpack_require__(703).ipcRenderer;
	
	const { TabIcon, AudioTabIcon } = __webpack_require__(762);
	
	class Tab extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onMouseEnter = this.onMouseEnter.bind(this);
	    this.onMouseLeave = this.onMouseLeave.bind(this);
	  }
	  get frame() {
	    return windowStore.getFrame(this.props.tab.get('frameKey'));
	  }
	  get isPinned() {
	    return !!this.props.tab.get('pinnedLocation');
	  }
	
	  get draggingOverData() {
	    if (!this.props.draggingOverData || this.props.draggingOverData.get('dragOverKey') !== this.props.tab.get('frameKey')) {
	      return;
	    }
	
	    const sourceDragData = dnd.getInProcessDragData();
	    const location = sourceDragData.get('location');
	    const key = this.props.draggingOverData.get('dragOverKey');
	    const draggingOverFrame = windowStore.getFrame(key);
	    if ((location === 'about:blank' || location === 'about:newtab' || isIntermediateAboutPage(location)) && draggingOverFrame && draggingOverFrame.get('pinnedLocation')) {
	      return;
	    }
	
	    return this.props.draggingOverData;
	  }
	
	  get isDragging() {
	    const sourceDragData = dnd.getInProcessDragData();
	    return sourceDragData && this.props.tab.get('frameKey') === sourceDragData.get('key');
	  }
	
	  get isDraggingOverLeft() {
	    if (!this.draggingOverData) {
	      return false;
	    }
	    return this.draggingOverData.get('draggingOverLeftHalf');
	  }
	
	  get isDraggingOverRight() {
	    if (!this.draggingOverData) {
	      return false;
	    }
	    return this.draggingOverData.get('draggingOverRightHalf');
	  }
	
	  get displayValue() {
	    // For renderer initiated navigations, make sure we show Untitled
	    // until we know what we're loading.  We should probably do this for
	    // all about: pages that we already know the title for so we don't have
	    // to wait for the title to be parsed.
	    if (this.props.tab.get('location') === 'about:blank') {
	      return locale.translation('aboutBlankTitle');
	    }
	    // YouTube tries to change the title to add a play icon when
	    // there is audio. Since we have our own audio indicator we get
	    // rid of it.
	    return (this.props.tab.get('title') || this.props.tab.get('location')).replace('▶ ', '');
	  }
	
	  onDragStart(e) {
	    dnd.onDragStart(dragTypes.TAB, this.frame, e);
	  }
	
	  onDragEnd(e) {
	    dnd.onDragEnd(dragTypes.TAB, this.frame, e);
	  }
	
	  onDragOver(e) {
	    dnd.onDragOver(dragTypes.TAB, this.tabNode.getBoundingClientRect(), this.props.tab.get('frameKey'), this.draggingOverData, e);
	  }
	
	  setActiveFrame(event) {
	    event.stopPropagation();
	    windowActions.setActiveFrame(this.frame);
	  }
	
	  onTabClosedWithMouse(event) {
	    event.stopPropagation();
	    if (this.props.onTabClosedWithMouse) {
	      this.props.onTabClosedWithMouse(this.tabNode.parentNode.getBoundingClientRect());
	      windowActions.closeFrame(windowStore.getFrames(), this.frame);
	    }
	  }
	
	  onMuteFrame(muted, event) {
	    event.stopPropagation();
	    windowActions.setAudioMuted(this.frame, muted);
	  }
	
	  get loading() {
	    return this.frame && (this.props.tab.get('loading') || this.props.tab.get('location') === 'about:blank') && (!this.props.tab.get('provisionalLocation') || !this.props.tab.get('provisionalLocation').startsWith('chrome-extension://mnojpmjdmbbfmejpflffifhffcmidifd/'));
	  }
	
	  onMouseLeave() {
	    window.clearTimeout(this.hoverTimeout);
	    windowActions.setPreviewFrame(null);
	  }
	
	  onMouseEnter(e) {
	    // relatedTarget inside mouseenter checks which element before this event was the pointer on
	    // if this element has a tab-like class, then it's likely that the user was previewing
	    // a sequency of tabs. Called here as previewMode.
	    const previewMode = /tab(?!pages)/i.test(e.relatedTarget.classList);
	
	    // If user isn't in previewMode, we add a bit of delay to avoid tab from flashing out
	    // as reported here: https://github.com/brave/browser-laptop/issues/1434
	    this.hoverTimeout = window.setTimeout(windowActions.setPreviewFrame.bind(null, this.frame), previewMode ? 0 : 200);
	  }
	
	  onClickTab(e) {
	    // Middle click should close tab
	    if (e.button === 1) {
	      this.onTabClosedWithMouse(e);
	    } else {
	      this.setActiveFrame(e);
	    }
	  }
	
	  render() {
	    // Style based on theme-color
	    const iconSize = 16;
	    let iconStyle = {
	      minWidth: iconSize,
	      width: iconSize
	    };
	    const activeTabStyle = {};
	    const backgroundColor = this.props.paintTabs && (this.props.tab.get('themeColor') || this.props.tab.get('computedThemeColor'));
	    if (this.props.isActive && backgroundColor) {
	      activeTabStyle.background = backgroundColor;
	      const textColor = getTextColorForBackground(backgroundColor);
	      iconStyle.color = textColor;
	      if (textColor) {
	        activeTabStyle.color = getTextColorForBackground(backgroundColor);
	      }
	    }
	
	    const icon = this.props.tab.get('icon');
	    const defaultIcon = 'fa fa-file-o';
	
	    if (!this.loading && icon) {
	      iconStyle = Object.assign(iconStyle, {
	        backgroundImage: `url(${icon})`,
	        backgroundSize: iconSize,
	        height: iconSize
	      });
	    }
	
	    let playIcon = false;
	    let iconClass = null;
	    if (this.props.tab.get('audioPlaybackActive') || this.props.tab.get('audioMuted')) {
	      if (this.props.tab.get('audioPlaybackActive') && !this.props.tab.get('audioMuted')) {
	        iconClass = 'fa fa-volume-up';
	      } else if (this.props.tab.get('audioPlaybackActive') && this.props.tab.get('audioMuted')) {
	        iconClass = 'fa fa-volume-off';
	      }
	      playIcon = true;
	    }
	
	    const locationHasFavicon = this.props.tab.get('location') !== 'about:newtab';
	
	    return _jsx('div', {
	      className: cx({
	        tabArea: true,
	        draggingOverLeft: this.isDraggingOverLeft,
	        draggingOverRight: this.isDraggingOverRight,
	        isDragging: this.isDragging,
	        isPinned: this.isPinned,
	        partOfFullPageSet: this.props.partOfFullPageSet || !!this.props.tabWidth
	      }),
	      style: this.props.tabWidth ? { flex: `0 0 ${this.props.tabWidth}px` } : {},
	      onMouseEnter: this.props.previewTabs ? this.onMouseEnter : null,
	      onMouseLeave: this.props.previewTabs ? this.onMouseLeave : null
	    }, void 0, React.createElement(
	      'div',
	      { className: cx({
	          tab: true,
	          isPinned: this.isPinned,
	          active: this.props.isActive,
	          private: this.props.tab.get('isPrivate')
	        }),
	        'data-frame-key': this.props.tab.get('frameKey'),
	        ref: node => {
	          this.tabNode = node;
	        },
	        draggable: true,
	        title: this.props.tab.get('title'),
	        onDragStart: this.onDragStart.bind(this),
	        onDragEnd: this.onDragEnd.bind(this),
	        onDragOver: this.onDragOver.bind(this),
	        onClick: this.onClickTab.bind(this),
	        onContextMenu: contextMenus.onTabContextMenu.bind(this, this.frame),
	        style: activeTabStyle },
	      this.props.tab.get('isPrivate') ? _jsx(TabIcon, {
	        styles: 'fa fa-eye'
	      }) : null,
	      this.props.tab.get('partitionNumber') ? _jsx(TabIcon, {
	        l10nArgs: JSON.stringify({ partitionNumber: this.props.tab.get('partitionNumber') }),
	        l10nId: 'sessionInfoTab',
	        styles: 'fa fa-user'
	      }) : null,
	      locationHasFavicon ? _jsx('div', {
	        className: cx({
	          tabIcon: true,
	          bookmarkFile: !icon,
	          [defaultIcon]: !icon,
	          'fa fa-circle-o-notch fa-spin': this.loading
	        }),
	        style: iconStyle
	      }) : null,
	      playIcon ? _jsx(AudioTabIcon, {
	        styles: iconClass,
	        onClick: this.onMuteFrame.bind(this, !this.props.tab.get('audioMuted'))
	      }) : null,
	      !this.isPinned ? _jsx('div', {
	        className: 'tabTitle'
	      }, void 0, this.displayValue) : null,
	      !this.isPinned ? _jsx('span', {
	        onClick: this.onTabClosedWithMouse.bind(this),
	        'data-l10n-id': 'closeTabButton',
	        className: 'closeTab fa fa-times-circle'
	      }) : null
	    ));
	  }
	}
	
	const paymentsEnabled = () => {
	  const getSetting = __webpack_require__(202).getSetting;
	  const settings = __webpack_require__(204);
	  return getSetting(settings.PAYMENTS_ENABLED);
	};
	
	windowStore.addChangeListener(() => {
	  if (paymentsEnabled()) {
	    const windowState = windowStore.getState();
	    const tabs = windowState && windowState.get('tabs');
	    if (tabs) {
	      try {
	        const presentP = tabs.some(tab => {
	          return tab.get('location') === 'about:preferences#payments';
	        });
	        ipc.send(messages.LEDGER_PAYMENTS_PRESENT, presentP);
	      } catch (ex) {}
	    }
	  }
	});
	module.exports = Tab;

/***/ },
/* 761 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	module.exports.parseColor = color => {
	  const div = document.createElement('div');
	  div.style.color = color;
	  return div.style.color.split('(')[1].split(')')[0].split(',');
	};
	
	module.exports.getTextColorForBackground = color => {
	  // Calculate text color based on contrast with background:
	  // https://24ways.org/2010/calculating-color-contrast/
	  const rgb = module.exports.parseColor(color);
	  if (!rgb) {
	    return null;
	  }
	  const [r, g, b] = rgb;
	  const yiq = (r * 299 + g * 587 + b * 114) / 1000;
	  return yiq >= 128 ? 'black' : 'white';
	};

/***/ },
/* 762 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const { StyleSheet, css } = __webpack_require__(475);
	const globalStyles = __webpack_require__(498);
	
	class TabIcon extends ImmutableComponent {
	  render() {
	    const className = css(styles.icon, this.props.withBlueIcon && styles.blueIcon);
	    return _jsx('div', {
	      className: className,
	      onClick: this.props.onClick
	    }, void 0, _jsx('span', {
	      className: this.props.styles
	    }));
	  }
	}
	
	class AudioTabIcon extends ImmutableComponent {
	  render() {
	    return React.createElement(TabIcon, _extends({ withBlueIcon: true }, this.props));
	  }
	}
	
	const styles = StyleSheet.create({
	  'icon': {
	    backgroundPosition: 'center',
	    backgroundRepeat: 'no-repeat',
	    display: 'inline-block',
	    fontSize: '14px',
	    margin: 'auto 7px auto 7px',
	    position: 'relative',
	    verticalAlign: 'middle',
	    textAlign: 'center'
	  },
	  'blueIcon': {
	    color: globalStyles.color.highlightBlue
	  }
	});
	
	module.exports = {
	  TabIcon,
	  AudioTabIcon
	};

/***/ },
/* 763 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ReactDOM = __webpack_require__(12);
	const ImmutableComponent = __webpack_require__(215);
	const Tab = __webpack_require__(760);
	const windowActions = __webpack_require__(716);
	const windowStore = __webpack_require__(701);
	const appActions = __webpack_require__(704);
	const siteTags = __webpack_require__(256);
	const dragTypes = __webpack_require__(257);
	const siteUtil = __webpack_require__(259);
	const dnd = __webpack_require__(731);
	const dndData = __webpack_require__(258);
	const { isIntermediateAboutPage } = __webpack_require__(187);
	
	class PinnedTabs extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onDragOver = this.onDragOver.bind(this);
	    this.onDrop = this.onDrop.bind(this);
	  }
	
	  onDrop(e) {
	    const clientX = e.clientX;
	    const sourceDragData = dndData.getDragData(e.dataTransfer, dragTypes.TAB);
	    const location = sourceDragData.get('location');
	    if (location === 'about:blank' || location === 'about:newtab' || isIntermediateAboutPage(location)) {
	      return;
	    }
	
	    // This must be executed async because the state change that this causes
	    // will cause the onDragEnd to never run
	    setTimeout(() => {
	      const key = sourceDragData.get('key');
	      let droppedOnTab = dnd.closestFromXOffset(this.tabRefs.filter(node => node && node.props.tab.get('frameKey') !== key), clientX).selectedRef;
	      if (droppedOnTab) {
	        const isLeftSide = dnd.isLeftSide(ReactDOM.findDOMNode(droppedOnTab), clientX);
	        const droppedOnFrameProps = windowStore.getFrame(droppedOnTab.props.tab.get('frameKey'));
	        windowActions.moveTab(sourceDragData, droppedOnFrameProps, isLeftSide);
	        if (!sourceDragData.get('pinnedLocation')) {
	          windowActions.setPinned(sourceDragData, true);
	        } else {
	          appActions.moveSite(siteUtil.getDetailFromFrame(sourceDragData, siteTags.PINNED), siteUtil.getDetailFromFrame(droppedOnFrameProps, siteTags.PINNED), isLeftSide);
	        }
	      }
	    }, 0);
	  }
	
	  onDragOver(e) {
	    e.dataTransfer.dropEffect = 'move';
	    e.preventDefault();
	  }
	
	  render() {
	    this.tabRefs = [];
	    return _jsx('div', {
	      className: 'pinnedTabs',
	      onDragOver: this.onDragOver,
	      onDrop: this.onDrop
	    }, void 0, this.props.pinnedTabs.map(tab => React.createElement(Tab, { ref: node => this.tabRefs.push(node),
	      draggingOverData: this.props.draggingOverData,
	      tab: tab,
	      key: 'tab-' + tab.get('frameKey'),
	      paintTabs: this.props.paintTabs,
	      previewTabs: this.props.previewTabs,
	      isActive: this.props.activeFrameKey === tab.get('frameKey'),
	      partOfFullPageSet: this.props.partOfFullPageSet })));
	  }
	}
	
	module.exports = PinnedTabs;

/***/ },
/* 764 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Immutable = __webpack_require__(188);
	const keyCodes = __webpack_require__(743);
	const Button = __webpack_require__(244);
	const SwitchControl = __webpack_require__(235);
	const windowActions = __webpack_require__(716);
	const windowStore = __webpack_require__(701);
	const contextMenus = __webpack_require__(723);
	const { getTextColorForBackground } = __webpack_require__(761);
	
	class FindBar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onBlur = this.onBlur.bind(this);
	    this.onInputFocus = this.onInputFocus.bind(this);
	    this.onClear = this.onClear.bind(this);
	    this.onKeyDown = this.onKeyDown.bind(this);
	    this.onContextMenu = this.onContextMenu.bind(this);
	    this.onInput = this.onInput.bind(this);
	    this.onFindPrev = this.onFindPrev.bind(this);
	    this.onFindNext = this.onFindNext.bind(this);
	    this.onCaseSensitivityChange = this.onCaseSensitivityChange.bind(this);
	    this.didFrameChange = true;
	  }
	
	  get frame() {
	    return windowStore.getFrame(this.props.frameKey);
	  }
	
	  onInput(e) {
	    windowActions.setFindDetail(this.frame, Immutable.fromJS({
	      searchString: e.target.value,
	      caseSensitivity: this.isCaseSensitive
	    }));
	  }
	
	  onCaseSensitivityChange(e) {
	    windowActions.setFindDetail(this.frame, Immutable.fromJS({
	      searchString: this.searchString,
	      caseSensitivity: !this.isCaseSensitive
	    }));
	  }
	
	  onFindFirst() {
	    this.props.onFind(this.searchString, this.isCaseSensitive, true, false);
	  }
	
	  onFindNext() {
	    this.props.onFind(this.searchString, this.isCaseSensitive, true, this.props.findDetail.get('internalFindStatePresent'));
	  }
	
	  onFindPrev() {
	    this.props.onFind(this.searchString, this.isCaseSensitive, false, this.props.findDetail.get('internalFindStatePresent'));
	  }
	
	  onContextMenu(e) {
	    // Without this timeout selection is not shown when right clicking in
	    // a word so the word replacement is kind of a surprise.  This is because
	    // our context menus are modal at the moment.  If we fix that we can
	    // remove this timeout.
	    setTimeout(() => contextMenus.onFindBarContextMenu(e), 10);
	  }
	
	  /**
	   * Focus the find in page input and select the text
	   */
	  focus() {
	    this.searchInput.focus();
	  }
	
	  select() {
	    this.searchInput.select();
	  }
	
	  componentDidMount() {
	    this.searchInput.value = this.searchString;
	    this.focus();
	    this.select();
	    windowActions.setFindbarSelected(this.frame, false);
	  }
	
	  componentWillUpdate(nextProps) {
	    if (nextProps.frameKey !== this.props.frameKey) {
	      this.searchInput.value = nextProps.findDetail && nextProps.findDetail.get('searchString') || '';
	    }
	  }
	
	  componentDidUpdate(prevProps) {
	    if (this.props.selected && !prevProps.selected) {
	      this.focus();
	      // Findbar might already be focused, so make sure select happens even if no
	      // onFocus event happens.
	      this.select();
	      windowActions.setFindbarSelected(this.frame, false);
	    }
	    if (!this.props.findDetail || !prevProps.findDetail || this.props.findDetail.get('searchString') !== prevProps.findDetail.get('searchString') || this.props.findDetail.get('caseSensitivity') !== prevProps.findDetail.get('caseSensitivity')) {
	      // Redo search if details have changed
	      this.onFindFirst();
	    }
	  }
	
	  onKeyDown(e) {
	    switch (e.keyCode) {
	      case keyCodes.ESC:
	        e.preventDefault();
	        this.props.onFindHide();
	        break;
	      case keyCodes.ENTER:
	        e.preventDefault();
	        if (e.shiftKey) {
	          this.onFindPrev();
	        } else {
	          this.onFindNext();
	        }
	        break;
	    }
	  }
	
	  onInputFocus() {
	    this.select();
	  }
	
	  onBlur(e) {
	    windowActions.setFindbarSelected(this.frame, false);
	  }
	
	  onClear() {
	    this.searchInput.value = '';
	    windowActions.setFindDetail(this.frame, Immutable.fromJS({
	      searchString: '',
	      caseSensitivity: this.isCaseSensitive
	    }));
	    this.focus();
	  }
	
	  get numberOfMatches() {
	    if (!this.props.findDetail || this.props.findDetail.get('numberOfMatches') === undefined) {
	      return -1;
	    }
	    return this.props.findDetail.get('numberOfMatches');
	  }
	
	  get activeMatchOrdinal() {
	    if (!this.props.findDetail || this.props.findDetail.get('activeMatchOrdinal') === undefined) {
	      return -1;
	    }
	    return this.props.findDetail.get('activeMatchOrdinal') || -1;
	  }
	
	  get isCaseSensitive() {
	    if (!this.props.findDetail) {
	      return false;
	    }
	    return this.props.findDetail.get('caseSensitivity');
	  }
	
	  get searchString() {
	    if (!this.props.findDetail) {
	      return '';
	    }
	    return this.props.findDetail.get('searchString');
	  }
	
	  get backgroundColor() {
	    return this.props.paintTabs && (this.props.themeColor || this.props.computedThemeColor);
	  }
	
	  get textColor() {
	    return getTextColorForBackground(this.backgroundColor);
	  }
	
	  render() {
	    let findMatchText;
	    if (this.numberOfMatches !== -1 && this.activeMatchOrdinal !== -1 && this.searchString) {
	      const l10nArgs = {
	        activeMatchOrdinal: this.activeMatchOrdinal,
	        numberOfMatches: this.numberOfMatches
	      };
	      findMatchText = _jsx('div', {
	        className: 'foundResults',
	        'data-l10n-args': JSON.stringify(l10nArgs),
	        'data-l10n-id': 'findResults'
	      });
	    } else if (this.numberOfMatches !== -1 && this.searchString) {
	      const l10nArgs = {
	        activeMatchOrdinal: this.activeMatchOrdinal,
	        numberOfMatches: this.numberOfMatches
	      };
	      findMatchText = _jsx('div', {
	        className: 'foundResults',
	        'data-l10n-args': JSON.stringify(l10nArgs),
	        'data-l10n-id': 'findResultMatches'
	      });
	    }
	
	    const backgroundColor = this.backgroundColor;
	    let findBarStyle = {};
	    let findBarTextStyle = {};
	
	    if (backgroundColor) {
	      findBarStyle = {
	        background: backgroundColor,
	        color: this.textColor
	      };
	      findBarTextStyle = {
	        color: this.textColor
	      };
	    }
	
	    return _jsx('div', {
	      className: 'findBar',
	      style: findBarStyle,
	      onBlur: this.onBlur
	    }, void 0, _jsx('div', {
	      className: 'searchContainer'
	    }, void 0, _jsx('div', {
	      className: 'searchStringContainer'
	    }, void 0, _jsx('span', {
	      className: 'searchStringContainerIcon fa fa-search'
	    }), React.createElement('input', { type: 'text',
	      spellCheck: 'false',
	      onContextMenu: this.onContextMenu,
	      ref: node => {
	        this.searchInput = node;
	      },
	      onFocus: this.onInputFocus,
	      onKeyDown: this.onKeyDown,
	      onInput: this.onInput }), _jsx('span', {
	      className: 'searchStringContainerIcon fa fa-times findClear',
	      onClick: this.onClear
	    })), _jsx('span', {
	      className: 'findMatchText'
	    }, void 0, findMatchText), _jsx(Button, {
	      iconClass: 'findButton fa-caret-up',
	      inlineStyles: findBarStyle,
	      className: 'findButton smallButton findPrev',
	      disabled: this.numberOfMatches <= 0,
	      onClick: this.onFindPrev
	    }), _jsx(Button, {
	      iconClass: 'findButton fa-caret-down',
	      inlineStyles: findBarStyle,
	      className: 'findButton smallButton findNext',
	      disabled: this.numberOfMatches <= 0,
	      onClick: this.onFindNext
	    }), _jsx(SwitchControl, {
	      id: 'caseSensitivityCheckbox',
	      checkedOn: this.isCaseSensitive,
	      onClick: this.onCaseSensitivityChange
	    }), _jsx('label', {
	      htmlFor: 'caseSensitivityCheckbox',
	      'data-l10n-id': 'caseSensitivity',
	      style: findBarTextStyle
	    })), _jsx('span', {
	      className: 'findButton closeButton',
	      style: findBarTextStyle,
	      onClick: this.props.onFindHide
	    }, void 0, '+'));
	  }
	}
	
	module.exports = FindBar;

/***/ },
/* 765 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	
	const Button = __webpack_require__(244);
	const appActions = __webpack_require__(704);
	const windowActions = __webpack_require__(716);
	const UpdateStatus = __webpack_require__(766);
	const remote = __webpack_require__(703).remote;
	const path = __webpack_require__(189);
	const cx = __webpack_require__(236);
	
	class UpdateHello extends ImmutableComponent {
	  onSpinnerClick() {
	    // To make testing of updates easier in dev mode,
	    // clicking on the spinner toggles the UI
	    if (true) {
	      let nextStatus = UpdateStatus.UPDATE_NONE;
	      switch (this.props.updateStatus) {
	        case UpdateStatus.UPDATE_CHECKING:
	          nextStatus = UpdateStatus.UPDATE_DOWNLOADING;
	          break;
	        case UpdateStatus.UPDATE_DOWNLOADING:
	          nextStatus = UpdateStatus.UPDATE_NOT_AVAILABLE;
	          break;
	        case UpdateStatus.UPDATE_NOT_AVAILABLE:
	          nextStatus = UpdateStatus.UPDATE_AVAILABLE;
	          break;
	        case UpdateStatus.UPDATE_AVAILABLE:
	          nextStatus = UpdateStatus.UPDATE_ERROR;
	          break;
	        case UpdateStatus.UPDATE_ERROR:
	          break;
	      }
	      appActions.setUpdateStatus(nextStatus);
	    }
	  }
	
	  get loading() {
	    return this.props.updateStatus === UpdateStatus.UPDATE_CHECKING || this.props.updateStatus === UpdateStatus.UPDATE_DOWNLOADING;
	  }
	
	  render() {
	    return _jsx('span', {
	      className: 'greeting'
	    }, void 0, _jsx('span', {
	      onClick: this.onSpinnerClick.bind(this),
	      className: cx({
	        fa: this.loading,
	        'fa-spinner': this.loading,
	        'fa-spin': this.loading
	      }),
	      'data-l10n-id': this.props.l10nId
	    }));
	  }
	}
	
	class UpdateHide extends ImmutableComponent {
	  render() {
	    return _jsx(Button, {
	      className: 'button secondary',
	      l10nId: 'updateHide',
	      onClick: appActions.setUpdateStatus.bind(null, this.props.reset ? UpdateStatus.UPDATE_NONE : undefined, false, undefined)
	    });
	  }
	}
	
	class UpdateLog extends ImmutableComponent {
	  onViewLog() {
	    remote.shell.openItem(path.join(remote.app.getPath('userData'), 'updateLog.log'));
	  }
	  render() {
	    return _jsx(Button, {
	      className: 'button updateViewLogButton secondary',
	      l10nId: 'updateViewLog',
	      onClick: this.onViewLog.bind(this)
	    });
	  }
	}
	
	class UpdateAvailable extends ImmutableComponent {
	  render() {
	    return _jsx('div', {}, void 0, _jsx('span', {
	      className: 'options'
	    }, void 0, this.props.metadata && this.props.metadata.get('notes') ? _jsx(Button, {
	      className: 'button updateDetails secondary',
	      l10nId: 'updateDetails',
	      onClick: windowActions.setReleaseNotesVisible.bind(null, true)
	    }) : null, _jsx(Button, {
	      className: 'button updateLaterButton secondary',
	      l10nId: 'updateLater',
	      onClick: appActions.setUpdateStatus.bind(null, UpdateStatus.UPDATE_AVAILABLE_DEFERRED, false, undefined)
	    }), _jsx(Button, {
	      className: 'button primary',
	      l10nId: 'updateNow',
	      onClick: appActions.setUpdateStatus.bind(null, UpdateStatus.UPDATE_APPLYING_RESTART, false, undefined)
	    })), _jsx(UpdateHello, {
	      updateStatus: this.props.updateStatus,
	      l10nId: 'updateHello'
	    }), _jsx('span', {
	      className: 'message',
	      'data-l10n-id': 'updateAvail'
	    }), _jsx('span', {
	      className: 'message secondary',
	      'data-l10n-id': 'updateRequiresRelaunch'
	    }), _jsx('span', {
	      className: 'spacer'
	    }));
	  }
	}
	
	class UpdateChecking extends ImmutableComponent {
	  render() {
	    return _jsx('div', {}, void 0, _jsx('span', {
	      className: 'options'
	    }, void 0, _jsx(UpdateLog, {}), _jsx(UpdateHide, {})), _jsx(UpdateHello, {
	      updateStatus: this.props.updateStatus
	    }), _jsx('span', {
	      className: 'message',
	      'data-l10n-id': 'updateChecking'
	    }), _jsx('span', {
	      className: 'spacer'
	    }));
	  }
	}
	
	class UpdateDownloading extends ImmutableComponent {
	  render() {
	    return _jsx('div', {}, void 0, _jsx('span', {
	      className: 'options'
	    }, void 0, _jsx(UpdateLog, {}), _jsx(UpdateHide, {})), _jsx(UpdateHello, {
	      updateStatus: this.props.updateStatus
	    }), _jsx('span', {
	      className: 'message',
	      'data-l10n-id': 'updateDownloading'
	    }), _jsx('span', {
	      className: 'spacer'
	    }));
	  }
	}
	
	class UpdateError extends ImmutableComponent {
	  render() {
	    return _jsx('div', {}, void 0, _jsx('span', {
	      className: 'options'
	    }, void 0, _jsx(UpdateLog, {}), _jsx(UpdateHide, {
	      reset: true
	    })), _jsx(UpdateHello, {
	      updateStatus: this.props.updateStatus,
	      l10nId: 'updateOops'
	    }), _jsx('span', {
	      className: 'message',
	      'data-l10n-id': 'updateError'
	    }), _jsx('span', {
	      className: 'spacer'
	    }));
	  }
	}
	
	class UpdateNotAvailable extends ImmutableComponent {
	  render() {
	    return _jsx('div', {}, void 0, _jsx('span', {
	      className: 'options'
	    }, void 0, _jsx(UpdateHide, {
	      reset: true
	    })), _jsx(UpdateHello, {
	      updateStatus: this.props.updateStatus,
	      l10nId: 'updateNotYet'
	    }), _jsx('span', {
	      className: 'message',
	      'data-l10n-id': 'updateNotAvail'
	    }), _jsx('span', {
	      className: 'spacer'
	    }));
	  }
	}
	
	class UpdateBar extends ImmutableComponent {
	  render() {
	    if (!this.props.updates) {
	      return null;
	    }
	
	    // When verbose is not set we only want to show update available
	    // prompts, because otherwise the check is a background check and
	    // the user shouldn't be bothered.
	    const verbose = this.props.updates.get('verbose');
	    let updateStatus = this.props.updates.get('status');
	    if (!updateStatus || !verbose && updateStatus !== UpdateStatus.UPDATE_AVAILABLE || updateStatus === UpdateStatus.UPDATE_NONE || updateStatus === UpdateStatus.UPDATE_APPLYING_RESTART || updateStatus === UpdateStatus.UPDATE_APPLYING_NO_RESTART) {
	      return null;
	    }
	
	    // The only difference between the deferred and non deferred variant is that
	    // the deferred allows hiding.  Otherwise you couldn't hide available prompts.
	    if (updateStatus === UpdateStatus.UPDATE_AVAILABLE_DEFERRED) {
	      updateStatus = UpdateStatus.UPDATE_AVAILABLE;
	    }
	
	    return _jsx('div', {
	      className: 'updateBar'
	    }, void 0, updateStatus === UpdateStatus.UPDATE_AVAILABLE ? _jsx(UpdateAvailable, {
	      metadata: this.props.updates.get('metadata'),
	      updateStatus: updateStatus
	    }) : null, updateStatus === UpdateStatus.UPDATE_CHECKING ? _jsx(UpdateChecking, {
	      updateStatus: updateStatus
	    }) : null, updateStatus === UpdateStatus.UPDATE_DOWNLOADING ? _jsx(UpdateDownloading, {
	      updateStatus: updateStatus
	    }) : null, updateStatus === UpdateStatus.UPDATE_NOT_AVAILABLE ? _jsx(UpdateNotAvailable, {
	      updateStatus: updateStatus
	    }) : null, updateStatus === UpdateStatus.UPDATE_ERROR ? _jsx(UpdateError, {
	      updateStatus: updateStatus
	    }) : null);
	  }
	}
	
	module.exports = UpdateBar;

/***/ },
/* 766 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const mapValuesByKeys = __webpack_require__(212).mapValuesByKeys;
	
	const _ = null;
	const updateStatus = {
	  UPDATE_NONE: _,
	  UPDATE_CHECKING: _,
	  UPDATE_AVAILABLE: _,
	  UPDATE_AVAILABLE_DEFERRED: _,
	  UPDATE_DOWNLOADING: _,
	  UPDATE_NOT_AVAILABLE: _,
	  UPDATE_ERROR: _,
	  // Used only when closing from the update UI.
	  // indicate the app should close and allow restart.
	  // A restart always happens after an update but will
	  // re-close unless this is set.
	  UPDATE_APPLYING_RESTART: _,
	  UPDATE_APPLYING_NO_RESTART: _
	};
	
	module.exports = mapValuesByKeys(updateStatus);

/***/ },
/* 767 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	
	const ipc = __webpack_require__(703).ipcRenderer;
	const messages = __webpack_require__(211);
	const getOrigin = __webpack_require__(259).getOrigin;
	
	class NotificationItem extends ImmutableComponent {
	  clickHandler(buttonIndex, e) {
	    const nonce = this.props.detail.get('options').get('nonce');
	    if (nonce) {
	      ipc.emit(messages.NOTIFICATION_RESPONSE + nonce, {}, this.props.detail.get('message'), buttonIndex, this.checkbox ? this.checkbox.checked : false);
	    } else {
	      ipc.send(messages.NOTIFICATION_RESPONSE, this.props.detail.get('message'), buttonIndex, this.checkbox ? this.checkbox.checked : false);
	    }
	  }
	
	  openAdvanced() {
	    ipc.emit(messages.SHORTCUT_NEW_FRAME, {}, this.props.detail.get('options').get('advancedLink'));
	  }
	
	  toggleCheckbox() {
	    this.checkbox.checked = !this.checkbox.checked;
	  }
	
	  render() {
	    let i = 0;
	    const options = this.props.detail.get('options');
	    const greeting = this.props.detail.get('greeting');
	    return _jsx('div', {
	      className: 'notificationItem ' + (options.get('style') || '')
	    }, void 0, _jsx('span', {
	      className: 'options'
	    }, void 0, options.get('persist') ? _jsx('span', {
	      id: 'rememberOption'
	    }, void 0, React.createElement('input', { type: 'checkbox', ref: node => {
	        this.checkbox = node;
	      } }), _jsx('label', {
	      htmlFor: 'rememberOption',
	      'data-l10n-id': 'rememberDecision',
	      onClick: this.toggleCheckbox.bind(this)
	    })) : null, this.props.detail.get('buttons').map(button => _jsx('button', {
	      type: 'button',
	      className: 'button ' + (button.get('className') || ''),
	      onClick: this.clickHandler.bind(this, i++)
	    }, void 0, button.get('text')))), greeting ? _jsx('span', {
	      className: 'greeting'
	    }, void 0, greeting) : null, _jsx('span', {
	      className: 'message'
	    }, void 0, this.props.detail.get('message')), _jsx('span', {
	      className: 'notificationAdvanced'
	    }, void 0, options.get('advancedText') && options.get('advancedLink') ? _jsx('span', {
	      onClick: this.openAdvanced.bind(this)
	    }, void 0, options.get('advancedText')) : null));
	  }
	}
	
	class NotificationBar extends ImmutableComponent {
	  render() {
	    const activeOrigin = getOrigin(this.props.activeFrame.get('location'));
	    if (!activeOrigin) {
	      return null;
	    }
	    const activeNotifications = this.props.notifications.filter(item => item.get('frameOrigin') ? activeOrigin === item.get('frameOrigin') : true);
	
	    if (!activeNotifications.size) {
	      return null;
	    }
	
	    return _jsx('div', {
	      className: 'notificationBar'
	    }, void 0, activeNotifications.takeLast(3).map(notificationDetail => _jsx(NotificationItem, {
	      detail: notificationDetail
	    })));
	  }
	}
	
	module.exports = NotificationBar;

/***/ },
/* 768 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Button = __webpack_require__(244);
	const contextMenus = __webpack_require__(723);
	const windowActions = __webpack_require__(716);
	const DownloadItem = __webpack_require__(769);
	
	class DownloadsBar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onHideDownloadsToolbar = this.onHideDownloadsToolbar.bind(this);
	  }
	  onHideDownloadsToolbar() {
	    windowActions.setDownloadsToolbarVisible(false);
	  }
	  render() {
	    const getComputedStyle = __webpack_require__(770);
	    const downloadItemWidth = Number.parseInt(getComputedStyle('--download-item-width'), 10);
	    const downloadItemMargin = Number.parseInt(getComputedStyle('--download-item-margin'), 10);
	    const downloadBarPadding = Number.parseInt(getComputedStyle('--download-bar-padding'), 10);
	    const downloadBarButtons = Number.parseInt(getComputedStyle('--download-bar-buttons'), 10);
	    const numItems = Math.floor((this.props.windowWidth - downloadBarPadding * 2 - downloadBarButtons) / (downloadItemWidth + downloadItemMargin));
	    return _jsx('div', {
	      className: 'downloadsBar',
	      onContextMenu: contextMenus.onDownloadsToolbarContextMenu.bind(null, undefined, undefined)
	    }, void 0, _jsx('div', {
	      className: 'downloadItems'
	    }, void 0, this.props.downloads.sort((x, y) => x.get('startTime') - y.get('startTime')).skip(this.props.downloads.size - numItems).reverse().map((download, downloadId) => _jsx(DownloadItem, {
	      download: download,
	      windowWidth: this.props.windowWidth,
	      downloadId: downloadId,
	      downloadsSize: this.props.downloads.size
	    }))), _jsx('div', {
	      className: 'downloadBarButtons'
	    }, void 0, _jsx(Button, {
	      className: 'downloadButton hideDownloadsToolbar',
	      onClick: this.onHideDownloadsToolbar
	    })));
	  }
	}
	
	module.exports = DownloadsBar;

/***/ },
/* 769 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Button = __webpack_require__(244);
	const contextMenus = __webpack_require__(723);
	const downloadStates = __webpack_require__(283);
	const { PAUSE, RESUME, CANCEL } = __webpack_require__(725);
	const appActions = __webpack_require__(704);
	const downloadUtil = __webpack_require__(282);
	const cx = __webpack_require__(236);
	
	class DownloadItem extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onRevealDownload = this.onRevealDownload.bind(this);
	    this.onOpenDownload = this.onOpenDownload.bind(this);
	    this.onPauseDownload = this.onDownloadActionPerformed.bind(this, PAUSE);
	    this.onResumeDownload = this.onDownloadActionPerformed.bind(this, RESUME);
	    this.onCancelDownload = this.onDownloadActionPerformed.bind(this, CANCEL);
	    this.onClearDownload = this.onClearDownload.bind(this);
	    this.onDeleteDownload = this.onDeleteDownload.bind(this);
	    this.onRedownload = this.onRedownload.bind(this);
	    this.onCopyLinkToClipboard = this.onCopyLinkToClipboard.bind(this);
	  }
	  onRevealDownload() {
	    appActions.downloadRevealed(this.props.downloadId);
	  }
	  onOpenDownload() {
	    appActions.downloadOpened(this.props.downloadId);
	  }
	  onClearDownload() {
	    appActions.downloadCleared(this.props.downloadId);
	  }
	  onDeleteDownload() {
	    appActions.downloadDeleted(this.props.downloadId);
	  }
	  onDownloadActionPerformed(downloadAction) {
	    appActions.downloadActionPerformed(this.props.downloadId, downloadAction);
	  }
	  onCopyLinkToClipboard() {
	    appActions.downloadCopiedToClipboard(this.props.downloadId);
	  }
	  onRedownload() {
	    appActions.downloadRedownloaded(this.props.downloadId);
	  }
	  get isInterrupted() {
	    return this.props.download.get('state') === downloadStates.INTERRUPTED;
	  }
	  get isInProgress() {
	    return this.props.download.get('state') === downloadStates.IN_PROGRESS;
	  }
	  get isCompleted() {
	    return this.props.download.get('state') === downloadStates.COMPLETED;
	  }
	  get isCancelled() {
	    return this.props.download.get('state') === downloadStates.CANCELLED;
	  }
	  get isPaused() {
	    return this.props.download.get('state') === downloadStates.PAUSED;
	  }
	  render() {
	    const progressStyle = {
	      width: downloadUtil.getPercentageComplete(this.props.download)
	    };
	    const l10nStateArgs = {};
	    if (this.isCancelled || this.isInterrupted) {
	      progressStyle.display = 'none';
	    } else if (downloadUtil.isPendingState(this.props.download)) {
	      l10nStateArgs.downloadPercent = downloadUtil.getPercentageComplete(this.props.download);
	    }
	    return _jsx('span', {
	      onContextMenu: contextMenus.onDownloadsToolbarContextMenu.bind(null, this.props.downloadId, this.props.download),
	      onDoubleClick: this.onOpenDownload,
	      className: cx({
	        downloadItem: true,
	        [this.props.download.get('state')]: true
	      })
	    }, void 0, _jsx('div', {
	      className: 'downloadActions'
	    }, void 0, downloadUtil.shouldAllowPause(this.props.download) ? _jsx(Button, {
	      className: 'pauseButton',
	      l10nId: 'downloadPause',
	      iconClass: 'fa-pause',
	      onClick: this.onPauseDownload
	    }) : null, downloadUtil.shouldAllowResume(this.props.download) ? _jsx(Button, {
	      className: 'resumeButton',
	      l10nId: 'downloadResume',
	      iconClass: 'fa-play',
	      onClick: this.onResumeDownload
	    }) : null, downloadUtil.shouldAllowCancel(this.props.download) ? _jsx(Button, {
	      className: 'cancelButton',
	      l10nId: 'downloadCancel',
	      iconClass: 'fa-times',
	      onClick: this.onCancelDownload
	    }) : null, downloadUtil.shouldAllowRedownload(this.props.download) ? _jsx(Button, {
	      className: 'redownloadButton',
	      l10nId: 'downloadRedownload',
	      iconClass: 'fa-repeat',
	      onClick: this.onRedownload
	    }) : null, downloadUtil.shouldAllowCopyLink(this.props.download) ? _jsx(Button, {
	      className: 'copyLinkButton',
	      l10nId: 'downloadCopyLinkLocation',
	      iconClass: 'fa-link',
	      onClick: this.onCopyLinkToClipboard
	    }) : null, downloadUtil.shouldAllowOpenDownloadLocation(this.props.download) ? _jsx(Button, {
	      className: 'revealButton',
	      l10nId: 'downloadOpenPath',
	      iconClass: 'fa-folder-open-o',
	      onClick: this.onRevealDownload
	    }) : null, downloadUtil.shouldAllowDelete(this.props.download) ? _jsx(Button, {
	      className: 'deleteButton',
	      l10nId: 'downloadDelete',
	      iconClass: 'fa-trash-o',
	      onClick: this.onDeleteDownload
	    }) : null, downloadUtil.shouldAllowRemoveFromList(this.props.download) ? _jsx(Button, {
	      l10nId: 'downloadRemoveFromList',
	      iconClass: 'fa-times',
	      className: 'removeDownloadFromList',
	      onClick: this.onClearDownload
	    }) : null), (this.isInProgress || this.isPaused) && this.props.download.get('totalBytes') ? _jsx('div', {
	      className: 'downloadProgress',
	      style: progressStyle
	    }) : null, _jsx('div', {
	      className: 'downloadInfo'
	    }, void 0, _jsx('span', {}, void 0, _jsx('div', {
	      className: 'downloadFilename',
	      title: this.props.download.get('filename')
	    }, void 0, this.props.download.get('filename')), this.isCancelled || this.isInterrupted || this.isCompleted || this.isPaused || this.isInProgress ? _jsx('div', {
	      className: 'downloadState',
	      'data-l10n-id': downloadUtil.getL10nId(this.props.download),
	      'data-l10n-args': JSON.stringify(l10nStateArgs)
	    }) : null), _jsx('span', {
	      className: 'downloadArrow fa-caret-down fa'
	    })));
	  }
	}
	
	module.exports = DownloadItem;

/***/ },
/* 770 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const getComputedStyle = variable => window.getComputedStyle(document.querySelector(':root')).getPropertyValue(variable);
	
	module.exports = getComputedStyle;

/***/ },
/* 771 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const electron = __webpack_require__(703);
	const ipc = electron.ipcRenderer;
	const Button = __webpack_require__(244);
	const cx = __webpack_require__(236);
	const extensionState = __webpack_require__(734);
	const windowActions = __webpack_require__(716);
	
	class BrowserActionButton extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onClick = this.onClick.bind(this);
	  }
	
	  onClick(e) {
	    if (/^chrome-extension/.test(this.props.popupWindowSrc)) {
	      windowActions.setPopupWindowDetail();
	      return;
	    }
	    let props = {
	      x: e.nativeEvent.x,
	      y: e.nativeEvent.y,
	      screenX: e.nativeEvent.screenX,
	      screenY: e.nativeEvent.screenY,
	      offsetX: e.nativeEvent.offsetX,
	      offsetY: e.nativeEvent.offsetY
	    };
	    ipc.send('chrome-browser-action-clicked', this.props.extensionId, this.props.tabId, this.props.browserAction.get('title'), props);
	  }
	
	  render() {
	    // TODO(bridiver) should have some visual notification of hover/press
	    return _jsx(Button, {
	      iconClass: 'extensionBrowserAction',
	      className: cx({
	        extensionButton: true
	      }),
	      inlineStyles: {
	        backgroundImage: extensionState.browserActionBackgroundImage(this.props.browserAction, this.props.tabId),
	        backgroundRepeat: 'no-repeat',
	        backgroundPosition: 'center'
	      },
	      dataButtonValue: this.props.extensionId,
	      onClick: this.onClick
	    });
	  }
	}
	
	module.exports = BrowserActionButton;

/***/ },
/* 772 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ipc = __webpack_require__(703).ipcRenderer;
	const ImmutableComponent = __webpack_require__(215);
	const cx = __webpack_require__(236);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const appActions = __webpack_require__(704);
	const messages = __webpack_require__(211);
	const siteUtil = __webpack_require__(259);
	
	class SiteInfo extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onAllowRunInsecureContent = this.onAllowRunInsecureContent.bind(this);
	    this.onDenyRunInsecureContent = this.onDenyRunInsecureContent.bind(this);
	  }
	  onAllowRunInsecureContent() {
	    appActions.changeSiteSetting(siteUtil.getOrigin(this.location), 'runInsecureContent', true, this.isPrivate);
	    ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL, {}, this.location);
	    this.props.onHide();
	  }
	  onDenyRunInsecureContent() {
	    appActions.removeSiteSetting(siteUtil.getOrigin(this.location), 'runInsecureContent', this.isPrivate);
	    ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL, {}, this.location);
	    this.props.onHide();
	  }
	  get isExtendedValidation() {
	    return this.props.frameProps.getIn(['security', 'isExtendedValidation']);
	  }
	  get isSecure() {
	    return this.props.frameProps.getIn(['security', 'isSecure']);
	  }
	  get isPrivate() {
	    return this.props.frameProps.getIn(['isPrivate']);
	  }
	  get runInsecureContent() {
	    return this.props.frameProps.getIn(['security', 'runInsecureContent']);
	  }
	  get isBlockedRunInsecureContent() {
	    return this.props.frameProps.getIn(['security', 'blockedRunInsecureContent']);
	  }
	  get partitionNumber() {
	    return this.props.frameProps.getIn(['partitionNumber']);
	  }
	  get location() {
	    return this.props.frameProps.getIn(['location']);
	  }
	  render() {
	    // Figure out the partition info display
	    let l10nArgs = {
	      partitionNumber: this.partitionNumber
	    };
	    let secureIcon;
	    if (this.isSecure && !this.runInsecureContent) {
	      secureIcon = _jsx('li', {}, void 0, _jsx('span', {
	        className: cx({
	          fa: true,
	          'fa-lock': true,
	          extendedValidation: this.isExtendedValidation
	        })
	      }), _jsx('span', {
	        'data-l10n-id': 'secureConnection'
	      }));
	    } else if (this.isSecure && this.runInsecureContent) {
	      secureIcon = _jsx('li', {}, void 0, _jsx('span', {
	        className: 'fa fa-unlock'
	      }), _jsx('span', {
	        'data-l10n-id': 'mixedConnection'
	      }));
	    } else {
	      secureIcon = _jsx('li', {}, void 0, _jsx('span', {
	        className: 'fa fa-unlock'
	      }), _jsx('span', {
	        'data-l10n-id': 'insecureConnection',
	        'data-l10n-args': JSON.stringify(l10nArgs)
	      }));
	    }
	
	    let partitionInfo;
	    if (this.partitionNumber) {
	      partitionInfo = _jsx('li', {}, void 0, _jsx('span', {
	        className: 'fa fa-user'
	      }), _jsx('span', {
	        'data-l10n-args': JSON.stringify(l10nArgs),
	        'data-l10n-id': 'sessionInfo'
	      }));
	    }
	
	    let connectionInfo = null;
	    if (this.isBlockedRunInsecureContent) {
	      connectionInfo = _jsx('li', {}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('span', {
	        className: 'runInsecureContentWarning',
	        'data-l10n-id': 'runInsecureContentWarning'
	      })), _jsx('li', {}, void 0, _jsx(Button, {
	        l10nId: 'allowRunInsecureContent',
	        className: 'whiteButton allowRunInsecureContentButton',
	        onClick: this.onAllowRunInsecureContent
	      }), _jsx(Button, {
	        l10nId: 'dismissAllowRunInsecureContent',
	        className: 'primaryButton dismissAllowRunInsecureContentButton',
	        onClick: this.props.onHide
	      }))));
	    } else if (this.runInsecureContent) {
	      connectionInfo = _jsx('li', {}, void 0, _jsx('ul', {}, void 0, _jsx('li', {}, void 0, _jsx('span', {
	        className: 'denyRunInsecureContentWarning',
	        'data-l10n-id': 'denyRunInsecureContentWarning'
	      })), _jsx('li', {}, void 0, _jsx(Button, {
	        l10nId: 'denyRunInsecureContent',
	        className: 'primaryButton denyRunInsecureContentButton',
	        onClick: this.onDenyRunInsecureContent
	      }), _jsx(Button, {
	        l10nId: 'dismissDenyRunInsecureContent',
	        className: 'whiteButton dismissDenyRunInsecureContentButton',
	        onClick: this.props.onHide
	      }))));
	    } else if (this.isSecure) {
	      connectionInfo = _jsx('div', {
	        className: 'connectionInfo',
	        'data-l10n-id': 'secureConnectionInfo'
	      });
	    } else {
	      connectionInfo = _jsx('div', {
	        className: 'connectionInfo',
	        'data-l10n-id': 'insecureConnectionInfo'
	      });
	    }
	
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'siteInfo',
	      isClickDismiss: true
	    }, void 0, _jsx('ul', {
	      onClick: e => e.stopPropagation()
	    }, void 0, secureIcon, partitionInfo, connectionInfo));
	  }
	}
	
	SiteInfo.propTypes = {
	  frameProps: React.PropTypes.object,
	  onHide: React.PropTypes.func
	};
	
	module.exports = SiteInfo;

/***/ },
/* 773 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const KeyCodes = __webpack_require__(743);
	
	/**
	 * Represents a popup dialog
	 */
	class Dialog extends ImmutableComponent {
	  componentDidMount() {
	    window.addEventListener('keydown', this.onKeyDown.bind(this));
	    this.dialog.focus();
	  }
	
	  onClick() {
	    if (this.props.onHide && this.props.isClickDismiss) {
	      this.props.onHide();
	    }
	  }
	
	  onKeyDown(e) {
	    if (e.keyCode === KeyCodes.ESC) {
	      if (this.props.onHide) {
	        this.props.onHide();
	      }
	    }
	  }
	
	  render() {
	    return React.createElement(
	      'div',
	      { className: 'dialog ' + (this.props.className || ''),
	        tabIndex: '-1',
	        ref: node => {
	          this.dialog = node;
	        },
	        onKeyDown: this.onKeyDown.bind(this),
	        onClick: this.onClick.bind(this) },
	      this.props.children
	    );
	  }
	}
	
	Dialog.propTypes = {
	  children: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.array]),
	  className: React.PropTypes.string,
	  isClickDismiss: React.PropTypes.bool,
	  onHide: React.PropTypes.func
	};
	
	module.exports = Dialog;

/***/ },
/* 774 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ipc = __webpack_require__(703).ipcRenderer;
	const Immutable = __webpack_require__(188);
	const ImmutableComponent = __webpack_require__(215);
	const config = __webpack_require__(201);
	const Dialog = __webpack_require__(773);
	const SwitchControl = __webpack_require__(235);
	const { FormDropdown } = __webpack_require__(500);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const urlParse = __webpack_require__(192);
	const cx = __webpack_require__(236);
	const messages = __webpack_require__(211);
	const siteUtil = __webpack_require__(259);
	
	class BraveryPanel extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onToggleSiteSetting = this.onToggleSiteSetting.bind(this);
	    this.onToggleAdsAndTracking = this.onToggleAdsAndTracking.bind(this);
	    this.onToggleHttpseList = this.onToggleHttpseList.bind(this);
	    this.onToggleNoScriptList = this.onToggleNoScriptList.bind(this);
	    this.onToggleFpList = this.onToggleFpList.bind(this);
	    this.onToggleAdvanced = this.onToggleAdvanced.bind(this);
	    this.onToggleShields = this.onToggleSiteSetting.bind(this, 'shieldsUp');
	    this.onToggleAdControl = this.onToggleSiteSetting.bind(this, 'adControl');
	    this.onToggleSafeBrowsing = this.onToggleSiteSetting.bind(this, 'safeBrowsing');
	    this.onToggleNoScript = this.onToggleSiteSetting.bind(this, 'noScript');
	    this.onToggleCookieControl = this.onToggleSiteSetting.bind(this, 'cookieControl');
	    this.onToggleHTTPSE = this.onToggleSiteSetting.bind(this, 'httpsEverywhere');
	    this.onToggleFp = this.onToggleSiteSetting.bind(this, 'fingerprintingProtection');
	    this.onReload = this.onReload.bind(this);
	    this.onEditGlobal = this.onEditGlobal.bind(this);
	    this.onInfoClick = this.onInfoClick.bind(this);
	  }
	  get isBlockingTrackedContent() {
	    return this.blockedByTrackingList && this.blockedByTrackingList.size > 0;
	  }
	  get blockedByTrackingList() {
	    return this.props.frameProps.getIn(['trackingProtection', 'blocked']);
	  }
	  get isAdvancedExpanded() {
	    return this.props.braveryPanelDetail.get('advancedControls') !== false;
	  }
	  get blockedAds() {
	    return this.props.frameProps.getIn(['adblock', 'blocked']);
	  }
	  get isBlockingAds() {
	    return this.blockedAds && this.blockedAds.size > 0;
	  }
	  get isBlockedAdsShown() {
	    return this.props.braveryPanelDetail.get('expandAdblock');
	  }
	  get blockedScripts() {
	    return this.props.frameProps.getIn(['noScript', 'blocked']);
	  }
	  get isBlockingScripts() {
	    return this.blockedScripts && this.blockedScripts.size > 0;
	  }
	  get isBlockedScriptsShown() {
	    return this.props.braveryPanelDetail.get('expandNoScript');
	  }
	  get isBlockingFingerprinting() {
	    return this.blockedFingerprinting && this.blockedFingerprinting.size > 0;
	  }
	  get blockedFingerprinting() {
	    return this.props.frameProps.getIn(['fingerprintingProtection', 'blocked']);
	  }
	  get isHttpseShown() {
	    return this.props.braveryPanelDetail.get('expandHttpse');
	  }
	  get isFpShown() {
	    return this.props.braveryPanelDetail.get('expandFp');
	  }
	  get isPrivate() {
	    return this.props.frameProps.getIn(['isPrivate']);
	  }
	  get redirectedResources() {
	    return this.props.frameProps.get('httpsEverywhere');
	  }
	  get redirectedResourcesSet() {
	    let result = new Immutable.Set([]);
	    if (this.redirectedResources) {
	      this.redirectedResources.forEach(urls => {
	        if (urls) {
	          result = result.union(urls);
	        }
	      });
	    }
	    return result;
	  }
	  get isRedirectingResources() {
	    return this.redirectedResources && this.redirectedResources.size > 0;
	  }
	  onToggleAdsAndTracking(e) {
	    windowActions.setBraveryPanelDetail({
	      expandAdblock: !this.isBlockedAdsShown
	    });
	    e.stopPropagation();
	  }
	  onToggleHttpseList(e) {
	    if (!this.isHttpseShown && this.redirectedResources && this.redirectedResources.size) {
	      // Display full list of rulesets in console for debugging
	      console.log('httpse rulesets', JSON.stringify(this.redirectedResources.toJS()));
	    }
	    windowActions.setBraveryPanelDetail({
	      expandHttpse: !this.isHttpseShown
	    });
	    e.stopPropagation();
	  }
	  onToggleFpList(e) {
	    windowActions.setBraveryPanelDetail({
	      expandFp: !this.isFpShown
	    });
	    e.stopPropagation();
	  }
	  onToggleNoScriptList(e) {
	    windowActions.setBraveryPanelDetail({
	      expandNoScript: !this.isBlockedScriptsShown
	    });
	    e.stopPropagation();
	  }
	  onToggleAdvanced() {
	    windowActions.setBraveryPanelDetail({
	      advancedControls: !this.isAdvancedExpanded
	    });
	  }
	  onReload() {
	    ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_LOAD_URL, {}, this.props.activeRequestedLocation);
	  }
	  onEditGlobal() {
	    ipc.emit(messages.SHORTCUT_NEW_FRAME, {}, 'about:preferences#shields');
	  }
	  onInfoClick() {
	    ipc.emit(messages.SHORTCUT_NEW_FRAME, {}, config.fingerprintingInfoUrl);
	  }
	  onToggleSiteSetting(setting, e) {
	    if (setting !== 'shieldsUp' && !this.props.braverySettings.shieldsUp) {
	      return;
	    }
	    let ruleKey = siteUtil.getOrigin(this.props.activeRequestedLocation);
	    const parsedUrl = urlParse(this.props.activeRequestedLocation);
	    if (setting !== 'noScript' && (parsedUrl.protocol === 'https:' || parsedUrl.protocol === 'http:')) {
	      ruleKey = `https?://${parsedUrl.host}`;
	    }
	    appActions.changeSiteSetting(ruleKey, setting, e.target.value, this.isPrivate);
	    this.onReload();
	  }
	  get displayHost() {
	    const parsedUrl = urlParse(this.props.activeRequestedLocation);
	    if (parsedUrl.protocol === 'https:' || parsedUrl.protocol === 'http:') {
	      return parsedUrl.host;
	    }
	    return this.props.activeRequestedLocation;
	  }
	  render() {
	    const shieldsUp = this.props.braverySettings.shieldsUp;
	    const noScriptEnabled = this.props.braverySettings.noScript;
	    const httpseEnabled = this.props.braverySettings.httpsEverywhere;
	    const adControl = this.props.braverySettings.adControl;
	    const fpEnabled = this.props.braverySettings.fingerprintingProtection;
	    const adsBlockedStat = (this.blockedAds ? this.blockedAds.size : 0) + (this.blockedByTrackingList ? this.blockedByTrackingList.size : 0);
	    const scriptsBlockedStat = this.blockedScripts ? this.blockedScripts.size : 0;
	    const fpBlockedStat = this.blockedFingerprinting ? this.blockedFingerprinting.size : 0;
	    const httpsUpgradedResourceStat = this.redirectedResourcesSet.size || 0;
	    const l10nArgs = JSON.stringify({
	      blockedAdCount: adsBlockedStat,
	      httpsUpgradeCount: httpsUpgradedResourceStat,
	      blockedScriptCount: scriptsBlockedStat,
	      blockedFingerprintCount: fpBlockedStat
	    });
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'braveryPanelContainer',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'braveryPanel',
	      onClick: e => e.stopPropagation()
	    }, void 0, _jsx('div', {
	      className: 'braveryPanelHeader'
	    }, void 0, _jsx('div', {
	      className: 'braveryPanelHeaderLeft'
	    }, void 0, _jsx('div', {
	      'data-l10n-id': 'braveryPanelTitle'
	    }), _jsx('span', {
	      title: this.displayHost,
	      className: 'braverySettingsFor'
	    }, void 0, this.displayHost)), _jsx('div', {
	      className: 'braveryPanelHeaderRight'
	    }, void 0, _jsx('div', {
	      className: 'braveryShieldsUpDown'
	    }, void 0, _jsx(SwitchControl, {
	      onClick: this.onToggleShields,
	      leftl10nId: 'shieldsDown',
	      rightl10nId: 'shieldsUp',
	      topl10nId: 'shields',
	      checkedOn: shieldsUp,
	      large: true
	    })))), _jsx('div', {
	      className: 'braveryPanelStats'
	    }, void 0, _jsx('div', {
	      onClick: this.onToggleAdsAndTracking,
	      className: cx({
	        statClickable: !!adsBlockedStat,
	        statDisabled: !shieldsUp || adControl === 'allowAdsAndTracking'
	      })
	    }, void 0, _jsx('div', {
	      className: 'braveryStat adsBlockedStat'
	    }, void 0, adsBlockedStat), _jsx('div', {
	      'data-l10n-id': 'adsBlocked',
	      'data-l10n-args': l10nArgs
	    })), _jsx('div', {
	      onClick: this.onToggleHttpseList,
	      className: cx({
	        statClickable: !!this.redirectedResourcesSet.size,
	        statDisabled: !shieldsUp || !httpseEnabled
	      })
	    }, void 0, _jsx('div', {
	      className: 'braveryStat redirectedResourcesStat'
	    }, void 0, httpsUpgradedResourceStat), _jsx('div', {
	      'data-l10n-id': 'httpReroutes',
	      'data-l10n-args': l10nArgs
	    })), _jsx('div', {
	      onClick: this.onToggleNoScriptList,
	      className: cx({
	        statClickable: !!scriptsBlockedStat,
	        statDisabled: !shieldsUp || !noScriptEnabled
	      })
	    }, void 0, _jsx('div', {
	      className: 'braveryStat noScriptStat'
	    }, void 0, scriptsBlockedStat), _jsx('div', {
	      'data-l10n-id': 'scriptsBlockedNumber',
	      'data-l10n-args': l10nArgs
	    })), _jsx('div', {
	      onClick: this.onToggleFpList,
	      className: cx({
	        statClickable: !!fpBlockedStat,
	        statDisabled: !shieldsUp || !fpEnabled
	      })
	    }, void 0, _jsx('div', {
	      className: 'braveryStat fpStat'
	    }, void 0, fpBlockedStat), _jsx('div', {
	      'data-l10n-id': 'fingerprintingBlocked',
	      'data-l10n-args': l10nArgs
	    }))), _jsx('div', {
	      className: 'braveryPanelBody'
	    }, void 0, _jsx('ul', {}, void 0, this.isBlockedAdsShown ? _jsx('li', {}, void 0, _jsx('ul', {}, void 0, this.isBlockingAds ? this.blockedAds.map(site => _jsx('li', {}, site, site)) : null, this.isBlockingTrackedContent ? this.blockedByTrackingList.map(site => _jsx('li', {}, site, site)) : null)) : null, this.isRedirectingResources && this.isHttpseShown ? _jsx('li', {}, void 0, _jsx('ul', {}, void 0, this.redirectedResourcesSet.map(site => _jsx('li', {}, site, site)))) : null, this.isBlockingScripts && this.isBlockedScriptsShown ? _jsx('li', {}, void 0, _jsx('ul', {}, void 0, this.blockedScripts.map(site => _jsx('li', {}, site, site)))) : null, this.isBlockingFingerprinting && this.isFpShown ? _jsx('li', {}, void 0, _jsx('ul', {}, void 0, this.blockedFingerprinting.map(site => _jsx('li', {}, site, site)))) : null), _jsx('div', {
	      className: cx({
	        braveryAdvancedTitle: true,
	        disabled: !shieldsUp
	      }),
	      onClick: this.onToggleAdvanced
	    }, void 0, _jsx('div', {
	      className: cx({
	        fa: true,
	        'fa-caret-down': this.isAdvancedExpanded,
	        'fa-caret-right': !this.isAdvancedExpanded,
	        braveryAdvancedIndicator: true
	      })
	    }), _jsx('div', {
	      'data-l10n-id': 'advancedControls'
	    })), this.isAdvancedExpanded ? _jsx('span', {}, void 0, _jsx('hr', {}), _jsx('div', {
	      className: 'braveryAdvanced'
	    }, void 0, _jsx('div', {
	      className: 'braveryControlGroup'
	    }, void 0, _jsx('div', {
	      className: cx({
	        braverySelectTitle: true,
	        disabled: !shieldsUp
	      }),
	      'data-l10n-id': 'adControl'
	    }), _jsx(FormDropdown, {
	      'data-test-id': 'adsBlockedControl',
	      value: adControl,
	      onChange: this.onToggleAdControl,
	      disabled: !shieldsUp
	    }, void 0, _jsx('option', {
	      'data-l10n-id': 'showBraveAds',
	      value: 'showBraveAds'
	    }), _jsx('option', {
	      'data-l10n-id': 'blockAds',
	      value: 'blockAds'
	    }), _jsx('option', {
	      'data-l10n-id': 'allowAdsAndTracking',
	      value: 'allowAdsAndTracking'
	    })), _jsx(SwitchControl, {
	      onClick: this.onToggleHTTPSE,
	      rightl10nId: 'httpsEverywhere',
	      checkedOn: httpseEnabled,
	      disabled: !shieldsUp
	    }), _jsx(SwitchControl, {
	      onClick: this.onToggleNoScript,
	      rightl10nId: 'noScript',
	      checkedOn: noScriptEnabled,
	      disabled: !shieldsUp,
	      className: 'noScriptSwitch'
	    })), _jsx('div', {
	      className: 'braveryControlGroup'
	    }, void 0, _jsx('div', {
	      className: cx({
	        braverySelectTitle: true,
	        disabled: !shieldsUp
	      }),
	      'data-l10n-id': 'cookieControl'
	    }), _jsx(FormDropdown, {
	      value: this.props.braverySettings.cookieControl,
	      onChange: this.onToggleCookieControl,
	      disabled: !shieldsUp
	    }, void 0, _jsx('option', {
	      'data-l10n-id': 'block3rdPartyCookie',
	      value: 'block3rdPartyCookie'
	    }), _jsx('option', {
	      'data-l10n-id': 'allowAllCookies',
	      value: 'allowAllCookies'
	    })), _jsx(SwitchControl, {
	      onClick: this.onToggleFp,
	      rightl10nId: 'fingerprintingProtection',
	      checkedOn: fpEnabled,
	      disabled: !shieldsUp,
	      onInfoClick: this.onInfoClick,
	      infoTitle: config.fingerprintingInfoUrl,
	      className: 'fingerprintingProtectionSwitch'
	    }), _jsx(SwitchControl, {
	      onClick: this.onToggleSafeBrowsing,
	      rightl10nId: 'safeBrowsing',
	      checkedOn: this.props.braverySettings.safeBrowsing,
	      disabled: !shieldsUp
	    })))) : null, _jsx('hr', {
	      className: 'braveryBottomSplitter'
	    }), _jsx('div', {
	      className: 'braveryPanelFooter'
	    }, void 0, _jsx('span', {
	      className: 'clickable',
	      onClick: this.onEditGlobal,
	      'data-l10n-id': 'editBraveryGlobalSettings'
	    }), _jsx('span', {
	      className: 'reloadButton clickable',
	      onClick: this.onReload
	    }, void 0, _jsx('div', {
	      className: 'reloadText',
	      'data-l10n-id': 'reload'
	    }), _jsx('div', {
	      className: 'fa fa-repeat'
	    }))))));
	  }
	}
	
	module.exports = BraveryPanel;

/***/ },
/* 775 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const Immutable = __webpack_require__(188);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const SwitchControl = __webpack_require__(235);
	const appActions = __webpack_require__(704);
	const ipc = __webpack_require__(703).ipcRenderer;
	const messages = __webpack_require__(211);
	
	class ClearBrowsingDataPanel extends React.Component {
	  constructor(props) {
	    super();
	    this.onToggleBrowserHistory = this.onToggleSetting.bind(this, 'browserHistory');
	    this.onToggleDownloadHistory = this.onToggleSetting.bind(this, 'downloadHistory');
	    this.onToggleCachedImagesAndFiles = this.onToggleSetting.bind(this, 'cachedImagesAndFiles');
	    this.onToggleSavedPasswords = this.onToggleSetting.bind(this, 'savedPasswords');
	    this.onToggleAllSiteCookies = this.onToggleSetting.bind(this, 'allSiteCookies');
	    this.onToggleAutocompleteData = this.onToggleSetting.bind(this, 'autocompleteData');
	    this.onToggleAutofillData = this.onToggleSetting.bind(this, 'autofillData');
	    this.onToggleSavedSiteSettings = this.onToggleSetting.bind(this, 'savedSiteSettings');
	    this.onClear = this.onClear.bind(this);
	    this.state = {
	      clearBrowsingDataDetail: props.clearBrowsingDataDefaults ? props.clearBrowsingDataDefaults : Immutable.Map()
	    };
	  }
	  onToggleSetting(setting) {
	    this.setState(({ clearBrowsingDataDetail }) => ({
	      clearBrowsingDataDetail: clearBrowsingDataDetail.update(setting, isChecked => !isChecked)
	    }));
	  }
	  onClear() {
	    appActions.onClearBrowsingData(this.state.clearBrowsingDataDetail);
	    this.props.onHide();
	    let detail = this.state.clearBrowsingDataDetail;
	    if (detail.get('allSiteCookies') && detail.get('browserHistory') && detail.get('cachedImagesAndFiles')) {
	      ipc.send(messages.PREFS_RESTART);
	    }
	  }
	  render() {
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'clearBrowsingDataPanel',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'clearBrowsingData',
	      onClick: e => e.stopPropagation()
	    }, void 0, _jsx('div', {
	      className: 'formSection clearBrowsingDataTitle',
	      'data-l10n-id': 'clearBrowsingData'
	    }), _jsx('div', {
	      className: 'formSection clearBrowsingDataOptions'
	    }, void 0, _jsx(SwitchControl, {
	      className: 'browserHistorySwitch',
	      rightl10nId: 'browserHistory',
	      checkedOn: this.state.clearBrowsingDataDetail.get('browserHistory'),
	      onClick: this.onToggleBrowserHistory
	    }), _jsx(SwitchControl, {
	      rightl10nId: 'downloadHistory',
	      checkedOn: this.state.clearBrowsingDataDetail.get('downloadHistory'),
	      onClick: this.onToggleDownloadHistory
	    }), _jsx(SwitchControl, {
	      rightl10nId: 'cachedImagesAndFiles',
	      checkedOn: this.state.clearBrowsingDataDetail.get('cachedImagesAndFiles'),
	      onClick: this.onToggleCachedImagesAndFiles
	    }), _jsx(SwitchControl, {
	      rightl10nId: 'savedPasswords',
	      checkedOn: this.state.clearBrowsingDataDetail.get('savedPasswords'),
	      onClick: this.onToggleSavedPasswords
	    }), _jsx(SwitchControl, {
	      rightl10nId: 'allSiteCookies',
	      checkedOn: this.state.clearBrowsingDataDetail.get('allSiteCookies'),
	      onClick: this.onToggleAllSiteCookies
	    }), _jsx(SwitchControl, {
	      className: 'autocompleteDataSwitch',
	      rightl10nId: 'autocompleteData',
	      checkedOn: this.state.clearBrowsingDataDetail.get('autocompleteData'),
	      onClick: this.onToggleAutocompleteData
	    }), _jsx(SwitchControl, {
	      className: 'autofillDataSwitch',
	      rightl10nId: 'autofillData',
	      checkedOn: this.state.clearBrowsingDataDetail.get('autofillData'),
	      onClick: this.onToggleAutofillData
	    }), _jsx(SwitchControl, {
	      className: 'siteSettingsSwitch',
	      rightl10nId: 'savedSiteSettings',
	      checkedOn: this.state.clearBrowsingDataDetail.get('savedSiteSettings'),
	      onClick: this.onToggleSavedSiteSettings
	    })), _jsx('div', {
	      className: 'formSection clearBrowsingDataButtons'
	    }, void 0, _jsx(Button, {
	      l10nId: 'cancel',
	      className: 'whiteButton',
	      onClick: this.props.onHide
	    }), _jsx(Button, {
	      l10nId: 'clear',
	      className: 'primaryButton clearDataButton',
	      onClick: this.onClear
	    })), _jsx('div', {
	      className: 'formSection clearBrowsingDataWarning'
	    }, void 0, _jsx('div', {
	      'data-l10n-id': 'clearDataWarning'
	    }))));
	  }
	}
	
	module.exports = ClearBrowsingDataPanel;

/***/ },
/* 776 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const SwitchControl = __webpack_require__(235);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	
	class ImportBrowserDataPanel extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onToggleHistory = this.onToggleSetting.bind(this, 'history');
	    this.onToggleFavorites = this.onToggleSetting.bind(this, 'favorites');
	    this.onToggleMergeFavorites = this.onToggleSetting.bind(this, 'mergeFavorites');
	    this.onToggleCookies = this.onToggleSetting.bind(this, 'cookies');
	    this.onImport = this.onImport.bind(this);
	    this.onChange = this.onChange.bind(this);
	  }
	  onToggleSetting(setting, e) {
	    if (setting === 'favorites') {
	      this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('mergeFavorites', e.target.value);
	    }
	    windowActions.setImportBrowserDataSelected(this.props.importBrowserDataSelected.set(setting, e.target.value));
	  }
	  get browserData() {
	    let index = this.props.importBrowserDataSelected.get('index');
	    if (index === undefined) {
	      index = '0';
	    }
	    return this.props.importBrowserDataDetail.get(index);
	  }
	  get supportHistory() {
	    let browserData = this.browserData;
	    if (browserData === undefined) {
	      return false;
	    }
	    return browserData.get('history');
	  }
	  get supportFavorites() {
	    let browserData = this.browserData;
	    if (browserData === undefined) {
	      return false;
	    }
	    return browserData.get('favorites');
	  }
	  get supportCookies() {
	    let browserData = this.browserData;
	    if (browserData === undefined) {
	      return false;
	    }
	    return browserData.get('cookies');
	  }
	  onImport() {
	    let index = this.props.importBrowserDataSelected.get('index');
	    if (index === undefined) {
	      this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('index', '0');
	    }
	    let browserData = this.browserData;
	    if (browserData !== undefined) {
	      let type = browserData.get('type');
	      this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('type', type);
	    }
	    appActions.importBrowserData(this.props.importBrowserDataSelected);
	    this.props.onHide();
	  }
	  onChange(e) {
	    this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('index', e.target.value);
	    this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('history', false);
	    this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('favorites', false);
	    this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('mergeFavorites', false);
	    this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('cookies', false);
	    let importBrowserDataSelected = this.props.importBrowserDataSelected;
	    if (this.supportHistory) {
	      importBrowserDataSelected = importBrowserDataSelected.set('history', true);
	    }
	    if (this.supportFavorites) {
	      importBrowserDataSelected = importBrowserDataSelected.set('favorites', true);
	      importBrowserDataSelected = importBrowserDataSelected.set('mergeFavorites', true);
	    }
	    if (this.supportCookies) {
	      importBrowserDataSelected = importBrowserDataSelected.set('cookies', true);
	    }
	    windowActions.setImportBrowserDataSelected(importBrowserDataSelected);
	  }
	  get selectedBrowser() {
	    let index = this.props.importBrowserDataSelected.get('index');
	    if (index === undefined) {
	      this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('index', '0');
	      if (this.supportHistory) {
	        this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('history', true);
	      }
	      if (this.supportFavorites) {
	        this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('favorites', true);
	        this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('mergeFavorites', true);
	      }
	      if (this.supportCookies) {
	        this.props.importBrowserDataSelected = this.props.importBrowserDataSelected.set('cookies', true);
	      }
	    }
	    return index !== undefined ? index : '0';
	  }
	  render() {
	    var browsers = [];
	    if (this.props.importBrowserDataDetail !== undefined) {
	      this.props.importBrowserDataDetail.toJS().forEach(browser => {
	        browsers.push(_jsx('option', {
	          value: browser.index
	        }, void 0, browser.name));
	      });
	    }
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'importBrowserDataPanel',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'importBrowserData',
	      onClick: e => e.stopPropagation()
	    }, void 0, _jsx('div', {
	      className: 'formSection importBrowserDataTitle',
	      'data-l10n-id': 'importBrowserData'
	    }), _jsx('div', {
	      className: 'formSection importBrowserDataOptions'
	    }, void 0, _jsx('select', {
	      value: this.selectedBrowser,
	      onChange: this.onChange
	    }, void 0, browsers), _jsx(SwitchControl, {
	      rightl10nId: 'browserHistory',
	      checkedOn: this.props.importBrowserDataSelected.get('history'),
	      onClick: this.onToggleHistory,
	      disabled: !this.supportHistory
	    }), _jsx(SwitchControl, {
	      rightl10nId: 'favoritesOrBookmarks',
	      checkedOn: this.props.importBrowserDataSelected.get('favorites'),
	      onClick: this.onToggleFavorites,
	      disabled: !this.supportFavorites
	    }), _jsx('div', {
	      className: 'formSection importBrowserSubDataOptions'
	    }, void 0, _jsx(SwitchControl, {
	      rightl10nId: 'mergeIntoBookmarksToolbar',
	      checkedOn: this.props.importBrowserDataSelected.get('mergeFavorites'),
	      onClick: this.onToggleMergeFavorites,
	      disabled: !this.props.importBrowserDataSelected.get('favorites')
	    })), _jsx(SwitchControl, {
	      rightl10nId: 'cookies',
	      checkedOn: this.props.importBrowserDataSelected.get('cookies'),
	      onClick: this.onToggleCookies,
	      disabled: !this.supportCookies
	    })), _jsx('div', {
	      className: 'formSection'
	    }, void 0, _jsx('div', {
	      'data-l10n-id': 'importDataCloseBrowserWarning'
	    })), _jsx('div', {
	      className: 'formSection importBrowserDataButtons'
	    }, void 0, _jsx(Button, {
	      l10nId: 'cancel',
	      className: 'whiteButton',
	      onClick: this.props.onHide
	    }), _jsx(Button, {
	      l10nId: 'import',
	      className: 'primaryButton',
	      onClick: this.onImport
	    })), _jsx('div', {
	      className: 'formSection importBrowserDataWarning'
	    }, void 0, _jsx('div', {
	      'data-l10n-id': 'importDataWarning'
	    }))));
	  }
	}
	
	module.exports = ImportBrowserDataPanel;

/***/ },
/* 777 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const appConfig = __webpack_require__(203);
	const WidevineInfo = __webpack_require__(624);
	const SwitchControl = __webpack_require__(235);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const siteUtil = __webpack_require__(259);
	
	class ImportBrowserDataPanel extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onInstallAndAllow = this.onInstallAndAllow.bind(this);
	    this.onClickRememberForNetflix = this.onClickRememberForNetflix.bind(this);
	  }
	  get origin() {
	    return siteUtil.getOrigin(this.props.widevinePanelDetail.get('location'));
	  }
	  onInstallAndAllow() {
	    appActions.setResourceEnabled(appConfig.resourceNames.WIDEVINE, true);
	    this.props.onHide();
	    // The site permissions that is set if this.props.widevinePanelDetail.get('alsoAddRememberSiteSetting') is handled once the resource is ready
	    // in main.js.  This is so that the reload doesn't happen until it is ready.
	  }
	  onClickRememberForNetflix(e) {
	    windowActions.widevinePanelDetailChanged({
	      alsoAddRememberSiteSetting: e.target.value
	    });
	  }
	  render() {
	    const isLinux = process.platform === 'linux';
	    if (isLinux) {
	      return null;
	    }
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'commonDialog',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'commonForm',
	      onClick: e => e.stopPropagation()
	    }, void 0, _jsx('h2', {
	      className: 'formSection commonFormTitle',
	      'data-l10n-id': 'widevinePanelTitle'
	    }), _jsx('div', {
	      className: 'formSection'
	    }, void 0, _jsx(WidevineInfo, {
	      newFrameAction: windowActions.newFrame
	    })), _jsx('div', {
	      className: 'formSection commonFormButtons'
	    }, void 0, _jsx(Button, {
	      l10nId: 'cancel',
	      className: 'whiteButton',
	      onClick: this.props.onHide
	    }), _jsx(Button, {
	      l10nId: 'installAndAllow',
	      className: 'primaryButton',
	      onClick: this.onInstallAndAllow
	    })), _jsx('div', {
	      className: 'formSection commonFormBottom'
	    }, void 0, _jsx('div', {
	      className: 'commonFormButtonGroup'
	    }, void 0, _jsx(SwitchControl, {
	      id: this.props.prefKey,
	      rightl10nId: 'rememberThisDecision',
	      rightl10nArgs: JSON.stringify({ origin: this.origin }),
	      onClick: this.onClickRememberForNetflix,
	      checkedOn: this.props.widevinePanelDetail.get('alsoAddRememberSiteSetting')
	    })))));
	  }
	}
	
	module.exports = ImportBrowserDataPanel;

/***/ },
/* 778 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const KeyCodes = __webpack_require__(743);
	
	class AutofillAddressPanel extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onNameChange = this.onNameChange.bind(this);
	    this.onOrganizationChange = this.onOrganizationChange.bind(this);
	    this.onStreetAddressChange = this.onStreetAddressChange.bind(this);
	    this.onCityChange = this.onCityChange.bind(this);
	    this.onStateChange = this.onStateChange.bind(this);
	    this.onPostalCodeChange = this.onPostalCodeChange.bind(this);
	    this.onCountryChange = this.onCountryChange.bind(this);
	    this.onPhoneChange = this.onPhoneChange.bind(this);
	    this.onEmailChange = this.onEmailChange.bind(this);
	    this.onKeyDown = this.onKeyDown.bind(this);
	    this.onSave = this.onSave.bind(this);
	    this.onClick = this.onClick.bind(this);
	  }
	  onNameChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('name', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onOrganizationChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('organization', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onStreetAddressChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('streetAddress', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onCityChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('city', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onStateChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('state', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onPostalCodeChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('postalCode', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onCountryChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('country', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onPhoneChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('phone', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onEmailChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('email', e.target.value);
	    windowActions.setAutofillAddressDetail(currentDetail, this.props.originalDetail);
	  }
	  onKeyDown(e) {
	    switch (e.keyCode) {
	      case KeyCodes.ENTER:
	        this.onSave();
	        break;
	      case KeyCodes.ESC:
	        this.props.onHide();
	        break;
	    }
	  }
	  onSave() {
	    appActions.addAutofillAddress(this.props.currentDetail, this.props.originalDetail);
	    this.props.onHide();
	  }
	  onClick(e) {
	    e.stopPropagation();
	  }
	  get disableSaveButton() {
	    let currentDetail = this.props.currentDetail;
	    if (!currentDetail.size) return true;
	    if (!currentDetail.get('name') && !currentDetail.get('organization') && !currentDetail.get('streetAddress') && !currentDetail.get('city') && !currentDetail.get('state') && !currentDetail.get('country') && !currentDetail.get('phone') && !currentDetail.get('email')) return true;
	    return false;
	  }
	
	  render() {
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'manageAutofillDataPanel autofillAddressPanel',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'genericForm manageAutofillData',
	      onClick: this.onClick
	    }, void 0, _jsx('div', {
	      className: 'formRow manageAutofillDataTitle',
	      'data-l10n-id': 'editAddress'
	    }), _jsx('div', {
	      className: 'genericFormTable'
	    }, void 0, _jsx('div', {
	      id: 'nameOnAddress',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'name',
	      htmlFor: 'nameOnAddress'
	    }), React.createElement('input', { spellCheck: 'false', onKeyDown: this.onKeyDown, onChange: this.onNameChange,
	      value: this.props.currentDetail.get('name'),
	      ref: nameOnAddress => {
	        this.nameOnAddress = nameOnAddress;
	      } })), _jsx('div', {
	      id: 'organization',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'organization',
	      htmlFor: 'organization'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onOrganizationChange,
	      value: this.props.currentDetail.get('organization')
	    })), _jsx('div', {
	      id: 'streetAddress',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'streetAddress',
	      htmlFor: 'streetAddress'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onStreetAddressChange,
	      value: this.props.currentDetail.get('streetAddress')
	    })), _jsx('div', {
	      id: 'city',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'city',
	      htmlFor: 'city'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onCityChange,
	      value: this.props.currentDetail.get('city')
	    })), _jsx('div', {
	      id: 'state',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'state',
	      htmlFor: 'state'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onStateChange,
	      value: this.props.currentDetail.get('state')
	    })), _jsx('div', {
	      id: 'postalCode',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'postalCode',
	      htmlFor: 'postalCode'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onPostalCodeChange,
	      value: this.props.currentDetail.get('postalCode')
	    })), _jsx('div', {
	      id: 'country',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'country',
	      htmlFor: 'country'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onCountryChange,
	      value: this.props.currentDetail.get('country')
	    })), _jsx('div', {
	      id: 'phone',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'phone',
	      htmlFor: 'phone'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onPhoneChange,
	      value: this.props.currentDetail.get('phone')
	    })), _jsx('div', {
	      id: 'email',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'email',
	      htmlFor: 'email'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onEmailChange,
	      value: this.props.currentDetail.get('email')
	    })), _jsx('div', {
	      className: 'formRow manageAutofillDataButtons'
	    }, void 0, _jsx(Button, {
	      l10nId: 'cancel',
	      className: 'whiteButton',
	      onClick: this.props.onHide
	    }), _jsx(Button, {
	      l10nId: 'save',
	      className: 'primaryButton saveAddressButton',
	      onClick: this.onSave,
	      disabled: this.disableSaveButton
	    })))));
	  }
	}
	
	module.exports = AutofillAddressPanel;

/***/ },
/* 779 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const windowActions = __webpack_require__(716);
	const appActions = __webpack_require__(704);
	const KeyCodes = __webpack_require__(743);
	
	class AutofillCreditCardPanel extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onNameChange = this.onNameChange.bind(this);
	    this.onCardChange = this.onCardChange.bind(this);
	    this.onExpMonthChange = this.onExpMonthChange.bind(this);
	    this.onExpYearChange = this.onExpYearChange.bind(this);
	    this.onKeyDown = this.onKeyDown.bind(this);
	    this.onSave = this.onSave.bind(this);
	    this.onClick = this.onClick.bind(this);
	  }
	  onNameChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('name', e.target.value);
	    windowActions.setAutofillCreditCardDetail(currentDetail, this.props.originalDetail);
	  }
	  onCardChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('card', e.target.value);
	    windowActions.setAutofillCreditCardDetail(currentDetail, this.props.originalDetail);
	  }
	  onExpMonthChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('month', e.target.value);
	    windowActions.setAutofillCreditCardDetail(currentDetail, this.props.originalDetail);
	  }
	  onExpYearChange(e) {
	    let currentDetail = this.props.currentDetail;
	    currentDetail = currentDetail.set('year', e.target.value);
	    windowActions.setAutofillCreditCardDetail(currentDetail, this.props.originalDetail);
	  }
	  onKeyDown(e) {
	    switch (e.keyCode) {
	      case KeyCodes.ENTER:
	        this.onSave();
	        break;
	      case KeyCodes.ESC:
	        this.props.onHide();
	        break;
	    }
	  }
	  onSave() {
	    appActions.addAutofillCreditCard(this.props.currentDetail, this.props.originalDetail);
	    this.props.onHide();
	  }
	  onClick(e) {
	    e.stopPropagation();
	  }
	  get disableSaveButton() {
	    let currentDetail = this.props.currentDetail;
	    if (!currentDetail.size) return true;
	    if (!currentDetail.get('name') && !currentDetail.get('card')) return true;
	    return false;
	  }
	  render() {
	    var ExpMonth = [];
	    for (let i = 1; i <= 12; ++i) {
	      let mon = i < 10 ? '0' + i.toString() : i.toString();
	      ExpMonth.push(_jsx('option', {
	        value: mon
	      }, void 0, mon));
	    }
	    var ExpYear = [];
	    var today = new Date();
	    var year = today.getFullYear();
	    for (let i = year; i <= year + 9; ++i) {
	      ExpYear.push(_jsx('option', {
	        value: i
	      }, void 0, i));
	    }
	
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'manageAutofillDataPanel autofillCreditCardPanel',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'genericForm manageAutofillData',
	      onClick: this.onClick
	    }, void 0, _jsx('div', {
	      className: 'formRow manageAutofillDataTitle',
	      'data-l10n-id': 'editCreditCard'
	    }), _jsx('div', {
	      className: 'genericFormTable'
	    }, void 0, _jsx('div', {
	      id: 'nameOnCard',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'name',
	      htmlFor: 'nameOnCard'
	    }), React.createElement('input', { spellCheck: 'false', onKeyDown: this.onKeyDown, onChange: this.onNameChange,
	      value: this.props.currentDetail.get('name'), ref: nameOnCard => {
	        this.nameOnCard = nameOnCard;
	      } })), _jsx('div', {
	      id: 'creditCardNumber',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'creditCardNumber',
	      htmlFor: 'creditCardNumber'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onCardChange,
	      value: this.props.currentDetail.get('card')
	    })), _jsx('div', {
	      id: 'expirationDate',
	      className: 'formRow manageAutofillDataOptions'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'expirationDate',
	      htmlFor: 'expirationDate'
	    }), _jsx('select', {
	      value: this.props.currentDetail.get('month'),
	      onChange: this.onExpMonthChange,
	      className: 'expMonthSelect'
	    }, void 0, ExpMonth), _jsx('select', {
	      value: this.props.currentDetail.get('year'),
	      onChange: this.onExpYearChange,
	      className: 'expYearSelect'
	    }, void 0, ExpYear)), _jsx('div', {
	      className: 'formRow manageAutofillDataButtons'
	    }, void 0, _jsx(Button, {
	      l10nId: 'cancel',
	      className: 'whiteButton',
	      onClick: this.props.onHide
	    }), _jsx(Button, {
	      l10nId: 'save',
	      className: 'primaryButton saveCreditCardButton',
	      onClick: this.onSave,
	      disabled: this.disableSaveButton
	    })))));
	  }
	}
	
	module.exports = AutofillCreditCardPanel;

/***/ },
/* 780 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const windowActions = __webpack_require__(716);
	const AddEditBookmarkHanger = __webpack_require__(746);
	
	class AddEditBookmark extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onClose = this.onClose.bind(this);
	  }
	  onClose() {
	    windowActions.setBookmarkDetail();
	  }
	  componentDidMount() {
	    this.refs.bookmarkHanger.setDefaultFocus();
	  }
	  render() {
	    return _jsx(Dialog, {
	      onHide: this.onClose,
	      isClickDismiss: true
	    }, void 0, React.createElement(AddEditBookmarkHanger, {
	      ref: 'bookmarkHanger',
	      isModal: true,
	      sites: this.props.sites,
	      currentDetail: this.props.currentDetail,
	      originalDetail: this.props.originalDetail,
	      destinationDetail: this.props.destinationDetail,
	      shouldShowLocation: this.props.shouldShowLocation
	    }));
	  }
	}
	
	module.exports = AddEditBookmark;

/***/ },
/* 781 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const appActions = __webpack_require__(704);
	const KeyCodes = __webpack_require__(743);
	const urlResolve = __webpack_require__(194).resolve;
	
	class LoginRequired extends React.Component {
	  constructor() {
	    super();
	    this.state = {
	      username: '',
	      password: ''
	    };
	    this.onUsernameChange = this.onUsernameChange.bind(this);
	    this.onPasswordChange = this.onPasswordChange.bind(this);
	    this.onKeyDown = this.onKeyDown.bind(this);
	    this.onClose = this.onClose.bind(this);
	  }
	  focus() {
	    this.loginUsername.select();
	    this.loginUsername.focus();
	  }
	  componentDidMount() {
	    this.focus();
	  }
	  get detail() {
	    return this.props.loginRequiredDetail;
	  }
	  get tabId() {
	    return this.props.tabId;
	  }
	  onKeyDown(e) {
	    switch (e.keyCode) {
	      case KeyCodes.ENTER:
	        this.onSave();
	        break;
	      case KeyCodes.ESC:
	        this.onClose();
	        break;
	    }
	  }
	  onClose() {
	    appActions.setLoginResponseDetail(this.tabId);
	  }
	  onClick(e) {
	    e.stopPropagation();
	  }
	  onUsernameChange(e) {
	    this.setState({
	      username: e.target.value
	    });
	  }
	  onPasswordChange(e) {
	    this.setState({
	      password: e.target.value
	    });
	  }
	  onSave() {
	    this.focus();
	    this.setState({
	      username: '',
	      password: ''
	    });
	    appActions.setLoginResponseDetail(this.tabId, this.state);
	  }
	  render() {
	    const l10nArgs = {
	      host: urlResolve(this.detail.getIn(['request', 'url']), '/')
	    };
	    return _jsx(Dialog, {
	      onHide: this.onClose,
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'genericForm',
	      onClick: this.onClick.bind(this)
	    }, void 0, _jsx('h2', {
	      'data-l10n-id': 'basicAuthRequired'
	    }), _jsx('div', {
	      className: 'genericFormSubtitle',
	      'data-l10n-id': 'basicAuthMessage',
	      'data-l10n-args': JSON.stringify(l10nArgs)
	    }), _jsx('div', {
	      className: 'genericFormTable'
	    }, void 0, _jsx('div', {
	      id: 'loginUsername',
	      className: 'formRow'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'basicAuthUsernameLabel',
	      htmlFor: 'loginUsername'
	    }), React.createElement('input', { spellCheck: 'false', onKeyDown: this.onKeyDown, onChange: this.onUsernameChange, value: this.state.username, ref: loginUsername => {
	        this.loginUsername = loginUsername;
	      } })), !this.isFolder ? _jsx('div', {
	      id: 'loginPassword',
	      className: 'formRow'
	    }, void 0, _jsx('label', {
	      'data-l10n-id': 'basicAuthPasswordLabel',
	      htmlFor: 'loginPassword'
	    }), _jsx('input', {
	      spellCheck: 'false',
	      type: 'password',
	      onKeyDown: this.onKeyDown,
	      onChange: this.onPasswordChange,
	      value: this.state.password
	    })) : null, _jsx('div', {
	      className: 'formRow'
	    }, void 0, _jsx(Button, {
	      l10nId: 'cancel',
	      className: 'primaryButton whiteButton',
	      onClick: this.onClose
	    }), _jsx(Button, {
	      l10nId: 'ok',
	      className: 'primaryButton',
	      onClick: this.onSave.bind(this)
	    })))));
	  }
	}
	
	LoginRequired.propTypes = { frameProps: React.PropTypes.object };
	module.exports = LoginRequired;

/***/ },
/* 782 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	
	class ReleaseNotes extends ImmutableComponent {
	  onClick(e) {
	    e.stopPropagation();
	  }
	  render() {
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'releaseNotes',
	      onClick: this.onClick.bind(this)
	    }, void 0, _jsx('h1', {}, void 0, this.props.metadata.get('name')), _jsx('div', {}, void 0, this.props.metadata.get('notes'))));
	  }
	}
	
	module.exports = ReleaseNotes;

/***/ },
/* 783 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ReactDOM = __webpack_require__(12);
	const ImmutableComponent = __webpack_require__(215);
	const contextMenus = __webpack_require__(723);
	const windowActions = __webpack_require__(716);
	const bookmarkActions = __webpack_require__(724);
	const appActions = __webpack_require__(704);
	const siteTags = __webpack_require__(256);
	const siteUtil = __webpack_require__(259);
	const dragTypes = __webpack_require__(257);
	const Button = __webpack_require__(244);
	const cx = __webpack_require__(236);
	const dnd = __webpack_require__(731);
	const dndData = __webpack_require__(258);
	const calculateTextWidth = __webpack_require__(784).calculateTextWidth;
	const windowStore = __webpack_require__(701);
	const iconSize = __webpack_require__(269).iconSize;
	
	class BookmarkToolbarButton extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onClick = this.onClick.bind(this);
	    this.onMouseOver = this.onMouseOver.bind(this);
	    this.onDragStart = this.onDragStart.bind(this);
	    this.onDragEnd = this.onDragEnd.bind(this);
	    this.onDragEnter = this.onDragEnter.bind(this);
	    this.onDragLeave = this.onDragLeave.bind(this);
	    this.onDragOver = this.onDragOver.bind(this);
	    this.onContextMenu = this.onContextMenu.bind(this);
	  }
	  get activeFrame() {
	    return windowStore.getFrame(this.props.activeFrameKey);
	  }
	  onClick(e) {
	    if (!this.props.clickBookmarkItem(this.props.bookmark, e) && this.props.bookmark.get('tags').includes(siteTags.BOOKMARK_FOLDER)) {
	      if (this.props.contextMenuDetail) {
	        windowActions.setContextMenuDetail();
	        return;
	      }
	      e.target = ReactDOM.findDOMNode(this);
	      this.props.showBookmarkFolderMenu(this.props.bookmark, e);
	      return;
	    }
	  }
	
	  onMouseOver(e) {
	    // Behavior when a bookmarks toolbar folder has its list expanded
	    if (this.props.selectedFolderId) {
	      if (this.isFolder && this.props.selectedFolderId !== this.props.bookmark.get('folderId')) {
	        // Auto-expand the menu if user mouses over another folder
	        e.target = ReactDOM.findDOMNode(this);
	        this.props.showBookmarkFolderMenu(this.props.bookmark, e);
	      } else if (!this.isFolder && this.props.selectedFolderId !== -1) {
	        // Hide the currently expanded menu if user mouses over a non-folder
	        windowActions.setBookmarksToolbarSelectedFolderId(-1);
	        windowActions.setContextMenuDetail();
	      }
	    }
	  }
	
	  onDragStart(e) {
	    dnd.onDragStart(dragTypes.BOOKMARK, this.props.bookmark, e);
	  }
	
	  onDragEnd(e) {
	    dnd.onDragEnd(dragTypes.BOOKMARK, this.props.bookmark, e);
	  }
	
	  onDragEnter(e) {
	    // Bookmark specific DND code to expand hover when on a folder item
	    if (this.isFolder) {
	      e.target = ReactDOM.findDOMNode(this);
	      if (dnd.isMiddle(e.target, e.clientX)) {
	        e.target.getBoundingClientRect;
	        this.props.showBookmarkFolderMenu(this.props.bookmark, e);
	        windowActions.setIsBeingDraggedOverDetail(dragTypes.BOOKMARK, this.props.bookmark, {
	          expanded: true
	        });
	      }
	    }
	  }
	
	  onDragLeave(e) {
	    // Bookmark specific DND code to expand hover when on a folder item
	    if (this.isFolder) {
	      windowActions.setIsBeingDraggedOverDetail(dragTypes.BOOKMARK, this.props.bookmark, {
	        expanded: false
	      });
	    }
	  }
	
	  onDragOver(e) {
	    dnd.onDragOver(dragTypes.BOOKMARK, this.bookmarkNode.getBoundingClientRect(), this.props.bookmark, this.draggingOverData, e);
	  }
	
	  get draggingOverData() {
	    if (!this.props.draggingOverData || this.props.draggingOverData.get('dragOverKey') !== this.props.bookmark) {
	      return;
	    }
	
	    return this.props.draggingOverData;
	  }
	
	  get isDragging() {
	    return this.props.bookmark === dnd.getInProcessDragData();
	  }
	
	  get isDraggingOverLeft() {
	    if (!this.draggingOverData) {
	      return false;
	    }
	    return this.draggingOverData.get('draggingOverLeftHalf');
	  }
	
	  get isExpanded() {
	    if (!this.props.draggingOverData) {
	      return false;
	    }
	    return this.props.draggingOverData.get('expanded');
	  }
	
	  get isDraggingOverRight() {
	    if (!this.draggingOverData) {
	      return false;
	    }
	    return this.draggingOverData.get('draggingOverRightHalf');
	  }
	
	  get isFolder() {
	    return siteUtil.isFolder(this.props.bookmark);
	  }
	
	  onContextMenu(e) {
	    this.props.openContextMenu(this.props.bookmark, e);
	  }
	
	  render() {
	    let showingFavicon = this.props.showFavicon;
	    let iconStyle = {
	      minWidth: iconSize,
	      width: iconSize
	    };
	
	    if (showingFavicon) {
	      let icon = this.props.bookmark.get('favicon');
	
	      if (icon) {
	        iconStyle = Object.assign(iconStyle, {
	          backgroundImage: `url(${icon})`,
	          backgroundSize: iconSize,
	          height: iconSize
	        });
	      } else if (!this.isFolder) {
	        showingFavicon = false;
	      }
	    }
	
	    const siteDetailTitle = this.props.bookmark.get('customTitle') || this.props.bookmark.get('title');
	    const siteDetailLocation = this.props.bookmark.get('location');
	    let hoverTitle;
	    if (this.isFolder) {
	      hoverTitle = siteDetailTitle;
	    } else {
	      hoverTitle = siteDetailTitle ? siteDetailTitle + '\n' + siteDetailLocation : siteDetailLocation;
	    }
	
	    return React.createElement(
	      'span',
	      {
	        className: cx({
	          bookmarkToolbarButton: true,
	          draggingOverLeft: this.isDraggingOverLeft && !this.isExpanded,
	          draggingOverRight: this.isDraggingOverRight && !this.isExpanded,
	          isDragging: this.isDragging,
	          showOnlyFavicon: this.props.showFavicon && this.props.showOnlyFavicon
	        }),
	        draggable: true,
	        ref: node => {
	          this.bookmarkNode = node;
	        },
	        title: hoverTitle,
	        onClick: this.onClick,
	        onMouseOver: this.onMouseOver,
	        onDragStart: this.onDragStart,
	        onDragEnd: this.onDragEnd,
	        onDragEnter: this.onDragEnter,
	        onDragLeave: this.onDragLeave,
	        onDragOver: this.onDragOver,
	        onContextMenu: this.onContextMenu },
	      this.isFolder && this.props.showFavicon ? _jsx('span', {
	        className: 'bookmarkFavicon bookmarkFolder fa fa-folder-o',
	        style: iconStyle
	      }) : null,
	
	      // Fill in a favicon if we want one but there isn't one
	      !this.isFolder && this.props.showFavicon && !showingFavicon ? _jsx('span', {
	        className: 'bookmarkFavicon bookmarkFile fa fa-file-o',
	        style: iconStyle
	      }) : null,
	      !this.isFolder && showingFavicon ? _jsx('span', {
	        className: 'bookmarkFavicon',
	        style: iconStyle
	      }) : null,
	      _jsx('span', {
	        className: 'bookmarkText'
	      }, void 0, (this.isFolder ? false : this.props.showFavicon && this.props.showOnlyFavicon) ? '' : siteDetailTitle || siteDetailLocation),
	      this.isFolder ? _jsx('span', {
	        className: 'bookmarkFolderChevron fa fa-chevron-down'
	      }) : null
	    );
	  }
	}
	
	class BookmarksToolbar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onDrop = this.onDrop.bind(this);
	    this.onDragEnter = this.onDragEnter.bind(this);
	    this.onDragOver = this.onDragOver.bind(this);
	    this.onContextMenu = this.onContextMenu.bind(this);
	    this.onMoreBookmarksMenu = this.onMoreBookmarksMenu.bind(this);
	    this.openContextMenu = this.openContextMenu.bind(this);
	    this.clickBookmarkItem = this.clickBookmarkItem.bind(this);
	    this.showBookmarkFolderMenu = this.showBookmarkFolderMenu.bind(this);
	  }
	  get activeFrame() {
	    return windowStore.getFrame(this.props.activeFrameKey);
	  }
	  onDrop(e) {
	    e.preventDefault();
	    const bookmark = dnd.prepareBookmarkDataFromCompatible(e.dataTransfer);
	    if (bookmark) {
	      // Figure out the droppedOn element filtering out the source drag item
	      let droppedOn = dnd.closestFromXOffset(this.bookmarkRefs.filter(bookmarkRef => {
	        if (!bookmarkRef) {
	          return false;
	        }
	        return !siteUtil.isEquivalent(bookmarkRef.props.bookmark, bookmark);
	      }), e.clientX);
	      if (droppedOn.selectedRef) {
	        const isLeftSide = dnd.isLeftSide(ReactDOM.findDOMNode(droppedOn.selectedRef), e.clientX);
	        const droppedOnSiteDetail = droppedOn.selectedRef.props.bookmark || droppedOn.selectedRef.props.bookmarkFolder;
	        appActions.moveSite(bookmark, droppedOnSiteDetail, isLeftSide, droppedOnSiteDetail.get('tags').includes(siteTags.BOOKMARK_FOLDER) && droppedOn && droppedOn.isDroppedOn);
	        windowActions.setIsBeingDraggedOverDetail();
	      }
	      return;
	    }
	    const droppedHTML = e.dataTransfer.getData('text/html');
	    if (droppedHTML) {
	      var parser = new window.DOMParser();
	      var doc = parser.parseFromString(droppedHTML, 'text/html');
	      var a = doc.querySelector('a');
	      if (a && a.href) {
	        appActions.addSite({
	          title: a.innerText,
	          location: e.dataTransfer.getData('text/plain')
	        }, siteTags.BOOKMARK);
	        return;
	      }
	    }
	    if (e.dataTransfer.files.length > 0) {
	      Array.from(e.dataTransfer.files).forEach(file => appActions.addSite({ location: file.path, title: file.name }, siteTags.BOOKMARK));
	      return;
	    }
	
	    e.dataTransfer.getData('text/uri-list').split('\n').map(x => x.trim()).filter(x => !x.startsWith('#') && x.length > 0).forEach(url => appActions.addSite({ location: url }, siteTags.BOOKMARK));
	  }
	  openContextMenu(bookmark, e) {
	    contextMenus.onSiteDetailContextMenu(bookmark, this.activeFrame, e);
	  }
	  clickBookmarkItem(bookmark, e) {
	    return bookmarkActions.clickBookmarkItem(this.bookmarks, bookmark, this.activeFrame, e);
	  }
	  showBookmarkFolderMenu(bookmark, e) {
	    windowActions.setBookmarksToolbarSelectedFolderId(bookmark.get('folderId'));
	    contextMenus.onShowBookmarkFolderMenu(this.bookmarks, bookmark, this.activeFrame, e);
	  }
	  updateBookmarkData(props) {
	    this.bookmarks = siteUtil.getBookmarks(props.sites);
	
	    const noParentItems = this.bookmarks.filter(bookmark => !bookmark.get('parentFolderId'));
	    let widthAccountedFor = 0;
	    const overflowButtonWidth = 25;
	
	    // Dynamically calculate how many bookmark items should appear on the toolbar
	    // before it is actually rendered.
	    if (!this.root) {
	      this.root = window.getComputedStyle(document.querySelector(':root'));
	      this.maxWidth = Number.parseInt(this.root.getPropertyValue('--bookmark-item-max-width'), 10);
	      this.padding = Number.parseInt(this.root.getPropertyValue('--bookmark-item-padding'), 10) * 2;
	      // Toolbar padding is only on the left
	      this.toolbarPadding = Number.parseInt(this.root.getPropertyValue('--bookmarks-toolbar-padding'), 10);
	      this.bookmarkItemMargin = Number.parseInt(this.root.getPropertyValue('--bookmark-item-margin'), 10) * 2;
	      // No margin for show only favicons
	      this.chevronMargin = Number.parseInt(this.root.getPropertyValue('--bookmark-item-chevron-margin'), 10);
	      this.fontSize = this.root.getPropertyValue('--bookmark-item-font-size');
	      this.fontFamily = this.root.getPropertyValue('--default-font-family');
	      this.chevronWidth = this.chevronMargin + Number.parseInt(this.fontSize);
	    }
	    const margin = props.showFavicon && props.showOnlyFavicon ? 0 : this.bookmarkItemMargin;
	    widthAccountedFor += this.toolbarPadding;
	
	    // Loop through until we fill up the entire bookmark toolbar width
	    let i;
	    let noParentItemsList = noParentItems.toList();
	    for (i = 0; i < noParentItemsList.size; i++) {
	      let iconWidth = props.showFavicon ? iconSize : 0;
	      // font-awesome file icons are 3px smaller
	      if (props.showFavicon && !noParentItemsList.getIn([i, 'folderId']) && !noParentItemsList.getIn([i, 'favicon'])) {
	        iconWidth -= 3;
	      }
	      const chevronWidth = props.showFavicon && noParentItemsList.getIn([i, 'folderId']) ? this.chevronWidth : 0;
	      if (props.showFavicon && props.showOnlyFavicon) {
	        widthAccountedFor += this.padding + iconWidth + chevronWidth;
	      } else {
	        const text = noParentItemsList.getIn([i, 'customTitle']) || noParentItemsList.getIn([i, 'title']) || noParentItemsList.getIn([i, 'location']);
	        widthAccountedFor += Math.min(calculateTextWidth(text, `${this.fontSize} ${this.fontFamily}`) + this.padding + iconWidth + chevronWidth, this.maxWidth);
	      }
	      widthAccountedFor += margin;
	      if (widthAccountedFor >= props.windowWidth - overflowButtonWidth) {
	        break;
	      }
	    }
	    this.bookmarksForToolbar = noParentItems.take(i).sort(siteUtil.siteSort);
	    // Show at most 100 items in the overflow menu
	    this.overflowBookmarkItems = noParentItems.skip(i).take(100).sort(siteUtil.siteSort);
	  }
	  componentWillMount() {
	    this.updateBookmarkData(this.props);
	  }
	  componentWillUpdate(nextProps) {
	    if (nextProps.sites !== this.props.sites || nextProps.windowWidth !== this.props.windowWidth || nextProps.showFavicon !== this.props.showFavicon || nextProps.showOnlyFavicon !== this.props.showOnlyFavicon) {
	      this.updateBookmarkData(nextProps);
	    }
	  }
	  onDragEnter(e) {
	    if (dndData.hasDragData(e.dataTransfer, dragTypes.BOOKMARK)) {
	      if (Array.from(e.target.classList).includes('overflowIndicator')) {
	        this.onMoreBookmarksMenu(e);
	      }
	    }
	  }
	  onDragOver(e) {
	    const sourceDragData = dndData.getDragData(e.dataTransfer, dragTypes.BOOKMARK);
	    if (sourceDragData) {
	      e.dataTransfer.dropEffect = 'move';
	      e.preventDefault();
	      return;
	    }
	    // console.log(e.dataTransfer.types, e.dataTransfer.getData('text/plain'), e.dataTransfer.getData('text/uri-list'), e.dataTransfer.getData('text/html'))
	    let intersection = e.dataTransfer.types.filter(x => ['text/plain', 'text/uri-list', 'text/html', 'Files'].includes(x));
	    if (intersection.length > 0) {
	      e.dataTransfer.dropEffect = 'copy';
	      e.preventDefault();
	    }
	  }
	  onMoreBookmarksMenu(e) {
	    contextMenus.onMoreBookmarksMenu(this.activeFrame, this.bookmarks, this.overflowBookmarkItems, e);
	  }
	  onContextMenu(e) {
	    const closest = dnd.closestFromXOffset(this.bookmarkRefs.filter(x => !!x), e.clientX).selectedRef;
	    contextMenus.onTabsToolbarContextMenu(this.activeFrame, closest && closest.props.bookmark || undefined, closest && closest.isDroppedOn, e);
	  }
	  render() {
	    let showFavicon = this.props.showFavicon;
	    let showOnlyFavicon = this.props.showOnlyFavicon;
	
	    this.bookmarkRefs = [];
	    return _jsx('div', {
	      className: cx({
	        bookmarksToolbar: true,
	        allowDragging: this.props.shouldAllowWindowDrag,
	        showFavicon,
	        showOnlyFavicon
	      }),
	      onDrop: this.onDrop,
	      onDragEnter: this.onDragEnter,
	      onDragOver: this.onDragOver,
	      onContextMenu: this.onContextMenu
	    }, void 0, this.bookmarksForToolbar.map((bookmark, i) => React.createElement(BookmarkToolbarButton, {
	      ref: node => this.bookmarkRefs.push(node),
	      key: i,
	      contextMenuDetail: this.props.contextMenuDetail,
	      activeFrameKey: this.props.activeFrameKey,
	      draggingOverData: this.props.draggingOverData,
	      openContextMenu: this.openContextMenu,
	      clickBookmarkItem: this.clickBookmarkItem,
	      showBookmarkFolderMenu: this.showBookmarkFolderMenu,
	      bookmark: bookmark,
	      showFavicon: this.props.showFavicon,
	      showOnlyFavicon: this.props.showOnlyFavicon,
	      selectedFolderId: this.props.selectedFolderId })), this.overflowBookmarkItems.size !== 0 ? _jsx(Button, {
	      iconClass: 'overflowIndicator fa-angle-double-right',
	      onClick: this.onMoreBookmarksMenu,
	      className: 'bookmarkButton'
	    }) : null);
	  }
	}
	
	module.exports = BookmarksToolbar;

/***/ },
/* 784 */
/***/ function(module, exports) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const ctx = document.createElement('canvas').getContext('2d');
	module.exports.calculateTextWidth = (text, font = '11px Arial') => {
	  ctx.font = font;
	  return ctx.measureText(text).width;
	};

/***/ },
/* 785 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const Immutable = __webpack_require__(188);
	const ImmutableComponent = __webpack_require__(215);
	const windowActions = __webpack_require__(716);
	const cx = __webpack_require__(236);
	const KeyCodes = __webpack_require__(743);
	const { formatAccelerator, wrappingClamp } = __webpack_require__(268);
	const separatorMenuItem = __webpack_require__(727).separatorMenuItem;
	const keyCodes = __webpack_require__(743);
	
	class ContextMenuItem extends ImmutableComponent {
	  get submenu() {
	    return this.props.contextMenuItem.get('submenu');
	  }
	  get hasSubmenu() {
	    return this.submenu && this.submenu.size > 0;
	  }
	  get accelerator() {
	    const accelerator = this.props.contextMenuItem.get('accelerator');
	    return accelerator && typeof accelerator === 'string' ? accelerator.trim() : null;
	  }
	  get hasAccelerator() {
	    return this.accelerator !== null;
	  }
	  onClick(clickAction, shouldHide, e) {
	    e.stopPropagation();
	    if (clickAction) {
	      if (shouldHide) {
	        setImmediate(() => windowActions.resetMenuState());
	      }
	      clickAction(e);
	    }
	  }
	  onDragStart(e) {
	    if (this.props.contextMenuItem.get('dragStart')) {
	      this.props.contextMenuItem.get('dragStart')(e);
	    }
	  }
	  onDragEnd(e) {
	    if (this.props.contextMenuItem.get('dragEnd')) {
	      this.props.contextMenuItem.get('dragEnd')(e);
	    }
	  }
	  onDragOver(e) {
	    if (this.props.contextMenuItem.get('dragOver')) {
	      this.props.contextMenuItem.get('dragOver')(e);
	    }
	    this.onMouseEnter(e);
	  }
	  onDrop(e) {
	    if (this.props.contextMenuItem.get('drop')) {
	      this.props.contextMenuItem.get('drop')(e);
	    }
	    windowActions.setContextMenuDetail();
	  }
	  onContextMenu(e) {
	    if (this.props.contextMenuItem.get('contextMenu')) {
	      this.props.contextMenuItem.get('contextMenu')(e);
	    }
	    windowActions.setContextMenuDetail();
	  }
	
	  onMouseEnter(e) {
	    let openedSubmenuDetails = this.props.contextMenuDetail.get('openedSubmenuDetails');
	    openedSubmenuDetails = openedSubmenuDetails ? openedSubmenuDetails.splice(this.props.submenuIndex, this.props.contextMenuDetail.get('openedSubmenuDetails').size) : new Immutable.List();
	
	    if (this.hasSubmenu) {
	      let node = e.target;
	      while (node && node.classList && !node.classList.contains('contextMenuItem')) {
	        node = node.parentNode;
	      }
	      let parentNode = node.parentNode;
	      while (parentNode && parentNode.classList && !parentNode.classList.contains('contextMenu')) {
	        parentNode = parentNode.parentNode;
	      }
	      const parentBoundingRect = parentNode.getBoundingClientRect();
	      const boundingRect = node.getBoundingClientRect();
	      openedSubmenuDetails = openedSubmenuDetails.push(Immutable.fromJS({
	        y: boundingRect.top - parentBoundingRect.top - 1,
	        template: this.submenu
	      }));
	    }
	    windowActions.setContextMenuDetail(this.props.contextMenuDetail.set('openedSubmenuDetails', openedSubmenuDetails));
	  }
	  getLabelForItem(item) {
	    const label = item.get('label');
	    if (label) {
	      return label;
	    }
	    if (item.get('labelDataBind') === 'zoomLevel') {
	      const activeWebview = document.querySelector('.frameWrapper.isActive webview');
	      let percent = 100;
	      if (activeWebview) {
	        percent = activeWebview.getZoomPercent();
	      }
	      return `${percent}%`;
	    }
	    return '';
	  }
	  render() {
	    const iconSize = 16;
	    let iconStyle = {
	      minWidth: iconSize,
	      width: iconSize
	    };
	
	    const icon = this.props.contextMenuItem.get('icon');
	    let faIcon;
	    if (icon) {
	      iconStyle = Object.assign(iconStyle, {
	        backgroundImage: `url(${icon})`,
	        backgroundSize: iconSize,
	        height: iconSize
	      });
	    } else {
	      faIcon = this.props.contextMenuItem.get('faIcon');
	    }
	
	    if (this.props.contextMenuItem.get('type') === 'separator') {
	      return _jsx('div', {
	        className: 'contextMenuItem contextMenuSeparator',
	        role: 'listitem'
	      }, void 0, _jsx('hr', {}));
	    } else if (this.props.contextMenuItem.get('type') === 'multi') {
	      return _jsx('div', {
	        className: 'contextMenuItem multiContextMenuItem'
	      }, void 0, _jsx('span', {
	        className: 'multiItemTitle',
	        'data-l10n-id': this.props.contextMenuItem.get('l10nLabelId')
	      }), this.props.contextMenuItem.get('submenu').map(subItem => _jsx('div', {
	        className: 'contextMenuSubItem',
	        onClick: this.onClick.bind(this, subItem.get('click'), false)
	      }, void 0, _jsx('span', {
	        'data-l10n-id': subItem.get('l10nLabelId')
	      }, void 0, this.getLabelForItem(subItem)))));
	    }
	    const props = {
	      className: cx({
	        contextMenuItem: true,
	        hasFaIcon: faIcon,
	        checkedMenuItem: this.props.contextMenuItem.get('checked'),
	        hasIcon: icon || faIcon,
	        selectedByKeyboard: this.props.selected
	      }),
	      role: 'listitem'
	    };
	
	    if (typeof this.props.dataIndex === 'number') {
	      props['data-index'] = this.props.dataIndex;
	    }
	
	    return React.createElement(
	      'div',
	      _extends({}, props, {
	        draggable: this.props.contextMenuItem.get('draggable'),
	        onDragStart: this.onDragStart.bind(this),
	        onDragEnd: this.onDragEnd.bind(this),
	        onDragOver: this.onDragOver.bind(this),
	        onDrop: this.onDrop.bind(this),
	        onContextMenu: this.onContextMenu.bind(this),
	        disabled: this.props.contextMenuItem.get('enabled') === false,
	        onMouseEnter: this.onMouseEnter.bind(this),
	        onClick: this.onClick.bind(this, this.props.contextMenuItem.get('click'), true) }),
	      this.props.contextMenuItem.get('checked') ? _jsx('span', {
	        className: 'fa fa-check contextMenuCheckIndicator'
	      }) : null,
	      icon || faIcon ? _jsx('span', {
	        className: cx({
	          contextMenuIcon: true,
	          hasFaIcon: !!faIcon,
	          fa: faIcon,
	          [faIcon]: !!faIcon
	        }),
	        style: iconStyle
	      }) : null,
	      _jsx('span', {
	        className: 'contextMenuItemText',
	        'data-l10n-id': this.props.contextMenuItem.get('l10nLabelId')
	      }, void 0, this.props.contextMenuItem.get('label')),
	      this.hasSubmenu ? _jsx('span', {
	        className: 'submenuIndicatorContainer'
	      }, void 0, _jsx('span', {
	        className: 'submenuIndicatorSpacer'
	      }), _jsx('span', {
	        className: 'submenuIndicator fa fa-chevron-right'
	      })) : this.hasAccelerator ? _jsx('span', {
	        className: 'submenuIndicatorContainer'
	      }, void 0, _jsx('span', {
	        className: 'submenuIndicatorSpacer'
	      }), _jsx('span', {
	        className: 'accelerator'
	      }, void 0, formatAccelerator(this.accelerator))) : null
	    );
	  }
	}
	
	/**
	 * Represents a single popup menu (not including submenu)
	 */
	class ContextMenuSingle extends ImmutableComponent {
	  render() {
	    const styles = {};
	    if (this.props.y) {
	      styles.top = this.props.y;
	    }
	    const visibleMenuItems = this.props.template.filter(element => {
	      return element.has('visible') ? element.get('visible') : true;
	    });
	
	    let index = 0;
	    return _jsx('div', {
	      role: 'list',
	      className: cx({
	        contextMenuSingle: true,
	        isSubmenu: this.props.submenuIndex !== 0
	      }),
	      style: styles
	    }, void 0, visibleMenuItems.map(contextMenuItem => {
	      let props = {
	        contextMenuItem: contextMenuItem,
	        submenuIndex: this.props.submenuIndex,
	        lastZoomPercentage: this.props.lastZoomPercentage,
	        contextMenuDetail: this.props.contextMenuDetail,
	        selected: false
	      };
	      // don't count separators when finding selectedIndex
	      if (contextMenuItem.get('type') !== separatorMenuItem.type) {
	        props.dataIndex = index;
	        props.selected = index === this.props.selectedIndex;
	        index++;
	      }
	      return React.createElement(ContextMenuItem, props);
	    }));
	  }
	}
	
	/**
	 * Represents a context menu including all submenus
	 */
	class ContextMenu extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onKeyDown = this.onKeyDown.bind(this);
	  }
	
	  componentDidMount() {
	    window.addEventListener('keydown', this.onKeyDown);
	    window.addEventListener('keyup', this.onKeyUp);
	  }
	
	  componentWillUnmount() {
	    window.removeEventListener('keydown', this.onKeyDown);
	    window.removeEventListener('keyup', this.onKeyUp);
	  }
	
	  onKeyDown(e) {
	    let selectedIndex = null;
	    let currentIndex = null;
	    let selectedTemplate = null;
	    let selectedMenuItem = null;
	
	    if (this.props.selectedIndex !== null) {
	      selectedIndex = this.props.selectedIndex;
	      currentIndex = selectedIndex[selectedIndex.length - 1];
	      selectedTemplate = this.getMenuByIndex(selectedIndex, this.props.contextMenuDetail.get('template'));
	      selectedMenuItem = selectedTemplate.get(currentIndex);
	    }
	
	    switch (e.keyCode) {
	      case keyCodes.ENTER:
	        e.preventDefault();
	        e.stopPropagation();
	        if (currentIndex !== null) {
	          const action = selectedTemplate.getIn([currentIndex, 'click']);
	          if (action) {
	            action(e);
	          }
	        }
	        windowActions.resetMenuState();
	        break;
	
	      case KeyCodes.ESC:
	      case KeyCodes.TAB:
	        windowActions.resetMenuState();
	        break;
	
	      case keyCodes.LEFT:
	        // Left arrow inside a sub menu
	        // <= go back one level
	        if (this.hasSubmenuSelection) {
	          const newIndices = selectedIndex.slice();
	          newIndices.pop();
	          windowActions.setContextMenuSelectedIndex(newIndices);
	
	          let openedSubmenuDetails = this.props.contextMenuDetail.get('openedSubmenuDetails') ? this.props.contextMenuDetail.get('openedSubmenuDetails') : new Immutable.List();
	          openedSubmenuDetails = openedSubmenuDetails.pop();
	
	          windowActions.setContextMenuDetail(this.props.contextMenuDetail.set('openedSubmenuDetails', openedSubmenuDetails));
	        }
	        break;
	
	      case keyCodes.RIGHT:
	        // Right arrow on a menu item which has a sub menu
	        // => go up one level (default next menu to item 0)
	        const isSubMenu = !!selectedMenuItem.get('submenu');
	
	        if (isSubMenu) {
	          e.stopPropagation();
	          const newIndices = selectedIndex.slice();
	          newIndices.push(0);
	          windowActions.setContextMenuSelectedIndex(newIndices);
	
	          let openedSubmenuDetails = this.props.contextMenuDetail.get('openedSubmenuDetails') ? this.props.contextMenuDetail.get('openedSubmenuDetails') : new Immutable.List();
	
	          const rect = this.getContextMenuItemBounds();
	          const itemHeight = rect.bottom - rect.top;
	
	          openedSubmenuDetails = openedSubmenuDetails.push(Immutable.fromJS({
	            y: rect.top - itemHeight,
	            template: selectedMenuItem.get('submenu')
	          }));
	
	          windowActions.setContextMenuDetail(this.props.contextMenuDetail.set('openedSubmenuDetails', openedSubmenuDetails));
	        }
	        break;
	
	      case keyCodes.UP:
	      case keyCodes.DOWN:
	        if (this.props.contextMenuDetail) {
	          let newIndices;
	
	          if (selectedIndex === null) {
	            newIndices = [0];
	          } else {
	            const nextIndex = wrappingClamp(currentIndex + (e.which === keyCodes.UP ? -1 : 1), 0, this.maxIndex(selectedTemplate));
	
	            newIndices = selectedIndex.slice();
	            newIndices[selectedIndex.length - 1] = nextIndex;
	          }
	
	          windowActions.setContextMenuSelectedIndex(newIndices);
	        }
	        break;
	    }
	  }
	
	  onKeyUp(e) {
	    e.preventDefault();
	  }
	
	  onClick() {
	    setImmediate(() => windowActions.resetMenuState());
	  }
	
	  getTemplateItemsOnly(template) {
	    return template.filter(element => {
	      if (element.get('type') === separatorMenuItem.type) return false;
	      if (element.has('visible')) return element.get('visible');
	      return true;
	    });
	  }
	
	  getMenuByIndex(selectedIndex, parentItem, currentDepth) {
	    parentItem = this.getTemplateItemsOnly(parentItem);
	    if (!currentDepth) currentDepth = 0;
	
	    const selectedIndices = selectedIndex.slice(1);
	    if (selectedIndices.length === 0) return parentItem;
	
	    const submenuIndex = selectedIndex[0];
	    const childItem = parentItem.get(submenuIndex);
	
	    if (childItem && childItem.get('submenu')) {
	      return this.getMenuByIndex(selectedIndices, childItem.get('submenu'), currentDepth + 1);
	    }
	
	    return parentItem;
	  }
	
	  getContextMenuItemBounds() {
	    const selected = document.querySelectorAll('.contextMenuItem.selectedByKeyboard');
	    if (selected.length > 0) {
	      return selected.item(selected.length - 1).getBoundingClientRect();
	    }
	    return null;
	  }
	
	  /**
	   * Upper bound for the active / focused menu.
	   */
	  maxIndex(template) {
	    return template.filter(element => {
	      if (element.get('type') === separatorMenuItem.type) return false;
	      if (element.has('visible')) return element.get('visible');
	      return true;
	    }).size - 1;
	  }
	
	  get openedSubmenuDetails() {
	    return this.props.contextMenuDetail.get('openedSubmenuDetails') || new Immutable.List();
	  }
	
	  get hasSubmenuSelection() {
	    return this.props.selectedIndex === null ? false : this.props.selectedIndex.length > 1;
	  }
	
	  render() {
	    const selectedIndex = this.props.selectedIndex === null ? [0] : this.props.selectedIndex;
	    const styles = {};
	    if (this.props.contextMenuDetail.get('left') !== undefined) {
	      styles.left = this.props.contextMenuDetail.get('left');
	    }
	    if (this.props.contextMenuDetail.get('right') !== undefined) {
	      styles.right = this.props.contextMenuDetail.get('right');
	    }
	    if (this.props.contextMenuDetail.get('top') !== undefined) {
	      styles.top = this.props.contextMenuDetail.get('top');
	    }
	    if (this.props.contextMenuDetail.get('bottom') !== undefined) {
	      styles.bottom = this.props.contextMenuDetail.get('bottom');
	    }
	    if (this.props.contextMenuDetail.get('width') !== undefined) {
	      styles.width = this.props.contextMenuDetail.get('width');
	    }
	    if (this.props.contextMenuDetail.get('maxHeight')) {
	      styles.maxHeight = this.props.contextMenuDetail.get('maxHeight');
	    }
	    return _jsx('div', {
	      className: cx({
	        contextMenu: true,
	        reverseExpand: this.props.contextMenuDetail.get('right') !== undefined,
	        contextMenuScrollable: this.props.contextMenuDetail.get('maxHeight') !== undefined
	      }),
	      onClick: this.onClick.bind(this),
	      style: styles
	    }, void 0, _jsx(ContextMenuSingle, {
	      contextMenuDetail: this.props.contextMenuDetail,
	      submenuIndex: 0,
	      lastZoomPercentage: this.props.lastZoomPercentage,
	      template: this.props.contextMenuDetail.get('template'),
	      selectedIndex: this.props.selectedIndex ? this.props.selectedIndex[0] : null
	    }), this.openedSubmenuDetails.map((openedSubmenuDetail, i) => _jsx(ContextMenuSingle, {
	      contextMenuDetail: this.props.contextMenuDetail,
	      submenuIndex: i + 1,
	      lastZoomPercentage: this.props.lastZoomPercentage,
	      template: openedSubmenuDetail.get('template'),
	      y: openedSubmenuDetail.get('y'),
	      selectedIndex: selectedIndex && i + 1 < selectedIndex.length ? selectedIndex[i + 1] : null
	    })));
	  }
	}
	
	module.exports = ContextMenu;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(713).setImmediate))

/***/ },
/* 786 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ReactDOM = __webpack_require__(12);
	const ImmutableComponent = __webpack_require__(215);
	const cx = __webpack_require__(236);
	const KeyCodes = __webpack_require__(743);
	const windowActions = __webpack_require__(716);
	
	/**
	 * Represents a popup window
	 */
	class PopupWindow extends ImmutableComponent {
	
	  componentWillMount() {
	    this.width = this.props.detail.get('width');
	    this.height = this.props.detail.get('height');
	    this.top = this.props.detail.get('top');
	    this.left = this.props.detail.get('left');
	  }
	
	  onKeyDown(e) {
	    if (e.keyCode === KeyCodes.ESC) {
	      windowActions.setPopupWindowDetail();
	    }
	  }
	
	  componentWillUnmount() {
	    window.removeEventListener('keydown', this.onKeyDown.bind(this));
	  }
	
	  componentDidMount() {
	    window.addEventListener('keydown', this.onKeyDown.bind(this));
	    let src = this.props.detail.get('src');
	    if (src) {
	      let webview = document.createElement('webview');
	      webview.setAttribute('src', src);
	      webview.addEventListener('crashed', () => {
	        windowActions.setPopupWindowDetail();
	      });
	      webview.addEventListener('destroyed', () => {
	        windowActions.setPopupWindowDetail();
	      });
	      webview.addEventListener('close', () => {
	        windowActions.setPopupWindowDetail();
	      });
	      let updateSize = () => {
	        webview.getPreferredSize(preferredSize => {
	          let width = preferredSize.width;
	          let height = preferredSize.height;
	          if (width !== this.width || height !== this.height) {
	            this.width = width;
	            this.height = height;
	            webview.style.height = height + 'px';
	            webview.style.width = width + 'px';
	            this.forceUpdate();
	          }
	        });
	      };
	      webview.addEventListener('did-attach', () => {
	        webview.enablePreferredSizeMode(true);
	      });
	      webview.addEventListener('preferred-size-changed', e => {
	        updateSize();
	      });
	      ReactDOM.findDOMNode(this).appendChild(webview);
	    }
	  }
	
	  render() {
	    let styles = {};
	    if (parseInt(this.width)) {
	      styles.width = parseInt(this.width) + 2;
	    }
	    if (parseInt(this.height)) {
	      styles.height = parseInt(this.height) + 2;
	    }
	    if (parseInt(this.top)) {
	      if (this.top + this.height < window.innerHeight) {
	        styles.top = this.top;
	      } else {
	        styles.bottom = 0;
	      }
	    }
	    if (parseInt(this.left)) {
	      if (this.left + this.width < window.innerWidth) {
	        styles.left = this.left;
	      } else {
	        styles.right = 0;
	      }
	    }
	
	    return _jsx('div', {
	      className: cx({
	        popupWindow: true,
	        reverseExpand: styles.right !== undefined
	      }),
	      style: styles
	    });
	  }
	}
	
	module.exports = PopupWindow;

/***/ },
/* 787 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const appActions = __webpack_require__(704);
	const siteUtil = __webpack_require__(259);
	const ipc = __webpack_require__(703).ipcRenderer;
	const messages = __webpack_require__(211);
	
	class NoScriptInfo extends ImmutableComponent {
	  get numberBlocked() {
	    const blocked = this.props.frameProps.getIn(['noScript', 'blocked']);
	    return blocked ? blocked.size : 0;
	  }
	
	  get origin() {
	    return siteUtil.getOrigin(this.props.frameProps.get('location'));
	  }
	
	  get isPrivate() {
	    return this.props.frameProps.get('isPrivate');
	  }
	
	  reload() {
	    ipc.emit(messages.SHORTCUT_ACTIVE_FRAME_CLEAN_RELOAD);
	  }
	
	  onAllow(setting) {
	    if (!this.origin) {
	      return;
	    }
	    appActions.changeSiteSetting(this.origin, 'noScript', setting);
	    this.reload();
	  }
	
	  get buttons() {
	    if (!this.props.noScriptGlobalEnabled) {
	      // NoScript is not turned on globally
	      return _jsx('div', {}, void 0, _jsx(Button, {
	        l10nId: 'allow',
	        className: 'actionButton',
	        onClick: this.onAllow.bind(this, false)
	      }));
	    } else {
	      return _jsx('div', {}, void 0, _jsx(Button, {
	        l10nId: 'allowScriptsOnce',
	        className: 'actionButton',
	        onClick: this.onAllow.bind(this, 0)
	      }), this.isPrivate ? null : _jsx('div', {}, void 0, _jsx('div', {}, void 0, _jsx(Button, {
	        l10nId: 'allowScriptsTemp',
	        className: 'subtleButton',
	        onClick: this.onAllow.bind(this, 1)
	      })), _jsx('div', {}, void 0, _jsx(Button, {
	        l10nId: 'allow',
	        className: 'subtleButton',
	        onClick: this.onAllow.bind(this, false)
	      }))));
	    }
	  }
	
	  render() {
	    const l10nArgs = {
	      numberBlocked: this.numberBlocked,
	      site: this.props.frameProps.get('location') || 'this page'
	    };
	    return _jsx(Dialog, {
	      onHide: this.props.onHide,
	      className: 'noScriptInfo',
	      isClickDismiss: true
	    }, void 0, _jsx('div', {
	      className: 'dialogInner'
	    }, void 0, _jsx('div', {
	      className: 'truncate',
	      'data-l10n-args': JSON.stringify(l10nArgs),
	      'data-l10n-id': this.numberBlocked === 1 ? 'scriptBlocked' : 'scriptsBlocked'
	    }), this.buttons));
	  }
	}
	
	NoScriptInfo.propTypes = {
	  noScriptGlobalEnabled: React.PropTypes.bool,
	  frameProps: React.PropTypes.object,
	  onHide: React.PropTypes.func
	};
	
	module.exports = NoScriptInfo;

/***/ },
/* 788 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const Immutable = __webpack_require__(188);
	const ImmutableComponent = __webpack_require__(215);
	const windowActions = __webpack_require__(716);
	const separatorMenuItem = __webpack_require__(727).separatorMenuItem;
	const keyCodes = __webpack_require__(743);
	const { wrappingClamp } = __webpack_require__(268);
	
	const bindClickHandler = (contextMenu, lastFocusedSelector) => {
	  if (contextMenu.type === separatorMenuItem.type) {
	    return contextMenu;
	  }
	  contextMenu.click = function (e) {
	    e.preventDefault();
	    if (lastFocusedSelector) {
	      // Send focus back to the active web frame
	      const results = document.querySelectorAll(lastFocusedSelector);
	      if (results.length === 1) results[0].focus();
	    }
	    windowActions.clickMenubarSubmenu(contextMenu.label);
	  };
	  if (contextMenu.submenu) {
	    contextMenu.submenu = contextMenu.submenu.map(submenuItem => {
	      return bindClickHandler(submenuItem, lastFocusedSelector);
	    });
	  }
	  return contextMenu;
	};
	
	const showContextMenu = (rect, submenu, lastFocusedSelector) => {
	  windowActions.setContextMenuDetail(Immutable.fromJS({
	    left: rect.left,
	    top: rect.bottom,
	    template: submenu.map(submenuItem => {
	      return bindClickHandler(submenuItem, lastFocusedSelector);
	    })
	  }));
	};
	
	class MenubarItem extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onClick = this.onClick.bind(this);
	    this.onMouseOver = this.onMouseOver.bind(this);
	  }
	  onClick(e) {
	    if (e && e.stopPropagation) {
	      e.stopPropagation();
	    }
	    // If clicking on an already selected item, deselect it
	    const selected = this.props.menubar.props.selectedIndex;
	    if (selected && selected === this.props.index) {
	      windowActions.setContextMenuDetail();
	      windowActions.setMenuBarSelectedIndex();
	      return;
	    }
	    // Otherwise, mark item as selected and show its context menu
	    windowActions.setMenuBarSelectedIndex(this.props.index);
	    windowActions.setContextMenuSelectedIndex([0]);
	    const rect = e.target.getBoundingClientRect();
	    showContextMenu(rect, this.props.submenu, this.props.lastFocusedSelector);
	  }
	  onMouseOver(e) {
	    const selected = this.props.menubar.props.selectedIndex;
	    if (typeof selected === 'number' && selected !== this.props.index) {
	      this.onClick(e);
	    }
	  }
	  render() {
	    return _jsx('span', {
	      className: 'menubarItem' + (this.props.selected ? ' selected' : ''),
	      onClick: this.onClick,
	      onMouseOver: this.onMouseOver,
	      'data-index': this.props.index
	    }, void 0, this.props.label);
	  }
	}
	
	/**
	 * Menubar that can be optionally be displayed at the top of a window (in favor of the system menu).
	 * First intended use is with Windows to enable a slim titlebar.
	 * NOTE: the system menu is still created and used in order to keep the accelerators working.
	 */
	class Menubar extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onKeyDown = this.onKeyDown.bind(this);
	  }
	  componentWillMount() {
	    document.addEventListener('keydown', this.onKeyDown);
	  }
	  componentWillUnmount() {
	    document.removeEventListener('keydown', this.onKeyDown);
	  }
	
	  /**
	   * Get client rect for the MenubarItem controls.
	   * Used to position the context menu object.
	   */
	  getMenubarItemBounds(index) {
	    if (typeof index !== 'number') index = this.props.selectedIndex;
	    const selected = document.querySelectorAll('.menubar .menubarItem[data-index=\'' + index + '\']');
	    if (selected.length === 1) {
	      return selected.item(0).getBoundingClientRect();
	    }
	    return null;
	  }
	
	  onKeyDown(e) {
	    const selectedIndex = this.props.selectedIndex;
	    const template = this.props.template;
	    const contextMenuIndex = this.props.contextMenuSelectedIndex;
	
	    if (!template) return;
	
	    switch (e.which) {
	      case keyCodes.LEFT:
	      case keyCodes.RIGHT:
	        if (contextMenuIndex !== null) {
	          const currentTemplate = template.get(selectedIndex).get('submenu').filter(element => {
	            if (element.get('type') === separatorMenuItem.type) return false;
	            if (element.has('visible')) return element.get('visible');
	            return true;
	          }).get(contextMenuIndex[0]);
	
	          if (currentTemplate && currentTemplate.has('submenu')) {
	            break;
	          }
	        }
	
	        e.preventDefault();
	        e.stopPropagation();
	
	        // Regular old menu item
	        const nextIndex = selectedIndex === null ? 0 : wrappingClamp(selectedIndex + (e.which === keyCodes.LEFT ? -1 : 1), 0, this.props.template.size - 1);
	
	        windowActions.setMenuBarSelectedIndex(nextIndex);
	
	        if (this.props.contextMenuDetail) {
	          windowActions.setContextMenuSelectedIndex([0]);
	          showContextMenu(this.getMenubarItemBounds(nextIndex), template.get(nextIndex).get('submenu').toJS(), this.props.lastFocusedSelector);
	        } else {
	          windowActions.setContextMenuSelectedIndex();
	        }
	        break;
	
	      case keyCodes.DOWN:
	      case keyCodes.ENTER:
	        e.preventDefault();
	        if (contextMenuIndex === null && template.get(selectedIndex).has('submenu')) {
	          e.stopPropagation();
	          windowActions.setContextMenuSelectedIndex([0]);
	          showContextMenu(this.getMenubarItemBounds(selectedIndex), template.get(selectedIndex).get('submenu').toJS(), this.props.lastFocusedSelector);
	        }
	        break;
	
	      case keyCodes.UP:
	        e.preventDefault();
	
	    }
	  }
	  shouldComponentUpdate(nextProps, nextState) {
	    return this.props.selectedIndex !== nextProps.selectedIndex || this.props.template !== nextProps.template;
	  }
	  render() {
	    let i = 0;
	    return _jsx('div', {
	      className: 'menubar'
	    }, void 0, this.props.template.map(menubarItem => {
	      let props = {
	        label: menubarItem.get('label'),
	        index: i++,
	        submenu: menubarItem.get('submenu').toJS(),
	        lastFocusedSelector: this.props.lastFocusedSelector,
	        menubar: this
	      };
	      if (props.index === this.props.selectedIndex) {
	        props.selected = true;
	      }
	      return React.createElement(MenubarItem, props);
	    }));
	  }
	}
	
	module.exports = Menubar;

/***/ },
/* 789 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const locale = __webpack_require__(728);
	const { currentWindow, isMaximized, isFullScreen } = __webpack_require__(706);
	const cx = __webpack_require__(236);
	
	class WindowCaptionButtons extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onDoubleClick = this.onDoubleClick.bind(this);
	    this.onMinimizeClick = this.onMinimizeClick.bind(this);
	    this.onMaximizeClick = this.onMaximizeClick.bind(this);
	    this.onCloseClick = this.onCloseClick.bind(this);
	  }
	
	  get maximizeTitle() {
	    return this.props.windowMaximized ? 'windowCaptionButtonRestore' : 'windowCaptionButtonMaximize';
	  }
	
	  onMinimizeClick(e) {
	    currentWindow.minimize();
	  }
	
	  onMaximizeClick(e) {
	    if (isFullScreen()) {
	      // If full screen, toggle full screen status and restore window (make smaller)
	      currentWindow.setFullScreen(false);
	      if (isMaximized()) currentWindow.unmaximize();
	      return false;
	    }
	    return !isMaximized() ? currentWindow.maximize() : currentWindow.unmaximize();
	  }
	
	  onCloseClick(e) {
	    currentWindow.close();
	  }
	
	  onDoubleClick(e) {
	    if (!e.target.className.includes('navigatorWrapper')) {
	      return;
	    }
	    this.onMaximizeClick(e);
	  }
	
	  render() {
	    const props = { tabIndex: -1 };
	
	    return _jsx('div', {
	      className: cx({
	        fullscreen: this.props.windowMaximized,
	        windowCaptionButtons: true,
	        verticallyCenter: this.props.verticallyCenter
	      })
	    }, void 0, _jsx('div', {
	      className: 'container'
	    }, void 0, React.createElement(
	      'button',
	      _extends({}, props, {
	        className: cx({
	          fullscreen: this.props.windowMaximized,
	          captionButton: true,
	          minimize: true
	        }),
	        onClick: this.onMinimizeClick,
	        title: locale.translation('windowCaptionButtonMinimize') }),
	      _jsx('div', {
	        className: 'widget'
	      })
	    ), React.createElement(
	      'button',
	      _extends({}, props, {
	        className: cx({
	          fullscreen: this.props.windowMaximized,
	          captionButton: true,
	          maximize: true
	        }),
	        onClick: this.onMaximizeClick,
	        title: locale.translation(this.maximizeTitle) }),
	      _jsx('div', {
	        className: 'widget'
	      }, void 0, _jsx('div', {
	        className: 'widget1'
	      }), _jsx('div', {
	        className: 'widget2'
	      }), _jsx('div', {
	        className: 'widget3'
	      }))
	    ), React.createElement(
	      'button',
	      _extends({}, props, {
	        className: cx({
	          fullscreen: this.props.windowMaximized,
	          captionButton: true,
	          close: true
	        }),
	        onClick: this.onCloseClick,
	        title: locale.translation('windowCaptionButtonClose') }),
	      _jsx('div', {
	        className: 'widget'
	      })
	    )));
	  }
	}
	
	module.exports = WindowCaptionButtons;

/***/ },
/* 790 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }();
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const React = __webpack_require__(214);
	const ImmutableComponent = __webpack_require__(215);
	const Dialog = __webpack_require__(773);
	const Button = __webpack_require__(244);
	const SwitchControl = __webpack_require__(235);
	const appActions = __webpack_require__(704);
	const windowActions = __webpack_require__(716);
	const settings = __webpack_require__(204);
	
	class CheckDefaultBrowserDialog extends ImmutableComponent {
	  constructor() {
	    super();
	    this.onCheckDefaultOnStartup = this.onCheckDefaultOnStartup.bind(this);
	    this.onNotNow = this.onNotNow.bind(this);
	    this.onUseBrave = this.onUseBrave.bind(this);
	  }
	
	  onCheckDefaultOnStartup(e) {
	    windowActions.setModalDialogDetail('checkDefaultBrowserDialog', { checkDefaultOnStartup: e.target.value });
	  }
	  onNotNow() {
	    appActions.defaultBrowserUpdated(false);
	    appActions.defaultBrowserCheckComplete();
	    appActions.changeSetting(settings.CHECK_DEFAULT_ON_STARTUP, this.props.checkDefaultOnStartup);
	    this.props.onHide();
	  }
	  onUseBrave() {
	    appActions.defaultBrowserUpdated(true);
	    appActions.defaultBrowserCheckComplete();
	    appActions.changeSetting(settings.CHECK_DEFAULT_ON_STARTUP, this.props.checkDefaultOnStartup);
	    this.props.onHide();
	  }
	  render() {
	    return _jsx(Dialog, {
	      className: 'checkDefaultBrowserDialog'
	    }, void 0, _jsx('div', {
	      className: 'checkDefaultBrowser',
	      onClick: e => e.stopPropagation()
	    }, void 0, _jsx('div', {
	      className: 'braveIcon'
	    }), _jsx('div', {
	      className: 'makeBraveDefault',
	      'data-l10n-id': 'makeBraveDefault'
	    }), _jsx(SwitchControl, {
	      className: 'checkDefaultOnStartup',
	      rightl10nId: 'checkDefaultOnStartup',
	      checkedOn: this.props.checkDefaultOnStartup,
	      onClick: this.onCheckDefaultOnStartup
	    }), _jsx('div', {
	      className: 'checkDefaultBrowserButtons'
	    }, void 0, _jsx(Button, {
	      l10nId: 'notNow',
	      className: 'whiteButton',
	      onClick: this.onNotNow
	    }), _jsx(Button, {
	      l10nId: 'useBrave',
	      className: 'primaryButton',
	      onClick: this.onUseBrave
	    }))));
	  }
	}
	
	module.exports = CheckDefaultBrowserDialog;

/***/ },
/* 791 */
/***/ function(module, exports) {

	"use strict";
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const keyLocations = {
	  DOM_KEY_LOCATION_STANDARD: 0,
	  DOM_KEY_LOCATION_LEFT: 1,
	  DOM_KEY_LOCATION_RIGHT: 2,
	  DOM_KEY_LOCATION_NUMPAD: 3
	};
	
	module.exports = keyLocations;

/***/ },
/* 792 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const tabState = __webpack_require__(793);
	const { makeImmutable } = __webpack_require__(267);
	
	const loginRequiredDetail = 'loginRequiredDetail';
	
	const basicAuthState = {
	  setLoginRequiredDetail: (state, action) => {
	    state = makeImmutable(state);
	    action = makeImmutable(action);
	    let tabId = action.get('tabId');
	    let detail = action.get('detail');
	    let tabValue = tabState.getByTabId(state, tabId);
	
	    if (!tabValue) {
	      return state;
	    }
	
	    if (!detail || detail.size === 0) {
	      tabValue = tabValue.delete(loginRequiredDetail);
	    } else {
	      tabValue = tabValue.set(loginRequiredDetail, detail);
	    }
	    return tabState.updateTab(state, { tabValue, replace: true });
	  },
	
	  getLoginRequiredDetail: (state, tabId) => {
	    if (!tabId) {
	      return;
	    }
	    state = makeImmutable(state);
	    let tabValue = tabState.getByTabId(state, tabId);
	    return tabValue && tabValue.get(loginRequiredDetail);
	  },
	
	  setLoginResponseDetail: (state, action) => {
	    state = makeImmutable(state);
	    action = makeImmutable(action);
	    let tabId = action.get('tabId');
	    let tabValue = tabState.getByTabId(state, tabId);
	
	    if (!tabValue) {
	      return state;
	    }
	
	    tabValue = tabValue.delete(loginRequiredDetail);
	    return tabState.updateTab(state, { tabValue, replace: true });
	  }
	};
	
	module.exports = basicAuthState;

/***/ },
/* 793 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const { makeImmutable, isMap, isList } = __webpack_require__(267);
	const assert = __webpack_require__(707);
	
	const validateId = function (propName, id) {
	  assert.ok(id, `${propName} cannot be null`);
	  id = parseInt(id);
	  assert.ok(id === -1 || id > 0, `${propName} must be positive`);
	  return id;
	};
	
	const validateTabs = function (tabs) {
	  tabs = makeImmutable(tabs);
	  assert.ok(isList(tabs), 'tabs must be an Immutable.List');
	  tabs.forEach(tab => validateTabValue(tab));
	  return tabs;
	};
	
	const validateState = function (state) {
	  state = makeImmutable(state);
	  assert.ok(isMap(state), 'state must be an Immutable.Map');
	  assert.ok(isList(state.get('tabs')), 'state must contain an Immutable.List of tabs');
	  return state;
	};
	
	const validateWindowValue = function (windowValue) {
	  windowValue = makeImmutable(windowValue);
	  assert.ok(isMap(windowValue), 'windowValue must be an Immutable.Map');
	  assert.ok(windowValue.get('windowId'), 'window must have a windowId');
	  return windowValue;
	};
	
	const validateTabValue = function (tabValue) {
	  tabValue = makeImmutable(tabValue);
	  assert.ok(isMap(tabValue), 'tabValue must be an Immutable.Map');
	  assert.ok(tabValue.get('tabId'), 'tab must have a tabId');
	  return tabValue;
	};
	
	const validateAction = function (action) {
	  action = makeImmutable(action);
	  assert.ok(isMap(action), 'action must be an Immutable.Map');
	  return action;
	};
	
	const api = {
	  getTabIndex: (state, tabValue) => {
	    state = validateState(state);
	    tabValue = validateTabValue(tabValue);
	    let tabId = validateId('tabId', tabValue.get('tabId'));
	    return api.getTabIndexByTabId(state, tabId);
	  },
	
	  getTabIndexByTabId: (state, tabId) => {
	    tabId = validateId('tabId', tabId);
	    state = validateState(state);
	
	    return state.get('tabs').findIndex(tab => tab.get('tabId') === tabId);
	  },
	
	  removeTabByTabId: (state, tabId) => {
	    tabId = validateId('tabId', tabId);
	    state = validateState(state);
	
	    let index = api.getTabIndexByTabId(state, tabId);
	    if (index === -1) {
	      return state;
	    }
	    return api.removeTabByIndex(state, index);
	  },
	
	  removeTabByIndex: (state, index) => {
	    index = parseInt(index);
	    assert.ok(index >= 0, 'index must be positive');
	    state = validateState(state);
	    return state.set('tabs', state.get('tabs').delete(index));
	  },
	
	  closeFrame: (state, action) => {
	    const frameProps = makeImmutable(action).getIn(['frameProps']);
	    // Unloaded tabs have no tab state because the webcontents isn't created yet.
	    if (frameProps.get('unloaded')) {
	      return state;
	    }
	    return api.removeTabByTabId(state, frameProps.get('tabId'));
	  },
	
	  removeTab: (state, action) => {
	    action = validateAction(action);
	    state = validateState(state);
	    let tabValue = validateTabValue(action.get('tabValue'));
	    let tabId = validateId('tabId', tabValue.get('tabId'));
	    return api.removeTabByTabId(state, tabId);
	  },
	
	  insertTab: (state, action) => {
	    action = validateAction(action);
	    state = validateState(state);
	    let tabValue = validateTabValue(action.get('tabValue'));
	    assert.ok(!api.getTab(state, tabValue), 'Tab already exists');
	    return state.set('tabs', state.get('tabs').push(tabValue));
	  },
	
	  maybeCreateTab: (state, action) => {
	    action = validateAction(action);
	    state = validateState(state);
	    let tabValue = validateTabValue(action.get('tabValue'));
	
	    if (api.getTab(state, tabValue)) {
	      return api.updateTab(state, action);
	    } else {
	      return api.insertTab(state, action);
	    }
	  },
	
	  getTabsByWindowId: (state, windowId) => {
	    state = validateState(state);
	    windowId = validateId('windowId', windowId);
	    return state.get('tabs').filter(tab => tab.get('windowId') === windowId);
	  },
	
	  getTabsByWindow: (state, windowValue) => {
	    state = validateState(state);
	    windowValue = validateWindowValue(windowValue);
	    let windowId = validateId('windowId', windowValue.get('windowId'));
	    return state.get('tabs').filter(tab => tab.get('windowId') === windowId);
	  },
	
	  getByTabId: (state, tabId) => {
	    tabId = validateId('tabId', tabId);
	    state = validateState(state);
	
	    return state.get('tabs').find(tab => tab.get('tabId') === tabId);
	  },
	
	  getTab: (state, tabValue) => {
	    state = validateState(state);
	    tabValue = validateTabValue(tabValue);
	    let tabId = validateId('tabId', tabValue.get('tabId'));
	    return api.getByTabId(state, tabId);
	  },
	
	  updateTab: (state, action) => {
	    state = validateAction(state);
	    action = validateAction(action);
	    let tabValue = validateTabValue(action.get('tabValue'));
	    let tabs = state.get('tabs');
	    let index = api.getTabIndex(state, tabValue);
	    if (index === -1) {
	      return state;
	    }
	
	    let currentTabValue = tabs.get(index);
	
	    let tabId = tabValue.get('tabId');
	    if (tabId) {
	      tabId = validateId('tabId', tabId);
	      let currentTabId = currentTabValue.get('tabId');
	      if (currentTabId) {
	        assert.ok(tabId === currentTabId, 'Changing a tabId is not allowed');
	      }
	    }
	    if (!action.get('replace')) {
	      tabValue = currentTabValue.mergeDeep(tabValue);
	    }
	    return state.set('tabs', tabs.delete(index).insert(index, tabValue));
	  },
	
	  getTabs: state => {
	    state = validateState(state);
	    return state.get('tabs');
	  },
	
	  setTabs: (state, tabs) => {
	    state = validateState(state);
	    tabs = validateTabs(tabs);
	    return state.set('tabs', tabs);
	  },
	
	  getPersistentState: state => {
	    // TODO(bridiver) - handle restoring tabs
	    state = makeImmutable(state);
	    return state.delete('tabs');
	  }
	};
	
	module.exports = api;

/***/ },
/* 794 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const { makeImmutable } = __webpack_require__(267);
	const historyUtil = __webpack_require__(291);
	
	const aboutHistoryState = {
	  getHistory: state => {
	    state = makeImmutable(state);
	    return state.getIn(['about', 'history']);
	  },
	  setHistory: state => {
	    state = makeImmutable(state);
	    state = state.setIn(['about', 'history', 'entries'], historyUtil.getHistory(state.get('sites')));
	    return state.setIn(['about', 'history', 'updatedStamp'], new Date().getTime());
	  }
	};
	
	module.exports = aboutHistoryState;

/***/ },
/* 795 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* This Source Code Form is subject to the terms of the Mozilla Public
	 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
	 * You can obtain one at http://mozilla.org/MPL/2.0/. */
	
	const getSetting = __webpack_require__(202).getSetting;
	const settings = __webpack_require__(204);
	
	module.exports.shouldDisplayDialog = state => {
	  return !getSetting(settings.IS_DEFAULT_BROWSER) && !state.get('defaultBrowserCheckComplete') && getSetting(settings.CHECK_DEFAULT_ON_STARTUP);
	};

/***/ },
/* 796 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(797);

/***/ },
/* 797 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(33);
	
	var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var ReactDebugTool = __webpack_require__(47);
	var warning = __webpack_require__(27);
	var alreadyWarned = false;
	
	function roundFloat(val) {
	  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
	
	  var n = Math.pow(10, base);
	  return Math.floor(val * n) / n;
	}
	
	// Flow type definition of console.table is too strict right now, see
	// https://github.com/facebook/flow/pull/2353 for updates
	function consoleTable(table) {
	  console.table(table);
	}
	
	function warnInProduction() {
	  if (alreadyWarned) {
	    return;
	  }
	  alreadyWarned = true;
	  if (typeof console !== 'undefined') {
	    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
	  }
	}
	
	function getLastMeasurements() {
	  if (false) {
	    warnInProduction();
	    return [];
	  }
	
	  return ReactDebugTool.getFlushHistory();
	}
	
	function getExclusive() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (false) {
	    warnInProduction();
	    return [];
	  }
	
	  var aggregatedStats = {};
	  var affectedIDs = {};
	
	  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
	    var displayName = treeSnapshot[instanceID].displayName;
	
	    var key = displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        counts: {},
	        durations: {},
	        totalDuration: 0
	      };
	    }
	    if (!stats.durations[timerType]) {
	      stats.durations[timerType] = 0;
	    }
	    if (!stats.counts[timerType]) {
	      stats.counts[timerType] = 0;
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }
	
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot;
	
	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
	        stats.totalDuration += duration;
	        stats.durations[timerType] += duration;
	        stats.counts[timerType]++;
	      });
	    });
	  });
	
	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.totalDuration - a.totalDuration;
	  });
	}
	
	function getInclusive() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (false) {
	    warnInProduction();
	    return [];
	  }
	
	  var aggregatedStats = {};
	  var affectedIDs = {};
	
	  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
	    var _treeSnapshot$instanc = treeSnapshot[instanceID],
	        displayName = _treeSnapshot$instanc.displayName,
	        ownerID = _treeSnapshot$instanc.ownerID;
	
	    var owner = treeSnapshot[ownerID];
	    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        inclusiveRenderDuration: 0,
	        renderCount: 0
	      };
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }
	
	  var isCompositeByID = {};
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements;
	
	    measurements.forEach(function (measurement) {
	      var instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	      isCompositeByID[instanceID] = true;
	    });
	  });
	
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot;
	
	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
	        stats.renderCount++;
	      });
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        // As we traverse parents, only count inclusive time towards composites.
	        // We know something is a composite if its render() was called.
	        if (isCompositeByID[nextParentID]) {
	          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
	            stats.inclusiveRenderDuration += duration;
	          });
	        }
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	  });
	
	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
	  });
	}
	
	function getWasted() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (false) {
	    warnInProduction();
	    return [];
	  }
	
	  var aggregatedStats = {};
	  var affectedIDs = {};
	
	  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
	    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
	        displayName = _treeSnapshot$instanc2.displayName,
	        ownerID = _treeSnapshot$instanc2.ownerID;
	
	    var owner = treeSnapshot[ownerID];
	    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	    var stats = aggregatedStats[key];
	    if (!stats) {
	      affectedIDs[key] = {};
	      stats = aggregatedStats[key] = {
	        key: key,
	        instanceCount: 0,
	        inclusiveRenderDuration: 0,
	        renderCount: 0
	      };
	    }
	    affectedIDs[key][instanceID] = true;
	    applyUpdate(stats);
	  }
	
	  flushHistory.forEach(function (flush) {
	    var measurements = flush.measurements,
	        treeSnapshot = flush.treeSnapshot,
	        operations = flush.operations;
	
	    var isDefinitelyNotWastedByID = {};
	
	    // Find host components associated with an operation in this batch.
	    // Mark all components in their parent tree as definitely not wasted.
	    operations.forEach(function (operation) {
	      var instanceID = operation.instanceID;
	
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        isDefinitelyNotWastedByID[nextParentID] = true;
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	
	    // Find composite components that rendered in this batch.
	    // These are potential candidates for being wasted renders.
	    var renderedCompositeIDs = {};
	    measurements.forEach(function (measurement) {
	      var instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	      renderedCompositeIDs[instanceID] = true;
	    });
	
	    measurements.forEach(function (measurement) {
	      var duration = measurement.duration,
	          instanceID = measurement.instanceID,
	          timerType = measurement.timerType;
	
	      if (timerType !== 'render') {
	        return;
	      }
	
	      // If there was a DOM update below this component, or it has just been
	      // mounted, its render() is not considered wasted.
	      var updateCount = treeSnapshot[instanceID].updateCount;
	
	      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
	        return;
	      }
	
	      // We consider this render() wasted.
	      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
	        stats.renderCount++;
	      });
	
	      var nextParentID = instanceID;
	      while (nextParentID) {
	        // Any parents rendered during this batch are considered wasted
	        // unless we previously marked them as dirty.
	        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
	        if (isWasted) {
	          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
	            stats.inclusiveRenderDuration += duration;
	          });
	        }
	        nextParentID = treeSnapshot[nextParentID].parentID;
	      }
	    });
	  });
	
	  return Object.keys(aggregatedStats).map(function (key) {
	    return _extends({}, aggregatedStats[key], {
	      instanceCount: Object.keys(affectedIDs[key]).length
	    });
	  }).sort(function (a, b) {
	    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
	  });
	}
	
	function getOperations() {
	  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();
	
	  if (false) {
	    warnInProduction();
	    return [];
	  }
	
	  var stats = [];
	  flushHistory.forEach(function (flush, flushIndex) {
	    var operations = flush.operations,
	        treeSnapshot = flush.treeSnapshot;
	
	    operations.forEach(function (operation) {
	      var instanceID = operation.instanceID,
	          type = operation.type,
	          payload = operation.payload;
	      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
	          displayName = _treeSnapshot$instanc3.displayName,
	          ownerID = _treeSnapshot$instanc3.ownerID;
	
	      var owner = treeSnapshot[ownerID];
	      var key = (owner ? owner.displayName + ' > ' : '') + displayName;
	
	      stats.push({
	        flushIndex: flushIndex,
	        instanceID: instanceID,
	        key: key,
	        type: type,
	        ownerID: ownerID,
	        payload: payload
	      });
	    });
	  });
	  return stats;
	}
	
	function printExclusive(flushHistory) {
	  if (false) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getExclusive(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        totalDuration = item.totalDuration;
	
	    var renderCount = item.counts.render || 0;
	    var renderDuration = item.durations.render || 0;
	    return {
	      'Component': key,
	      'Total time (ms)': roundFloat(totalDuration),
	      'Instance count': instanceCount,
	      'Total render time (ms)': roundFloat(renderDuration),
	      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
	      'Render count': renderCount,
	      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
	    };
	  });
	  consoleTable(table);
	}
	
	function printInclusive(flushHistory) {
	  if (false) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getInclusive(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        inclusiveRenderDuration = item.inclusiveRenderDuration,
	        renderCount = item.renderCount;
	
	    return {
	      'Owner > Component': key,
	      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
	      'Instance count': instanceCount,
	      'Render count': renderCount
	    };
	  });
	  consoleTable(table);
	}
	
	function printWasted(flushHistory) {
	  if (false) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getWasted(flushHistory);
	  var table = stats.map(function (item) {
	    var key = item.key,
	        instanceCount = item.instanceCount,
	        inclusiveRenderDuration = item.inclusiveRenderDuration,
	        renderCount = item.renderCount;
	
	    return {
	      'Owner > Component': key,
	      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
	      'Instance count': instanceCount,
	      'Render count': renderCount
	    };
	  });
	  consoleTable(table);
	}
	
	function printOperations(flushHistory) {
	  if (false) {
	    warnInProduction();
	    return;
	  }
	
	  var stats = getOperations(flushHistory);
	  var table = stats.map(function (stat) {
	    return {
	      'Owner > Node': stat.key,
	      'Operation': stat.type,
	      'Payload': typeof stat.payload === 'object' ? JSON.stringify(stat.payload) : stat.payload,
	      'Flush index': stat.flushIndex,
	      'Owner Component ID': stat.ownerID,
	      'DOM Component ID': stat.instanceID
	    };
	  });
	  consoleTable(table);
	}
	
	var warnedAboutPrintDOM = false;
	function printDOM(measurements) {
	   true ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
	  warnedAboutPrintDOM = true;
	  return printOperations(measurements);
	}
	
	var warnedAboutGetMeasurementsSummaryMap = false;
	function getMeasurementsSummaryMap(measurements) {
	   true ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
	  warnedAboutGetMeasurementsSummaryMap = true;
	  return getWasted(measurements);
	}
	
	function start() {
	  if (false) {
	    warnInProduction();
	    return;
	  }
	
	  ReactDebugTool.beginProfiling();
	}
	
	function stop() {
	  if (false) {
	    warnInProduction();
	    return;
	  }
	
	  ReactDebugTool.endProfiling();
	}
	
	function isRunning() {
	  if (false) {
	    warnInProduction();
	    return false;
	  }
	
	  return ReactDebugTool.isProfiling();
	}
	
	var ReactPerfAnalysis = {
	  getLastMeasurements: getLastMeasurements,
	  getExclusive: getExclusive,
	  getInclusive: getInclusive,
	  getWasted: getWasted,
	  getOperations: getOperations,
	  printExclusive: printExclusive,
	  printInclusive: printInclusive,
	  printWasted: printWasted,
	  printOperations: printOperations,
	  start: start,
	  stop: stop,
	  isRunning: isRunning,
	  // Deprecated:
	  printDOM: printDOM,
	  getMeasurementsSummaryMap: getMeasurementsSummaryMap
	};
	
	module.exports = ReactPerfAnalysis;

/***/ },
/* 798 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Immutable = __webpack_require__(188);
	var path = __webpack_require__(799);
	
	var tryParseInt = function(n) {
	  var int = parseInt(n);
	  return isNaN(int) ? n : int;
	};
	
	var primitivePatch = function (op, value) {
	  if (op === 'add' || op === 'replace') {
	    return value;
	  } else if (op === 'remove') {
	    return null;
	  }
	};
	
	var mapPatch = function(map, firstPath, restPath, op, value) {
	  if (op === 'add') {
	    if (restPath.length > 0 && map.get(firstPath) === undefined) {
	      var baseValue = (restPath[0].match(/^\d+$/)) ? Immutable.List() : Immutable.Map();
	      return map.set(firstPath, anyPatch(baseValue, restPath, op, value));
	    } else {
	      return map.set(firstPath, anyPatch(map.get(firstPath), restPath, op, value));
	    }
	  } else if (op === 'replace') {
	    if (restPath.length > 0) {
	      return map.set(firstPath, anyPatch(map.get(firstPath), restPath, op, value));
	    } else {
	      return map.set(firstPath, value);
	    }
	  } else if (op === 'remove') {
	    if (restPath.length > 0) {
	      return map.set(firstPath, anyPatch(map.get(firstPath), restPath, op, value));
	    } else {
	      return map.remove(firstPath);
	    }
	  } else {
	    throw new Error('map patch Error, unknown op: ' + op);
	  }
	};
	
	var sequencePatch = function(sequence, firstPath, restPath, op, value) {
	  firstPath = tryParseInt(firstPath);
	  if (op === 'add') {
	    if (sequence.get(firstPath) === undefined) {
	      if (restPath.length > 0) {
	        var baseValue = (restPath[0].match(/^\d+$/)) ? Immutable.List() : Immutable.Map();
	        return sequence.set(firstPath, anyPatch(baseValue, restPath, op, value));
	      } else {
	        // special case, return the value
	        return sequence.splice(firstPath, 0, value);
	      }
	    } else {
	      if (restPath.length > 0) {
	        return sequence.set(firstPath, anyPatch(sequence.get(firstPath), restPath, op, value));
	      } else {
	        // special case, return the value
	        return sequence.splice(firstPath, 0, value);
	      }
	    }
	  } else if (op === 'replace') {
	    if (restPath.length > 0) {
	      return sequence.set(firstPath, anyPatch(sequence.get(firstPath), restPath, op, value));
	    } else {
	      return sequence.set(firstPath, value);
	    }
	  } else if (op === 'remove') {
	    if (restPath.length > 0) {
	      return sequence.set(firstPath, anyPatch(sequence.get(firstPath), restPath, op, value));
	    } else {
	      return sequence.remove(firstPath);
	    }
	  } else {
	    throw new Error('sequence patch Error, unknown op: ' + op);
	  }
	};
	
	var anyPatch = function(any, pathArray, op, value) {
	  var firstPath, restPath;
	
	  if (Immutable.Iterable.isKeyed(any)) {
	    if (pathArray.length === 0) { return any; }
	    firstPath = pathArray[0];
	    restPath = pathArray.slice(1);
	    return mapPatch(any, firstPath, restPath, op, value);
	  } else if (Immutable.Iterable.isIndexed(any)) {
	    if (pathArray.length === 0) { return any; }
	    firstPath = pathArray[0];
	    restPath = pathArray.slice(1);
	    return sequencePatch(any, firstPath, restPath, op, value);
	  } else {
	    if (pathArray.length === 0) { return value; }
	    return primitivePatch(op, value);
	  }
	};
	
	var eachPatch = function(value, patches) {
	  while (patches.size) {
	    var firstPatch = patches.get(0);
	    var patches = patches.slice(1);
	    var pathArray = firstPatch.get('path').split('/').slice(1).map(path.unescape);
	    value = anyPatch(value, pathArray, firstPatch.get('op'), firstPatch.get('value'));
	  }
	  return value;
	};
	
	module.exports = eachPatch;


/***/ },
/* 799 */
/***/ function(module, exports) {

	'use strict';
	
	var slashRe = new RegExp('/', 'g');
	var escapedSlashRe = new RegExp('~1', 'g');
	var tildeRe = /~/g;
	var escapedTildeRe = /~0/g;
	
	var Path = {
	  escape: function (str) {
	    if(typeof(str) !== 'string'){
	      throw 'param str (' + str + ') is not a string';
	    }
	
	    return str.replace(tildeRe, '~0').replace(slashRe, '~1');
	  },
	
	  unescape: function (str) {
	    if(typeof(str) == 'string') {
	      return str.replace(escapedSlashRe, '/').replace(escapedTildeRe, '~');
	    }
	    else {
	      return str;
	    }
	  }
	};
	
	module.exports = Path;

/***/ }
/******/ ]);
//# sourceMappingURL=app.entry.js.map